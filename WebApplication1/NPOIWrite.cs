using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using NPOI.HSSF.UserModel;
using NPOI.SS.UserModel;
using NPOI.HSSF.Util;
using NPOI.SS.Util;
//using MvcApplicationExportExcel.Models;
using System.IO;
using MFI360.Entity.Base.Implementation;
using NPOI.XSSF.UserModel;
using System.Drawing;
using MFI360.UIEntity.Common.UITypes;
using NPOI.XSSF.Streaming;
using System.Threading.Tasks;
using NPOI.OpenXml4Net.OPC;

namespace MFI360.Common.Util
{
    public class NPOIWrite
    {
        private static object NpoiLockObject = new object();
        public const string StrTRIIndexDisclaimer = "TRI Index Disclaimer";
        public static HSSFCellStyle CellStyleThin(HSSFWorkbook workbook)
        {
            HSSFCellStyle style = (HSSFCellStyle)workbook.CreateCellStyle();
            style.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            style.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            style.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            style.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            style.SetFont(CellFontSize(workbook));
            return style;
        }

        public static XSSFCellStyle XSSCellStyleThin(XSSFWorkbook workbook)
        {
            XSSFCellStyle style = (XSSFCellStyle)workbook.CreateCellStyle();
            style.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            style.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            style.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            style.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            style.SetFont(XSSCellFontSize(workbook));
            return style;
        }

        public static HSSFCellStyle CellStyleHair(HSSFWorkbook workbook)
        {
            HSSFCellStyle style = (HSSFCellStyle)workbook.CreateCellStyle();
            style.BorderBottom = NPOI.SS.UserModel.BorderStyle.Hair;
            style.BorderLeft = NPOI.SS.UserModel.BorderStyle.Hair;
            style.BorderTop = NPOI.SS.UserModel.BorderStyle.Hair;
            style.BorderRight = NPOI.SS.UserModel.BorderStyle.Hair;
            return style;
        }

        public static HSSFCellStyle CellStyleColorAlignment(HSSFWorkbook workbook)
        {
            HSSFCellStyle style = (HSSFCellStyle)workbook.CreateCellStyle();
            style.Alignment = NPOI.SS.UserModel.HorizontalAlignment.Center;
            style.FillForegroundColor = IndexedColors.LightYellow.Index;
            style.FillPattern = FillPattern.SolidForeground;
            style.SetFont(CellFontSizeColor(workbook));
            return style;
        }

        public static HSSFCellStyle CellStyleWrapText(HSSFWorkbook workbook)
        {
            HSSFCellStyle style = (HSSFCellStyle)workbook.CreateCellStyle();
            style.WrapText = true;
            return style;
        }

        public static HSSFFont CellFontSizeColor(HSSFWorkbook workbook)
        {
            HSSFFont hFont = (HSSFFont)workbook.CreateFont();
            //hFont.Boldweight = (short)FontBoldWeight.Bold;
            //hFont.Color = HSSFColor.Red.Index;
            hFont.FontHeightInPoints = 10;
            return hFont;
        }

        public static HSSFFont CellFontSize(HSSFWorkbook workbook)
        {
            HSSFFont hFont = (HSSFFont)workbook.CreateFont();
            hFont.Boldweight = (short)FontBoldWeight.Bold;
            return hFont;
        }
        public static IFont XSSCellFontSize(XSSFWorkbook workbook)
        {
            IFont hFont = workbook.CreateFont();
            hFont.Boldweight = (short)FontBoldWeight.Bold;
            return hFont;
        }

        public static bool AutoFitColumn(ISheet sheetName, int columnIndex)
        {
            try
            {
                sheetName.AutoSizeColumn(columnIndex);
                return true;
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        public static bool CellMerged(ISheet sheetName, int firstRow, int lastRow, int firstColumn, int lastColumn)
        {
            try
            {
                sheetName.AddMergedRegion(new CellRangeAddress(firstRow, lastRow, firstColumn, lastColumn));
                return true;
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        public static bool FreezeRowColumn(ISheet sheetName, int firstColumn, int firstRow, int lastRow, int lastColumn)
        {
            try
            {
                sheetName.CreateFreezePane(firstColumn, firstRow, lastRow, lastColumn);
                return true;
            }
            catch (Exception ex)
            {
                return false;
            }

        }

        public static void CreateBorder(ISheet sheet, int firstRow, int lastRow, int firstColumn, int lastColumn, NPOI.SS.UserModel.BorderStyle borderStyle)
        {
            // top line
            for (int column = firstColumn + 1; column < lastColumn; column++)
            {
                ICell topCell = GetCell(sheet, firstRow, column);
                ICellStyle topStyle = CreateCellStyle(topCell);
                using (new CellBorderLock(topStyle))
                {
                    topStyle.BorderTop = borderStyle;
                }
                topCell.CellStyle = topStyle;
            }
            // top left corner
            ICell topLeftCell = GetCell(sheet, firstRow, firstColumn);
            ICellStyle topLeftStyle = CreateCellStyle(topLeftCell);
            using (new CellBorderLock(topLeftStyle))
            {
                topLeftStyle.BorderTop = borderStyle;
                topLeftStyle.BorderLeft = borderStyle;
            }
            topLeftCell.CellStyle = topLeftStyle;
            // top right corner
            ICell topRightCell = GetCell(sheet, firstRow, lastColumn);
            ICellStyle topRightStyle = CreateCellStyle(topRightCell);
            using (new CellBorderLock(topRightStyle))
            {
                topRightStyle.BorderTop = borderStyle;
                topRightStyle.BorderRight = borderStyle;
            }
            topRightCell.CellStyle = topRightStyle;

            // left line
            for (int row = firstRow + 1; row < lastRow; row++)
            {
                ICell leftCell = GetCell(sheet, row, firstColumn);
                ICellStyle leftStyle = CreateCellStyle(leftCell);
                using (new CellBorderLock(leftStyle))
                {
                    leftStyle.BorderLeft = borderStyle;
                }
                leftCell.CellStyle = leftStyle;
            }

            // right line
            for (int row = firstRow + 1; row < lastRow; row++)
            {
                ICell rightCell = GetCell(sheet, row, lastColumn);
                ICellStyle rightStyle = CreateCellStyle(rightCell);
                using (new CellBorderLock(rightStyle))
                {
                    rightStyle.BorderRight = borderStyle;
                }
                rightCell.CellStyle = rightStyle;
            }

            // bottom line
            for (int column = firstColumn + 1; column < lastColumn; column++)
            {
                ICell bottomCell = GetCell(sheet, lastRow, column);
                ICellStyle bottomStyle = CreateCellStyle(bottomCell);
                using (new CellBorderLock(bottomStyle))
                {
                    bottomStyle.BorderBottom = borderStyle;
                }
                bottomCell.CellStyle = bottomStyle;
            }

            // bottom left corner
            ICell bottomLeftCell = GetCell(sheet, lastRow, firstColumn);
            ICellStyle bottomLeftStyle = CreateCellStyle(bottomLeftCell);
            using (new CellBorderLock(bottomLeftStyle))
            {
                bottomLeftStyle.BorderBottom = borderStyle;
                bottomLeftStyle.BorderLeft = borderStyle;
            }
            bottomLeftCell.CellStyle = bottomLeftStyle;

            // bottom right corner
            ICell bottomRightCell = GetCell(sheet, lastRow, lastColumn);
            ICellStyle bottomRightStyle = CreateCellStyle(bottomRightCell);
            using (new CellBorderLock(bottomRightStyle))
            {
                bottomRightStyle.BorderBottom = borderStyle;
                bottomRightStyle.BorderRight = borderStyle;
            }
            bottomRightCell.CellStyle = bottomRightStyle;
        }

        private static ICellStyle CreateCellStyle(ICell cell)
        {
            var style = cell.Sheet.Workbook.CreateCellStyle();
            style.CloneStyleFrom(cell.CellStyle);
            return style;
        }

        private static ICell GetCell(ISheet sheet, int row, int column)
        {
            IRow r = sheet.GetRow(row) ?? sheet.CreateRow(row);
            return r.GetCell(column) ?? r.CreateCell(column);
        }
        private static ICell WriteToCell(ISheet sheet, int row, int column, string value, XSSFCellStyle xSSFCellStyle, int Colspan = 1, int Rowspan = 1)
        {
            for (int i = row; i < row + Rowspan; i++)
            {
                IRow Row = sheet.GetRow(i) ?? sheet.CreateRow(i);
                column = GetCellNo(Row, column);
                for (int j = column; j < column + Colspan; j++)
                {
                    ICell cell = Row.CreateCell(column);
                    cell.SetCellValue(value);
                    cell.CellStyle = xSSFCellStyle;
                }
            }
            if (Colspan > 1 || Rowspan > 1)
            {
                NPOIWrite.CellMerged(sheet, row, column, row + Rowspan - 1, column + Colspan - 1);
            }
            return sheet.GetRow(row).GetCell(column);
        }
        private static int GetCellNo(IRow Row, int column)
        {
            while (Row.GetCell(column) != null)
                column++;
            return column;
        }
        public sealed class CellBorderLock : IDisposable
        {
            private readonly ICellStyle style;

            public CellBorderLock(ICellStyle style)
            {
                this.style = style;
                style.BorderDiagonalLineStyle = NPOI.SS.UserModel.BorderStyle.Thin;
                style.BorderDiagonal = BorderDiagonal.Forward;
            }

            public void Dispose()
            {
                style.BorderDiagonalLineStyle = NPOI.SS.UserModel.BorderStyle.None;
                style.BorderDiagonal = BorderDiagonal.None;
            }
        }
        private static int LoadImage(string path, HSSFWorkbook wb, PictureType pictureType)
        {
            FileStream file = new FileStream(path, FileMode.Open, FileAccess.Read);
            byte[] buffer = new byte[file.Length];
            file.Read(buffer, 0, (int)file.Length);
            file.Close();
            return wb.AddPicture(buffer, pictureType);

        }
        private static int LoadImage(string path, XSSFWorkbook wb, PictureType pictureType)
        {
            FileStream file = new FileStream(path, FileMode.Open, FileAccess.Read);
            byte[] buffer = new byte[file.Length];
            file.Read(buffer, 0, (int)file.Length);
            file.Close();
            return wb.AddPicture(buffer, pictureType);

        }
        public static int? LoadImageExternally(string path, XSSFWorkbook wb, PictureType pictureType)
        {
            try
            {
                FileStream file = new FileStream(path, FileMode.Open, FileAccess.Read);
                byte[] buffer = new byte[file.Length];
                file.Read(buffer, 0, (int)file.Length);
                file.Close();
                return wb.AddPicture(buffer, pictureType);
            }
            catch (Exception)
            {
                return null;
            }
        }
        public static MemoryStream ExportToExcel(List<TableHeaderEntity> listTableHeader, List<ExportEntity> listData, string LogoPath = "")
        {
            HSSFWorkbook workbook = new HSSFWorkbook();
            ISheet sheet = workbook.CreateSheet("sheet1");

            var ICRArow = sheet.CreateRow(0);
            ICRArow.CreateCell(0);
            var ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue("ICRA Analytics Limited");
            ICRACell.CellStyle = NPOIWrite.CellStyleThin(workbook);
            ICRArow = sheet.CreateRow(1);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue("107, Raheja Arcade, Sector-11, CBD Belapur");
            ICRArow = sheet.CreateRow(2);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.CellStyle = NPOIWrite.CellStyleThin(workbook);
            ICRArow = sheet.CreateRow(3);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.CellStyle = NPOIWrite.CellStyleThin(workbook);
            #region Header creation in the Excel
            var headerRow = sheet.CreateRow(4);


            var listHeaderFinal = listTableHeader.OrderBy(x => x.Position).ToList();
            for (int i = 0; i < listHeaderFinal.Count; i++)
            {
                var cell = headerRow.CreateCell(i);
                cell.SetCellValue(listHeaderFinal[i].ColumnName);
                NPOIWrite.AutoFitColumn(sheet, i);
                cell.CellStyle = NPOIWrite.CellStyleThin(workbook);
                cell.CellStyle.FillForegroundColor = IndexedColors.Blue.Index;
                //cell.CellStyle.FillBackgroundColor = IndexedColors.White.Index;
                var hFont = cell.CellStyle.GetFont(workbook);
                hFont.Color = HSSFColor.White.Index;
                cell.CellStyle.SetFont(hFont);
                cell.CellStyle.FillPattern = FillPattern.SolidForeground;
            }
            #endregion

            #region Value added to the Excel

            int incr = 5;
            foreach (var item in listData)
            {
                var dataRow = sheet.CreateRow(incr);
                var cellValues = (from i in item.LstKeyValuePair
                                  from j in listTableHeader
                                  where i.Key == j.ColumnName
                                  orderby j.Position
                                  select i.Value).ToArray();

                for (int k = 0; k < cellValues.Length; k++)
                {
                    var datacell = dataRow.CreateCell(k);
                    datacell.SetCellValue(cellValues[k] == "" ? "" : cellValues[k]);
                    // datacell.CellStyle = NPOIWrite.CellStyleHair(workbook);
                }
                incr++;
            }
            #endregion
            for (int i = 0; i < listTableHeader.Count; i++)
                sheet.AutoSizeColumn(i);
            if (sheet.GetColumnWidth(0) < 11072)
                sheet.SetColumnWidth(0, 11072);
            if (!string.IsNullOrEmpty(LogoPath))
            {
                HSSFPatriarch patriarch = (HSSFPatriarch)sheet.CreateDrawingPatriarch();
                HSSFClientAnchor anchor;
                anchor = new HSSFClientAnchor(0, 0, 0, 255, 0, 0, 0, 3);
                anchor.AnchorType = AnchorType.DontMoveAndResize;
                HSSFPicture picture = (HSSFPicture)patriarch.CreatePicture(anchor, LoadImage(LogoPath, workbook, PictureType.PNG));
                double x1 = .25;
                double y1 = .75;
                picture.Resize(x1, y1);
                picture.LineStyle = LineStyle.None;
            }
            #region disclaimer
            var disclaRowNo = incr + 3;

            var Row = sheet.CreateRow(disclaRowNo);
            ICell Cell;
            for (int i = 0; i < listTableHeader.Count; i++)
            {
                Cell = Row.CreateCell(i);
                if (i == 0)
                {
                    HSSFCellStyle declationstyle = (HSSFCellStyle)workbook.CreateCellStyle();
                    declationstyle.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                    declationstyle.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                    declationstyle.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                    declationstyle.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                    declationstyle.Alignment = HorizontalAlignment.Center;
                    declationstyle.VerticalAlignment = VerticalAlignment.Top;
                    declationstyle.WrapText = true;
                    IFont declarationfnt = (HSSFFont)workbook.CreateFont();
                    declarationfnt.Boldweight = (short)FontBoldWeight.Bold;
                    declarationfnt.FontName = "Arial";
                    declarationfnt.FontHeightInPoints = (short)8;
                    declationstyle.SetFont(declarationfnt);
                    Cell.SetCellValue("All information contained herein is obtained by ICRA Analytics Limited from sources believed by it to be accurate and reliable. Because of the possibility of human or mechanical error as well as other factors, however, all information contained herein is provided 'AS IS' without warranty of any kind. ICRA Analytics adopts all necessary measures so that the information it uses is of sufficient quality and from sources ICRA Analytics considers to be reliable including, when appropriate, independent third-party sources. However, ICRA Analytics is not an auditor and cannot in every instance independently verify or validate information received in preparing this document." +
                    "All information contained herein must be construed solely as statements of opinion, and  ICRA Analytics Limited or its affiliates or group companies and its respective and any of its officers, directors, personnel and employees, disclaim liability to any loss, damage of any nature, including but not limited to direct, indirect, punitive, special, exemplary, consequential, as also any loss of profit in any way arising from the use of this document or its contents in any manner or for any contingency within or beyond the control of, ICRA Analytics or any of its directors, officers, employees, agents, representatives, licensors or suppliers, arising from or in connection with the information contained herein or the use of or inability to use any such information.Opinions expressed in the document are not the opinions of our holding company, ICRA Limited(ICRA), and should not be construed as any indication of credit rating or grading of ICRA for any instruments that have been issued or are to be issued by any entity.The recipient alone shall be fully responsible and / or are liable for any decision taken on the basis of this document and / or the information contained herein.");
                    Cell.CellStyle = declationstyle;
                }
            }
            NPOIWrite.CellMerged(sheet, disclaRowNo, disclaRowNo, 0, listTableHeader.Count - 1);
            sheet.GetRow(disclaRowNo).HeightInPoints = 120;
            #endregion
            sheet.ActiveCell = new CellAddress(0, 1);
            var stream = new MemoryStream();
            workbook.Write(stream);
            return stream;
        }

        public static MemoryStream ExportToExcelWithImageCell(List<TableHeaderEntity> listTableHeader, List<ExportEntity> listData, string LogoPath = "")
        {
            HSSFWorkbook workbook = new HSSFWorkbook();
            ISheet sheet = workbook.CreateSheet("sheet1");

            var ICRArow = sheet.CreateRow(0);
            ICRArow.CreateCell(0);
            var ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue("ICRA Analytics Limited");
            ICRACell.CellStyle = NPOIWrite.CellStyleThin(workbook);
            ICRArow = sheet.CreateRow(1);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue("107, Raheja Arcade, Sector-11, CBD Belapur");
            ICRArow = sheet.CreateRow(2);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.CellStyle = NPOIWrite.CellStyleThin(workbook);
            ICRArow = sheet.CreateRow(3);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.CellStyle = NPOIWrite.CellStyleThin(workbook);
            #region Header creation in the Excel
            var headerRow = sheet.CreateRow(4);


            var listHeaderFinal = listTableHeader.OrderBy(x => x.Position).ToList();
            for (int i = 0; i < listHeaderFinal.Count; i++)
            {
                var cell = headerRow.CreateCell(i);
                cell.SetCellValue(listHeaderFinal[i].ColumnName);
                NPOIWrite.AutoFitColumn(sheet, i);
                cell.CellStyle = NPOIWrite.CellStyleThin(workbook);
                cell.CellStyle.FillForegroundColor = IndexedColors.Blue.Index;
                //cell.CellStyle.FillBackgroundColor = IndexedColors.White.Index;
                var hFont = cell.CellStyle.GetFont(workbook);
                hFont.Color = HSSFColor.White.Index;
                cell.CellStyle.SetFont(hFont);
                cell.CellStyle.FillPattern = FillPattern.SolidForeground;
            }
            #endregion

            #region Value added to the Excel

            int incr = 5;
            foreach (var item in listData)
            {
                var dataRow = sheet.CreateRow(incr);
                var cellValues = (from i in item.LstKeyValuePair
                                  from j in listTableHeader
                                  where i.Key == j.ColumnName
                                  orderby j.Position
                                  select i.Value).ToArray();

                for (int k = 0; k < cellValues.Length; k++)
                {

                    if (!HasImageExtension(cellValues[k]))
                    {
                        var datacell = dataRow.CreateCell(k);
                        datacell.SetCellValue(cellValues[k] == "" ? "" : cellValues[k]);
                    }
                    else
                    {

                        sheet.SetColumnWidth(k, 11072);
                        sheet.GetRow(incr).Height = 700;
                        HSSFPatriarch patriarch = (HSSFPatriarch)sheet.CreateDrawingPatriarch();
                        HSSFClientAnchor anchor;
                        anchor = new HSSFClientAnchor();
                        anchor.Col1 = k;
                        anchor.Row1 = incr;
                        HSSFPicture picture = (HSSFPicture)patriarch.CreatePicture(anchor, LoadImage(cellValues[k], workbook, PictureType.PNG));
                        double x1 = 1.20;
                        double y1 = 0.80;
                        picture.Resize(x1, y1);

                        picture.LineStyle = LineStyle.None;
                    }

                }
                incr++;
            }
            #endregion
            for (int i = 0; i < listTableHeader.Count; i++)
                sheet.AutoSizeColumn(i);
            if (sheet.GetColumnWidth(0) < 11072)
                sheet.SetColumnWidth(0, 11072);
            if (!string.IsNullOrEmpty(LogoPath))
            {
                HSSFPatriarch patriarch = (HSSFPatriarch)sheet.CreateDrawingPatriarch();
                HSSFClientAnchor anchor;
                anchor = new HSSFClientAnchor(0, 0, 0, 255, 0, 0, 0, 3);
                anchor.AnchorType = AnchorType.DontMoveAndResize;
                HSSFPicture picture = (HSSFPicture)patriarch.CreatePicture(anchor, LoadImage(LogoPath, workbook, PictureType.PNG));
                double x1 = .25;
                double y1 = .75;
                picture.Resize(x1, y1);
                picture.LineStyle = LineStyle.None;
            }
            #region disclaimer
            var disclaRowNo = incr + 3;

            var Row = sheet.CreateRow(disclaRowNo);
            ICell Cell;
            for (int i = 0; i < listTableHeader.Count; i++)
            {
                Cell = Row.CreateCell(i);
                if (i == 0)
                {
                    HSSFCellStyle declationstyle = (HSSFCellStyle)workbook.CreateCellStyle();
                    declationstyle.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                    declationstyle.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                    declationstyle.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                    declationstyle.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                    declationstyle.Alignment = HorizontalAlignment.Center;
                    declationstyle.VerticalAlignment = VerticalAlignment.Top;
                    declationstyle.WrapText = true;
                    IFont declarationfnt = (HSSFFont)workbook.CreateFont();
                    declarationfnt.Boldweight = (short)FontBoldWeight.Bold;
                    declarationfnt.FontName = "Arial";
                    declarationfnt.FontHeightInPoints = (short)8;
                    declationstyle.SetFont(declarationfnt);
                    Cell.SetCellValue("All information contained herein is obtained by ICRA Analytics Limited from sources believed by it to be accurate and reliable. Because of the possibility of human or mechanical error as well as other factors, however, all information contained herein is provided 'AS IS' without warranty of any kind. ICRA Analytics adopts all necessary measures so that the information it uses is of sufficient quality and from sources ICRA Analytics considers to be reliable including, when appropriate, independent third-party sources. However, ICRA Analytics is not an auditor and cannot in every instance independently verify or validate information received in preparing this document." +
                    "All information contained herein must be construed solely as statements of opinion, and  ICRA Analytics Limited or its affiliates or group companies and its respective and any of its officers, directors, personnel and employees, disclaim liability to any loss, damage of any nature, including but not limited to direct, indirect, punitive, special, exemplary, consequential, as also any loss of profit in any way arising from the use of this document or its contents in any manner or for any contingency within or beyond the control of, ICRA Analytics or any of its directors, officers, employees, agents, representatives, licensors or suppliers, arising from or in connection with the information contained herein or the use of or inability to use any such information.Opinions expressed in the document are not the opinions of our holding company, ICRA Limited(ICRA), and should not be construed as any indication of credit rating or grading of ICRA for any instruments that have been issued or are to be issued by any entity.The recipient alone shall be fully responsible and / or are liable for any decision taken on the basis of this document and / or the information contained herein.");
                    Cell.CellStyle = declationstyle;
                }
            }
            NPOIWrite.CellMerged(sheet, disclaRowNo, disclaRowNo, 0, listTableHeader.Count - 1);
            sheet.GetRow(disclaRowNo).HeightInPoints = 120;
            #endregion
            sheet.ActiveCell = new CellAddress(0, 1);
            var stream = new MemoryStream();
            workbook.Write(stream);
            return stream;
        }

        public static MemoryStream ExportToExcel(List<TableHeaderEntity> listTableHeader, List<TableSubHeaderEntity> listTableSubHeader, List<ExportEntity> listData, string LogoPath = "")
        {
            HSSFWorkbook workbook = new HSSFWorkbook();
            ISheet sheet = workbook.CreateSheet("sheet1");
            var ICRArow = sheet.CreateRow(0);
            ICRArow.CreateCell(0);
            var ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue("ICRA Analytics Limited");
            ICRACell.CellStyle = NPOIWrite.CellStyleThin(workbook);
            ICRArow = sheet.CreateRow(1);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue("107, Raheja Arcade, Sector-11, CBD Belapur");
            ICRArow = sheet.CreateRow(2);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.CellStyle = NPOIWrite.CellStyleThin(workbook);
            ICRArow = sheet.CreateRow(3);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.CellStyle = NPOIWrite.CellStyleThin(workbook);
            #region Header creation in the Excel
            var headerRow = sheet.CreateRow(4);

            var headerlistFinal = listTableHeader.OrderBy(x => x.Position).ToList();
            var cellincr = 0;
            for (int i = 0; i < headerlistFinal.Count; i++)
            {
                int colspan = headerlistFinal[i].Colspan;
                if (colspan > 1)
                {
                    for (int k = 0; k < colspan; k++)
                    {
                        var cell = headerRow.CreateCell(cellincr + k);
                        cell.SetCellValue(headerlistFinal[i].ColumnName);
                        NPOIWrite.AutoFitColumn(sheet, cellincr);
                        cell.CellStyle = NPOIWrite.CellStyleThin(workbook);
                        cell.CellStyle.FillForegroundColor = IndexedColors.Blue.Index;
                        //cell.CellStyle.FillBackgroundColor = IndexedColors.White.Index;
                        var hFont = cell.CellStyle.GetFont(workbook);
                        hFont.Color = HSSFColor.White.Index;
                        cell.CellStyle.SetFont(hFont);
                        cell.CellStyle.FillPattern = FillPattern.SolidForeground;
                    }
                    NPOIWrite.CellMerged(sheet, 0, 0, cellincr, cellincr + colspan - 1);
                    cellincr = cellincr + colspan;
                }
                else
                {
                    var cell = headerRow.CreateCell(cellincr);
                    cell.SetCellValue(headerlistFinal[i].ColumnName);
                    NPOIWrite.AutoFitColumn(sheet, cellincr);
                    cell.CellStyle = NPOIWrite.CellStyleThin(workbook);
                    cell.CellStyle.FillForegroundColor = IndexedColors.Blue.Index;
                    //cell.CellStyle.FillBackgroundColor = IndexedColors.White.Index;
                    var hFont = cell.CellStyle.GetFont(workbook);
                    hFont.Color = HSSFColor.White.Index;
                    cell.CellStyle.SetFont(hFont);
                    cell.CellStyle.FillPattern = FillPattern.SolidForeground;
                    cellincr = cellincr + colspan;

                }
            }
            #endregion

            #region Sub Header creation in the Excel
            var subHeaderRow = sheet.CreateRow(5);

            var subHeaderlistFinal = listTableSubHeader.OrderBy(x => x.Position).ToList();
            for (int i = 0; i < subHeaderlistFinal.Count; i++)
            {
                int index = headerlistFinal.FindIndex(x => x.ColumnName.Equals(subHeaderlistFinal[i].ColumnName));
                if (index >= 0)
                {
                    var cell = subHeaderRow.CreateCell(i);
                    NPOIWrite.CellMerged(sheet, 0, 1, i, i);
                    cell.CellStyle = NPOIWrite.CellStyleThin(workbook);
                    cell.CellStyle.FillForegroundColor = IndexedColors.Blue.Index;
                    //cell.CellStyle.FillBackgroundColor = IndexedColors.White.Index;
                    var hFont = cell.CellStyle.GetFont(workbook);
                    hFont.Color = HSSFColor.White.Index;
                    cell.CellStyle.SetFont(hFont);
                    cell.CellStyle.FillPattern = FillPattern.SolidForeground;
                }
                else
                {
                    var cell = subHeaderRow.CreateCell(i);
                    cell.SetCellValue(subHeaderlistFinal[i].ColumnName);
                    NPOIWrite.AutoFitColumn(sheet, i);
                    cell.CellStyle = NPOIWrite.CellStyleThin(workbook);
                    cell.CellStyle.FillForegroundColor = IndexedColors.Blue.Index;
                    //cell.CellStyle.FillBackgroundColor = IndexedColors.White.Index;
                    var hFont = cell.CellStyle.GetFont(workbook);
                    hFont.Color = HSSFColor.White.Index;
                    cell.CellStyle.SetFont(hFont);
                    cell.CellStyle.FillPattern = FillPattern.SolidForeground;
                }
            }
            #endregion

            #region Value added to the Excel

            int incr = 7;
            bool isNumeric = false;
            foreach (var item in listData)
            {
                if (item.LstKeyValuePair.Count() > 0)
                {
                    int value;
                    isNumeric = int.TryParse(item.LstKeyValuePair[0].Key, out value);
                }


                var dataRow = sheet.CreateRow(incr);
                if (isNumeric == true)
                {
                    var cellValues = (from i in item.LstKeyValuePair
                                      from j in listTableSubHeader
                                      where i.Key.ToString() == j.Position.ToString()
                                      orderby j.Position
                                      select i.Value).ToArray();
                    for (int k = 0; k < cellValues.Length; k++)
                    {
                        var datacell = dataRow.CreateCell(k);
                        datacell.SetCellValue(cellValues[k] == "" ? "--" : cellValues[k]);
                        // datacell.CellStyle = NPOIWrite.CellStyleHair(workbook);
                    }
                    incr++;
                }
                else
                {
                    var cellValues = (from i in item.LstKeyValuePair
                                      from j in listTableSubHeader
                                      where i.Key == j.ColumnName
                                      orderby j.Position
                                      select i.Value).ToArray();
                    for (int k = 0; k < cellValues.Length; k++)
                    {
                        var datacell = dataRow.CreateCell(k);
                        datacell.SetCellValue(cellValues[k] == "" ? "--" : cellValues[k]);
                        // datacell.CellStyle = NPOIWrite.CellStyleHair(workbook);
                    }
                    incr++;
                }



            }
            #endregion
            for (int i = 0; i < listTableSubHeader.Count; i++)
                sheet.AutoSizeColumn(i);

            if (sheet.GetColumnWidth(0) < 11072)
                sheet.SetColumnWidth(0, 11072);
            if (!string.IsNullOrEmpty(LogoPath))
            {
                HSSFPatriarch patriarch = (HSSFPatriarch)sheet.CreateDrawingPatriarch();
                HSSFClientAnchor anchor;
                anchor = new HSSFClientAnchor(0, 0, 0, 255, 0, 0, 0, 3);
                anchor.AnchorType = AnchorType.DontMoveAndResize;
                HSSFPicture picture = (HSSFPicture)patriarch.CreatePicture(anchor, LoadImage(LogoPath, workbook, PictureType.PNG));
                double x1 = .75;
                double y1 = .75;
                picture.Resize(x1, y1);
                picture.LineStyle = LineStyle.None;
            }
            var Row = sheet.CreateRow(incr);
            ICell Cell;
            for (int i = 0; i < listTableSubHeader.Count; i++)
            {
                Cell = Row.CreateCell(i);
                if (i == 0)
                {
                    HSSFCellStyle declationstyle = (HSSFCellStyle)workbook.CreateCellStyle();
                    declationstyle.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                    declationstyle.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                    declationstyle.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                    declationstyle.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                    declationstyle.Alignment = HorizontalAlignment.Center;
                    declationstyle.VerticalAlignment = VerticalAlignment.Top;
                    declationstyle.WrapText = true;
                    IFont declarationfnt = (HSSFFont)workbook.CreateFont();
                    declarationfnt.Boldweight = (short)FontBoldWeight.Bold;
                    declarationfnt.FontName = "Arial";
                    declarationfnt.FontHeightInPoints = (short)8;
                    declationstyle.SetFont(declarationfnt);
                    Cell.SetCellValue("All information contained herein is obtained by ICRA Analytics Limited from sources believed by it to be accurate and reliable. Because of the possibility of human or mechanical error as well as other factors, however, all information contained herein is provided 'AS IS' without warranty of any kind. ICRA Analytics adopts all necessary measures so that the information it uses is of sufficient quality and from sources ICRA Analytics considers to be reliable including, when appropriate, independent third-party sources. However, ICRA Analytics is not an auditor and cannot in every instance independently verify or validate information received in preparing this document." +
                    "All information contained herein must be construed solely as statements of opinion, and  ICRA Analytics Limited or its affiliates or group companies and its respective and any of its officers, directors, personnel and employees, disclaim liability to any loss, damage of any nature, including but not limited to direct, indirect, punitive, special, exemplary, consequential, as also any loss of profit in any way arising from the use of this document or its contents in any manner or for any contingency within or beyond the control of, ICRA Analytics or any of its directors, officers, employees, agents, representatives, licensors or suppliers, arising from or in connection with the information contained herein or the use of or inability to use any such information.Opinions expressed in the document are not the opinions of our holding company, ICRA Limited(ICRA), and should not be construed as any indication of credit rating or grading of ICRA for any instruments that have been issued or are to be issued by any entity.The recipient alone shall be fully responsible and / or are liable for any decision taken on the basis of this document and / or the information contained herein.");
                    Cell.CellStyle = declationstyle;
                }
            }
            NPOIWrite.CellMerged(sheet, incr, incr, 0, listTableSubHeader.Count - 1);
            sheet.GetRow(incr).HeightInPoints = 120;
            sheet.ActiveCell = new CellAddress(0, 1);
            var stream = new MemoryStream();
            workbook.Write(stream);
            return stream;
        }

        public static MemoryStream ExportToExcel(List<TableHeaderEntity> listTableHeaderSheetOne, List<TableHeaderEntity> listTableHeaderSheetTwo, List<ExportEntity> listDataSheetOne, List<ExportEntity> listDataSheetTwo, string strSheetNameOne, string strSheetNameTwo, string LogoPath = "")
        {
            HSSFWorkbook workbook = new HSSFWorkbook();
            ISheet sheet = workbook.CreateSheet(strSheetNameOne);
            ISheet sheetTwo = workbook.CreateSheet(strSheetNameTwo);
            var ICRArow = sheet.CreateRow(0);
            ICRArow.CreateCell(0);
            var ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue("ICRA Analytics Limited");
            ICRACell.CellStyle = NPOIWrite.CellStyleThin(workbook);
            ICRArow = sheet.CreateRow(1);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue("107, Raheja Arcade, Sector-11, CBD Belapur");
            ICRArow = sheet.CreateRow(2);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.CellStyle = NPOIWrite.CellStyleThin(workbook);
            ICRArow = sheet.CreateRow(3);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.CellStyle = NPOIWrite.CellStyleThin(workbook);
            //===sheet2
            ICRArow = sheetTwo.CreateRow(0);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue("ICRA Analytics Limited");
            ICRACell.CellStyle = NPOIWrite.CellStyleThin(workbook);
            ICRArow = sheetTwo.CreateRow(1);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue("107, Raheja Arcade, Sector-11, CBD Belapur");
            ICRArow = sheetTwo.CreateRow(2);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.CellStyle = NPOIWrite.CellStyleThin(workbook);
            ICRArow = sheetTwo.CreateRow(3);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.CellStyle = NPOIWrite.CellStyleThin(workbook);
            //===
            #region Header creation in the Excel
            var headerRow = sheet.CreateRow(4);

            var listHeaderFinal = listTableHeaderSheetOne.OrderBy(x => x.Position).ToList();
            for (int i = 0; i < listHeaderFinal.Count; i++)
            {
                var cell = headerRow.CreateCell(i);
                cell.SetCellValue(listHeaderFinal[i].ColumnName);
                NPOIWrite.AutoFitColumn(sheet, i);
                cell.CellStyle = NPOIWrite.CellStyleThin(workbook);
                cell.CellStyle.FillForegroundColor = IndexedColors.Blue.Index;
                //cell.CellStyle.FillBackgroundColor = IndexedColors.White.Index;
                var hFont = cell.CellStyle.GetFont(workbook);
                hFont.Color = HSSFColor.White.Index;
                cell.CellStyle.SetFont(hFont);
                cell.CellStyle.FillPattern = FillPattern.SolidForeground;
            }
            #endregion

            #region Value added to the Excel

            int incr = 5;
            foreach (var item in listDataSheetOne)
            {
                var dataRow = sheet.CreateRow(incr);
                var cellValues = (from i in item.LstKeyValuePair
                                  from j in listTableHeaderSheetOne
                                  where i.Key == j.ColumnName
                                  orderby j.Position
                                  select i.Value).ToArray();

                for (int k = 0; k < cellValues.Length; k++)
                {
                    var datacell = dataRow.CreateCell(k);
                    datacell.SetCellValue(cellValues[k] == "" ? "--" : cellValues[k]);
                    NPOIWrite.AutoFitColumn(sheet, k);
                    //datacell.CellStyle = NPOIWrite.CellStyleHair(workbook);
                }
                incr++;
            }
            #endregion

            #region Header creation in the Excel for sheet two
            var headerRowTwo = sheetTwo.CreateRow(4);

            var listHeaderFinalSecond = listTableHeaderSheetTwo.OrderBy(x => x.Position).ToList();
            for (int i = 0; i < listHeaderFinalSecond.Count; i++)
            {
                var cell = headerRowTwo.CreateCell(i);
                cell.SetCellValue(listHeaderFinalSecond[i].ColumnName);
                NPOIWrite.AutoFitColumn(sheetTwo, i);
                cell.CellStyle = NPOIWrite.CellStyleThin(workbook);
                cell.CellStyle.FillForegroundColor = IndexedColors.Blue.Index;
                //cell.CellStyle.FillBackgroundColor = IndexedColors.White.Index;
                var hFont = cell.CellStyle.GetFont(workbook);
                hFont.Color = HSSFColor.White.Index;
                cell.CellStyle.SetFont(hFont);
                cell.CellStyle.FillPattern = FillPattern.SolidForeground;
            }
            #endregion

            #region Value added to the Excel for sheet two

            int incrsecond = 5;
            bool isNumeric = false;
            foreach (var item in listDataSheetTwo)
            {
                if (item.LstKeyValuePair.Count() > 0)
                {
                    int value;
                    isNumeric = int.TryParse(item.LstKeyValuePair[0].Key, out value);
                }
                var dataRow = sheetTwo.CreateRow(incrsecond);
                if (isNumeric == true)
                {
                    var cellValues = (from i in item.LstKeyValuePair
                                      from j in listTableHeaderSheetTwo
                                      where i.Key.ToString() == j.Position.ToString()
                                      orderby j.Position
                                      select i.Value).ToArray();

                    for (int k = 0; k < cellValues.Length; k++)
                    {
                        var datacell = dataRow.CreateCell(k);
                        datacell.SetCellValue(cellValues[k] == "" ? "--" : cellValues[k]);
                        NPOIWrite.AutoFitColumn(sheetTwo, k);
                        //datacell.CellStyle = NPOIWrite.CellStyleHair(workbook);
                    }
                    incrsecond++;
                }
                else
                {
                    var cellValues = (from i in item.LstKeyValuePair
                                      from j in listTableHeaderSheetTwo
                                      where i.Key == j.ColumnName
                                      orderby j.Position
                                      select i.Value).ToArray();

                    for (int k = 0; k < cellValues.Length; k++)
                    {
                        var datacell = dataRow.CreateCell(k);
                        datacell.SetCellValue(cellValues[k] == "" ? "--" : cellValues[k]);
                        NPOIWrite.AutoFitColumn(sheetTwo, k);
                        //datacell.CellStyle = NPOIWrite.CellStyleHair(workbook);
                    }
                    incrsecond++;
                }
            }
            #endregion
            for (int i = 0; i < listHeaderFinal.Count; i++)
                sheet.AutoSizeColumn(i);
            if (sheet.GetColumnWidth(0) < 11072)
                sheet.SetColumnWidth(0, 11072);
            if (!string.IsNullOrEmpty(LogoPath))
            {
                try
                {
                    HSSFPatriarch patriarch = (HSSFPatriarch)sheet.CreateDrawingPatriarch();
                    HSSFClientAnchor anchor;
                    anchor = new HSSFClientAnchor(0, 0, 0, 255, 0, 0, 0, 3);
                    anchor.AnchorType = AnchorType.DontMoveAndResize;
                    HSSFPicture picture = (HSSFPicture)patriarch.CreatePicture(anchor, LoadImage(LogoPath, workbook, PictureType.PNG));
                    double x1 = .75;
                    double y1 = .75;
                    picture.Resize(x1, y1);
                    picture.LineStyle = LineStyle.None;
                }
                catch { }
            }
            var disclarRowNo = incr + 3;
            var Row = sheet.CreateRow(disclarRowNo);
            ICell Cell;
            for (int i = 0; i < listHeaderFinal.Count; i++)
            {
                Cell = Row.CreateCell(i);
                if (i == 0)
                {
                    HSSFCellStyle declationstyle = (HSSFCellStyle)workbook.CreateCellStyle();
                    declationstyle.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                    declationstyle.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                    declationstyle.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                    declationstyle.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                    declationstyle.Alignment = HorizontalAlignment.Center;
                    declationstyle.VerticalAlignment = VerticalAlignment.Top;
                    declationstyle.WrapText = true;
                    IFont declarationfnt = (HSSFFont)workbook.CreateFont();
                    declarationfnt.Boldweight = (short)FontBoldWeight.Bold;
                    declarationfnt.FontName = "Arial";
                    declarationfnt.FontHeightInPoints = (short)8;
                    declationstyle.SetFont(declarationfnt);
                    Cell.SetCellValue("All information contained herein is obtained by ICRA Analytics Limited from sources believed by it to be accurate and reliable. Because of the possibility of human or mechanical error as well as other factors, however, all information contained herein is provided 'AS IS' without warranty of any kind. ICRA Analytics adopts all necessary measures so that the information it uses is of sufficient quality and from sources ICRA Analytics considers to be reliable including, when appropriate, independent third-party sources. However, ICRA Analytics is not an auditor and cannot in every instance independently verify or validate information received in preparing this document." +
                    "All information contained herein must be construed solely as statements of opinion, and  ICRA Analytics Limited or its affiliates or group companies and its respective and any of its officers, directors, personnel and employees, disclaim liability to any loss, damage of any nature, including but not limited to direct, indirect, punitive, special, exemplary, consequential, as also any loss of profit in any way arising from the use of this document or its contents in any manner or for any contingency within or beyond the control of, ICRA Analytics or any of its directors, officers, employees, agents, representatives, licensors or suppliers, arising from or in connection with the information contained herein or the use of or inability to use any such information.Opinions expressed in the document are not the opinions of our holding company, ICRA Limited(ICRA), and should not be construed as any indication of credit rating or grading of ICRA for any instruments that have been issued or are to be issued by any entity.The recipient alone shall be fully responsible and / or are liable for any decision taken on the basis of this document and / or the information contained herein.");
                    Cell.CellStyle = declationstyle;
                }
            }
            NPOIWrite.CellMerged(sheet, disclarRowNo, disclarRowNo, 0, listHeaderFinal.Count - 1);
            sheet.GetRow(disclarRowNo).HeightInPoints = 120;
            sheet.ActiveCell = new CellAddress(0, 1);
            for (int i = 0; i < listHeaderFinalSecond.Count; i++)
                sheetTwo.AutoSizeColumn(i);
            if (sheetTwo.GetColumnWidth(0) < 11072)
                sheetTwo.SetColumnWidth(0, 11072);
            if (!string.IsNullOrEmpty(LogoPath))
            {
                try
                {
                    HSSFPatriarch patriarch = (HSSFPatriarch)sheetTwo.CreateDrawingPatriarch();
                    HSSFClientAnchor anchor;
                    anchor = new HSSFClientAnchor(0, 0, 0, 255, 0, 0, 0, 3);
                    anchor.AnchorType = AnchorType.DontMoveAndResize;
                    HSSFPicture picture = (HSSFPicture)patriarch.CreatePicture(anchor, LoadImage(LogoPath, workbook, PictureType.PNG));
                    double x1 = .75;
                    double y1 = .75;
                    picture.Resize(x1, y1);
                    picture.LineStyle = LineStyle.None;
                }
                catch { }
            }
            var disclarTwoRowNo = incrsecond + 3;
            Row = sheetTwo.CreateRow(disclarTwoRowNo);
            for (int i = 0; i < listHeaderFinalSecond.Count; i++)
            {
                Cell = Row.CreateCell(i);
                if (i == 0)
                {
                    HSSFCellStyle declationstyle = (HSSFCellStyle)workbook.CreateCellStyle();
                    declationstyle.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                    declationstyle.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                    declationstyle.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                    declationstyle.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                    declationstyle.Alignment = HorizontalAlignment.Center;
                    declationstyle.VerticalAlignment = VerticalAlignment.Top;
                    declationstyle.WrapText = true;
                    IFont declarationfnt = (HSSFFont)workbook.CreateFont();
                    declarationfnt.Boldweight = (short)FontBoldWeight.Bold;
                    declarationfnt.FontName = "Arial";
                    declarationfnt.FontHeightInPoints = (short)8;
                    declationstyle.SetFont(declarationfnt);
                    Cell.SetCellValue("All information contained herein is obtained by ICRA Analytics Limited from sources believed by it to be accurate and reliable. Because of the possibility of human or mechanical error as well as other factors, however, all information contained herein is provided 'AS IS' without warranty of any kind. ICRA Analytics adopts all necessary measures so that the information it uses is of sufficient quality and from sources ICRA Analytics considers to be reliable including, when appropriate, independent third-party sources. However, ICRA Analytics is not an auditor and cannot in every instance independently verify or validate information received in preparing this document." +
                    "All information contained herein must be construed solely as statements of opinion, and  ICRA Analytics Limited or its affiliates or group companies and its respective and any of its officers, directors, personnel and employees, disclaim liability to any loss, damage of any nature, including but not limited to direct, indirect, punitive, special, exemplary, consequential, as also any loss of profit in any way arising from the use of this document or its contents in any manner or for any contingency within or beyond the control of, ICRA Analytics or any of its directors, officers, employees, agents, representatives, licensors or suppliers, arising from or in connection with the information contained herein or the use of or inability to use any such information.Opinions expressed in the document are not the opinions of our holding company, ICRA Limited(ICRA), and should not be construed as any indication of credit rating or grading of ICRA for any instruments that have been issued or are to be issued by any entity.The recipient alone shall be fully responsible and / or are liable for any decision taken on the basis of this document and / or the information contained herein.");
                    Cell.CellStyle = declationstyle;
                }
            }
            NPOIWrite.CellMerged(sheetTwo, disclarTwoRowNo, disclarTwoRowNo, 0, listHeaderFinalSecond.Count - 1);
            sheetTwo.GetRow(disclarTwoRowNo).HeightInPoints = 120;
            sheetTwo.ActiveCell = new CellAddress(0, 1);
            var stream = new MemoryStream();
            workbook.Write(stream);
            return stream;
        }


        public static NPOI.XSSF.UserModel.XSSFWorkbook ExportToExcelWorkBook(List<TableHeaderEntity> listTableHeader, List<ExportEntity> listData, string LogoPath = "", string Header = "", string Footer = "", string BlankData = "", string ReportName = "", int DecimalPoint = 4, string StrDateAsOn = "")
        {

            #region Variable
            string StrHeader1 = "ICRA Analytics Limited";
            string StrHeader2 = "107, Raheja Arcade, Sector-11, CBD Belapur";
            string StrHeader3 = Header;
            string StrReportName = ReportName;
            string StrSource = "Source: " + (string.IsNullOrEmpty(UserStatisticsEntity.SourceName) ? "MFI 360" : UserStatisticsEntity.SourceName);
            StrDateAsOn = "Data as on " + StrDateAsOn;
            string StrReportGeneratedOn = "Report Generated on " + DateTime.Now.ToString("dd-MMM-yyyy HH:mm:ss");
            var Paddding = new string('0', DecimalPoint);
            var DecimalFormat = "0." + Paddding;
            string NUMBERFORMAT = "000,000";
            var NumberFormat = NUMBERFORMAT.Replace("0", "#");
            string NumberDecimalFormat = NumberFormat + "0." + new String('0', DecimalPoint);
            #endregion

            NPOI.XSSF.UserModel.XSSFWorkbook workbook = new NPOI.XSSF.UserModel.XSSFWorkbook();

            ISheet sheet = workbook.CreateSheet("Output");
            ISheet sheetTwo = workbook.CreateSheet("Disclaimer");

            #region Excel Sheet Gridlines Delete
            sheet.DisplayGridlines = false;
            sheetTwo.DisplayGridlines = false;
            #endregion

            #region Header Freeze
            sheet.CreateFreezePane(1, 6);
            #endregion

            #region Set Font For Header1,Header2 and Header3
            XSSFCellStyle HeaderStyle = (XSSFCellStyle)workbook.CreateCellStyle();
            IFont Headerfont = workbook.CreateFont();
            Headerfont.Boldweight = (short)FontBoldWeight.Bold;
            HeaderStyle.SetFont(Headerfont);
            #endregion

            #region Set Cell Value For Header1, Header2 and Header3
            var ICRArow = sheet.CreateRow(0);
            ICRArow.CreateCell(0);
            var ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader1);
            ICRACell.CellStyle = HeaderStyle;
            ICRArow = sheet.CreateRow(1);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader2);
            ICRACell.CellStyle = HeaderStyle;
            ICRArow = sheet.CreateRow(2);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader3);
            ICRACell.CellStyle = HeaderStyle;
            ICRACell.CellStyle.Alignment = HorizontalAlignment.Center;
            ICRArow = sheet.CreateRow(3);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.CellStyle.Alignment = HorizontalAlignment.Center;
            NPOIWrite.AutoFitColumn(sheet, 1);
            ICRACell.CellStyle = HeaderStyle;
            #endregion

            #region Report Name
            ICRArow = sheet.CreateRow(4);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrReportName);
            HeaderStyle.Alignment = HorizontalAlignment.Left;
            ICRACell.CellStyle = HeaderStyle;
            #endregion

            #region Header creation in the Excel
            var headerRow = sheet.CreateRow(5);
            sheet.GetRow(5).HeightInPoints = 30;
            var listHeaderFinal = listTableHeader.OrderBy(x => x.Position).ToList();
            for (int i = 0; i < listHeaderFinal.Count; i++)
            {
                var cell = headerRow.CreateCell(i);
                cell.SetCellValue(listHeaderFinal[i].ColumnName);
                NPOIWrite.AutoFitColumn(sheet, i);

                #region Commented by Subrata on 21 Feb 2018
                //ICellStyle CellStyle = workbook.CreateCellStyle();
                //CellStyle = workbook.CreateCellStyle();
                //CellStyle.FillBackgroundColor = IndexedColors.Blue.Index;
                #endregion

                #region Added by Subrata on 21 Feb 2018
                XSSFCellStyle style = (XSSFCellStyle)workbook.CreateCellStyle();
                XSSFColor colorToFill = new XSSFColor(new byte[] { 68, 114, 196 });//{ 51, 204, 204 }//Color.Blue);
                style.SetFillForegroundColor(colorToFill);
                IFont font = workbook.CreateFont();
                font.Color = IndexedColors.White.Index;
                font.Boldweight = (short)FontBoldWeight.Bold;
                style.SetFont(font);
                style.FillPattern = FillPattern.SolidForeground;
                style.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                style.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                style.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                style.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                if (i > 0)
                {
                    style.Alignment = HorizontalAlignment.Center;
                    style.VerticalAlignment = VerticalAlignment.Center;
                }
                else
                {
                    style.Alignment = HorizontalAlignment.Left;
                    style.VerticalAlignment = VerticalAlignment.Center;
                }
                #endregion

                cell.CellStyle = style;

            }
            #endregion

            #region Cell Style For Even Row

            #region With DecimalFormat
            XSSFCellStyle AllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            AllCellStyleEvenDecFrmt.SetFillForegroundColor(colorToFillEvenWtoutDec);
            AllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat formatEven = workbook.CreateDataFormat();
            AllCellStyleEvenDecFrmt.DataFormat = formatEven.GetFormat(DecimalFormat);
            AllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            AllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region No Format
            XSSFCellStyle AllCellStyleEven = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleEven.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillEven = new XSSFColor(new byte[] { 176, 196, 222 });
            AllCellStyleEven.SetFillForegroundColor(colorToFillEven);
            AllCellStyleEven.FillPattern = FillPattern.SolidForeground;
            AllCellStyleEven.Alignment = HorizontalAlignment.Center;
            AllCellStyleEven.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #endregion

            #region Cell Style For Odd Row

            #region With Decimal Format
            XSSFCellStyle AllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            AllCellStyleOddDec.SetFillForegroundColor(colorToFillOddDec);
            AllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat formatOddDec = workbook.CreateDataFormat();
            AllCellStyleOddDec.DataFormat = formatOddDec.GetFormat(DecimalFormat);
            AllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            AllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region No Format
            XSSFCellStyle AllCellStyleOdd = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleOdd.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillOdd = new XSSFColor(new byte[] { 255, 255, 255 });
            AllCellStyleOdd.SetFillForegroundColor(colorToFillOdd);
            AllCellStyleOdd.FillPattern = FillPattern.SolidForeground;
            AllCellStyleOdd.Alignment = HorizontalAlignment.Center;
            AllCellStyleOdd.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #endregion

            #region Cell Style For First Column Even Row
            XSSFCellStyle AllCellStyleFstColmEven = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleFstColmEven.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillFstClmnEven = new XSSFColor(new byte[] { 176, 196, 222 });
            AllCellStyleFstColmEven.SetFillForegroundColor(colorToFillFstClmnEven);
            AllCellStyleFstColmEven.FillPattern = FillPattern.SolidForeground;
            AllCellStyleFstColmEven.Alignment = HorizontalAlignment.Left;
            AllCellStyleFstColmEven.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region Cell Style For First Column Odd Row
            XSSFCellStyle AllCellStyleFstColmOdd = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleFstColmOdd.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillFstClmnOdd = new XSSFColor(new byte[] { 255, 255, 255 });
            AllCellStyleFstColmOdd.SetFillForegroundColor(colorToFillFstClmnOdd);
            AllCellStyleFstColmOdd.FillPattern = FillPattern.SolidForeground;
            AllCellStyleFstColmOdd.Alignment = HorizontalAlignment.Left;
            AllCellStyleFstColmOdd.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region Value added to the Excel

            #region Added by Subrata on 22 Feb 2018
            bool IsNumericKey = false;
            bool IsNumericValue = false;
            var AllListData = listData.SelectMany(x => x.LstKeyValuePair).ToArray();
            var AllDataKey = AllListData.Select(x => x.Key).Distinct().ToArray();
            int ValueRes;
            IsNumericKey = int.TryParse(AllDataKey[0], out ValueRes);
            foreach (var val in listTableHeader)
            {
                string StrColumnValue = string.Empty;
                double value;
                if (IsNumericKey)
                {
                    var ParticularColumnData = AllListData.Where(x => x.Key == val.Position.ToString() && x.Value != "" && x.Value != null && x.Value != BlankData).Select(x => x).ToArray();
                    if (ParticularColumnData.Length > 0)
                    {
                        StrColumnValue = ParticularColumnData.FirstOrDefault().Value;
                        IsNumericValue = double.TryParse(StrColumnValue, out value);
                        if (IsNumericValue)
                            val.DataType = "Double";
                        else
                            val.DataType = "String";
                    }

                }
                else
                {
                    var ParticularColumnData = AllListData.Where(x => x.Key == val.ColumnName && x.Value != "" && x.Value != null && x.Value != BlankData).Select(x => x).ToArray();
                    if (ParticularColumnData.Length > 0)
                    {
                        StrColumnValue = ParticularColumnData.FirstOrDefault().Value;
                        IsNumericValue = double.TryParse(StrColumnValue, out value);
                        if (IsNumericValue)
                            val.DataType = "Double";
                        else
                            val.DataType = "String";
                    }
                }
            }
            #endregion

            int incr = 6;
            bool isNumeric = false;
            foreach (var item in listData)
            {
                if (item.LstKeyValuePair.Count() > 0)
                {
                    int value;
                    isNumeric = int.TryParse(item.LstKeyValuePair[0].Key, out value);
                }
                var dataRow = sheet.CreateRow(incr);
                sheet.GetRow(incr).HeightInPoints = 20;
                if (isNumeric == true)
                {
                    var cellValues = (from i in item.LstKeyValuePair
                                      from j in listTableHeader
                                      where i.Key.ToString() == j.Position.ToString()
                                      orderby j.Position
                                      select new
                                      {
                                          DataType = j.DataType,
                                          Value = i.Value
                                      }).ToArray();

                    for (int k = 0; k < cellValues.Length; k++)
                    {
                        var datacell = dataRow.CreateCell(k);
                        if (cellValues[k].DataType == "Double")
                        {
                            double OutVal;
                            if (string.IsNullOrEmpty(cellValues[k].Value) || cellValues[k].Value == BlankData || !double.TryParse(cellValues[k].Value, out OutVal))
                            {
                                datacell.SetCellValue(cellValues[k].Value);
                                if (k > 0)
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;

                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }

                            }
                            else
                            {
                                datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                                if (k > 0)
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEvenDecFrmt;
                                    else
                                        datacell.CellStyle = AllCellStyleOddDec;
                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }

                            }

                        }
                        else
                        {
                            datacell.SetCellValue(cellValues[k].Value == "" ? BlankData : cellValues[k].Value);
                            if (k > 0)
                            {
                                if (incr % 2 == 0)
                                    datacell.CellStyle = AllCellStyleEven;
                                else
                                    datacell.CellStyle = AllCellStyleOdd;
                            }
                            else
                            {
                                if (incr % 2 == 0)
                                    datacell.CellStyle = AllCellStyleFstColmEven;
                                else
                                    datacell.CellStyle = AllCellStyleFstColmOdd;
                            }

                        }


                    }
                    incr++;
                }
                else
                {
                    var cellValues = (from i in item.LstKeyValuePair
                                      from j in listTableHeader
                                      where i.Key == j.ColumnName
                                      orderby j.Position
                                      select new
                                      {
                                          DataType = j.DataType,
                                          Value = i.Value
                                      }).ToArray();

                    for (int k = 0; k < cellValues.Length; k++)
                    {
                        var datacell = dataRow.CreateCell(k);
                        if (cellValues[k].DataType == "Double")
                        {
                            double OutVal;
                            if (string.IsNullOrEmpty(cellValues[k].Value) || cellValues[k].Value == BlankData || !double.TryParse(cellValues[k].Value, out OutVal))
                            {
                                datacell.SetCellValue(cellValues[k].Value);
                                if (k > 0)
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;
                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }

                            }
                            else
                            {
                                datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                                if (k > 0)
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEvenDecFrmt;
                                    else
                                        datacell.CellStyle = AllCellStyleOddDec;
                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }

                            }

                        }
                        else
                        {
                            datacell.SetCellValue(cellValues[k].Value == "" ? BlankData : cellValues[k].Value);
                            if (k > 0)
                            {
                                if (incr % 2 == 0)
                                    datacell.CellStyle = AllCellStyleEven;
                                else
                                    datacell.CellStyle = AllCellStyleOdd;
                            }
                            else
                            {
                                if (incr % 2 == 0)
                                    datacell.CellStyle = AllCellStyleFstColmEven;
                                else
                                    datacell.CellStyle = AllCellStyleFstColmOdd;
                            }

                        }


                    }
                    incr++;
                }

            }
            #endregion

            for (int i = 0; i < listTableHeader.Count; i++)
                sheet.AutoSizeColumn(i);
            if (sheet.GetColumnWidth(0) < 11072)
                sheet.SetColumnWidth(0, 11072);

            #region Logo
            try
            {
                if (!string.IsNullOrEmpty(LogoPath))
                {
                    XSSFDrawing patriarch = (XSSFDrawing)sheet.CreateDrawingPatriarch();
                    XSSFClientAnchor anchor;
                    anchor = new XSSFClientAnchor(0, 0, 0, 255, 0, 0, 0, 3);
                    anchor.AnchorType = AnchorType.DontMoveAndResize;
                    XSSFPicture picture = (XSSFPicture)patriarch.CreatePicture(anchor, LoadImage(LogoPath, workbook, PictureType.PNG));
                    double x1 = .25;
                    double y1 = .75;
                    picture.Resize(x1, y1);
                    picture.LineStyle = LineStyle.None;
                }
            }
            catch (Exception ex)
            {
            }

            #endregion

            #region Source, Date As On and Report Generated On
            ICRArow = sheet.CreateRow(incr + 3);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrSource);

            ICRArow = sheet.CreateRow(incr + 4);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrDateAsOn);

            ICRArow = sheet.CreateRow(incr + 5);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrReportGeneratedOn);
            #endregion

            #region Sheet Two Logo
            try
            {
                if (!string.IsNullOrEmpty(LogoPath))
                {
                    XSSFDrawing patriarch = (XSSFDrawing)sheetTwo.CreateDrawingPatriarch();
                    XSSFClientAnchor anchor;
                    anchor = new XSSFClientAnchor(0, 0, 0, 255, 0, 0, 0, 3);
                    anchor.AnchorType = AnchorType.DontMoveAndResize;
                    XSSFPicture picture = (XSSFPicture)patriarch.CreatePicture(anchor, LoadImage(LogoPath, workbook, PictureType.PNG));
                    double x1 = 1.10;
                    double y1 = 1.10;
                    picture.Resize(x1, y1);
                    picture.LineStyle = LineStyle.None;
                }
            }
            catch (Exception ex)
            {
            }
            #endregion

            #region Disclaimer Sheet
            var Row = sheetTwo.CreateRow(1);
            var cellSheetTwo = Row.CreateCell(7);
            cellSheetTwo.SetCellValue(StrHeader1);
            cellSheetTwo.CellStyle = HeaderStyle;

            Row = sheetTwo.CreateRow(4);
            ICell Cell;
            for (int i = 0; i < 17; i++)
            {
                Cell = Row.CreateCell(i);

                XSSFCellStyle declationstyle = (XSSFCellStyle)workbook.CreateCellStyle();

                declationstyle.Alignment = HorizontalAlignment.Center;
                declationstyle.VerticalAlignment = VerticalAlignment.Top;
                declationstyle.WrapText = true;
                IFont declarationfnt = (XSSFFont)workbook.CreateFont();
                //declarationfnt.Boldweight = (short)FontBoldWeight.Bold;
                declarationfnt.FontName = "Calibri";
                declarationfnt.FontHeightInPoints = (short)11;
                declationstyle.SetFont(declarationfnt);
                //Cell.SetCellValue(!string.IsNullOrEmpty(Footer) ? Footer : "All information contained herein is obtained by ICRA Analytics Limited from sources believed by it to be accurate and reliable. Because of the possibility of human or mechanical error as well as other factors, however, all information contained herein is provided 'AS IS' without warranty of any kind. ICRA Analytics adopts all necessary measures so that the information it uses is of sufficient quality and from sources ICRA Analytics considers to be reliable including, when appropriate, independent third-party sources. However, ICRA Analytics is not an auditor and cannot in every instance independently verify or validate information received in preparing this document." +
                //    "All information contained herein must be construed solely as statements of opinion, and  ICRA Analytics Limited or its affiliates or group companies and its respective and any of its officers, directors, personnel and employees, disclaim liability to any loss, damage of any nature, including but not limited to direct, indirect, punitive, special, exemplary, consequential, as also any loss of profit in any way arising from the use of this document or its contents in any manner or for any contingency within or beyond the control of, ICRA Analytics or any of its directors, officers, employees, agents, representatives, licensors or suppliers, arising from or in connection with the information contained herein or the use of or inability to use any such information.Opinions expressed in the document are not the opinions of our holding company, ICRA Limited(ICRA), and should not be construed as any indication of credit rating or grading of ICRA for any instruments that have been issued or are to be issued by any entity.The recipient alone shall be fully responsible and / or are liable for any decision taken on the basis of this document and / or the information contained herein.");
                Cell.SetCellValue(!string.IsNullOrEmpty(Footer) ? Footer : "All information contained herein is obtained by ICRA Analytics Ltd from sources believed by it to be accurate and reliable. Because of the possibility of human or mechanical error as well as other factors, however, all information contained herein is provided \"AS IS\" without warranty of any kind. ICRA Analytics Ltd adopts all necessary measures so that the information it uses is of sufficient quality and from sources ICRA Analytics Ltd considers to be reliable including, when appropriate, independent third-party sources. However, ICRA Analytics Ltd is not an auditor and cannot in every instance independently verify or validate information received in preparing this document.  All information contained herein must be construed solely as statements of opinion, and  ICRA Analytics Ltd or its affiliates or group companies and its respective and any of its officers, directors, personnel and employees, disclaim liability to any loss, damage of any nature, including but not limited to direct, indirect, punitive, special, exemplary, consequential, as also any loss of profit in any way arising from the use of this document or its contents in any manner or for any contingency within or beyond the control of, ICRA Analytics Ltd or any of its directors, officers, employees, agents, representatives, licensors or suppliers, arising from or in connection with the information contained herein or the use of or inability to use any such information. Opinions expressed in the document are not the opinions of our holding company, ICRA Limited (ICRA), and should not be construed as any indication of credit rating or grading of ICRA for any instruments that have been issued or are to be issued by any entity. The recipient alone shall be fully responsible and/or are liable for any decision taken on the basis of this document and/or the information contained herein. ");
                Cell.CellStyle = declationstyle;

            }
            NPOIWrite.CellMerged(sheetTwo, 4, 4, 0, 17);
            sheetTwo.GetRow(4).HeightInPoints = 200;
            #endregion

            #region Disclaimer Sheet HyperLink
            XSSFCellStyle HyperLinkStyle = (XSSFCellStyle)workbook.CreateCellStyle();
            IFont HyperLinkFont = workbook.CreateFont();
            HyperLinkFont.Color = IndexedColors.Orange.Index;
            HyperLinkFont.Underline = FontUnderlineType.Single;
            HyperLinkStyle.SetFont(HyperLinkFont);

            Row = sheetTwo.CreateRow(5);
            Cell = Row.CreateCell(0);
            Cell.SetCellValue("Click here for third-party disclaimers");
            XSSFCreationHelper createHelper = (XSSFCreationHelper)workbook.GetCreationHelper();
            XSSFHyperlink link = (XSSFHyperlink)createHelper.CreateHyperlink(HyperlinkType.Url);
            link.Address = "https://www.icraanalytics.com/home/thirdpartydisclaimers";
            Cell.Hyperlink = link;
            Cell.CellStyle = HyperLinkStyle;
            #endregion

            sheet.ActiveCell = new CellAddress(0, 1);
            var stream = new MemoryStream();
            workbook.Write(stream);

            return workbook;
        }

        public static NPOI.XSSF.UserModel.XSSFWorkbook ExportToExcelWorkBook(List<TableHeaderEntity> listTableHeader, List<TableSubHeaderEntity> listTableSubHeader, List<ExportEntity> listData, string LogoPath = "", string Header = "", string Footer = "", string BlankData = "", string ReportName = "", int DecimalPoint = 4, string StrDateAsOn = "")
        {
            #region Variable
            string StrHeader1 = "ICRA Analytics Limited";
            string StrHeader2 = "107, Raheja Arcade, Sector-11, CBD Belapur";
            string StrHeader3 = Header;
            string StrReportName = ReportName;
            string StrSource = "Source: " + (string.IsNullOrEmpty(UserStatisticsEntity.SourceName) ? "MFI 360" : UserStatisticsEntity.SourceName);
            StrDateAsOn = "Data as on " + StrDateAsOn;
            string StrReportGeneratedOn = "Report Generated on " + DateTime.Now.ToString("dd-MMM-yyyy HH:mm:ss");
            var Paddding = new string('0', DecimalPoint);
            var DecimalFormat = "0." + Paddding;
            #endregion

            NPOI.XSSF.UserModel.XSSFWorkbook workbook = new NPOI.XSSF.UserModel.XSSFWorkbook();
            ISheet sheet = workbook.CreateSheet("Output");
            ISheet sheetTwo = workbook.CreateSheet("Disclaimer");

            #region Excel Sheet Gridlines Delete
            sheet.DisplayGridlines = false;
            sheetTwo.DisplayGridlines = false;
            #endregion

            #region Header Freeze
            sheet.CreateFreezePane(1, 6);
            #endregion

            #region Set Font For Header1,Header2 and Header3
            XSSFCellStyle HeaderStyle = (XSSFCellStyle)workbook.CreateCellStyle();
            IFont Headerfont = workbook.CreateFont();
            Headerfont.Boldweight = (short)FontBoldWeight.Bold;
            HeaderStyle.SetFont(Headerfont);
            #endregion

            #region Set Cell Value For Header1, Header2 and Header3
            var ICRArow = sheet.CreateRow(0);
            ICRArow.CreateCell(0);
            var ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader1);
            ICRACell.CellStyle = HeaderStyle;
            ICRArow = sheet.CreateRow(1);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader2);
            ICRACell.CellStyle = HeaderStyle;
            ICRArow = sheet.CreateRow(2);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader3);
            ICRACell.CellStyle = HeaderStyle;
            ICRACell.CellStyle.Alignment = HorizontalAlignment.Center;
            ICRArow = sheet.CreateRow(3);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.CellStyle = HeaderStyle;
            ICRACell.CellStyle.Alignment = HorizontalAlignment.Center;
            NPOIWrite.AutoFitColumn(sheet, 1);
            ICRACell.CellStyle = HeaderStyle;
            #endregion

            #region Report Name
            ICRArow = sheet.CreateRow(4);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrReportName);
            HeaderStyle.Alignment = HorizontalAlignment.Left;
            ICRACell.CellStyle = HeaderStyle;
            #endregion

            #region Header creation in the Excel
            var headerRow = sheet.CreateRow(4);
            sheet.GetRow(4).HeightInPoints = 30;
            var headerlistFinal = listTableHeader.OrderBy(x => x.Position).ToList();
            var cellincr = 0;
            for (int i = 0; i < headerlistFinal.Count; i++)
            {
                int colspan = headerlistFinal[i].Colspan;
                if (colspan > 1)
                {
                    for (int k = 0; k < colspan; k++)
                    {
                        var cell = headerRow.CreateCell(cellincr + k);
                        cell.SetCellValue(headerlistFinal[i].ColumnName);
                        NPOIWrite.AutoFitColumn(sheet, cellincr);

                        #region Added by Subrata on 21 Feb 2018
                        XSSFCellStyle style = (XSSFCellStyle)workbook.CreateCellStyle();
                        XSSFColor colorToFill = new XSSFColor(new byte[] { 68, 114, 196 });// { 51, 204, 204 });//Color.Blue);
                        style.SetFillForegroundColor(colorToFill);
                        IFont font = workbook.CreateFont();
                        font.Color = IndexedColors.White.Index;
                        font.Boldweight = (short)FontBoldWeight.Bold;
                        style.SetFont(font);
                        style.FillPattern = FillPattern.SolidForeground;
                        style.Alignment = HorizontalAlignment.Center;
                        style.VerticalAlignment = VerticalAlignment.Center;
                        style.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                        style.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                        style.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                        style.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                        #endregion

                        cell.CellStyle = style;
                    }
                    NPOIWrite.CellMerged(sheet, 4, 4, cellincr, cellincr + colspan - 1);
                    cellincr = cellincr + colspan;
                }
                else
                {
                    var cell = headerRow.CreateCell(cellincr);
                    cell.SetCellValue(headerlistFinal[i].ColumnName);
                    NPOIWrite.AutoFitColumn(sheet, cellincr);
                    cellincr = cellincr + colspan;

                    #region Added by Subrata on 21 Feb 2018
                    XSSFCellStyle style = (XSSFCellStyle)workbook.CreateCellStyle();
                    XSSFColor colorToFill = new XSSFColor(new byte[] { 68, 114, 196 });// { 51, 204, 204 });// Color.Blue);
                    style.SetFillForegroundColor(colorToFill);
                    IFont font = workbook.CreateFont();
                    font.Color = IndexedColors.White.Index;
                    font.Boldweight = (short)FontBoldWeight.Bold;
                    style.SetFont(font);
                    style.FillPattern = FillPattern.SolidForeground;
                    if (i > 0)
                    {
                        style.Alignment = HorizontalAlignment.Center;
                        style.VerticalAlignment = VerticalAlignment.Center;
                    }
                    else
                    {
                        style.Alignment = HorizontalAlignment.Left;
                        style.VerticalAlignment = VerticalAlignment.Center;
                    }
                    style.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                    style.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                    style.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                    style.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                    #endregion

                    cell.CellStyle = style;
                }
            }
            #endregion

            #region Sub Header creation in the Excel
            var subHeaderRow = sheet.CreateRow(5);
            sheet.GetRow(5).HeightInPoints = 30;
            var subHeaderlistFinal = listTableSubHeader.OrderBy(x => x.Position).ToList();
            for (int i = 0; i < subHeaderlistFinal.Count; i++)
            {
                int index = headerlistFinal.FindIndex(x => x.ColumnName.Equals(subHeaderlistFinal[i].ColumnName));
                if (index >= 0)
                {
                    var cell = subHeaderRow.CreateCell(i);

                    #region Added by Subrata on 21 Feb 2018
                    XSSFCellStyle style = (XSSFCellStyle)workbook.CreateCellStyle();
                    XSSFColor colorToFill = new XSSFColor(new byte[] { 68, 114, 196 });// Color.Blue);
                    style.SetFillForegroundColor(colorToFill);
                    IFont font = workbook.CreateFont();
                    font.Color = IndexedColors.White.Index;
                    font.Boldweight = (short)FontBoldWeight.Bold;
                    style.SetFont(font);
                    style.FillPattern = FillPattern.SolidForeground;
                    style.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                    style.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                    style.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                    style.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                    if (i > 0)
                    {
                        style.Alignment = HorizontalAlignment.Center;
                        style.VerticalAlignment = VerticalAlignment.Center;
                    }
                    else
                    {
                        style.Alignment = HorizontalAlignment.Left;
                        style.VerticalAlignment = VerticalAlignment.Center;
                    }
                    #endregion

                    cell.CellStyle = style;
                }
                else
                {
                    var cell = subHeaderRow.CreateCell(i);
                    cell.SetCellValue(subHeaderlistFinal[i].ColumnName);
                    NPOIWrite.AutoFitColumn(sheet, i);

                    #region Added by Subrata on 21 Feb 2018
                    XSSFCellStyle style = (XSSFCellStyle)workbook.CreateCellStyle();
                    XSSFColor colorToFill = new XSSFColor(new byte[] { 68, 114, 196 });// Color.Blue);
                    style.SetFillForegroundColor(colorToFill);
                    IFont font = workbook.CreateFont();
                    font.Color = IndexedColors.White.Index;
                    font.Boldweight = (short)FontBoldWeight.Bold;
                    style.SetFont(font);
                    style.FillPattern = FillPattern.SolidForeground;
                    style.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                    style.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                    style.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                    style.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                    if (i > 0)
                    {
                        style.Alignment = HorizontalAlignment.Center;
                        style.VerticalAlignment = VerticalAlignment.Center;
                    }
                    else
                    {
                        style.Alignment = HorizontalAlignment.Left;
                        style.VerticalAlignment = VerticalAlignment.Center;
                    }
                    #endregion

                    cell.CellStyle = style;
                }
            }
            #endregion

            #region Cell Style For Even Row

            #region Without DecimalFormat
            XSSFCellStyle AllCellStyleEven = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleEven.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillEven = new XSSFColor(new byte[] { 176, 196, 222 });
            AllCellStyleEven.SetFillForegroundColor(colorToFillEven);
            AllCellStyleEven.FillPattern = FillPattern.SolidForeground;
            AllCellStyleEven.Alignment = HorizontalAlignment.Center;
            AllCellStyleEven.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With Decimal Format
            XSSFCellStyle AllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            AllCellStyleEvenDecFrmt.SetFillForegroundColor(colorToFillEvenWtoutDec);
            AllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat formatEven = workbook.CreateDataFormat();
            AllCellStyleEvenDecFrmt.DataFormat = formatEven.GetFormat(DecimalFormat);
            AllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            AllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #endregion

            #region Cell Style For Odd Row

            #region With Decimal Format
            XSSFCellStyle AllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            AllCellStyleOddDec.SetFillForegroundColor(colorToFillOddDec);
            AllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat formatOddDec = workbook.CreateDataFormat();
            AllCellStyleOddDec.DataFormat = formatOddDec.GetFormat(DecimalFormat);
            AllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            AllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region Without Decimal Format
            XSSFCellStyle AllCellStyleOdd = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleOdd.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillOdd = new XSSFColor(new byte[] { 255, 255, 255 });
            AllCellStyleOdd.SetFillForegroundColor(colorToFillOdd);
            AllCellStyleOdd.FillPattern = FillPattern.SolidForeground;
            AllCellStyleOdd.Alignment = HorizontalAlignment.Center;
            AllCellStyleOdd.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #endregion

            #region Cell Style For First Column Even Row
            XSSFCellStyle AllCellStyleFstColmEven = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleFstColmEven.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillFstClmnEven = new XSSFColor(new byte[] { 176, 196, 222 });
            AllCellStyleFstColmEven.SetFillForegroundColor(colorToFillFstClmnEven);
            AllCellStyleFstColmEven.FillPattern = FillPattern.SolidForeground;
            AllCellStyleFstColmEven.Alignment = HorizontalAlignment.Left;
            AllCellStyleFstColmEven.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region Cell Style For First Column Odd Row
            XSSFCellStyle AllCellStyleFstColmOdd = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleFstColmOdd.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillFstClmnOdd = new XSSFColor(new byte[] { 255, 255, 255 });
            AllCellStyleFstColmOdd.SetFillForegroundColor(colorToFillFstClmnOdd);
            AllCellStyleFstColmOdd.FillPattern = FillPattern.SolidForeground;
            AllCellStyleFstColmOdd.Alignment = HorizontalAlignment.Left;
            AllCellStyleFstColmOdd.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region Value added to the Excel

            int incr = 6;
            bool isNumeric = false;

            #region Added by Subrata on 22 Feb 2018
            bool IsNumericKey = false;
            bool IsNumericValue = false;
            var AllListData = listData.SelectMany(x => x.LstKeyValuePair).ToArray();
            var AllDataKey = AllListData.Select(x => x.Key).Distinct().ToArray();
            int ValueRes;
            IsNumericKey = int.TryParse(AllDataKey[0], out ValueRes);
            foreach (var val in listTableSubHeader)
            {
                string StrColumnValue = string.Empty;
                double value;
                if (IsNumericKey)
                {
                    var ParticularColumnData = AllListData.Where(x => x.Key == val.Position.ToString() && x.Value != "" && x.Value != null && x.Value != BlankData).Select(x => x).ToArray();
                    if (ParticularColumnData.Length > 0)
                    {
                        StrColumnValue = ParticularColumnData.FirstOrDefault().Value;
                        IsNumericValue = double.TryParse(StrColumnValue, out value);
                        if (IsNumericValue)
                            val.DataType = "Double";
                        else
                            val.DataType = "String";
                    }

                }
                else
                {
                    var ParticularColumnData = AllListData.Where(x => x.Key == val.ColumnName && x.Value != "" && x.Value != null && x.Value != BlankData).Select(x => x).ToArray();
                    if (ParticularColumnData.Length > 0)
                    {
                        StrColumnValue = ParticularColumnData.FirstOrDefault().Value;
                        IsNumericValue = double.TryParse(StrColumnValue, out value);
                        if (IsNumericValue)
                            val.DataType = "Double";
                        else
                            val.DataType = "String";
                    }

                }
            }
            #endregion

            foreach (var item in listData)
            {
                if (item.LstKeyValuePair.Count() > 0)
                {
                    int value;
                    isNumeric = int.TryParse(item.LstKeyValuePair[0].Key, out value);
                }


                var dataRow = sheet.CreateRow(incr);
                sheet.GetRow(incr).HeightInPoints = 20;
                if (isNumeric == true)
                {
                    var cellValues = (from i in item.LstKeyValuePair
                                      from j in listTableSubHeader
                                      where i.Key.ToString() == j.Position.ToString()
                                      orderby j.Position
                                      select new
                                      {
                                          DataType = j.DataType,
                                          Value = i.Value
                                      }).ToArray();

                    for (int k = 0; k < cellValues.Length; k++)
                    {
                        var datacell = dataRow.CreateCell(k);
                        if (cellValues[k].DataType == "Double")
                        {
                            double OutVal;
                            if (cellValues[k].Value == "" || cellValues[k].Value == null || cellValues[k].Value == BlankData || !double.TryParse(cellValues[k].Value, out OutVal))
                            {
                                if (k > 0)
                                {
                                    datacell.SetCellValue(cellValues[k].Value);
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;
                                }
                                else
                                {
                                    datacell.SetCellValue(cellValues[k].Value);
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }

                            }
                            else
                            {
                                if (k > 0)
                                {
                                    datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;
                                }
                                else
                                {
                                    datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }

                            }

                        }
                        else
                        {
                            if (k > 0)
                            {
                                datacell.SetCellValue(cellValues[k].Value);
                                if (incr % 2 == 0)
                                    datacell.CellStyle = AllCellStyleEven;
                                else
                                    datacell.CellStyle = AllCellStyleOdd;
                            }
                            else
                            {
                                datacell.SetCellValue(cellValues[k].Value);
                                if (incr % 2 == 0)
                                    datacell.CellStyle = AllCellStyleFstColmEven;
                                else
                                    datacell.CellStyle = AllCellStyleFstColmOdd;
                            }

                        }
                    }
                    incr++;
                }
                else
                {
                    var cellValues = (from i in item.LstKeyValuePair
                                      from j in listTableSubHeader
                                      where i.Key == j.ColumnName
                                      orderby j.Position
                                      select new
                                      {
                                          DataType = j.DataType,
                                          Value = i.Value
                                      }).ToArray();

                    for (int k = 0; k < cellValues.Length; k++)
                    {
                        var datacell = dataRow.CreateCell(k);
                        if (cellValues[k].DataType == "Double")
                        {
                            double OutVal;
                            if (cellValues[k].Value == "" || cellValues[k].Value == null || cellValues[k].Value == BlankData || !double.TryParse(cellValues[k].Value, out OutVal))
                            {
                                if (k > 0)
                                {
                                    datacell.SetCellValue(cellValues[k].Value);
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;
                                }
                                else
                                {
                                    datacell.SetCellValue(cellValues[k].Value);
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;

                                }

                            }
                            else
                            {
                                if (k > 0)
                                {
                                    datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEvenDecFrmt;
                                    else
                                        datacell.CellStyle = AllCellStyleOddDec;
                                }
                                else
                                {
                                    datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }

                            }

                        }
                        else
                        {
                            if (k > 0)
                            {
                                datacell.SetCellValue(cellValues[k].Value);
                                if (incr % 2 == 0)
                                    datacell.CellStyle = AllCellStyleEven;
                                else
                                    datacell.CellStyle = AllCellStyleOdd;
                            }
                            else
                            {
                                datacell.SetCellValue(cellValues[k].Value);
                                if (incr % 2 == 0)
                                    datacell.CellStyle = AllCellStyleFstColmEven;
                                else
                                    datacell.CellStyle = AllCellStyleFstColmOdd;
                            }

                        }
                    }
                    incr++;
                }
            }
            #endregion

            for (int i = 0; i < listTableSubHeader.Count; i++)
                sheet.AutoSizeColumn(i);
            if (sheet.GetColumnWidth(0) < 11072)
                sheet.SetColumnWidth(0, 11072);

            #region Logo
            try
            {
                if (!string.IsNullOrEmpty(LogoPath))
                {
                    XSSFDrawing patriarch = (XSSFDrawing)sheet.CreateDrawingPatriarch();
                    XSSFClientAnchor anchor;
                    anchor = new XSSFClientAnchor(0, 0, 0, 255, 0, 0, 0, 3);
                    anchor.AnchorType = AnchorType.DontMoveAndResize;
                    XSSFPicture picture = (XSSFPicture)patriarch.CreatePicture(anchor, LoadImage(LogoPath, workbook, PictureType.PNG));
                    double x1 = .25;
                    double y1 = .75;
                    picture.Resize(x1, y1);
                    picture.LineStyle = LineStyle.None;
                }
            }
            catch (Exception ex)
            {
            }

            #endregion

            #region Source, Date As On and Report Generated On
            ICRArow = sheet.CreateRow(incr + 3);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrSource);

            ICRArow = sheet.CreateRow(incr + 4);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrDateAsOn);

            ICRArow = sheet.CreateRow(incr + 5);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrReportGeneratedOn);
            #endregion

            #region Sheet Two Logo
            try
            {
                if (!string.IsNullOrEmpty(LogoPath))
                {
                    XSSFDrawing patriarch = (XSSFDrawing)sheetTwo.CreateDrawingPatriarch();
                    XSSFClientAnchor anchor;
                    anchor = new XSSFClientAnchor(0, 0, 0, 255, 0, 0, 0, 3);
                    anchor.AnchorType = AnchorType.DontMoveAndResize;
                    XSSFPicture picture = (XSSFPicture)patriarch.CreatePicture(anchor, LoadImage(LogoPath, workbook, PictureType.PNG));
                    double x1 = 1.10;
                    double y1 = 1.10;
                    picture.Resize(x1, y1);
                    picture.LineStyle = LineStyle.None;
                }
            }
            catch (Exception ex)
            {
            }
            #endregion

            #region Disclaimer Sheet
            var Row = sheetTwo.CreateRow(1);
            var cellSheetTwo = Row.CreateCell(7);
            cellSheetTwo.SetCellValue("ICRA Analytics Limited");
            cellSheetTwo.CellStyle = HeaderStyle;

            Row = sheetTwo.CreateRow(4);
            ICell Cell;
            for (int i = 0; i < listTableSubHeader.Count; i++)
            {
                Cell = Row.CreateCell(i);

                XSSFCellStyle declationstyle = (XSSFCellStyle)workbook.CreateCellStyle();

                declationstyle.Alignment = HorizontalAlignment.Center;
                declationstyle.VerticalAlignment = VerticalAlignment.Top;
                declationstyle.WrapText = true;
                IFont declarationfnt = (XSSFFont)workbook.CreateFont();
                declarationfnt.FontName = "Calibri";
                declarationfnt.FontHeightInPoints = (short)11;
                declationstyle.SetFont(declarationfnt);
                Cell.SetCellValue(!string.IsNullOrEmpty(Footer) ? Footer : "All information contained herein is obtained by ICRA Analytics Limited from sources believed by it to be accurate and reliable. Because of the possibility of human or mechanical error as well as other factors, however, all information contained herein is provided 'AS IS' without warranty of any kind. ICRA Analytics adopts all necessary measures so that the information it uses is of sufficient quality and from sources ICRA Analytics considers to be reliable including, when appropriate, independent third-party sources. However, ICRA Analytics is not an auditor and cannot in every instance independently verify or validate information received in preparing this document." +
                    "All information contained herein must be construed solely as statements of opinion, and  ICRA Analytics Limited or its affiliates or group companies and its respective and any of its officers, directors, personnel and employees, disclaim liability to any loss, damage of any nature, including but not limited to direct, indirect, punitive, special, exemplary, consequential, as also any loss of profit in any way arising from the use of this document or its contents in any manner or for any contingency within or beyond the control of, ICRA Analytics or any of its directors, officers, employees, agents, representatives, licensors or suppliers, arising from or in connection with the information contained herein or the use of or inability to use any such information.Opinions expressed in the document are not the opinions of our holding company, ICRA Limited(ICRA), and should not be construed as any indication of credit rating or grading of ICRA for any instruments that have been issued or are to be issued by any entity.The recipient alone shall be fully responsible and / or are liable for any decision taken on the basis of this document and / or the information contained herein.");
                Cell.CellStyle = declationstyle;

            }
            NPOIWrite.CellMerged(sheetTwo, 4, 4, 0, 17);
            sheetTwo.GetRow(4).HeightInPoints = 200;
            #endregion

            #region Disclaimer Sheet HyperLink
            XSSFCellStyle HyperLinkStyle = (XSSFCellStyle)workbook.CreateCellStyle();
            IFont HyperLinkFont = workbook.CreateFont();
            HyperLinkFont.Color = IndexedColors.Orange.Index;
            HyperLinkFont.Underline = FontUnderlineType.Single;
            HyperLinkStyle.SetFont(HyperLinkFont);

            Row = sheetTwo.CreateRow(5);
            Cell = Row.CreateCell(0);
            Cell.SetCellValue("Click here for third-party disclaimers");
            XSSFCreationHelper createHelper = (XSSFCreationHelper)workbook.GetCreationHelper();
            XSSFHyperlink link = (XSSFHyperlink)createHelper.CreateHyperlink(HyperlinkType.Url);
            link.Address = "https://www.icraanalytics.com/home/thirdpartydisclaimers";
            Cell.Hyperlink = link;
            Cell.CellStyle = HyperLinkStyle;
            #endregion

            sheet.ActiveCell = new CellAddress(0, 1);

            var stream = new MemoryStream();
            workbook.Write(stream);
            return workbook;
        }

        public static NPOI.XSSF.UserModel.XSSFWorkbook ExportToExcelWorkBook(List<TableHeaderEntity> listTableHeaderSheetOne, List<TableHeaderEntity> listTableHeaderSheetTwo, List<ExportEntity> listDataSheetOne, List<ExportEntity> listDataSheetTwo, string strSheetNameOne, string strSheetNameTwo, string LogoPath = "", string Header = "", string Footer = "", string BlankData = "", string ReportName = "", int DecimalPoint = 4, string StrDateAsOn = "")
        {
            #region Variable
            string StrHeader1 = "ICRA Analytics Limited";
            string StrHeader2 = "107, Raheja Arcade, Sector-11, CBD Belapur";
            string StrHeader3 = Header;
            string StrReportName = ReportName;
            string StrSource = "Source: " + (string.IsNullOrEmpty(UserStatisticsEntity.SourceName) ? "MFI 360" : UserStatisticsEntity.SourceName);
            StrDateAsOn = "Data as on " + StrDateAsOn;
            string StrReportGeneratedOn = "Report Generated on " + DateTime.Now.ToString("dd-MMM-yyyy HH:mm:ss");
            var Paddding = new string('0', DecimalPoint);
            var DecimalFormat = "0." + Paddding;
            #endregion

            NPOI.XSSF.UserModel.XSSFWorkbook workbook = new NPOI.XSSF.UserModel.XSSFWorkbook();
            ISheet sheet = workbook.CreateSheet(strSheetNameOne);
            ISheet sheetTwo = workbook.CreateSheet(strSheetNameTwo);
            ISheet sheetDisclaimer = workbook.CreateSheet("Disclaimer");

            #region Excel Sheet Gridlines Delete
            sheet.DisplayGridlines = false;
            sheetTwo.DisplayGridlines = false;
            sheetDisclaimer.DisplayGridlines = false;
            #endregion

            #region Header Freeze
            sheet.CreateFreezePane(1, 6);
            sheetTwo.CreateFreezePane(1, 6);
            #endregion

            #region Cell Border added by Subrata on 27 Feb 2018
            XSSFCellStyle AllCellStyle = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyle.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyle.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyle.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyle.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            #endregion

            #region Cell Border for first column added by Subrata on 27 Feb 2018
            XSSFCellStyle AllCellStyleFstColm = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleFstColm.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColm.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColm.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColm.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            #endregion

            #region Set Font For Header1,Header2 and Header3
            XSSFCellStyle HeaderStyle = (XSSFCellStyle)workbook.CreateCellStyle();
            IFont Headerfont = workbook.CreateFont();
            Headerfont.Boldweight = (short)FontBoldWeight.Bold;
            HeaderStyle.SetFont(Headerfont);
            #endregion

            #region  Sheet1 Set Cell Value For Header1, Header2 and Header3
            var ICRArow = sheet.CreateRow(0);
            ICRArow.CreateCell(0);
            var ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader1);
            ICRACell.CellStyle = HeaderStyle;
            ICRArow = sheet.CreateRow(1);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader2);
            ICRACell.CellStyle = HeaderStyle;
            ICRArow = sheet.CreateRow(2);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader3);
            ICRACell.CellStyle = HeaderStyle;
            ICRACell.CellStyle.Alignment = HorizontalAlignment.Center;
            ICRArow = sheet.CreateRow(3);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.CellStyle = HeaderStyle;
            ICRACell.CellStyle.Alignment = HorizontalAlignment.Center;
            NPOIWrite.AutoFitColumn(sheet, 1);
            ICRACell.CellStyle = HeaderStyle;
            #endregion

            #region Sheet2 Set Cell Value For Header1, Header2 and Header3
            ICRArow = sheetTwo.CreateRow(0);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader1);
            ICRACell.CellStyle = HeaderStyle;
            ICRArow = sheetTwo.CreateRow(1);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader2);
            ICRACell.CellStyle = HeaderStyle;
            ICRArow = sheetTwo.CreateRow(2);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader3);
            ICRACell.CellStyle = HeaderStyle;
            ICRACell.CellStyle.Alignment = HorizontalAlignment.Center;
            ICRArow = sheetTwo.CreateRow(3);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.CellStyle = HeaderStyle;
            ICRACell.CellStyle.Alignment = HorizontalAlignment.Center;
            NPOIWrite.AutoFitColumn(sheetTwo, 1);
            ICRACell.CellStyle = HeaderStyle;
            #endregion

            #region Report Name Sheet One
            ICRArow = sheet.CreateRow(4);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrReportName);
            HeaderStyle.Alignment = HorizontalAlignment.Left;
            ICRACell.CellStyle = HeaderStyle;
            #endregion

            #region Report Name Sheet Two
            ICRArow = sheetTwo.CreateRow(4);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrReportName);
            HeaderStyle.Alignment = HorizontalAlignment.Left;
            ICRACell.CellStyle = HeaderStyle;
            #endregion

            #region Cell Style For Even Row

            #region Without DecimalFormat
            XSSFCellStyle AllCellStyleEven = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleEven.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillEven = new XSSFColor(new byte[] { 176, 196, 222 });
            AllCellStyleEven.SetFillForegroundColor(colorToFillEven);
            AllCellStyleEven.FillPattern = FillPattern.SolidForeground;
            AllCellStyleEven.Alignment = HorizontalAlignment.Center;
            AllCellStyleEven.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With Decimal Format
            XSSFCellStyle AllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            AllCellStyleEvenDecFrmt.SetFillForegroundColor(colorToFillEvenWtoutDec);
            AllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat formatEven = workbook.CreateDataFormat();
            AllCellStyleEvenDecFrmt.DataFormat = formatEven.GetFormat(DecimalFormat);
            AllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            AllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #endregion

            #region Cell Style For Odd Row

            #region With Decimal Format
            XSSFCellStyle AllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            AllCellStyleOddDec.SetFillForegroundColor(colorToFillOddDec);
            AllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat formatOddDec = workbook.CreateDataFormat();
            AllCellStyleOddDec.DataFormat = formatOddDec.GetFormat(DecimalFormat);
            AllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            AllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region Without Decimal Format
            XSSFCellStyle AllCellStyleOdd = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleOdd.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillOdd = new XSSFColor(new byte[] { 255, 255, 255 });
            AllCellStyleOdd.SetFillForegroundColor(colorToFillOdd);
            AllCellStyleOdd.FillPattern = FillPattern.SolidForeground;
            AllCellStyleOdd.Alignment = HorizontalAlignment.Center;
            AllCellStyleOdd.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #endregion

            #region Cell Style For First Column Even Row
            XSSFCellStyle AllCellStyleFstColmEven = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleFstColmEven.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillFstClmnEven = new XSSFColor(new byte[] { 176, 196, 222 });
            AllCellStyleFstColmEven.SetFillForegroundColor(colorToFillFstClmnEven);
            AllCellStyleFstColmEven.FillPattern = FillPattern.SolidForeground;
            AllCellStyleFstColmEven.Alignment = HorizontalAlignment.Left;
            AllCellStyleFstColmEven.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region Cell Style For First Column Odd Row
            XSSFCellStyle AllCellStyleFstColmOdd = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleFstColmOdd.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillFstClmnOdd = new XSSFColor(new byte[] { 255, 255, 255 });
            AllCellStyleFstColmOdd.SetFillForegroundColor(colorToFillFstClmnOdd);
            AllCellStyleFstColmOdd.FillPattern = FillPattern.SolidForeground;
            AllCellStyleFstColmOdd.Alignment = HorizontalAlignment.Left;
            AllCellStyleFstColmOdd.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region Header creation in the Excel
            var headerRow = sheet.CreateRow(5);
            sheet.GetRow(5).HeightInPoints = 30;
            var listHeaderFinal = listTableHeaderSheetOne.OrderBy(x => x.Position).ToList();
            for (int i = 0; i < listHeaderFinal.Count; i++)
            {
                var cell = headerRow.CreateCell(i);
                cell.SetCellValue(listHeaderFinal[i].ColumnName);
                NPOIWrite.AutoFitColumn(sheet, i);

                XSSFCellStyle style = (XSSFCellStyle)workbook.CreateCellStyle();
                XSSFColor colorToFill = new XSSFColor(new byte[] { 68, 114, 196 });//Color.Blue);
                style.SetFillForegroundColor(colorToFill);
                IFont font = workbook.CreateFont();
                font.Color = IndexedColors.White.Index;
                font.Boldweight = (short)FontBoldWeight.Bold;
                style.SetFont(font);
                style.FillPattern = FillPattern.SolidForeground;
                style.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                style.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                style.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                style.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                if (i > 0)
                {
                    style.Alignment = HorizontalAlignment.Center;
                    style.VerticalAlignment = VerticalAlignment.Center;
                }
                else
                {
                    style.Alignment = HorizontalAlignment.Left;
                    style.VerticalAlignment = VerticalAlignment.Center;
                }
                cell.CellStyle = style;
            }
            #endregion

            #region Value added to the Excel

            #region Added by Subrata on 27 Feb 2018
            bool IsNumericKey = false;
            bool IsNumericValue = false;
            var AllListData = listDataSheetOne.SelectMany(x => x.LstKeyValuePair).ToArray();
            var AllDataKey = AllListData.Select(x => x.Key).Distinct().ToArray();
            int ValueRes;
            IsNumericKey = int.TryParse(AllDataKey[0], out ValueRes);
            foreach (var val in listTableHeaderSheetOne)
            {
                string StrColumnValue = string.Empty;
                double value;
                if (IsNumericKey)
                {
                    var ParticularColumnData = AllListData.Where(x => x.Key == val.Position.ToString() && x.Value != "" && x.Value != null && x.Value != BlankData).Select(x => x).ToArray();
                    if (ParticularColumnData.Length > 0)
                    {
                        StrColumnValue = ParticularColumnData.FirstOrDefault().Value;
                        IsNumericValue = double.TryParse(StrColumnValue, out value);
                        if (IsNumericValue)
                            val.DataType = "Double";
                        else
                            val.DataType = "String";
                    }

                }
                else
                {
                    var ParticularColumnData = AllListData.Where(x => x.Key == val.ColumnName && x.Value != "" && x.Value != null && x.Value != BlankData).Select(x => x).ToArray();
                    if (ParticularColumnData.Length > 0)
                    {
                        StrColumnValue = ParticularColumnData.FirstOrDefault().Value;
                        IsNumericValue = double.TryParse(StrColumnValue, out value);
                        if (IsNumericValue)
                            val.DataType = "Double";
                        else
                            val.DataType = "String";
                    }
                }
            }
            #endregion

            int incr = 6;
            foreach (var item in listDataSheetOne)
            {
                var dataRow = sheet.CreateRow(incr);
                sheet.GetRow(incr).HeightInPoints = 20;
                var cellValues = (from i in item.LstKeyValuePair
                                  from j in listTableHeaderSheetOne
                                  where i.Key == j.ColumnName
                                  orderby j.Position
                                  select new
                                  {
                                      DataType = j.DataType,
                                      Value = i.Value
                                  }).ToArray();

                for (int k = 0; k < cellValues.Length; k++)
                {
                    var datacell = dataRow.CreateCell(k);
                    if (cellValues[k].DataType == "Double")
                    {
                        double OutVal;
                        if (cellValues[k].Value == "" || cellValues[k].Value == null || cellValues[k].Value == BlankData || !double.TryParse(cellValues[k].Value, out OutVal))
                        {
                            datacell.SetCellValue(cellValues[k].Value);
                            if (k > 0)
                            {
                                if (incr % 2 == 0)
                                    datacell.CellStyle = AllCellStyleEven;
                                else
                                    datacell.CellStyle = AllCellStyleOdd;
                            }
                            else
                            {
                                if (incr % 2 == 0)
                                    datacell.CellStyle = AllCellStyleFstColmEven;
                                else
                                    datacell.CellStyle = AllCellStyleFstColmOdd;
                            }

                        }
                        else
                        {
                            datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                            if (k > 0)
                            {
                                if (incr % 2 == 0)
                                    datacell.CellStyle = AllCellStyleEvenDecFrmt;
                                else
                                    datacell.CellStyle = AllCellStyleOddDec;
                            }
                            else
                            {
                                if (incr % 2 == 0)
                                    datacell.CellStyle = AllCellStyleFstColmEven;
                                else
                                    datacell.CellStyle = AllCellStyleFstColmOdd;
                            }

                        }

                    }
                    else
                    {
                        datacell.SetCellValue(cellValues[k].Value == "" ? "--" : cellValues[k].Value);
                        if (k > 0)
                        {
                            if (incr % 2 == 0)
                                datacell.CellStyle = AllCellStyleEven;
                            else
                                datacell.CellStyle = AllCellStyleOdd;
                        }
                        else
                        {
                            if (incr % 2 == 0)
                                datacell.CellStyle = AllCellStyleFstColmEven;
                            else
                                datacell.CellStyle = AllCellStyleFstColmOdd;
                        }

                    }
                }
                incr++;
            }
            #endregion

            #region Header creation in the Excel for sheet two
            var headerRowTwo = sheetTwo.CreateRow(5);
            sheetTwo.GetRow(5).HeightInPoints = 30;
            var listHeaderFinalSecond = listTableHeaderSheetTwo.OrderBy(x => x.Position).ToList();
            for (int i = 0; i < listHeaderFinalSecond.Count; i++)
            {
                var cell = headerRowTwo.CreateCell(i);
                cell.SetCellValue(listHeaderFinalSecond[i].ColumnName);
                NPOIWrite.AutoFitColumn(sheetTwo, i);

                XSSFCellStyle style = (XSSFCellStyle)workbook.CreateCellStyle();
                XSSFColor colorToFill = new XSSFColor(new byte[] { 68, 114, 196 });//Color.Blue);
                style.SetFillForegroundColor(colorToFill);
                IFont font = workbook.CreateFont();
                font.Color = IndexedColors.White.Index;
                font.Boldweight = (short)FontBoldWeight.Bold;
                style.SetFont(font);
                style.FillPattern = FillPattern.SolidForeground;
                style.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                style.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                style.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                style.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                if (i > 0)
                {
                    style.Alignment = HorizontalAlignment.Center;
                    style.VerticalAlignment = VerticalAlignment.Center;
                }
                else
                {
                    style.Alignment = HorizontalAlignment.Left;
                    style.VerticalAlignment = VerticalAlignment.Center;
                }
                cell.CellStyle = style;
            }
            #endregion

            #region Value added to the Excel for sheet two

            #region Added by Subrata on 27 Feb 2018
            bool IsNumericKeySheetTwo = false;
            bool IsNumericValueSheetTwo = false;
            var AllListDataSheetTwo = listDataSheetTwo.SelectMany(x => x.LstKeyValuePair).ToArray();
            var AllDataKeySheetTwo = AllListDataSheetTwo.Select(x => x.Key).Distinct().ToArray();
            int ValueResSheetTwo;
            IsNumericKeySheetTwo = int.TryParse(AllDataKeySheetTwo[0], out ValueResSheetTwo);
            foreach (var val in listTableHeaderSheetTwo)
            {
                string StrColumnValue = string.Empty;
                double value;
                if (IsNumericKeySheetTwo)
                {
                    var ParticularColumnData = AllListDataSheetTwo.Where(x => x.Key == val.Position.ToString() && x.Value != "" && x.Value != null && x.Value != BlankData).Select(x => x).ToArray();
                    if (ParticularColumnData.Length > 0)
                    {
                        StrColumnValue = ParticularColumnData.FirstOrDefault().Value;
                        IsNumericValueSheetTwo = double.TryParse(StrColumnValue, out value);
                        if (IsNumericValueSheetTwo)
                            val.DataType = "Double";
                        else
                            val.DataType = "String";
                    }

                }
                else
                {
                    var ParticularColumnData = AllListDataSheetTwo.Where(x => x.Key == val.ColumnName && x.Value != "" && x.Value != null && x.Value != BlankData).Select(x => x).ToArray();
                    if (ParticularColumnData.Length > 0)
                    {
                        StrColumnValue = ParticularColumnData.FirstOrDefault().Value;
                        IsNumericValueSheetTwo = double.TryParse(StrColumnValue, out value);
                        if (IsNumericValueSheetTwo)
                            val.DataType = "Double";
                        else
                            val.DataType = "String";
                    }
                }
            }
            #endregion

            int incrsecond = 6;
            bool isNumeric = false;
            foreach (var item in listDataSheetTwo)
            {
                if (item.LstKeyValuePair.Count() > 0)
                {
                    int value;
                    isNumeric = int.TryParse(item.LstKeyValuePair[0].Key, out value);
                }
                var dataRow = sheetTwo.CreateRow(incrsecond);
                sheetTwo.GetRow(incrsecond).HeightInPoints = 20;
                if (isNumeric == true)
                {
                    var cellValues = (from i in item.LstKeyValuePair
                                      from j in listTableHeaderSheetTwo
                                      where i.Key.ToString() == j.Position.ToString()
                                      orderby j.Position
                                      select new
                                      {
                                          DataType = j.DataType,
                                          Value = i.Value
                                      }).ToArray();

                    for (int k = 0; k < cellValues.Length; k++)
                    {
                        var datacell = dataRow.CreateCell(k);
                        if (cellValues[k].DataType == "Double")
                        {
                            double OutVal;
                            if (cellValues[k].Value == "" || cellValues[k].Value == null || cellValues[k].Value == BlankData || !double.TryParse(cellValues[k].Value, out OutVal))
                            {
                                datacell.SetCellValue(cellValues[k].Value);
                                if (k > 0)
                                {
                                    if (incrsecond % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;
                                }
                                else
                                {
                                    if (incrsecond % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }

                            }
                            else
                            {
                                datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                                if (k > 0)
                                {
                                    if (incrsecond % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEvenDecFrmt;
                                    else
                                        datacell.CellStyle = AllCellStyleOddDec;
                                }
                                else
                                {
                                    if (incrsecond % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }

                            }

                        }
                        else
                        {
                            datacell.SetCellValue(cellValues[k].Value == "" ? "--" : cellValues[k].Value);
                            if (k > 0)
                            {
                                if (incrsecond % 2 == 0)
                                    datacell.CellStyle = AllCellStyleEven;
                                else
                                    datacell.CellStyle = AllCellStyleOdd;

                            }
                            else
                            {
                                if (incrsecond % 2 == 0)
                                    datacell.CellStyle = AllCellStyleFstColmEven;
                                else
                                    datacell.CellStyle = AllCellStyleFstColmOdd;
                            }

                        }
                    }
                    incrsecond++;
                }
                else
                {
                    var cellValues = (from i in item.LstKeyValuePair
                                      from j in listTableHeaderSheetTwo
                                      where i.Key == j.ColumnName
                                      orderby j.Position
                                      select new
                                      {
                                          DataType = j.DataType,
                                          Value = i.Value
                                      }).ToArray();



                    for (int k = 0; k < cellValues.Length; k++)
                    {
                        var datacell = dataRow.CreateCell(k);
                        if (cellValues[k].DataType == "Double")
                        {
                            if (cellValues[k].Value == "" || cellValues[k].Value == null || cellValues[k].Value == BlankData)
                            {
                                datacell.SetCellValue(cellValues[k].Value);
                                if (k > 0)
                                {
                                    if (incrsecond % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;
                                }
                                else
                                {
                                    if (incrsecond % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }

                            }
                            else
                            {
                                datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                                if (k > 0)
                                {
                                    if (incrsecond % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEvenDecFrmt;
                                    else
                                        datacell.CellStyle = AllCellStyleOddDec;
                                }
                                else
                                {
                                    if (incrsecond % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }

                            }

                        }
                        else
                        {
                            datacell.SetCellValue(cellValues[k].Value == "" ? "--" : cellValues[k].Value);
                            if (k > 0)
                            {
                                if (incrsecond % 2 == 0)
                                    datacell.CellStyle = AllCellStyleEven;
                                else
                                    datacell.CellStyle = AllCellStyleOdd;
                            }
                            else
                            {
                                if (incrsecond % 2 == 0)
                                    datacell.CellStyle = AllCellStyleFstColmEven;
                                else
                                    datacell.CellStyle = AllCellStyleFstColmOdd;
                            }

                        }
                    }
                    incrsecond++;
                }
            }
            #endregion

            for (int i = 0; i < listHeaderFinal.Count; i++)
                sheet.AutoSizeColumn(i);
            if (sheet.GetColumnWidth(0) < 11072)
                sheet.SetColumnWidth(0, 11072);

            #region Sheet1 Logo
            try
            {
                if (!string.IsNullOrEmpty(LogoPath))
                {
                    XSSFDrawing patriarch = (XSSFDrawing)sheet.CreateDrawingPatriarch();
                    XSSFClientAnchor anchor;
                    anchor = new XSSFClientAnchor(0, 0, 0, 255, 0, 0, 0, 3);
                    anchor.AnchorType = AnchorType.DontMoveAndResize;
                    XSSFPicture picture = (XSSFPicture)patriarch.CreatePicture(anchor, LoadImage(LogoPath, workbook, PictureType.PNG));
                    double x1 = .25;
                    double y1 = .75;
                    picture.Resize(x1, y1);
                    picture.LineStyle = LineStyle.None;
                }
            }
            catch (Exception Ex)
            {

            }
            #endregion

            for (int i = 0; i < listHeaderFinalSecond.Count; i++)
                sheetTwo.AutoSizeColumn(i);
            if (sheetTwo.GetColumnWidth(0) < 11072)
                sheetTwo.SetColumnWidth(0, 11072);

            #region Sheet2 Logo
            try
            {
                if (!string.IsNullOrEmpty(LogoPath))
                {
                    XSSFDrawing patriarch = (XSSFDrawing)sheetTwo.CreateDrawingPatriarch();
                    XSSFClientAnchor anchor;
                    anchor = new XSSFClientAnchor(0, 0, 0, 255, 0, 0, 0, 3);
                    anchor.AnchorType = AnchorType.DontMoveAndResize;
                    XSSFPicture picture = (XSSFPicture)patriarch.CreatePicture(anchor, LoadImage(LogoPath, workbook, PictureType.PNG));
                    double x1 = .25;
                    double y1 = .75;
                    picture.Resize(x1, y1);
                    picture.LineStyle = LineStyle.None;
                }
            }
            catch (Exception ex)
            {

            }

            #endregion

            #region Disclaimer Sheet Logo
            try
            {
                if (!string.IsNullOrEmpty(LogoPath))
                {
                    XSSFDrawing patriarch = (XSSFDrawing)sheetDisclaimer.CreateDrawingPatriarch();
                    XSSFClientAnchor anchor;
                    anchor = new XSSFClientAnchor(0, 0, 0, 255, 0, 0, 0, 3);
                    anchor.AnchorType = AnchorType.DontMoveAndResize;
                    XSSFPicture picture = (XSSFPicture)patriarch.CreatePicture(anchor, LoadImage(LogoPath, workbook, PictureType.PNG));
                    double x1 = 1.10;
                    double y1 = 1.10;
                    picture.Resize(x1, y1);
                    picture.LineStyle = LineStyle.None;
                }
            }
            catch (Exception ex)
            {

            }

            #endregion

            #region Sheet1 Source, Date As On and Report Generated On
            ICRArow = sheet.CreateRow(incr + 3);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrSource);

            ICRArow = sheet.CreateRow(incr + 4);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrDateAsOn);

            ICRArow = sheet.CreateRow(incr + 5);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrReportGeneratedOn);
            #endregion

            #region Sheet2 Source, Date As On and Report Generated On
            ICRArow = sheetTwo.CreateRow(incrsecond + 3);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrSource);

            ICRArow = sheetTwo.CreateRow(incrsecond + 4);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrDateAsOn);

            ICRArow = sheetTwo.CreateRow(incrsecond + 5);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrReportGeneratedOn);
            #endregion

            #region Disclaimer Sheet
            var Row = sheetDisclaimer.CreateRow(1);
            var cellSheetTwo = Row.CreateCell(7);
            cellSheetTwo.SetCellValue(StrHeader1);
            cellSheetTwo.CellStyle = HeaderStyle;

            Row = sheetDisclaimer.CreateRow(4);
            ICell Cell;
            for (int i = 0; i < listHeaderFinalSecond.Count; i++)
            {
                Cell = Row.CreateCell(i);

                XSSFCellStyle declationstyle = (XSSFCellStyle)workbook.CreateCellStyle();

                declationstyle.Alignment = HorizontalAlignment.Center;
                declationstyle.VerticalAlignment = VerticalAlignment.Top;
                declationstyle.WrapText = true;
                IFont declarationfnt = (XSSFFont)workbook.CreateFont();
                declarationfnt.FontName = "Calibri";
                declarationfnt.FontHeightInPoints = (short)11;
                declationstyle.SetFont(declarationfnt);
                Cell.SetCellValue(Footer);
                Cell.CellStyle = declationstyle;
            }
            #endregion

            #region Disclaimer Sheet HyperLink
            XSSFCellStyle HyperLinkStyle = (XSSFCellStyle)workbook.CreateCellStyle();
            IFont HyperLinkFont = workbook.CreateFont();
            HyperLinkFont.Color = IndexedColors.Orange.Index;
            HyperLinkFont.Underline = FontUnderlineType.Single;
            HyperLinkStyle.SetFont(HyperLinkFont);

            Row = sheetDisclaimer.CreateRow(5);
            Cell = Row.CreateCell(0);
            Cell.SetCellValue("Click here for third-party disclaimers");
            XSSFCreationHelper createHelper = (XSSFCreationHelper)workbook.GetCreationHelper();
            XSSFHyperlink link = (XSSFHyperlink)createHelper.CreateHyperlink(HyperlinkType.Url);
            link.Address = "https://www.icraanalytics.com/home/thirdpartydisclaimers";
            Cell.Hyperlink = link;
            Cell.CellStyle = HyperLinkStyle;
            #endregion

            NPOIWrite.CellMerged(sheetDisclaimer, 4, 4, 0, 17);
            sheetDisclaimer.GetRow(4).HeightInPoints = 200;
            sheetDisclaimer.ActiveCell = new CellAddress(0, 1);

            var stream = new MemoryStream();
            workbook.Write(stream);
            return workbook;
        }
        public static NPOI.XSSF.Streaming.SXSSFWorkbook ExportToExcelWorkBookWithNumberDecimalFormatLargeDataSet(UserBasicSettings ubs, List<TableHeaderEntity> listTableHeader, List<ExportEntity> listData, string LogoPath = "", string ReportName = "", string StrDateAsOn = "")
        {

            #region Variable
            string Header = ubs.Reporting_Format_Header;
            string Footer = ubs.Reporting_Format_Footer;
            string BlankData = ubs.BlankData == null ? "BLANK" : ubs.BlankData.ToUpper() == "BLANK" ? "" : ubs.BlankData;

            string StrHeader1 = "ICRA Analytics Limited";
            string StrHeader2 = "3rd Floor, Electric Mansion,Appasaheb Marathe Marg, Prabhadevi,Mumbai - 400 025 Maharashtra, India";
            string StrHeader3 = Header; //"Mumbai, Maharashtra 400093, IN";
            string StrReportName = ReportName;
            string StrSource = "Source: " + (string.IsNullOrEmpty(UserStatisticsEntity.SourceName) ? "MFI 360" : UserStatisticsEntity.SourceName);
            StrDateAsOn = "Data as on " + StrDateAsOn;
            string StrReportGeneratedOn = "Report Generated on " + DateTime.Now.ToString("dd-MMM-yyyy HH:mm:ss");

            #region number and decimal variable for AUM
            var aumPaddding = new string('0', (int)ubs.AUMDecimalFormat);
            var aumDecimalFormat = "0." + aumPaddding;
            string aumNUMBERFORMAT = ubs.NumberFormat;
            var aumNumberFormat = aumNUMBERFORMAT.Replace("0", "#");
            string aumNumberDecimalFormat = aumNumberFormat + "0." + new String('0', (int)ubs.AUMDecimalFormat);
            #endregion

            #region number and decimal variable for return
            var retPaddding = new string('0', (int)ubs.ReturnDecimalFormat);
            var retDecimalFormat = "0." + retPaddding;
            string retNUMBERFORMAT = ubs.NumberFormat;
            var retNumberFormat = retNUMBERFORMAT.Replace("0", "#");
            string retNumberDecimalFormat = retNumberFormat + "0." + new String('0', (int)ubs.ReturnDecimalFormat);
            #endregion

            #region number and decimal variable for NAV
            var navPaddding = new string('0', (int)ubs.NavDecimalFormat);
            var navDecimalFormat = "0." + navPaddding;
            string navNUMBERFORMAT = ubs.NumberFormat;
            var navNumberFormat = navNUMBERFORMAT.Replace("0", "#");
            string navNumberDecimalFormat = navNumberFormat + "0." + new String('0', (int)ubs.NavDecimalFormat);
            #endregion


            #region number and decimal variable for Other
            var othPaddding = new string('0', (int)ubs.OtherDecimal);
            var othDecimalFormat = "0." + othPaddding;
            string othNUMBERFORMAT = ubs.NumberFormat;
            var othNumberFormat = othNUMBERFORMAT.Replace("0", "#");
            string othNumberDecimalFormat = othNumberFormat + "0." + new String('0', (int)ubs.OtherDecimal);
            #endregion

            #region number and decimal variable for Ratio
            var ratioPaddding = new string('0', (int)ubs.RatioDecimalFormat);
            var ratioDecimalFormat = "0." + ratioPaddding;
            string ratioNUMBERFORMAT = ubs.NumberFormat;
            var ratioNumberFormat = ratioNUMBERFORMAT.Replace("0", "#");
            string ratioNumberDecimalFormat = ratioNumberFormat + "0." + new String('0', (int)ubs.RatioDecimalFormat);
            #endregion
            #region int Format with out Decimal
            var intNumberWithoutDecimalFormat = ubs.NumberFormat.Replace("0", "#");
            #endregion
            #endregion

            SXSSFWorkbook workbook = new NPOI.XSSF.Streaming.SXSSFWorkbook(SXSSFWorkbook.DEFAULT_WINDOW_SIZE);

            ISheet sheet = workbook.CreateSheet("Output");
            ISheet sheetTwo = workbook.CreateSheet("Disclaimer");
            #region Excel Sheet Gridlines Delete
            sheet.DisplayGridlines = false;
            sheetTwo.DisplayGridlines = false;
            #endregion
            //((SXSSFSheet)sheet).FlushRows();
            #region Header Freeze
            sheet.CreateFreezePane(1, 6);
            #endregion

            #region Set Font For Header1,Header2 and Header3
            XSSFCellStyle HeaderStyle = (XSSFCellStyle)workbook.CreateCellStyle();
            IFont Headerfont = workbook.CreateFont();
            Headerfont.Boldweight = (short)FontBoldWeight.Bold;
            HeaderStyle.SetFont(Headerfont);
            #endregion

            #region Set Cell Value For Header1, Header2 and Header3
            var ICRArow = sheet.CreateRow(0);
            ICRArow.CreateCell(0);
            NPOIWrite.CellMerged(sheet, 0, 0, 1, 9);
            var ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader1);
            ICRACell.CellStyle = HeaderStyle;
            ICRArow = sheet.CreateRow(1);
            ICRArow.CreateCell(0);
            NPOIWrite.CellMerged(sheet, 1, 1, 1, 9);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader2);
            ICRACell.CellStyle = HeaderStyle;
            ICRArow = sheet.CreateRow(2);
            ICRArow.CreateCell(0);
            NPOIWrite.CellMerged(sheet, 2, 2, 1, 9);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader3);
            ICRACell.CellStyle = HeaderStyle;
            ICRACell.CellStyle.Alignment = HorizontalAlignment.Center;
            ICRArow = sheet.CreateRow(3);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.CellStyle.Alignment = HorizontalAlignment.Center;
            NPOIWrite.AutoFitColumn(sheet, 1);
            ICRACell.CellStyle = HeaderStyle;
            #endregion

            #region Report Name
            ICRArow = sheet.CreateRow(4);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrReportName);
            HeaderStyle.Alignment = HorizontalAlignment.Left;
            ICRACell.CellStyle = HeaderStyle;
            #endregion

            #region Header creation in the Excel
            var headerRow = sheet.CreateRow(5);
            sheet.GetRow(5).HeightInPoints = 30;
            var listHeaderFinal = listTableHeader.OrderBy(x => x.Position).ToList();
            ((SXSSFSheet)sheet).TrackAllColumnsForAutoSizing();
            for (int i = 0; i < listHeaderFinal.Count; i++)
            {
                var cell = headerRow.CreateCell(i);
                cell.SetCellValue(listHeaderFinal[i].ColumnName);
                //NPOIWrite.AutoFitColumn(sheet, i);
                #region Commented by Subrata on 21 Feb 2018
                //ICellStyle CellStyle = workbook.CreateCellStyle();
                //CellStyle = workbook.CreateCellStyle();
                //CellStyle.FillBackgroundColor = IndexedColors.Blue.Index;
                #endregion

                #region Added by Subrata on 21 Feb 2018
                XSSFCellStyle style = (XSSFCellStyle)workbook.CreateCellStyle();
                XSSFColor colorToFill = new XSSFColor(new byte[] { 68, 114, 196 });//{ 51, 204, 204 }//Color.Blue);
                style.SetFillForegroundColor(colorToFill);
                IFont font = workbook.CreateFont();
                font.Color = IndexedColors.White.Index;
                font.Boldweight = (short)FontBoldWeight.Bold;
                style.SetFont(font);
                style.FillPattern = FillPattern.SolidForeground;
                style.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                style.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                style.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                style.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                if (i > 0)
                {
                    style.Alignment = HorizontalAlignment.Center;
                    style.VerticalAlignment = VerticalAlignment.Center;
                }
                else
                {
                    //style.Alignment = HorizontalAlignment.Left;
                    style.Alignment = (string.IsNullOrEmpty(listHeaderFinal[i].TextAlign) || listHeaderFinal[i].TextAlign == EnumTextAlign.left.ToString()) ? HorizontalAlignment.Left
                        : listHeaderFinal[i].TextAlign == EnumTextAlign.center.ToString() ? HorizontalAlignment.Center : HorizontalAlignment.Right;
                    style.VerticalAlignment = VerticalAlignment.Center;
                }
                #endregion

                cell.CellStyle = style;

            }
            #endregion

            #region Cell Style For Even Row

            #region With DecimalFormat AUM
            XSSFCellStyle aumAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor aumcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            aumAllCellStyleEvenDecFrmt.SetFillForegroundColor(aumcolorToFillEvenWtoutDec);
            aumAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat aumformatEven = workbook.CreateDataFormat();
            aumAllCellStyleEvenDecFrmt.DataFormat = aumformatEven.GetFormat(aumDecimalFormat);
            aumAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            /// Number Format ////
            XSSFCellStyle aumAllCellStyleEvenDecFrmtWNum = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleEvenDecFrmtWNum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmtWNum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmtWNum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmtWNum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor aumcolorToFillEvenWtoutDecWNum = new XSSFColor(new byte[] { 176, 196, 222 });
            aumAllCellStyleEvenDecFrmtWNum.SetFillForegroundColor(aumcolorToFillEvenWtoutDecWNum);
            aumAllCellStyleEvenDecFrmtWNum.FillPattern = FillPattern.SolidForeground;
            IDataFormat aumformatEvenWNum = workbook.CreateDataFormat();
            aumAllCellStyleEvenDecFrmtWNum.DataFormat = aumformatEvenWNum.GetFormat(aumNumberDecimalFormat);
            aumAllCellStyleEvenDecFrmtWNum.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleEvenDecFrmtWNum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Return
            XSSFCellStyle retAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            retAllCellStyleEvenDecFrmt.SetFillForegroundColor(retcolorToFillEvenWtoutDec);
            retAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatEven = workbook.CreateDataFormat();
            retAllCellStyleEvenDecFrmt.DataFormat = retformatEven.GetFormat(retDecimalFormat);
            retAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            retAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;


            ////Number Format ////
            XSSFCellStyle retAllCellStyleEvenDecFrmtWnum = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleEvenDecFrmtWnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmtWnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmtWnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmtWnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillEvenWtoutDecWnum = new XSSFColor(new byte[] { 176, 196, 222 });
            retAllCellStyleEvenDecFrmtWnum.SetFillForegroundColor(retcolorToFillEvenWtoutDecWnum);
            retAllCellStyleEvenDecFrmtWnum.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatEvenWnum = workbook.CreateDataFormat();
            retAllCellStyleEvenDecFrmtWnum.DataFormat = retformatEvenWnum.GetFormat(retNumberDecimalFormat);
            retAllCellStyleEvenDecFrmtWnum.Alignment = HorizontalAlignment.Center;
            retAllCellStyleEvenDecFrmtWnum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Nav
            XSSFCellStyle navAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor navcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            navAllCellStyleEvenDecFrmt.SetFillForegroundColor(navcolorToFillEvenWtoutDec);
            navAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat navformatEven = workbook.CreateDataFormat();
            navAllCellStyleEvenDecFrmt.DataFormat = navformatEven.GetFormat(navDecimalFormat);
            navAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            navAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;


            /// Number Format ////
            XSSFCellStyle navAllCellStyleEvenDecFrmtWnnum = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleEvenDecFrmtWnnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmtWnnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmtWnnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmtWnnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor navcolorToFillEvenWtoutDecWnnum = new XSSFColor(new byte[] { 176, 196, 222 });
            navAllCellStyleEvenDecFrmtWnnum.SetFillForegroundColor(navcolorToFillEvenWtoutDecWnnum);
            navAllCellStyleEvenDecFrmtWnnum.FillPattern = FillPattern.SolidForeground;
            IDataFormat navformatEvenWnnum = workbook.CreateDataFormat();
            navAllCellStyleEvenDecFrmtWnnum.DataFormat = navformatEvenWnnum.GetFormat(navNumberDecimalFormat);
            navAllCellStyleEvenDecFrmtWnnum.Alignment = HorizontalAlignment.Center;
            navAllCellStyleEvenDecFrmtWnnum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Other
            XSSFCellStyle otherAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            otherAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othercolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            otherAllCellStyleEvenDecFrmt.SetFillForegroundColor(othercolorToFillEvenWtoutDec);
            otherAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat otherformatEven = workbook.CreateDataFormat();
            otherAllCellStyleEvenDecFrmt.DataFormat = otherformatEven.GetFormat(othDecimalFormat);
            otherAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            otherAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            /// Number Format ///
            XSSFCellStyle otherAllCellStyleEvenDecFrmtWnum = (XSSFCellStyle)workbook.CreateCellStyle();
            otherAllCellStyleEvenDecFrmtWnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmtWnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmtWnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmtWnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othercolorToFillEvenWtoutDecWnum = new XSSFColor(new byte[] { 176, 196, 222 });
            otherAllCellStyleEvenDecFrmtWnum.SetFillForegroundColor(othercolorToFillEvenWtoutDecWnum);
            otherAllCellStyleEvenDecFrmtWnum.FillPattern = FillPattern.SolidForeground;
            IDataFormat otherformatEvenWnum = workbook.CreateDataFormat();
            otherAllCellStyleEvenDecFrmtWnum.DataFormat = otherformatEvenWnum.GetFormat(othNumberDecimalFormat);
            otherAllCellStyleEvenDecFrmtWnum.Alignment = HorizontalAlignment.Center;
            otherAllCellStyleEvenDecFrmtWnum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Ratio
            XSSFCellStyle ratAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor ratcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            ratAllCellStyleEvenDecFrmt.SetFillForegroundColor(ratcolorToFillEvenWtoutDec);
            ratAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat ratformatEven = workbook.CreateDataFormat();
            ratAllCellStyleEvenDecFrmt.DataFormat = ratformatEven.GetFormat(ratioDecimalFormat);
            ratAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle ratAllCellStyleEvenDecFrmtWth = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleEvenDecFrmtWth.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmtWth.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmtWth.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmtWth.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor ratcolorToFillEvenWtoutDecwth = new XSSFColor(new byte[] { 176, 196, 222 });
            ratAllCellStyleEvenDecFrmtWth.SetFillForegroundColor(ratcolorToFillEvenWtoutDecwth);
            ratAllCellStyleEvenDecFrmtWth.FillPattern = FillPattern.SolidForeground;
            IDataFormat ratformatEvenWth = workbook.CreateDataFormat();
            ratAllCellStyleEvenDecFrmtWth.DataFormat = ratformatEvenWth.GetFormat(ratioNumberDecimalFormat);
            ratAllCellStyleEvenDecFrmtWth.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleEvenDecFrmtWth.VerticalAlignment = VerticalAlignment.Center;
            #endregion


            #region No Format
            XSSFCellStyle AllCellStyleEven = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleEven.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillEven = new XSSFColor(new byte[] { 176, 196, 222 });
            AllCellStyleEven.SetFillForegroundColor(colorToFillEven);
            AllCellStyleEven.FillPattern = FillPattern.SolidForeground;
            AllCellStyleEven.Alignment = HorizontalAlignment.Center;
            AllCellStyleEven.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #endregion

            #region Cell Style For Odd Row

            #region With Decimal Format AUM
            XSSFCellStyle aumAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor AUMcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            aumAllCellStyleOddDec.SetFillForegroundColor(AUMcolorToFillOddDec);
            aumAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat AUMformatOddDec = workbook.CreateDataFormat();
            aumAllCellStyleOddDec.DataFormat = AUMformatOddDec.GetFormat(aumDecimalFormat);
            aumAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle aumAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor AUMcolorToFillOddDecWnf = new XSSFColor(new byte[] { 255, 255, 255 });
            aumAllCellStyleOddDecWnuf.SetFillForegroundColor(AUMcolorToFillOddDecWnf);
            aumAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat AUMformatOddDecWnuf = workbook.CreateDataFormat();
            aumAllCellStyleOddDecWnuf.DataFormat = AUMformatOddDecWnuf.GetFormat(aumNumberDecimalFormat);
            aumAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With Decimal Format Return
            XSSFCellStyle retAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor RETcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            retAllCellStyleOddDec.SetFillForegroundColor(RETcolorToFillOddDec);
            retAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat RETformatOddDec = workbook.CreateDataFormat();
            retAllCellStyleOddDec.DataFormat = RETformatOddDec.GetFormat(retDecimalFormat);
            retAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            retAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle retAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor RETcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            retAllCellStyleOddDecWnuf.SetFillForegroundColor(RETcolorToFillOddDecWnuf);
            retAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat RETformatOddDecWnuf = workbook.CreateDataFormat();
            retAllCellStyleOddDecWnuf.DataFormat = RETformatOddDecWnuf.GetFormat(retNumberDecimalFormat);
            retAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            retAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With Decimal Format Nav
            XSSFCellStyle navAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor naVcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            navAllCellStyleOddDec.SetFillForegroundColor(naVcolorToFillOddDec);
            navAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat naVformatOddDec = workbook.CreateDataFormat();
            navAllCellStyleOddDec.DataFormat = naVformatOddDec.GetFormat(navDecimalFormat);
            navAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            navAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            XSSFCellStyle navAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor naVcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            navAllCellStyleOddDecWnuf.SetFillForegroundColor(naVcolorToFillOddDecWnuf);
            navAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat naVformatOddDecWnuf = workbook.CreateDataFormat();
            navAllCellStyleOddDecWnuf.DataFormat = naVformatOddDecWnuf.GetFormat(navNumberDecimalFormat);
            navAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            navAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion


            #region With Decimal Format Other
            XSSFCellStyle othAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            othAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            othAllCellStyleOddDec.SetFillForegroundColor(othcolorToFillOddDec);
            othAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat othformatOddDec = workbook.CreateDataFormat();
            othAllCellStyleOddDec.DataFormat = othformatOddDec.GetFormat(othDecimalFormat);
            othAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            othAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            XSSFCellStyle othAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            othAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            othAllCellStyleOddDecWnuf.SetFillForegroundColor(othcolorToFillOddDecWnuf);
            othAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat othformatOddDecWnuf = workbook.CreateDataFormat();
            othAllCellStyleOddDecWnuf.DataFormat = othformatOddDecWnuf.GetFormat(othNumberDecimalFormat);
            othAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            othAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion


            #region With Decimal Format ratio
            XSSFCellStyle ratAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            ratAllCellStyleOddDec.SetFillForegroundColor(retcolorToFillOddDec);
            ratAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatOddDec = workbook.CreateDataFormat();
            ratAllCellStyleOddDec.DataFormat = retformatOddDec.GetFormat(ratioDecimalFormat);
            ratAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            XSSFCellStyle ratAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            ratAllCellStyleOddDecWnuf.SetFillForegroundColor(retcolorToFillOddDecWnuf);
            ratAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatOddDecWnuf = workbook.CreateDataFormat();
            ratAllCellStyleOddDecWnuf.DataFormat = retformatOddDecWnuf.GetFormat(ratioNumberDecimalFormat);
            ratAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region No Format
            XSSFCellStyle AllCellStyleOdd = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleOdd.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillOdd = new XSSFColor(new byte[] { 255, 255, 255 });
            AllCellStyleOdd.SetFillForegroundColor(colorToFillOdd);
            AllCellStyleOdd.FillPattern = FillPattern.SolidForeground;
            AllCellStyleOdd.Alignment = HorizontalAlignment.Center;
            AllCellStyleOdd.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #endregion

            #region Cell Style For First Column Even Row
            XSSFCellStyle AllCellStyleFstColmEven = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleFstColmEven.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillFstClmnEven = new XSSFColor(new byte[] { 176, 196, 222 });
            AllCellStyleFstColmEven.SetFillForegroundColor(colorToFillFstClmnEven);
            AllCellStyleFstColmEven.FillPattern = FillPattern.SolidForeground;
            AllCellStyleFstColmEven.Alignment = HorizontalAlignment.Left;
            AllCellStyleFstColmEven.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region Cell Style For First Column Odd Row
            XSSFCellStyle AllCellStyleFstColmOdd = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleFstColmOdd.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillFstClmnOdd = new XSSFColor(new byte[] { 255, 255, 255 });
            AllCellStyleFstColmOdd.SetFillForegroundColor(colorToFillFstClmnOdd);
            AllCellStyleFstColmOdd.FillPattern = FillPattern.SolidForeground;
            AllCellStyleFstColmOdd.Alignment = HorizontalAlignment.Left;
            AllCellStyleFstColmOdd.VerticalAlignment = VerticalAlignment.Center;
            #endregion
            #region Without Decimal Number Format Even Row
            XSSFCellStyle intAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            intAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            intAllCellStyleEvenDecFrmt.SetFillForegroundColor(intcolorToFillEvenWtoutDec);
            intAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat intformatEven = workbook.CreateDataFormat();
            intAllCellStyleEvenDecFrmt.DataFormat = intformatEven.GetFormat(intNumberWithoutDecimalFormat);
            intAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            intAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle intSimpleAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            intSimpleAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intSimplecolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            intSimpleAllCellStyleEvenDecFrmt.SetFillForegroundColor(intSimplecolorToFillEvenWtoutDec);
            intSimpleAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            intSimpleAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            intSimpleAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;
            #endregion
            #region Without Decimal Number Format Odd Row
            XSSFCellStyle intAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            intAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            intAllCellStyleOddDec.SetFillForegroundColor(intcolorToFillOddDec);
            intAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat intformatOddDec = workbook.CreateDataFormat();
            intAllCellStyleOddDec.DataFormat = intformatOddDec.GetFormat(intNumberWithoutDecimalFormat);
            intAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            intAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle intSimpleAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            intSimpleAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intSimplecolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            intSimpleAllCellStyleOddDec.SetFillForegroundColor(intSimplecolorToFillOddDec);
            intSimpleAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            intSimpleAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            intSimpleAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;
            #endregion
            #region With DateTime format
            var DateTimeFormat = ubs.DateFormat;
            XSSFCellStyle DateTimeAllCellStyleEvenFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            DateTimeAllCellStyleEvenFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleEvenFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleEvenFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleEvenFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor DateTimecolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            DateTimeAllCellStyleEvenFrmt.SetFillForegroundColor(DateTimecolorToFillEvenWtoutDec);
            DateTimeAllCellStyleEvenFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat DateTimeformatEven = workbook.CreateDataFormat();
            DateTimeAllCellStyleEvenFrmt.DataFormat = DateTimeformatEven.GetFormat(DateTimeFormat);
            DateTimeAllCellStyleEvenFrmt.Alignment = HorizontalAlignment.Center;
            DateTimeAllCellStyleEvenFrmt.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle DateTimeAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            DateTimeAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor DateTimecolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            DateTimeAllCellStyleOddDec.SetFillForegroundColor(DateTimecolorToFillOddDec);
            DateTimeAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat DateTimeformatOddDec = workbook.CreateDataFormat();
            DateTimeAllCellStyleOddDec.DataFormat = DateTimeformatOddDec.GetFormat(DateTimeFormat);
            DateTimeAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            DateTimeAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            #endregion
            #region Value added to the Excel

            #region Added by Subrata on 22 Feb 2018
            bool IsNumericKey = false;
            bool IsNumericValue = false;
            var AllListData = listData.SelectMany(x => x.LstKeyValuePair).ToArray();
            var AllDataKey = AllListData.Select(x => x.Key).Distinct().ToArray();
            int ValueRes;
            IsNumericKey = int.TryParse(AllDataKey[0], out ValueRes);
            #endregion

            int incr = 6;
            bool isNumeric = false;
            foreach (var item in listData)
            {
                if (item.LstKeyValuePair.Count() > 0)
                {
                    int value;
                    isNumeric = int.TryParse(item.LstKeyValuePair[0].Key, out value);
                }
                var dataRow = sheet.CreateRow(incr);
                sheet.GetRow(incr).HeightInPoints = 20;
                if (isNumeric == true)
                {
                    var cellValues = (from i in item.LstKeyValuePair
                                      from j in listTableHeader
                                      where i.Key.ToString() == j.Position.ToString()
                                      orderby j.Position
                                      select new
                                      {
                                          IsNum = j.IsNumberFormatReq,
                                          DecType = j.DecFormatType,
                                          Value = i.Value,
                                          IsMixedType = j.IsMixedValueType,
                                          IsDateTimeStringMixedType = j.IsDateTimeStringMixedType,
                                          IsDateTimeType = j.IsDateTimeType,
                                      }).ToArray();
                    var IsEven = incr % 2 == 0;
                    for (int k = 0; k < cellValues.Length; k++)
                    {
                        var datacell = dataRow.CreateCell(k);
                        if (cellValues[k].DecType != DecimalFormatType.NoDecimalReq)
                        {
                            double OutVal;
                            if (string.IsNullOrEmpty(cellValues[k].Value) || cellValues[k].Value == BlankData || !double.TryParse(cellValues[k].Value, out OutVal))
                            {
                                datacell.SetCellValue(cellValues[k].Value);
                                if (k > 0)
                                {
                                    if (IsEven)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;

                                }
                                else
                                {
                                    if (IsEven)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }

                            }
                            else
                            {
                                datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));

                                if (k > 0)
                                {
                                    if (cellValues[k].DecType == DecimalFormatType.AUM)
                                    {
                                        if (IsEven)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {

                                                datacell.CellStyle = aumAllCellStyleEvenDecFrmtWNum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = aumAllCellStyleEvenDecFrmt;
                                            }
                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = aumAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = aumAllCellStyleOddDec;
                                            }
                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.NAV)
                                    {
                                        if (IsEven)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = navAllCellStyleEvenDecFrmtWnnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = navAllCellStyleEvenDecFrmt;
                                            }
                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = navAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = navAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.OTHER)
                                    {
                                        if (IsEven)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = otherAllCellStyleEvenDecFrmtWnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = otherAllCellStyleEvenDecFrmt;
                                            }
                                        }

                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = othAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {

                                                datacell.CellStyle = othAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.RATIO)
                                    {
                                        if (IsEven)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = ratAllCellStyleEvenDecFrmtWth;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = ratAllCellStyleEvenDecFrmt;
                                            }
                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = ratAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = ratAllCellStyleOddDec;
                                            }
                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.RETURN)
                                    {
                                        if (IsEven)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = retAllCellStyleEvenDecFrmtWnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = retAllCellStyleEvenDecFrmt;
                                            }

                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = retAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = retAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.IntegerWithOutDecimal)
                                    {
                                        if (IsEven)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = intAllCellStyleEvenDecFrmt;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = intSimpleAllCellStyleEvenDecFrmt;
                                            }

                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = intAllCellStyleOddDec;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = intSimpleAllCellStyleOddDec;
                                            }

                                        }
                                    }

                                }
                                else
                                {
                                    if (IsEven)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }

                            }

                        }
                        else
                        {
                            double OutVal;
                            if (double.TryParse(cellValues[k].Value, out OutVal) && !cellValues[k].IsMixedType)
                            {
                                datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                                if (k > 0)
                                {
                                    if (IsEven)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;

                                }
                                else
                                {
                                    if (IsEven)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }
                            }
                            else if (cellValues[k].IsDateTimeType)
                            {
                                DateTime OutValdt;
                                if (DateTime.TryParse(cellValues[k].Value, out OutValdt))
                                {
                                    datacell.SetCellValue(Convert.ToDateTime(cellValues[k].Value));
                                    if (IsEven)
                                        datacell.CellStyle = DateTimeAllCellStyleEvenFrmt;
                                    else
                                        datacell.CellStyle = DateTimeAllCellStyleOddDec;
                                }
                                else
                                {
                                    datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                    if (k > 0)
                                    {
                                        if (IsEven)
                                            datacell.CellStyle = AllCellStyleEven;
                                        else
                                            datacell.CellStyle = AllCellStyleOdd;

                                    }
                                    else
                                    {
                                        if (IsEven)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }
                                }
                            }
                            else if (cellValues[k].IsDateTimeStringMixedType)
                            {
                                DateTime OutValdt;
                                if (DateTime.TryParse(cellValues[k].Value, out OutValdt))
                                {
                                    datacell.SetCellValue(Convert.ToDateTime(cellValues[k].Value));
                                    if (IsEven)
                                        datacell.CellStyle = DateTimeAllCellStyleEvenFrmt;
                                    else
                                        datacell.CellStyle = DateTimeAllCellStyleOddDec;
                                }
                                else
                                {
                                    datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                    if (k > 0)
                                    {
                                        if (IsEven)
                                            datacell.CellStyle = AllCellStyleEven;
                                        else
                                            datacell.CellStyle = AllCellStyleOdd;

                                    }
                                    else
                                    {
                                        if (IsEven)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }
                                }
                            }
                            else
                            {
                                datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                if (k > 0)
                                {
                                    if (IsEven)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;

                                }
                                else
                                {
                                    if (IsEven)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }
                            }
                        }


                    }
                    incr++;
                }
                else
                {
                    var cellValues = (from i in item.LstKeyValuePair
                                      from j in listTableHeader
                                      where i.Key == j.ColumnName
                                      orderby j.Position
                                      select new
                                      {
                                          IsNum = j.IsNumberFormatReq,
                                          DecType = j.DecFormatType,
                                          IsMixedType = j.IsMixedValueType,
                                          IsDateTimeStringMixedType = j.IsDateTimeStringMixedType,
                                          IsDateTimeType = j.IsDateTimeType,
                                          Value = i.Value
                                      }).ToArray();

                    for (int k = 0; k < cellValues.Length; k++)
                    {
                        var datacell = dataRow.CreateCell(k);
                        if (cellValues[k].DecType != DecimalFormatType.NoDecimalReq)
                        {
                            double OutVal;
                            if (string.IsNullOrEmpty(cellValues[k].Value) || cellValues[k].Value == BlankData || !double.TryParse(cellValues[k].Value, out OutVal))
                            {
                                datacell.SetCellValue(cellValues[k].Value);
                                if (k > 0)
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;
                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }

                            }
                            else
                            {
                                datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                                if (k > 0)
                                {
                                    if (cellValues[k].DecType == DecimalFormatType.AUM)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {

                                                datacell.CellStyle = aumAllCellStyleEvenDecFrmtWNum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = aumAllCellStyleEvenDecFrmt;
                                            }
                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = aumAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = aumAllCellStyleOddDec;
                                            }
                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.NAV)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = navAllCellStyleEvenDecFrmtWnnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = navAllCellStyleEvenDecFrmt;
                                            }
                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = navAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = navAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.OTHER)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = otherAllCellStyleEvenDecFrmtWnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = otherAllCellStyleEvenDecFrmt;
                                            }
                                        }

                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = othAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {

                                                datacell.CellStyle = othAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.RATIO)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = ratAllCellStyleEvenDecFrmtWth;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = ratAllCellStyleEvenDecFrmt;
                                            }
                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = ratAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = ratAllCellStyleOddDec;
                                            }
                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.RETURN)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = retAllCellStyleEvenDecFrmtWnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = retAllCellStyleEvenDecFrmt;
                                            }

                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = retAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = retAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.IntegerWithOutDecimal)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = intAllCellStyleEvenDecFrmt;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = intSimpleAllCellStyleEvenDecFrmt;
                                            }

                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = intAllCellStyleOddDec;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = intSimpleAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }

                            }

                        }
                        else
                        {
                            double OutVal;
                            if (double.TryParse(cellValues[k].Value, out OutVal) && !cellValues[k].IsMixedType)
                            {
                                datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                                if (k > 0)
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;

                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }
                            }
                            else if (cellValues[k].IsDateTimeType)
                            {
                                DateTime OutValdt;
                                if (DateTime.TryParse(cellValues[k].Value, out OutValdt))
                                {
                                    datacell.SetCellValue(Convert.ToDateTime(cellValues[k].Value));
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = DateTimeAllCellStyleEvenFrmt;
                                    else
                                        datacell.CellStyle = DateTimeAllCellStyleOddDec;
                                }
                                else
                                {
                                    datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleEven;
                                        else
                                            datacell.CellStyle = AllCellStyleOdd;

                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }
                                }
                            }
                            else if (cellValues[k].IsDateTimeStringMixedType)
                            {
                                DateTime OutValdt;
                                if (DateTime.TryParse(cellValues[k].Value, out OutValdt))
                                {
                                    datacell.SetCellValue(Convert.ToDateTime(cellValues[k].Value));
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = DateTimeAllCellStyleEvenFrmt;
                                    else
                                        datacell.CellStyle = DateTimeAllCellStyleOddDec;
                                }
                                else
                                {
                                    datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleEven;
                                        else
                                            datacell.CellStyle = AllCellStyleOdd;

                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }
                                }
                            }
                            else
                            {
                                datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                if (k > 0)
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;

                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }
                            }
                        }


                    }
                    incr++;
                }

            }
            #endregion


            for (int i = 0; i < listTableHeader.Count; i++)
            {
                //((SXSSFSheet)sheet).TrackColumnForAutoSizing(i);
                ((SXSSFSheet)sheet).AutoSizeColumn(i);
            }
            if (sheet.GetColumnWidth(0) < 11072)
                sheet.SetColumnWidth(0, 11072);

            #region Logo
            try
            {
                //if (!string.IsNullOrEmpty(LogoPath))
                //{
                //	XSSFDrawing patriarch = (XSSFDrawing)sheet.CreateDrawingPatriarch();
                //	XSSFClientAnchor anchor;
                //	anchor = new XSSFClientAnchor(0, 0, 0, 255, 0, 0, 0, 3);
                //	anchor.AnchorType = AnchorType.DontMoveAndResize;
                //	XSSFPicture picture = (XSSFPicture)patriarch.CreatePicture(anchor, LoadImage(LogoPath, workbook, PictureType.PNG));
                //	double x1 = .25;
                //	double y1 = .75;
                //	picture.Resize(x1, y1);
                //	picture.LineStyle = LineStyle.None;
                //}
                if (!string.IsNullOrEmpty(LogoPath))
                {
                    var istream = new FileStream(LogoPath, FileMode.OpenOrCreate);
                    byte[] bytes = new byte[istream.Length];
                    // reading the data
                    istream.Read(bytes, 0, bytes.Length);
                    int pictureIdx = workbook.AddPicture(bytes, PictureType.PNG);
                    XSSFDrawing patriarch = (XSSFDrawing)sheet.CreateDrawingPatriarch();
                    XSSFClientAnchor anchor;
                    anchor = new XSSFClientAnchor(0, 0, 0, 255, 0, 0, 0, 3);
                    anchor.AnchorType = AnchorType.DontMoveAndResize;
                    XSSFPicture picture = (XSSFPicture)patriarch.CreatePicture(anchor, pictureIdx);
                    double x1 = .25;
                    double y1 = .75;
                    picture.Resize(x1, y1);
                    picture.LineStyle = LineStyle.None;
                    istream.Close();
                }
            }
            catch (Exception ex)
            {
            }

            #endregion

            #region Source, Date As On and Report Generated On
            ICRArow = sheet.CreateRow(incr + 3);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrSource);

            ICRArow = sheet.CreateRow(incr + 4);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrDateAsOn);

            ICRArow = sheet.CreateRow(incr + 5);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrReportGeneratedOn);
            #endregion

            #region Sheet Two Logo
            try
            {
                //if (!string.IsNullOrEmpty(LogoPath))
                //{
                //	XSSFDrawing patriarch = (XSSFDrawing)sheetTwo.CreateDrawingPatriarch();
                //	XSSFClientAnchor anchor;
                //	anchor = new XSSFClientAnchor(0, 0, 0, 255, 0, 0, 0, 3);
                //	anchor.AnchorType = AnchorType.DontMoveAndResize;
                //	XSSFPicture picture = (XSSFPicture)patriarch.CreatePicture(anchor, LoadImage(LogoPath, workbook, PictureType.PNG));
                //	double x1 = 1.10;
                //	double y1 = 1.10;
                //	picture.Resize(x1, y1);
                //	picture.LineStyle = LineStyle.None;
                //}
            }
            catch (Exception ex)
            {
            }
            #endregion

            #region Disclaimer Sheet
            var Row = sheetTwo.CreateRow(1);
            var cellSheetTwo = Row.CreateCell(7);
            cellSheetTwo.SetCellValue(StrHeader1);
            cellSheetTwo.CellStyle = HeaderStyle;

            Row = sheetTwo.CreateRow(4);
            ICell Cell;
            for (int i = 0; i < 17; i++)
            {
                Cell = Row.CreateCell(i);

                XSSFCellStyle declationstyle = (XSSFCellStyle)workbook.CreateCellStyle();

                declationstyle.Alignment = HorizontalAlignment.Left;
                declationstyle.VerticalAlignment = VerticalAlignment.Top;
                declationstyle.WrapText = true;
                IFont declarationfnt = (XSSFFont)workbook.CreateFont();
                //declarationfnt.Boldweight = (short)FontBoldWeight.Bold;
                declarationfnt.FontName = "Calibri";
                declarationfnt.FontHeightInPoints = (short)11;
                declationstyle.SetFont(declarationfnt);
                Cell.SetCellValue(!string.IsNullOrEmpty(Footer) ? Footer : "All information contained herein is obtained by ICRA Analytics Limited from sources believed by it to be accurate and reliable. Because of the possibility of human or mechanical error as well as other factors, however, all information contained herein is provided 'AS IS' without warranty of any kind. ICRA Analytics adopts all necessary measures so that the information it uses is of sufficient quality and from sources ICRA Analytics considers to be reliable including, when appropriate, independent third-party sources. However, ICRA Analytics is not an auditor and cannot in every instance independently verify or validate information received in preparing this document." +
                    "All information contained herein must be construed solely as statements of opinion, and  ICRA Analytics Limited or its affiliates or group companies and its respective and any of its officers, directors, personnel and employees, disclaim liability to any loss, damage of any nature, including but not limited to direct, indirect, punitive, special, exemplary, consequential, as also any loss of profit in any way arising from the use of this document or its contents in any manner or for any contingency within or beyond the control of, ICRA Analytics or any of its directors, officers, employees, agents, representatives, licensors or suppliers, arising from or in connection with the information contained herein or the use of or inability to use any such information.Opinions expressed in the document are not the opinions of our holding company, ICRA Limited(ICRA), and should not be construed as any indication of credit rating or grading of ICRA for any instruments that have been issued or are to be issued by any entity.The recipient alone shall be fully responsible and / or are liable for any decision taken on the basis of this document and / or the information contained herein.");
                Cell.CellStyle = declationstyle;

            }
            NPOIWrite.CellMerged(sheetTwo, 4, 4, 0, 17);
            sheetTwo.GetRow(4).HeightInPoints = 200;
            #endregion

            #region Disclaimer Sheet HyperLink
            XSSFCellStyle HyperLinkStyle = (XSSFCellStyle)workbook.CreateCellStyle();
            IFont HyperLinkFont = workbook.CreateFont();
            HyperLinkFont.Color = IndexedColors.Orange.Index;
            HyperLinkFont.Underline = FontUnderlineType.Single;
            HyperLinkStyle.SetFont(HyperLinkFont);

            Row = sheetTwo.CreateRow(5);
            Cell = Row.CreateCell(0);
            Cell.SetCellValue("Click here for third-party disclaimers");
            SXSSFCreationHelper createHelper = (SXSSFCreationHelper)workbook.GetCreationHelper();
            XSSFHyperlink link = (XSSFHyperlink)createHelper.CreateHyperlink(HyperlinkType.Url);
            link.Address = "https://www.icraanalytics.com/home/thirdpartydisclaimers";
            Cell.Hyperlink = link;
            Cell.CellStyle = HyperLinkStyle;
            #endregion

            sheet.ActiveCell = new CellAddress(0, 1);
            //var stream = new MemoryStream();
            //workbook.Write(stream);

            return workbook;
        }
        public static NPOI.XSSF.UserModel.XSSFWorkbook ExportToExcelWorkBookHistoriclNav(string TemplatePath, UserBasicSettings ubs, List<TableHeaderEntity> listTableHeader, List<ExportEntity> listData, string LogoPath = "", string ReportName = "", string StrDateAsOn = "")
        {

            #region Variable
            string Header = ubs.Reporting_Format_Header;
            string Footer = ubs.Reporting_Format_Footer;
            string BlankData = ubs.BlankData == null ? "BLANK" : ubs.BlankData.ToUpper() == "BLANK" ? "" : ubs.BlankData;

            string StrHeader1 = "ICRA Analytics Limited";
            string StrHeader2 = "3rd Floor, Electric Mansion,Appasaheb Marathe Marg, Prabhadevi,Mumbai - 400 025 Maharashtra, India";
            string StrHeader3 = Header; //"Mumbai, Maharashtra 400093, IN";
            string StrReportName = ReportName;
            string StrSource = "Source: " + (string.IsNullOrEmpty(UserStatisticsEntity.SourceName) ? "MFI 360" : UserStatisticsEntity.SourceName);
            StrDateAsOn = "Data as on " + StrDateAsOn;
            string StrReportGeneratedOn = "Report Generated on " + DateTime.Now.ToString("dd-MMM-yyyy HH:mm:ss");

            #region number and decimal variable for AUM
            var aumPaddding = new string('0', (int)ubs.AUMDecimalFormat);
            var aumDecimalFormat = "0." + aumPaddding;
            string aumNUMBERFORMAT = ubs.NumberFormat;
            var aumNumberFormat = aumNUMBERFORMAT.Replace("0", "#");
            string aumNumberDecimalFormat = aumNumberFormat + "0." + new String('0', (int)ubs.AUMDecimalFormat);
            #endregion

            #region number and decimal variable for return
            var retPaddding = new string('0', (int)ubs.ReturnDecimalFormat);
            var retDecimalFormat = "0." + retPaddding;
            string retNUMBERFORMAT = ubs.NumberFormat;
            var retNumberFormat = retNUMBERFORMAT.Replace("0", "#");
            string retNumberDecimalFormat = retNumberFormat + "0." + new String('0', (int)ubs.ReturnDecimalFormat);
            #endregion

            #region number and decimal variable for NAV
            var navPaddding = new string('0', (int)ubs.NavDecimalFormat);
            var navDecimalFormat = "0." + navPaddding;
            string navNUMBERFORMAT = ubs.NumberFormat;
            var navNumberFormat = navNUMBERFORMAT.Replace("0", "#");
            string navNumberDecimalFormat = navNumberFormat + "0." + new String('0', (int)ubs.NavDecimalFormat);
            #endregion


            #region number and decimal variable for Other
            var othPaddding = new string('0', (int)ubs.OtherDecimal);
            var othDecimalFormat = "0." + othPaddding;
            string othNUMBERFORMAT = ubs.NumberFormat;
            var othNumberFormat = othNUMBERFORMAT.Replace("0", "#");
            string othNumberDecimalFormat = othNumberFormat + "0." + new String('0', (int)ubs.OtherDecimal);
            #endregion

            #region number and decimal variable for Ratio
            var ratioPaddding = new string('0', (int)ubs.RatioDecimalFormat);
            var ratioDecimalFormat = "0." + ratioPaddding;
            string ratioNUMBERFORMAT = ubs.NumberFormat;
            var ratioNumberFormat = ratioNUMBERFORMAT.Replace("0", "#");
            string ratioNumberDecimalFormat = ratioNumberFormat + "0." + new String('0', (int)ubs.RatioDecimalFormat);
            #endregion
            #region int Format with out Decimal
            var intNumberWithoutDecimalFormat = ubs.NumberFormat.Replace("0", "#");
            #endregion
            #endregion

            NPOI.XSSF.UserModel.XSSFWorkbook workbook;
            using (FileStream file = new FileStream(TemplatePath, FileMode.OpenOrCreate, FileAccess.ReadWrite))
            {
                workbook = new XSSFWorkbook(OPCPackage.Open(file));
            }

            ISheet sheet = workbook.CreateSheet("Output");
            ISheet sheetTwo = workbook.CreateSheet("Disclaimer");

            #region Excel Sheet Gridlines Delete
            sheet.DisplayGridlines = false;
            sheetTwo.DisplayGridlines = false;
            #endregion

            #region Header Freeze
            sheet.CreateFreezePane(1, 6);
            #endregion

            #region Set Font For Header1,Header2 and Header3
            XSSFCellStyle HeaderStyle = (XSSFCellStyle)workbook.CreateCellStyle();
            IFont Headerfont = workbook.CreateFont();
            Headerfont.Boldweight = (short)FontBoldWeight.Bold;
            HeaderStyle.SetFont(Headerfont);
            #endregion

            #region Set Cell Value For Header1, Header2 and Header3
            var ICRArow = sheet.CreateRow(0);
            ICRArow.CreateCell(0);
            NPOIWrite.CellMerged(sheet, 0, 0, 1, 9);
            var ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader1);
            ICRACell.CellStyle = HeaderStyle;
            ICRArow = sheet.CreateRow(1);
            ICRArow.CreateCell(0);
            NPOIWrite.CellMerged(sheet, 1, 1, 1, 9);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader2);
            ICRACell.CellStyle = HeaderStyle;
            ICRArow = sheet.CreateRow(2);
            ICRArow.CreateCell(0);
            NPOIWrite.CellMerged(sheet, 2, 2, 1, 9);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader3);
            ICRACell.CellStyle = HeaderStyle;
            ICRACell.CellStyle.Alignment = HorizontalAlignment.Center;
            ICRArow = sheet.CreateRow(3);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.CellStyle.Alignment = HorizontalAlignment.Center;
            NPOIWrite.AutoFitColumn(sheet, 1);
            ICRACell.CellStyle = HeaderStyle;
            #endregion

            #region Report Name
            ICRArow = sheet.CreateRow(4);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrReportName);
            HeaderStyle.Alignment = HorizontalAlignment.Left;
            ICRACell.CellStyle = HeaderStyle;
            #endregion

            #region Header creation in the Excel
            var headerRow = sheet.CreateRow(5);
            sheet.GetRow(5).HeightInPoints = 30;
            var listHeaderFinal = listTableHeader.OrderBy(x => x.Position).ToList();
            for (int i = 0; i < listHeaderFinal.Count; i++)
            {
                var cell = headerRow.CreateCell(i);
                cell.SetCellValue(listHeaderFinal[i].ColumnName);
                NPOIWrite.AutoFitColumn(sheet, i);

                #region Commented by Subrata on 21 Feb 2018
                //ICellStyle CellStyle = workbook.CreateCellStyle();
                //CellStyle = workbook.CreateCellStyle();
                //CellStyle.FillBackgroundColor = IndexedColors.Blue.Index;
                #endregion

                #region Added by Subrata on 21 Feb 2018
                XSSFCellStyle style = (XSSFCellStyle)workbook.CreateCellStyle();
                XSSFColor colorToFill = new XSSFColor(new byte[] { 68, 114, 196 });//{ 51, 204, 204 }//Color.Blue);
                style.SetFillForegroundColor(colorToFill);
                IFont font = workbook.CreateFont();
                font.Color = IndexedColors.White.Index;
                font.Boldweight = (short)FontBoldWeight.Bold;
                style.SetFont(font);
                style.FillPattern = FillPattern.SolidForeground;
                style.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                style.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                style.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                style.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                if (i > 0)
                {
                    style.Alignment = HorizontalAlignment.Center;
                    style.VerticalAlignment = VerticalAlignment.Center;
                }
                else
                {
                    //style.Alignment = HorizontalAlignment.Left;
                    style.Alignment = (string.IsNullOrEmpty(listHeaderFinal[i].TextAlign) || listHeaderFinal[i].TextAlign == EnumTextAlign.left.ToString()) ? HorizontalAlignment.Left
                        : listHeaderFinal[i].TextAlign == EnumTextAlign.center.ToString() ? HorizontalAlignment.Center : HorizontalAlignment.Right;
                    style.VerticalAlignment = VerticalAlignment.Center;
                }
                #endregion

                cell.CellStyle = style;

            }
            #endregion

            #region Cell Style For Even Row

            #region With DecimalFormat AUM
            XSSFCellStyle aumAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor aumcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            aumAllCellStyleEvenDecFrmt.SetFillForegroundColor(aumcolorToFillEvenWtoutDec);
            aumAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat aumformatEven = workbook.CreateDataFormat();
            aumAllCellStyleEvenDecFrmt.DataFormat = aumformatEven.GetFormat(aumDecimalFormat);
            aumAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;
            //percentage format

            XSSFCellStyle cellStylePercentEven = (XSSFCellStyle)workbook.CreateCellStyle();
            cellStylePercentEven.DataFormat = HSSFDataFormat.GetBuiltinFormat("0.00%");
            cellStylePercentEven.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            cellStylePercentEven.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            cellStylePercentEven.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            cellStylePercentEven.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillFstClmnEvenpercent = new XSSFColor(new byte[] { 176, 196, 222 });
            cellStylePercentEven.SetFillForegroundColor(colorToFillFstClmnEvenpercent);
            cellStylePercentEven.FillPattern = FillPattern.SolidForeground;
            cellStylePercentEven.Alignment = HorizontalAlignment.Left;
            cellStylePercentEven.VerticalAlignment = VerticalAlignment.Center;
            cellStylePercentEven.SetDataFormat(workbook.CreateDataFormat().GetFormat("0.00%"));

            XSSFCellStyle cellStylePercentOdd = (XSSFCellStyle)workbook.CreateCellStyle();
            cellStylePercentOdd.DataFormat = HSSFDataFormat.GetBuiltinFormat("0.00%");
            cellStylePercentOdd.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            cellStylePercentOdd.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            cellStylePercentOdd.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            cellStylePercentOdd.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillFstClmnOddpercent = new XSSFColor(new byte[] { 255, 255, 255 });
            cellStylePercentOdd.SetFillForegroundColor(colorToFillFstClmnOddpercent);
            cellStylePercentOdd.FillPattern = FillPattern.SolidForeground;
            cellStylePercentOdd.Alignment = HorizontalAlignment.Left;
            cellStylePercentOdd.VerticalAlignment = VerticalAlignment.Center;
            cellStylePercentOdd.SetDataFormat(workbook.CreateDataFormat().GetFormat("0.00%"));

            /// Number Format ////
            XSSFCellStyle aumAllCellStyleEvenDecFrmtWNum = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleEvenDecFrmtWNum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmtWNum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmtWNum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmtWNum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor aumcolorToFillEvenWtoutDecWNum = new XSSFColor(new byte[] { 176, 196, 222 });
            aumAllCellStyleEvenDecFrmtWNum.SetFillForegroundColor(aumcolorToFillEvenWtoutDecWNum);
            aumAllCellStyleEvenDecFrmtWNum.FillPattern = FillPattern.SolidForeground;
            IDataFormat aumformatEvenWNum = workbook.CreateDataFormat();
            aumAllCellStyleEvenDecFrmtWNum.DataFormat = aumformatEvenWNum.GetFormat(aumNumberDecimalFormat);
            aumAllCellStyleEvenDecFrmtWNum.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleEvenDecFrmtWNum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Return
            XSSFCellStyle retAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            retAllCellStyleEvenDecFrmt.SetFillForegroundColor(retcolorToFillEvenWtoutDec);
            retAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatEven = workbook.CreateDataFormat();
            retAllCellStyleEvenDecFrmt.DataFormat = retformatEven.GetFormat(retDecimalFormat);
            retAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            retAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;


            ////Number Format ////
            XSSFCellStyle retAllCellStyleEvenDecFrmtWnum = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleEvenDecFrmtWnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmtWnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmtWnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmtWnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillEvenWtoutDecWnum = new XSSFColor(new byte[] { 176, 196, 222 });
            retAllCellStyleEvenDecFrmtWnum.SetFillForegroundColor(retcolorToFillEvenWtoutDecWnum);
            retAllCellStyleEvenDecFrmtWnum.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatEvenWnum = workbook.CreateDataFormat();
            retAllCellStyleEvenDecFrmtWnum.DataFormat = retformatEvenWnum.GetFormat(retNumberDecimalFormat);
            retAllCellStyleEvenDecFrmtWnum.Alignment = HorizontalAlignment.Center;
            retAllCellStyleEvenDecFrmtWnum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Nav
            XSSFCellStyle navAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor navcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            navAllCellStyleEvenDecFrmt.SetFillForegroundColor(navcolorToFillEvenWtoutDec);
            navAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat navformatEven = workbook.CreateDataFormat();
            navAllCellStyleEvenDecFrmt.DataFormat = navformatEven.GetFormat(navDecimalFormat);
            navAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            navAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;


            /// Number Format ////
            XSSFCellStyle navAllCellStyleEvenDecFrmtWnnum = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleEvenDecFrmtWnnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmtWnnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmtWnnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmtWnnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor navcolorToFillEvenWtoutDecWnnum = new XSSFColor(new byte[] { 176, 196, 222 });
            navAllCellStyleEvenDecFrmtWnnum.SetFillForegroundColor(navcolorToFillEvenWtoutDecWnnum);
            navAllCellStyleEvenDecFrmtWnnum.FillPattern = FillPattern.SolidForeground;
            IDataFormat navformatEvenWnnum = workbook.CreateDataFormat();
            navAllCellStyleEvenDecFrmtWnnum.DataFormat = navformatEvenWnnum.GetFormat(navNumberDecimalFormat);
            navAllCellStyleEvenDecFrmtWnnum.Alignment = HorizontalAlignment.Center;
            navAllCellStyleEvenDecFrmtWnnum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Other
            XSSFCellStyle otherAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            otherAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othercolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            otherAllCellStyleEvenDecFrmt.SetFillForegroundColor(othercolorToFillEvenWtoutDec);
            otherAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat otherformatEven = workbook.CreateDataFormat();
            otherAllCellStyleEvenDecFrmt.DataFormat = otherformatEven.GetFormat(othDecimalFormat);
            otherAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            otherAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            /// Number Format ///
            XSSFCellStyle otherAllCellStyleEvenDecFrmtWnum = (XSSFCellStyle)workbook.CreateCellStyle();
            otherAllCellStyleEvenDecFrmtWnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmtWnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmtWnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmtWnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othercolorToFillEvenWtoutDecWnum = new XSSFColor(new byte[] { 176, 196, 222 });
            otherAllCellStyleEvenDecFrmtWnum.SetFillForegroundColor(othercolorToFillEvenWtoutDecWnum);
            otherAllCellStyleEvenDecFrmtWnum.FillPattern = FillPattern.SolidForeground;
            IDataFormat otherformatEvenWnum = workbook.CreateDataFormat();
            otherAllCellStyleEvenDecFrmtWnum.DataFormat = otherformatEvenWnum.GetFormat(othNumberDecimalFormat);
            otherAllCellStyleEvenDecFrmtWnum.Alignment = HorizontalAlignment.Center;
            otherAllCellStyleEvenDecFrmtWnum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Ratio
            XSSFCellStyle ratAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor ratcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            ratAllCellStyleEvenDecFrmt.SetFillForegroundColor(ratcolorToFillEvenWtoutDec);
            ratAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat ratformatEven = workbook.CreateDataFormat();
            ratAllCellStyleEvenDecFrmt.DataFormat = ratformatEven.GetFormat(ratioDecimalFormat);
            ratAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle ratAllCellStyleEvenDecFrmtWth = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleEvenDecFrmtWth.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmtWth.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmtWth.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmtWth.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor ratcolorToFillEvenWtoutDecwth = new XSSFColor(new byte[] { 176, 196, 222 });
            ratAllCellStyleEvenDecFrmtWth.SetFillForegroundColor(ratcolorToFillEvenWtoutDecwth);
            ratAllCellStyleEvenDecFrmtWth.FillPattern = FillPattern.SolidForeground;
            IDataFormat ratformatEvenWth = workbook.CreateDataFormat();
            ratAllCellStyleEvenDecFrmtWth.DataFormat = ratformatEvenWth.GetFormat(ratioNumberDecimalFormat);
            ratAllCellStyleEvenDecFrmtWth.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleEvenDecFrmtWth.VerticalAlignment = VerticalAlignment.Center;
            #endregion


            #region No Format
            XSSFCellStyle AllCellStyleEven = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleEven.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillEven = new XSSFColor(new byte[] { 176, 196, 222 });
            AllCellStyleEven.SetFillForegroundColor(colorToFillEven);
            AllCellStyleEven.FillPattern = FillPattern.SolidForeground;
            AllCellStyleEven.Alignment = HorizontalAlignment.Center;
            AllCellStyleEven.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #endregion

            #region Cell Style For Odd Row

            #region With Decimal Format AUM
            XSSFCellStyle aumAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor AUMcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            aumAllCellStyleOddDec.SetFillForegroundColor(AUMcolorToFillOddDec);
            aumAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat AUMformatOddDec = workbook.CreateDataFormat();
            aumAllCellStyleOddDec.DataFormat = AUMformatOddDec.GetFormat(aumDecimalFormat);
            aumAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle aumAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor AUMcolorToFillOddDecWnf = new XSSFColor(new byte[] { 255, 255, 255 });
            aumAllCellStyleOddDecWnuf.SetFillForegroundColor(AUMcolorToFillOddDecWnf);
            aumAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat AUMformatOddDecWnuf = workbook.CreateDataFormat();
            aumAllCellStyleOddDecWnuf.DataFormat = AUMformatOddDecWnuf.GetFormat(aumNumberDecimalFormat);
            aumAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With Decimal Format Return
            XSSFCellStyle retAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor RETcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            retAllCellStyleOddDec.SetFillForegroundColor(RETcolorToFillOddDec);
            retAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat RETformatOddDec = workbook.CreateDataFormat();
            retAllCellStyleOddDec.DataFormat = RETformatOddDec.GetFormat(retDecimalFormat);
            retAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            retAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle retAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor RETcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            retAllCellStyleOddDecWnuf.SetFillForegroundColor(RETcolorToFillOddDecWnuf);
            retAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat RETformatOddDecWnuf = workbook.CreateDataFormat();
            retAllCellStyleOddDecWnuf.DataFormat = RETformatOddDecWnuf.GetFormat(retNumberDecimalFormat);
            retAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            retAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With Decimal Format Nav
            XSSFCellStyle navAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor naVcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            navAllCellStyleOddDec.SetFillForegroundColor(naVcolorToFillOddDec);
            navAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat naVformatOddDec = workbook.CreateDataFormat();
            navAllCellStyleOddDec.DataFormat = naVformatOddDec.GetFormat(navDecimalFormat);
            navAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            navAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            XSSFCellStyle navAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor naVcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            navAllCellStyleOddDecWnuf.SetFillForegroundColor(naVcolorToFillOddDecWnuf);
            navAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat naVformatOddDecWnuf = workbook.CreateDataFormat();
            navAllCellStyleOddDecWnuf.DataFormat = naVformatOddDecWnuf.GetFormat(navNumberDecimalFormat);
            navAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            navAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion


            #region With Decimal Format Other
            XSSFCellStyle othAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            othAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            othAllCellStyleOddDec.SetFillForegroundColor(othcolorToFillOddDec);
            othAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat othformatOddDec = workbook.CreateDataFormat();
            othAllCellStyleOddDec.DataFormat = othformatOddDec.GetFormat(othDecimalFormat);
            othAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            othAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            XSSFCellStyle othAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            othAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            othAllCellStyleOddDecWnuf.SetFillForegroundColor(othcolorToFillOddDecWnuf);
            othAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat othformatOddDecWnuf = workbook.CreateDataFormat();
            othAllCellStyleOddDecWnuf.DataFormat = othformatOddDecWnuf.GetFormat(othNumberDecimalFormat);
            othAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            othAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion


            #region With Decimal Format ratio
            XSSFCellStyle ratAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            ratAllCellStyleOddDec.SetFillForegroundColor(retcolorToFillOddDec);
            ratAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatOddDec = workbook.CreateDataFormat();
            ratAllCellStyleOddDec.DataFormat = retformatOddDec.GetFormat(ratioDecimalFormat);
            ratAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            XSSFCellStyle ratAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            ratAllCellStyleOddDecWnuf.SetFillForegroundColor(retcolorToFillOddDecWnuf);
            ratAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatOddDecWnuf = workbook.CreateDataFormat();
            ratAllCellStyleOddDecWnuf.DataFormat = retformatOddDecWnuf.GetFormat(ratioNumberDecimalFormat);
            ratAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region No Format
            XSSFCellStyle AllCellStyleOdd = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleOdd.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillOdd = new XSSFColor(new byte[] { 255, 255, 255 });
            AllCellStyleOdd.SetFillForegroundColor(colorToFillOdd);
            AllCellStyleOdd.FillPattern = FillPattern.SolidForeground;
            AllCellStyleOdd.Alignment = HorizontalAlignment.Center;
            AllCellStyleOdd.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #endregion

            #region Cell Style For First Column Even Row
            XSSFCellStyle AllCellStyleFstColmEven = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleFstColmEven.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillFstClmnEven = new XSSFColor(new byte[] { 176, 196, 222 });
            AllCellStyleFstColmEven.SetFillForegroundColor(colorToFillFstClmnEven);
            AllCellStyleFstColmEven.FillPattern = FillPattern.SolidForeground;
            AllCellStyleFstColmEven.Alignment = HorizontalAlignment.Left;
            AllCellStyleFstColmEven.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region Cell Style For First Column Odd Row
            XSSFCellStyle AllCellStyleFstColmOdd = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleFstColmOdd.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillFstClmnOdd = new XSSFColor(new byte[] { 255, 255, 255 });
            AllCellStyleFstColmOdd.SetFillForegroundColor(colorToFillFstClmnOdd);
            AllCellStyleFstColmOdd.FillPattern = FillPattern.SolidForeground;
            AllCellStyleFstColmOdd.Alignment = HorizontalAlignment.Left;
            AllCellStyleFstColmOdd.VerticalAlignment = VerticalAlignment.Center;
            #endregion
            #region Without Decimal Number Format Even Row
            XSSFCellStyle intAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            intAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            intAllCellStyleEvenDecFrmt.SetFillForegroundColor(intcolorToFillEvenWtoutDec);
            intAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat intformatEven = workbook.CreateDataFormat();
            intAllCellStyleEvenDecFrmt.DataFormat = intformatEven.GetFormat(intNumberWithoutDecimalFormat);
            intAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            intAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle intSimpleAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            intSimpleAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intSimplecolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            intSimpleAllCellStyleEvenDecFrmt.SetFillForegroundColor(intSimplecolorToFillEvenWtoutDec);
            intSimpleAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            intSimpleAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            intSimpleAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;
            #endregion
            #region Without Decimal Number Format Odd Row
            XSSFCellStyle intAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            intAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            intAllCellStyleOddDec.SetFillForegroundColor(intcolorToFillOddDec);
            intAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat intformatOddDec = workbook.CreateDataFormat();
            intAllCellStyleOddDec.DataFormat = intformatOddDec.GetFormat(intNumberWithoutDecimalFormat);
            intAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            intAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle intSimpleAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            intSimpleAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intSimplecolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            intSimpleAllCellStyleOddDec.SetFillForegroundColor(intSimplecolorToFillOddDec);
            intSimpleAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            intSimpleAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            intSimpleAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;
            #endregion
            #region With DateTime format
            var DateTimeFormat = ubs.DateFormat;
            XSSFCellStyle DateTimeAllCellStyleEvenFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            DateTimeAllCellStyleEvenFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleEvenFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleEvenFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleEvenFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor DateTimecolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            DateTimeAllCellStyleEvenFrmt.SetFillForegroundColor(DateTimecolorToFillEvenWtoutDec);
            DateTimeAllCellStyleEvenFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat DateTimeformatEven = workbook.CreateDataFormat();
            DateTimeAllCellStyleEvenFrmt.DataFormat = DateTimeformatEven.GetFormat(DateTimeFormat);
            DateTimeAllCellStyleEvenFrmt.Alignment = HorizontalAlignment.Center;
            DateTimeAllCellStyleEvenFrmt.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle DateTimeAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            DateTimeAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor DateTimecolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            DateTimeAllCellStyleOddDec.SetFillForegroundColor(DateTimecolorToFillOddDec);
            DateTimeAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat DateTimeformatOddDec = workbook.CreateDataFormat();
            DateTimeAllCellStyleOddDec.DataFormat = DateTimeformatOddDec.GetFormat(DateTimeFormat);
            DateTimeAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            DateTimeAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            #endregion
            #region Value added to the Excel
            //bool isNumeric = false;
            #region Added by Subrata on 22 Feb 2018
            //bool IsNumericKey = false;
            //bool IsNumericValue = false;
            //var AllListData = listData.SelectMany(x => x.LstKeyValuePair).ToArray();
            //var AllDataKey = AllListData.Select(x => x.Key).Distinct().ToArray();
            //int ValueRes;
            //IsNumericKey = int.TryParse(AllDataKey[0], out ValueRes);
            #endregion

            int incr = 6;
            //var shtincr = 0;
            var ChunkData = listData.BreakDataIntoChunk(2000);
            Parallel.ForEach(ChunkData, items =>
            {
                ISheet newsheet = null;
                int newshtincr;
                ////lock (NpoiLockObject)
                ////{
                //	//newsheet = workbook.CreateSheet("new_" + (++shtincr));
                //	newsheet = workbook.CreateSheet("new_" + (items.FirstOrDefault().RowNumber));
                //	newshtincr = 0;
                //}
                lock (NpoiLockObject)
                {
                    newsheet = workbook.CreateSheet("new_" + (items.FirstOrDefault().RowNumber));
                    newshtincr = 0;
                    foreach (var item in items)
                    {
                        //IRow dataRow;
                        //lock (NpoiLockObject)
                        //{
                        //	dataRow = newsheet.CreateRow(newshtincr);
                        //}
                        var dataRow = newsheet.CreateRow(newshtincr);
                        var cellValues = (from i in item.LstKeyValuePair
                                          from j in listTableHeader
                                          where i.Key.ToString() == j.Position.ToString()
                                          orderby j.Position
                                          select new
                                          {
                                              IsNum = j.IsNumberFormatReq,
                                              DecType = j.DecFormatType,
                                              Value = i.Value,
                                              IsMixedType = j.IsMixedValueType,
                                              IsPercentageType = j.IsPercentageValueType,
                                              IsDateTimeStringMixedType = j.IsDateTimeStringMixedType,
                                              IsDateTimeType = j.IsDateTimeType,
                                          }).ToArray();

                        for (int k = 0; k < cellValues.Length; k++)
                        {
                            var datacell = dataRow.CreateCell(k);
                            if (cellValues[k].DecType != DecimalFormatType.NoDecimalReq)
                            {
                                double OutVal;
                                if (string.IsNullOrEmpty(cellValues[k].Value) || cellValues[k].Value == BlankData || !double.TryParse(cellValues[k].Value, out OutVal))
                                {
                                    datacell.SetCellValue(cellValues[k].Value);
                                    if (k > 0)
                                    {
                                        if (item.RowNumber % 2 == 0)
                                            datacell.CellStyle = AllCellStyleEven;
                                        else
                                            datacell.CellStyle = AllCellStyleOdd;

                                    }
                                    else
                                    {
                                        if (item.RowNumber % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }

                                }
                                else
                                {
                                    datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));

                                    if (k > 0)
                                    {
                                        if (cellValues[k].DecType == DecimalFormatType.AUM)
                                        {
                                            if (item.RowNumber % 2 == 0)
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {

                                                    datacell.CellStyle = aumAllCellStyleEvenDecFrmtWNum;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = aumAllCellStyleEvenDecFrmt;
                                                }
                                            }
                                            else
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    datacell.CellStyle = aumAllCellStyleOddDecWnuf;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = aumAllCellStyleOddDec;
                                                }
                                            }
                                        }
                                        else if (cellValues[k].DecType == DecimalFormatType.NAV)
                                        {
                                            if (item.RowNumber % 2 == 0)
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    datacell.CellStyle = navAllCellStyleEvenDecFrmtWnnum;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = navAllCellStyleEvenDecFrmt;
                                                }
                                            }
                                            else
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    datacell.CellStyle = navAllCellStyleOddDecWnuf;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = navAllCellStyleOddDec;
                                                }

                                            }
                                        }
                                        else if (cellValues[k].DecType == DecimalFormatType.OTHER)
                                        {
                                            if (item.RowNumber % 2 == 0)
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    datacell.CellStyle = otherAllCellStyleEvenDecFrmtWnum;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = otherAllCellStyleEvenDecFrmt;
                                                }
                                            }

                                            else
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    datacell.CellStyle = othAllCellStyleOddDecWnuf;
                                                }
                                                else
                                                {

                                                    datacell.CellStyle = othAllCellStyleOddDec;
                                                }

                                            }
                                        }
                                        else if (cellValues[k].DecType == DecimalFormatType.RATIO)
                                        {
                                            if (item.RowNumber % 2 == 0)
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    datacell.CellStyle = ratAllCellStyleEvenDecFrmtWth;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = ratAllCellStyleEvenDecFrmt;
                                                }
                                            }
                                            else
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    datacell.CellStyle = ratAllCellStyleOddDecWnuf;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = ratAllCellStyleOddDec;
                                                }
                                            }
                                        }
                                        else if (cellValues[k].DecType == DecimalFormatType.RETURN)
                                        {
                                            if (item.RowNumber % 2 == 0)
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    datacell.CellStyle = retAllCellStyleEvenDecFrmtWnum;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = retAllCellStyleEvenDecFrmt;
                                                }

                                            }
                                            else
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    datacell.CellStyle = retAllCellStyleOddDecWnuf;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = retAllCellStyleOddDec;
                                                }

                                            }
                                        }
                                        else if (cellValues[k].DecType == DecimalFormatType.IntegerWithOutDecimal)
                                        {
                                            if (item.RowNumber % 2 == 0)
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    datacell.CellStyle = intAllCellStyleEvenDecFrmt;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = intSimpleAllCellStyleEvenDecFrmt;
                                                }

                                            }
                                            else
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    datacell.CellStyle = intAllCellStyleOddDec;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = intSimpleAllCellStyleOddDec;
                                                }

                                            }
                                        }

                                    }
                                    else
                                    {
                                        if (item.RowNumber % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }

                                }

                            }
                            else
                            {
                                double OutVal;
                                if (double.TryParse(cellValues[k].Value, out OutVal) && !cellValues[k].IsMixedType && !cellValues[k].IsPercentageType)
                                {
                                    datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                                    if (k > 0)
                                    {
                                        if (item.RowNumber % 2 == 0)
                                            datacell.CellStyle = AllCellStyleEven;
                                        else
                                            datacell.CellStyle = AllCellStyleOdd;

                                    }
                                    else
                                    {
                                        if (item.RowNumber % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }
                                }
                                else if (cellValues[k].IsPercentageType)
                                {
                                    if (double.TryParse(cellValues[k].Value, out OutVal))
                                    {
                                        datacell.SetCellValue(OutVal / 100);
                                        if (item.RowNumber % 2 == 0)
                                            datacell.CellStyle = cellStylePercentEven;
                                        else
                                            datacell.CellStyle = cellStylePercentOdd;
                                    }
                                    else
                                    {
                                        datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                        if (k > 0)
                                        {
                                            if (item.RowNumber % 2 == 0)
                                                datacell.CellStyle = AllCellStyleEven;
                                            else
                                                datacell.CellStyle = AllCellStyleOdd;
                                        }
                                        else
                                        {
                                            if (item.RowNumber % 2 == 0)
                                                datacell.CellStyle = AllCellStyleFstColmEven;
                                            else
                                                datacell.CellStyle = AllCellStyleFstColmOdd;
                                        }
                                    }
                                }
                                else if (cellValues[k].IsDateTimeType)
                                {
                                    DateTime OutValdt;
                                    if (DateTime.TryParse(cellValues[k].Value, out OutValdt))
                                    {
                                        datacell.SetCellValue(Convert.ToDateTime(cellValues[k].Value));
                                        if (item.RowNumber % 2 == 0)
                                            datacell.CellStyle = DateTimeAllCellStyleEvenFrmt;
                                        else
                                            datacell.CellStyle = DateTimeAllCellStyleOddDec;
                                    }
                                    else
                                    {
                                        datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                        if (k > 0)
                                        {
                                            if (item.RowNumber % 2 == 0)
                                                datacell.CellStyle = AllCellStyleEven;
                                            else
                                                datacell.CellStyle = AllCellStyleOdd;

                                        }
                                        else
                                        {
                                            if (item.RowNumber % 2 == 0)
                                                datacell.CellStyle = AllCellStyleFstColmEven;
                                            else
                                                datacell.CellStyle = AllCellStyleFstColmOdd;
                                        }
                                    }
                                }
                                else if (cellValues[k].IsDateTimeStringMixedType)
                                {
                                    DateTime OutValdt;
                                    if (DateTime.TryParse(cellValues[k].Value, out OutValdt))
                                    {
                                        datacell.SetCellValue(Convert.ToDateTime(cellValues[k].Value));
                                        if (item.RowNumber % 2 == 0)
                                            datacell.CellStyle = DateTimeAllCellStyleEvenFrmt;
                                        else
                                            datacell.CellStyle = DateTimeAllCellStyleOddDec;
                                    }
                                    else
                                    {
                                        datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                        if (k > 0)
                                        {
                                            if (item.RowNumber % 2 == 0)
                                                datacell.CellStyle = AllCellStyleEven;
                                            else
                                                datacell.CellStyle = AllCellStyleOdd;

                                        }
                                        else
                                        {
                                            if (item.RowNumber % 2 == 0)
                                                datacell.CellStyle = AllCellStyleFstColmEven;
                                            else
                                                datacell.CellStyle = AllCellStyleFstColmOdd;
                                        }
                                    }
                                }
                                else
                                {
                                    datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                    if (k > 0)
                                    {
                                        if (item.RowNumber % 2 == 0)
                                            datacell.CellStyle = AllCellStyleEven;
                                        else
                                            datacell.CellStyle = AllCellStyleOdd;

                                    }
                                    else
                                    {
                                        if (item.RowNumber % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }
                                }
                            }


                        }
                        newshtincr++;
                    }
                }
            });
            #endregion
            for (int hd = 3; hd <= 3 + (ChunkData.Count() - 1); hd++)
                workbook.SetSheetHidden(hd, true);

            //for (int i = 0; i < listTableHeader.Count; i++)//No need ,it is taken care in Macro
            //	sheet.AutoSizeColumn(i);
            if (sheet.GetColumnWidth(0) < 11072)
                sheet.SetColumnWidth(0, 11072);

            #region Logo
            try
            {
                if (!string.IsNullOrEmpty(LogoPath))
                {
                    XSSFDrawing patriarch = (XSSFDrawing)sheet.CreateDrawingPatriarch();
                    XSSFClientAnchor anchor;
                    anchor = new XSSFClientAnchor(0, 0, 0, 255, 0, 0, 0, 3);
                    anchor.AnchorType = AnchorType.DontMoveAndResize;
                    XSSFPicture picture = (XSSFPicture)patriarch.CreatePicture(anchor, LoadImage(LogoPath, workbook, PictureType.PNG));
                    double x1 = .25;
                    double y1 = .75;
                    picture.Resize(x1, y1);
                    picture.LineStyle = LineStyle.None;
                }
            }
            catch (Exception ex)
            {
            }

            #endregion

            #region Source, Date As On and Report Generated On
            ICRArow = sheet.CreateRow(incr + 3);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrSource);

            ICRArow = sheet.CreateRow(incr + 4);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrDateAsOn);

            ICRArow = sheet.CreateRow(incr + 5);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrReportGeneratedOn);
            #endregion

            #region Sheet Two Logo
            try
            {
                if (!string.IsNullOrEmpty(LogoPath))
                {
                    XSSFDrawing patriarch = (XSSFDrawing)sheetTwo.CreateDrawingPatriarch();
                    XSSFClientAnchor anchor;
                    anchor = new XSSFClientAnchor(0, 0, 0, 255, 0, 0, 0, 3);
                    anchor.AnchorType = AnchorType.DontMoveAndResize;
                    XSSFPicture picture = (XSSFPicture)patriarch.CreatePicture(anchor, LoadImage(LogoPath, workbook, PictureType.PNG));
                    double x1 = 1.10;
                    double y1 = 1.10;
                    picture.Resize(x1, y1);
                    picture.LineStyle = LineStyle.None;
                }
            }
            catch (Exception ex)
            {
            }
            #endregion

            #region Disclaimer Sheet
            var Row = sheetTwo.CreateRow(1);
            var cellSheetTwo = Row.CreateCell(7);
            cellSheetTwo.SetCellValue(StrHeader1);
            cellSheetTwo.CellStyle = HeaderStyle;

            Row = sheetTwo.CreateRow(4);
            ICell Cell;
            for (int i = 0; i < 17; i++)
            {
                Cell = Row.CreateCell(i);

                XSSFCellStyle declationstyle = (XSSFCellStyle)workbook.CreateCellStyle();

                declationstyle.Alignment = HorizontalAlignment.Left;
                declationstyle.VerticalAlignment = VerticalAlignment.Top;
                declationstyle.WrapText = true;
                IFont declarationfnt = (XSSFFont)workbook.CreateFont();
                //declarationfnt.Boldweight = (short)FontBoldWeight.Bold;
                declarationfnt.FontName = "Calibri";
                declarationfnt.FontHeightInPoints = (short)11;
                declationstyle.SetFont(declarationfnt);
                Cell.SetCellValue(!string.IsNullOrEmpty(Footer) ? Footer : "All information contained herein is obtained by ICRA Analytics Limited from sources believed by it to be accurate and reliable. Because of the possibility of human or mechanical error as well as other factors, however, all information contained herein is provided 'AS IS' without warranty of any kind. ICRA Analytics adopts all necessary measures so that the information it uses is of sufficient quality and from sources ICRA Analytics considers to be reliable including, when appropriate, independent third-party sources. However, ICRA Analytics is not an auditor and cannot in every instance independently verify or validate information received in preparing this document." +
                    "All information contained herein must be construed solely as statements of opinion, and  ICRA Analytics Limited or its affiliates or group companies and its respective and any of its officers, directors, personnel and employees, disclaim liability to any loss, damage of any nature, including but not limited to direct, indirect, punitive, special, exemplary, consequential, as also any loss of profit in any way arising from the use of this document or its contents in any manner or for any contingency within or beyond the control of, ICRA Analytics or any of its directors, officers, employees, agents, representatives, licensors or suppliers, arising from or in connection with the information contained herein or the use of or inability to use any such information.Opinions expressed in the document are not the opinions of our holding company, ICRA Limited(ICRA), and should not be construed as any indication of credit rating or grading of ICRA for any instruments that have been issued or are to be issued by any entity.The recipient alone shall be fully responsible and / or are liable for any decision taken on the basis of this document and / or the information contained herein.");
                Cell.CellStyle = declationstyle;

            }
            NPOIWrite.CellMerged(sheetTwo, 4, 4, 0, 17);
            sheetTwo.GetRow(4).HeightInPoints = 200;
            #endregion

            #region Disclaimer Sheet HyperLink
            XSSFCellStyle HyperLinkStyle = (XSSFCellStyle)workbook.CreateCellStyle();
            IFont HyperLinkFont = workbook.CreateFont();
            HyperLinkFont.Color = IndexedColors.Orange.Index;
            HyperLinkFont.Underline = FontUnderlineType.Single;
            HyperLinkStyle.SetFont(HyperLinkFont);

            Row = sheetTwo.CreateRow(5);
            Cell = Row.CreateCell(0);
            Cell.SetCellValue("Click here for third-party disclaimers");
            XSSFCreationHelper createHelper = (XSSFCreationHelper)workbook.GetCreationHelper();
            XSSFHyperlink link = (XSSFHyperlink)createHelper.CreateHyperlink(HyperlinkType.Url);
            link.Address = "https://www.icraanalytics.com/home/thirdpartydisclaimers";
            Cell.Hyperlink = link;
            Cell.CellStyle = HyperLinkStyle;
            #endregion

            sheet.ActiveCell = new CellAddress(0, 1);
            //var stream = new MemoryStream();
            //workbook.Write(stream);

            return workbook;
        }
        public static NPOI.XSSF.UserModel.XSSFWorkbook ExportToExcelWorkBookHistoriclNavHeaderSubHeader(string TemplatePath, UserBasicSettings ubs, List<TableHeaderEntity> listTableHeader, List<TableSubHeaderEntity> listTableSubHeader, List<ExportEntity> listData, string LogoPath = "", string ReportName = "", string StrDateAsOn = "")
        {
            #region Variable
            string Header = ubs.Reporting_Format_Header;
            string Footer = ubs.Reporting_Format_Footer;
            string BlankData = ubs.BlankData.ToUpper() == "BLANK" ? "" : ubs.BlankData;
            string StrHeader1 = "ICRA Analytics Limited";
            string StrHeader2 = "3rd Floor, Electric Mansion,Appasaheb Marathe Marg, Prabhadevi,Mumbai - 400 025 Maharashtra, India";
            string StrHeader3 = Header; //"Mumbai, Maharashtra 400093, IN";
            string StrReportName = ReportName;
            string StrSource = "Source: " + (string.IsNullOrEmpty(UserStatisticsEntity.SourceName) ? "MFI 360" : UserStatisticsEntity.SourceName);
            StrDateAsOn = "Data as on " + StrDateAsOn;
            string StrReportGeneratedOn = "Report Generated on " + DateTime.Now.ToString("dd-MMM-yyyy HH:mm:ss");


            #region number and decimal variable for AUM
            var aumPaddding = new string('0', (int)ubs.AUMDecimalFormat);
            var aumDecimalFormat = "0." + aumPaddding;
            string aumNUMBERFORMAT = ubs.NumberFormat;
            var aumNumberFormat = aumNUMBERFORMAT.Replace("0", "#");
            string aumNumberDecimalFormat = aumNumberFormat + "0." + new String('0', (int)ubs.AUMDecimalFormat);
            #endregion

            #region number and decimal variable for return
            var retPaddding = new string('0', (int)ubs.ReturnDecimalFormat);
            var retDecimalFormat = "0." + retPaddding;
            string retNUMBERFORMAT = ubs.NumberFormat;
            var retNumberFormat = retNUMBERFORMAT.Replace("0", "#");
            string retNumberDecimalFormat = retNumberFormat + "0." + new String('0', (int)ubs.ReturnDecimalFormat);
            #endregion

            #region number and decimal variable for NAV
            var navPaddding = new string('0', (int)ubs.NavDecimalFormat);
            var navDecimalFormat = "0." + navPaddding;
            string navNUMBERFORMAT = ubs.NumberFormat;
            var navNumberFormat = navNUMBERFORMAT.Replace("0", "#");
            string navNumberDecimalFormat = navNumberFormat + "0." + new String('0', (int)ubs.NavDecimalFormat);
            #endregion

            #region number and decimal variable for Other
            var othPaddding = new string('0', (int)ubs.OtherDecimal);
            var othDecimalFormat = "0." + othPaddding;
            string othNUMBERFORMAT = ubs.NumberFormat;
            var othNumberFormat = othNUMBERFORMAT.Replace("0", "#");
            string othNumberDecimalFormat = othNumberFormat + "0." + new String('0', (int)ubs.OtherDecimal);
            #endregion

            #region number and decimal variable for Ratio
            var ratioPaddding = new string('0', (int)ubs.RatioDecimalFormat);
            var ratioDecimalFormat = "0." + ratioPaddding;
            string ratioNUMBERFORMAT = ubs.NumberFormat;
            var ratioNumberFormat = ratioNUMBERFORMAT.Replace("0", "#");
            string ratioNumberDecimalFormat = ratioNumberFormat + "0." + new String('0', (int)ubs.RatioDecimalFormat);
            #endregion
            #region int Format with out Decimal
            var intNumberWithoutDecimalFormat = ubs.NumberFormat.Replace("0", "#");
            #endregion

            #endregion

            NPOI.XSSF.UserModel.XSSFWorkbook workbook;
            using (FileStream file = new FileStream(TemplatePath, FileMode.OpenOrCreate, FileAccess.ReadWrite))
            {
                workbook = new XSSFWorkbook(OPCPackage.Open(file));
            }
            ISheet sheet = workbook.CreateSheet("Output");
            ISheet sheetTwo = workbook.CreateSheet("Disclaimer");

            #region Excel Sheet Gridlines Delete
            sheet.DisplayGridlines = false;
            sheetTwo.DisplayGridlines = false;
            #endregion

            #region Header Freeze
            sheet.CreateFreezePane(1, 6);
            #endregion

            #region Set Font For Header1,Header2 and Header3
            XSSFCellStyle HeaderStyle = (XSSFCellStyle)workbook.CreateCellStyle();
            IFont Headerfont = workbook.CreateFont();
            Headerfont.Boldweight = (short)FontBoldWeight.Bold;
            HeaderStyle.SetFont(Headerfont);
            #endregion

            #region Set Cell Value For Header1, Header2 and Header3
            var ICRArow = sheet.CreateRow(0);
            ICRArow.CreateCell(0);
            NPOIWrite.CellMerged(sheet, 0, 0, 1, 9);
            var ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader1);
            ICRACell.CellStyle = HeaderStyle;
            ICRArow = sheet.CreateRow(1);
            ICRArow.CreateCell(0);
            NPOIWrite.CellMerged(sheet, 1, 1, 1, 9);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader2);
            ICRACell.CellStyle = HeaderStyle;
            ICRArow = sheet.CreateRow(2);
            ICRArow.CreateCell(0);
            NPOIWrite.CellMerged(sheet, 2, 2, 1, 9);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader3);
            ICRACell.CellStyle = HeaderStyle;
            ICRACell.CellStyle.Alignment = HorizontalAlignment.Center;
            ICRArow = sheet.CreateRow(3);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.CellStyle = HeaderStyle;
            ICRACell.CellStyle.Alignment = HorizontalAlignment.Center;
            NPOIWrite.AutoFitColumn(sheet, 1);
            ICRACell.CellStyle = HeaderStyle;
            #endregion

            #region Report Name
            ICRArow = sheet.CreateRow(3);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrReportName);
            HeaderStyle.Alignment = HorizontalAlignment.Left;
            ICRACell.CellStyle = HeaderStyle;
            #endregion

            #region Header creation in the Excel
            var headerRow = sheet.CreateRow(4);
            sheet.GetRow(4).HeightInPoints = 30;
            var headerlistFinal = listTableHeader.OrderBy(x => x.Position).ToList();
            var cellincr = 0;
            for (int i = 0; i < headerlistFinal.Count; i++)
            {
                int colspan = headerlistFinal[i].Colspan;
                if (colspan > 1)
                {
                    for (int k = 0; k < colspan; k++)
                    {
                        var cell = headerRow.CreateCell(cellincr + k);
                        cell.SetCellValue(headerlistFinal[i].ColumnName);
                        NPOIWrite.AutoFitColumn(sheet, cellincr);

                        #region Added by Subrata on 21 Feb 2018
                        XSSFCellStyle style = (XSSFCellStyle)workbook.CreateCellStyle();
                        XSSFColor colorToFill = new XSSFColor(new byte[] { 68, 114, 196 });// { 51, 204, 204 });//Color.Blue);
                        style.SetFillForegroundColor(colorToFill);
                        IFont font = workbook.CreateFont();
                        font.Color = IndexedColors.White.Index;
                        font.Boldweight = (short)FontBoldWeight.Bold;
                        style.SetFont(font);
                        style.WrapText = true;
                        style.FillPattern = FillPattern.SolidForeground;
                        style.Alignment = HorizontalAlignment.Center;
                        style.VerticalAlignment = VerticalAlignment.Center;
                        style.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                        style.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                        style.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                        style.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                        #endregion

                        cell.CellStyle = style;
                    }
                    NPOIWrite.CellMerged(sheet, 4, 4, cellincr, cellincr + colspan - 1);
                    cellincr = cellincr + colspan;
                }
                else
                {
                    var cell = headerRow.CreateCell(cellincr);
                    cell.SetCellValue(headerlistFinal[i].ColumnName);
                    NPOIWrite.AutoFitColumn(sheet, cellincr);
                    cellincr = cellincr + colspan;

                    #region Added by Subrata on 21 Feb 2018
                    XSSFCellStyle style = (XSSFCellStyle)workbook.CreateCellStyle();
                    XSSFColor colorToFill = new XSSFColor(new byte[] { 68, 114, 196 });// { 51, 204, 204 });// Color.Blue);
                    style.SetFillForegroundColor(colorToFill);
                    IFont font = workbook.CreateFont();
                    font.Color = IndexedColors.White.Index;
                    font.Boldweight = (short)FontBoldWeight.Bold;
                    style.WrapText = true;
                    style.SetFont(font);
                    style.FillPattern = FillPattern.SolidForeground;
                    if (i > 0)
                    {
                        style.Alignment = HorizontalAlignment.Center;
                        style.VerticalAlignment = VerticalAlignment.Center;
                    }
                    else
                    {
                        style.Alignment = HorizontalAlignment.Left;
                        style.VerticalAlignment = VerticalAlignment.Center;
                    }
                    style.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                    style.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                    style.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                    style.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                    #endregion

                    cell.CellStyle = style;
                }
            }
            #endregion

            #region Sub Header creation in the Excel
            var subHeaderRow = sheet.CreateRow(5);
            sheet.GetRow(5).HeightInPoints = 30;
            var subHeaderlistFinal = listTableSubHeader.OrderBy(x => x.Position).ToList();
            for (int i = 0; i < subHeaderlistFinal.Count; i++)
            {
                int index = headerlistFinal.FindIndex(x => x.ColumnName.Equals(subHeaderlistFinal[i].ColumnName));
                if (index >= 0)
                {
                    var cell = subHeaderRow.CreateCell(i);

                    #region Added by Subrata on 21 Feb 2018
                    XSSFCellStyle style = (XSSFCellStyle)workbook.CreateCellStyle();
                    XSSFColor colorToFill = new XSSFColor(new byte[] { 68, 114, 196 });// Color.Blue);
                    style.SetFillForegroundColor(colorToFill);
                    IFont font = workbook.CreateFont();
                    font.Color = IndexedColors.White.Index;
                    font.Boldweight = (short)FontBoldWeight.Bold;
                    style.SetFont(font);
                    style.FillPattern = FillPattern.SolidForeground;
                    style.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                    style.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                    style.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                    style.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                    if (i > 0)
                    {
                        style.Alignment = HorizontalAlignment.Center;
                        style.VerticalAlignment = VerticalAlignment.Center;
                    }
                    else
                    {
                        style.Alignment = HorizontalAlignment.Left;
                        style.VerticalAlignment = VerticalAlignment.Center;
                    }
                    #endregion

                    cell.CellStyle = style;
                }
                else
                {
                    var cell = subHeaderRow.CreateCell(i);
                    cell.SetCellValue(subHeaderlistFinal[i].ColumnName);
                    NPOIWrite.AutoFitColumn(sheet, i);

                    #region Added by Subrata on 21 Feb 2018
                    XSSFCellStyle style = (XSSFCellStyle)workbook.CreateCellStyle();
                    XSSFColor colorToFill = new XSSFColor(new byte[] { 68, 114, 196 });// Color.Blue);
                    style.SetFillForegroundColor(colorToFill);
                    IFont font = workbook.CreateFont();
                    font.Color = IndexedColors.White.Index;
                    font.Boldweight = (short)FontBoldWeight.Bold;
                    style.SetFont(font);
                    style.FillPattern = FillPattern.SolidForeground;
                    style.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                    style.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                    style.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                    style.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                    if (i > 0)
                    {
                        style.Alignment = HorizontalAlignment.Center;
                        style.VerticalAlignment = VerticalAlignment.Center;
                    }
                    else
                    {
                        style.Alignment = HorizontalAlignment.Left;
                        style.VerticalAlignment = VerticalAlignment.Center;
                    }
                    #endregion

                    cell.CellStyle = style;
                }
            }
            #endregion

            #region Cell Style For Even Row

            #region Without DecimalFormat
            XSSFCellStyle AllCellStyleEven = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleEven.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillEven = new XSSFColor(new byte[] { 176, 196, 222 });
            AllCellStyleEven.SetFillForegroundColor(colorToFillEven);
            AllCellStyleEven.FillPattern = FillPattern.SolidForeground;
            AllCellStyleEven.Alignment = HorizontalAlignment.Center;
            AllCellStyleEven.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat AUM
            XSSFCellStyle aumAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor aumcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            aumAllCellStyleEvenDecFrmt.SetFillForegroundColor(aumcolorToFillEvenWtoutDec);
            aumAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat aumformatEven = workbook.CreateDataFormat();
            aumAllCellStyleEvenDecFrmt.DataFormat = aumformatEven.GetFormat(aumDecimalFormat);
            aumAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            /// Number Format ////
            XSSFCellStyle aumAllCellStyleEvenDecFrmtWNum = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleEvenDecFrmtWNum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmtWNum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmtWNum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmtWNum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor aumcolorToFillEvenWtoutDecWNum = new XSSFColor(new byte[] { 176, 196, 222 });
            aumAllCellStyleEvenDecFrmtWNum.SetFillForegroundColor(aumcolorToFillEvenWtoutDecWNum);
            aumAllCellStyleEvenDecFrmtWNum.FillPattern = FillPattern.SolidForeground;
            IDataFormat aumformatEvenWNum = workbook.CreateDataFormat();
            aumAllCellStyleEvenDecFrmtWNum.DataFormat = aumformatEvenWNum.GetFormat(aumNumberDecimalFormat);
            aumAllCellStyleEvenDecFrmtWNum.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleEvenDecFrmtWNum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Return
            XSSFCellStyle retAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            retAllCellStyleEvenDecFrmt.SetFillForegroundColor(retcolorToFillEvenWtoutDec);
            retAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatEven = workbook.CreateDataFormat();
            retAllCellStyleEvenDecFrmt.DataFormat = retformatEven.GetFormat(retDecimalFormat);
            retAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            retAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;


            ////Number Format ////
            XSSFCellStyle retAllCellStyleEvenDecFrmtWnum = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleEvenDecFrmtWnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmtWnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmtWnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmtWnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillEvenWtoutDecWnum = new XSSFColor(new byte[] { 176, 196, 222 });
            retAllCellStyleEvenDecFrmtWnum.SetFillForegroundColor(retcolorToFillEvenWtoutDecWnum);
            retAllCellStyleEvenDecFrmtWnum.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatEvenWnum = workbook.CreateDataFormat();
            retAllCellStyleEvenDecFrmtWnum.DataFormat = retformatEvenWnum.GetFormat(retNumberDecimalFormat);
            retAllCellStyleEvenDecFrmtWnum.Alignment = HorizontalAlignment.Center;
            retAllCellStyleEvenDecFrmtWnum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Nav
            XSSFCellStyle navAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor navcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            navAllCellStyleEvenDecFrmt.SetFillForegroundColor(navcolorToFillEvenWtoutDec);
            navAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat navformatEven = workbook.CreateDataFormat();
            navAllCellStyleEvenDecFrmt.DataFormat = navformatEven.GetFormat(navDecimalFormat);
            navAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            navAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;


            /// Number Format ////
            XSSFCellStyle navAllCellStyleEvenDecFrmtWnnum = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleEvenDecFrmtWnnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmtWnnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmtWnnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmtWnnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor navcolorToFillEvenWtoutDecWnnum = new XSSFColor(new byte[] { 176, 196, 222 });
            navAllCellStyleEvenDecFrmtWnnum.SetFillForegroundColor(navcolorToFillEvenWtoutDecWnnum);
            navAllCellStyleEvenDecFrmtWnnum.FillPattern = FillPattern.SolidForeground;
            IDataFormat navformatEvenWnnum = workbook.CreateDataFormat();
            navAllCellStyleEvenDecFrmtWnnum.DataFormat = navformatEvenWnnum.GetFormat(navNumberDecimalFormat);
            navAllCellStyleEvenDecFrmtWnnum.Alignment = HorizontalAlignment.Center;
            navAllCellStyleEvenDecFrmtWnnum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Other
            XSSFCellStyle otherAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            otherAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othercolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            otherAllCellStyleEvenDecFrmt.SetFillForegroundColor(othercolorToFillEvenWtoutDec);
            otherAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat otherformatEven = workbook.CreateDataFormat();
            otherAllCellStyleEvenDecFrmt.DataFormat = otherformatEven.GetFormat(othDecimalFormat);
            otherAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            otherAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            /// Number Format ///
            XSSFCellStyle otherAllCellStyleEvenDecFrmtWnum = (XSSFCellStyle)workbook.CreateCellStyle();
            otherAllCellStyleEvenDecFrmtWnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmtWnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmtWnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmtWnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othercolorToFillEvenWtoutDecWnum = new XSSFColor(new byte[] { 176, 196, 222 });
            otherAllCellStyleEvenDecFrmtWnum.SetFillForegroundColor(othercolorToFillEvenWtoutDecWnum);
            otherAllCellStyleEvenDecFrmtWnum.FillPattern = FillPattern.SolidForeground;
            IDataFormat otherformatEvenWnum = workbook.CreateDataFormat();
            otherAllCellStyleEvenDecFrmtWnum.DataFormat = otherformatEvenWnum.GetFormat(othNumberDecimalFormat);
            otherAllCellStyleEvenDecFrmtWnum.Alignment = HorizontalAlignment.Center;
            otherAllCellStyleEvenDecFrmtWnum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Ratio
            XSSFCellStyle ratAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor ratcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            ratAllCellStyleEvenDecFrmt.SetFillForegroundColor(ratcolorToFillEvenWtoutDec);
            ratAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat ratformatEven = workbook.CreateDataFormat();
            ratAllCellStyleEvenDecFrmt.DataFormat = ratformatEven.GetFormat(ratioDecimalFormat);
            ratAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle ratAllCellStyleEvenDecFrmtWth = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleEvenDecFrmtWth.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmtWth.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmtWth.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmtWth.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor ratcolorToFillEvenWtoutDecwth = new XSSFColor(new byte[] { 176, 196, 222 });
            ratAllCellStyleEvenDecFrmtWth.SetFillForegroundColor(ratcolorToFillEvenWtoutDecwth);
            ratAllCellStyleEvenDecFrmtWth.FillPattern = FillPattern.SolidForeground;
            IDataFormat ratformatEvenWth = workbook.CreateDataFormat();
            ratAllCellStyleEvenDecFrmtWth.DataFormat = ratformatEvenWth.GetFormat(ratioNumberDecimalFormat);
            ratAllCellStyleEvenDecFrmtWth.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleEvenDecFrmtWth.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #endregion

            #region Cell Style For Odd Row

            #region With Decimal Format AUM
            XSSFCellStyle aumAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor AUMcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            aumAllCellStyleOddDec.SetFillForegroundColor(AUMcolorToFillOddDec);
            aumAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat AUMformatOddDec = workbook.CreateDataFormat();
            aumAllCellStyleOddDec.DataFormat = AUMformatOddDec.GetFormat(aumDecimalFormat);
            aumAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle aumAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor AUMcolorToFillOddDecWnf = new XSSFColor(new byte[] { 255, 255, 255 });
            aumAllCellStyleOddDecWnuf.SetFillForegroundColor(AUMcolorToFillOddDecWnf);
            aumAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat AUMformatOddDecWnuf = workbook.CreateDataFormat();
            aumAllCellStyleOddDecWnuf.DataFormat = AUMformatOddDecWnuf.GetFormat(aumNumberDecimalFormat);
            aumAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With Decimal Format Return
            XSSFCellStyle retAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor RETcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            retAllCellStyleOddDec.SetFillForegroundColor(RETcolorToFillOddDec);
            retAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat RETformatOddDec = workbook.CreateDataFormat();
            retAllCellStyleOddDec.DataFormat = RETformatOddDec.GetFormat(retDecimalFormat);
            retAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            retAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle retAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor RETcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            retAllCellStyleOddDecWnuf.SetFillForegroundColor(RETcolorToFillOddDecWnuf);
            retAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat RETformatOddDecWnuf = workbook.CreateDataFormat();
            retAllCellStyleOddDecWnuf.DataFormat = RETformatOddDecWnuf.GetFormat(retNumberDecimalFormat);
            retAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            retAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With Decimal Format Nav
            XSSFCellStyle navAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor naVcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            navAllCellStyleOddDec.SetFillForegroundColor(naVcolorToFillOddDec);
            navAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat naVformatOddDec = workbook.CreateDataFormat();
            navAllCellStyleOddDec.DataFormat = naVformatOddDec.GetFormat(navDecimalFormat);
            navAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            navAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            XSSFCellStyle navAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor naVcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            navAllCellStyleOddDecWnuf.SetFillForegroundColor(naVcolorToFillOddDecWnuf);
            navAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat naVformatOddDecWnuf = workbook.CreateDataFormat();
            navAllCellStyleOddDecWnuf.DataFormat = naVformatOddDecWnuf.GetFormat(navNumberDecimalFormat);
            navAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            navAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion


            #region With Decimal Format Other
            XSSFCellStyle othAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            othAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            othAllCellStyleOddDec.SetFillForegroundColor(othcolorToFillOddDec);
            othAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat othformatOddDec = workbook.CreateDataFormat();
            othAllCellStyleOddDec.DataFormat = othformatOddDec.GetFormat(othDecimalFormat);
            othAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            othAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            XSSFCellStyle othAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            othAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            othAllCellStyleOddDecWnuf.SetFillForegroundColor(othcolorToFillOddDecWnuf);
            othAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat othformatOddDecWnuf = workbook.CreateDataFormat();
            othAllCellStyleOddDecWnuf.DataFormat = othformatOddDecWnuf.GetFormat(othNumberDecimalFormat);
            othAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            othAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion


            #region With Decimal Format ratio
            XSSFCellStyle ratAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            ratAllCellStyleOddDec.SetFillForegroundColor(retcolorToFillOddDec);
            ratAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatOddDec = workbook.CreateDataFormat();
            ratAllCellStyleOddDec.DataFormat = retformatOddDec.GetFormat(ratioDecimalFormat);
            ratAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            XSSFCellStyle ratAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            ratAllCellStyleOddDecWnuf.SetFillForegroundColor(retcolorToFillOddDecWnuf);
            ratAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatOddDecWnuf = workbook.CreateDataFormat();
            ratAllCellStyleOddDecWnuf.DataFormat = retformatOddDecWnuf.GetFormat(ratioNumberDecimalFormat);
            ratAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion



            #region Without Decimal Format
            XSSFCellStyle AllCellStyleOdd = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleOdd.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillOdd = new XSSFColor(new byte[] { 255, 255, 255 });
            AllCellStyleOdd.SetFillForegroundColor(colorToFillOdd);
            AllCellStyleOdd.FillPattern = FillPattern.SolidForeground;
            AllCellStyleOdd.Alignment = HorizontalAlignment.Center;
            AllCellStyleOdd.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #endregion

            #region Cell Style For First Column Even Row
            XSSFCellStyle AllCellStyleFstColmEven = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleFstColmEven.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillFstClmnEven = new XSSFColor(new byte[] { 176, 196, 222 });
            AllCellStyleFstColmEven.SetFillForegroundColor(colorToFillFstClmnEven);
            AllCellStyleFstColmEven.FillPattern = FillPattern.SolidForeground;
            AllCellStyleFstColmEven.Alignment = HorizontalAlignment.Left;
            AllCellStyleFstColmEven.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region Cell Style For First Column Odd Row
            XSSFCellStyle AllCellStyleFstColmOdd = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleFstColmOdd.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillFstClmnOdd = new XSSFColor(new byte[] { 255, 255, 255 });
            AllCellStyleFstColmOdd.SetFillForegroundColor(colorToFillFstClmnOdd);
            AllCellStyleFstColmOdd.FillPattern = FillPattern.SolidForeground;
            AllCellStyleFstColmOdd.Alignment = HorizontalAlignment.Left;
            AllCellStyleFstColmOdd.VerticalAlignment = VerticalAlignment.Center;
            #endregion
            #region Without Decimal Number Format Even Row
            XSSFCellStyle intAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            intAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            intAllCellStyleEvenDecFrmt.SetFillForegroundColor(intcolorToFillEvenWtoutDec);
            intAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat intformatEven = workbook.CreateDataFormat();
            intAllCellStyleEvenDecFrmt.DataFormat = intformatEven.GetFormat(intNumberWithoutDecimalFormat);
            intAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            intAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle intSimpleAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            intSimpleAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intSimplecolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            intSimpleAllCellStyleEvenDecFrmt.SetFillForegroundColor(intSimplecolorToFillEvenWtoutDec);
            intSimpleAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            intSimpleAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            intSimpleAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;
            #endregion
            #region Without Decimal Number Format Odd Row
            XSSFCellStyle intAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            intAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            intAllCellStyleOddDec.SetFillForegroundColor(intcolorToFillOddDec);
            intAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat intformatOddDec = workbook.CreateDataFormat();
            intAllCellStyleOddDec.DataFormat = intformatOddDec.GetFormat(intNumberWithoutDecimalFormat);
            intAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            intAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle intSimpleAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            intSimpleAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intSimplecolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            intSimpleAllCellStyleOddDec.SetFillForegroundColor(intSimplecolorToFillOddDec);
            intSimpleAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            intSimpleAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            intSimpleAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;
            #endregion
            #region With DateTime format
            var DateTimeFormat = ubs.DateFormat;
            XSSFCellStyle DateTimeAllCellStyleEvenFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            DateTimeAllCellStyleEvenFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleEvenFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleEvenFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleEvenFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor DateTimecolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            DateTimeAllCellStyleEvenFrmt.SetFillForegroundColor(DateTimecolorToFillEvenWtoutDec);
            DateTimeAllCellStyleEvenFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat DateTimeformatEven = workbook.CreateDataFormat();
            DateTimeAllCellStyleEvenFrmt.DataFormat = DateTimeformatEven.GetFormat(DateTimeFormat);
            DateTimeAllCellStyleEvenFrmt.Alignment = HorizontalAlignment.Center;
            DateTimeAllCellStyleEvenFrmt.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle DateTimeAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            DateTimeAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor DateTimecolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            DateTimeAllCellStyleOddDec.SetFillForegroundColor(DateTimecolorToFillOddDec);
            DateTimeAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat DateTimeformatOddDec = workbook.CreateDataFormat();
            DateTimeAllCellStyleOddDec.DataFormat = DateTimeformatOddDec.GetFormat(DateTimeFormat);
            DateTimeAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            DateTimeAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            #endregion
            #region Value added to the Excel

            int incr = 6;
            //bool isNumeric = false;

            #region Added by Subrata on 22 Feb 2018
            //bool IsNumericKey = false;
            //bool IsNumericValue = false;
            //var AllListData = listData.SelectMany(x => x.LstKeyValuePair).ToArray();
            //var AllDataKey = AllListData.Select(x => x.Key).Distinct().ToArray();
            //int ValueRes;
            //IsNumericKey = int.TryParse(AllDataKey[0], out ValueRes);

            #endregion
            var ChunkData = listData.BreakDataIntoChunk(2000);
            Parallel.ForEach(ChunkData, items =>
            {
                ISheet newsheet = null;
                int newshtincr;
                //lock (NpoiLockObject)
                //{
                //	//newsheet = workbook.CreateSheet("new_" + (++shtincr));
                //	newsheet = workbook.CreateSheet("new_" + (items.FirstOrDefault().RowNumber));
                //	newshtincr = 0;
                //}
                lock (NpoiLockObject)
                {
                    newsheet = workbook.CreateSheet("new_" + (items.FirstOrDefault().RowNumber));
                    newshtincr = 0;
                    foreach (var item in items)
                    {
                        //IRow dataRow;
                        //lock (NpoiLockObject)
                        //{
                        //	dataRow = newsheet.CreateRow(newshtincr);
                        //}
                        var dataRow = newsheet.CreateRow(newshtincr);
                        var cellValues = (from i in item.LstKeyValuePair
                                          from j in listTableSubHeader
                                          where i.Key.ToString() == j.Position.ToString()
                                          orderby j.Position
                                          select new
                                          {
                                              IsNum = j.IsNumberFormatReq,
                                              DecType = j.DecFormatType,
                                              Value = i.Value,
                                              IsMixedType = j.IsMixedValueType,
                                              IsDateTimeStringMixedType = j.IsDateTimeStringMixedType,
                                              IsDateTimeType = j.IsDateTimeType,
                                          }).ToArray();

                        for (int k = 0; k < cellValues.Length; k++)
                        {
                            var datacell = dataRow.CreateCell(k);

                            if (cellValues[k].DecType != DecimalFormatType.NoDecimalReq)
                            {
                                double OutVal;
                                if (cellValues[k].Value == "" || cellValues[k].Value == null || cellValues[k].Value == BlankData || !double.TryParse(cellValues[k].Value, out OutVal))
                                {
                                    if (k > 0)
                                    {
                                        datacell.SetCellValue(cellValues[k].Value);
                                        if (item.RowNumber % 2 == 0)
                                            datacell.CellStyle = AllCellStyleEven;
                                        else
                                            datacell.CellStyle = AllCellStyleOdd;
                                    }
                                    else
                                    {
                                        datacell.SetCellValue(cellValues[k].Value);
                                        if (item.RowNumber % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }

                                }
                                else
                                {
                                    if (k > 0)
                                    {
                                        datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                                        if (cellValues[k].DecType == DecimalFormatType.AUM)
                                        {
                                            if (item.RowNumber % 2 == 0)
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {

                                                    datacell.CellStyle = aumAllCellStyleEvenDecFrmtWNum;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = aumAllCellStyleEvenDecFrmt;
                                                }
                                            }
                                            else
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    datacell.CellStyle = aumAllCellStyleOddDecWnuf;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = aumAllCellStyleOddDec;
                                                }
                                            }
                                        }
                                        else if (cellValues[k].DecType == DecimalFormatType.NAV)
                                        {
                                            if (item.RowNumber % 2 == 0)
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    datacell.CellStyle = navAllCellStyleEvenDecFrmtWnnum;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = navAllCellStyleEvenDecFrmt;
                                                }
                                            }
                                            else
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    datacell.CellStyle = navAllCellStyleOddDecWnuf;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = navAllCellStyleOddDec;
                                                }

                                            }
                                        }
                                        else if (cellValues[k].DecType == DecimalFormatType.OTHER)
                                        {
                                            if (item.RowNumber % 2 == 0)
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    datacell.CellStyle = otherAllCellStyleEvenDecFrmtWnum;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = otherAllCellStyleEvenDecFrmt;
                                                }
                                            }

                                            else
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    datacell.CellStyle = othAllCellStyleOddDecWnuf;
                                                }
                                                else
                                                {

                                                    datacell.CellStyle = othAllCellStyleOddDec;
                                                }

                                            }
                                        }
                                        else if (cellValues[k].DecType == DecimalFormatType.RATIO)
                                        {
                                            if (item.RowNumber % 2 == 0)
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    datacell.CellStyle = ratAllCellStyleEvenDecFrmtWth;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = ratAllCellStyleEvenDecFrmt;
                                                }
                                            }
                                            else
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    datacell.CellStyle = ratAllCellStyleOddDecWnuf;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = ratAllCellStyleOddDec;
                                                }
                                            }
                                        }
                                        else if (cellValues[k].DecType == DecimalFormatType.RETURN)
                                        {
                                            if (item.RowNumber % 2 == 0)
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    datacell.CellStyle = retAllCellStyleEvenDecFrmtWnum;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = retAllCellStyleEvenDecFrmt;
                                                }

                                            }
                                            else
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    datacell.CellStyle = retAllCellStyleOddDecWnuf;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = retAllCellStyleOddDec;
                                                }

                                            }
                                        }
                                        else if (cellValues[k].DecType == DecimalFormatType.IntegerWithOutDecimal)
                                        {
                                            if (item.RowNumber % 2 == 0)
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    datacell.CellStyle = intAllCellStyleEvenDecFrmt;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = intSimpleAllCellStyleEvenDecFrmt;
                                                }

                                            }
                                            else
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    datacell.CellStyle = intAllCellStyleOddDec;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = intSimpleAllCellStyleOddDec;
                                                }

                                            }
                                        }
                                    }
                                    else
                                    {
                                        datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                                        if (item.RowNumber % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }

                                }

                            }
                            else
                            {
                                double OutVal;
                                if (double.TryParse(cellValues[k].Value, out OutVal) && !cellValues[k].IsMixedType)
                                {
                                    datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                                    if (k > 0)
                                    {
                                        if (item.RowNumber % 2 == 0)
                                            datacell.CellStyle = AllCellStyleEven;
                                        else
                                            datacell.CellStyle = AllCellStyleOdd;

                                    }
                                    else
                                    {
                                        if (item.RowNumber % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }
                                }
                                else if (cellValues[k].IsDateTimeType)
                                {
                                    DateTime OutValdt;
                                    if (DateTime.TryParse(cellValues[k].Value, out OutValdt))
                                    {
                                        datacell.SetCellValue(Convert.ToDateTime(cellValues[k].Value));
                                        if (item.RowNumber % 2 == 0)
                                            datacell.CellStyle = DateTimeAllCellStyleEvenFrmt;
                                        else
                                            datacell.CellStyle = DateTimeAllCellStyleOddDec;
                                    }
                                    else
                                    {
                                        datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                        if (k > 0)
                                        {
                                            if (item.RowNumber % 2 == 0)
                                                datacell.CellStyle = AllCellStyleEven;
                                            else
                                                datacell.CellStyle = AllCellStyleOdd;

                                        }
                                        else
                                        {
                                            if (item.RowNumber % 2 == 0)
                                                datacell.CellStyle = AllCellStyleFstColmEven;
                                            else
                                                datacell.CellStyle = AllCellStyleFstColmOdd;
                                        }
                                    }
                                }
                                else if (cellValues[k].IsDateTimeStringMixedType)
                                {
                                    DateTime OutValdt;
                                    if (DateTime.TryParse(cellValues[k].Value, out OutValdt))
                                    {
                                        datacell.SetCellValue(Convert.ToDateTime(cellValues[k].Value));
                                        if (item.RowNumber % 2 == 0)
                                            datacell.CellStyle = DateTimeAllCellStyleEvenFrmt;
                                        else
                                            datacell.CellStyle = DateTimeAllCellStyleOddDec;
                                    }
                                    else
                                    {
                                        datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                        if (k > 0)
                                        {
                                            if (item.RowNumber % 2 == 0)
                                                datacell.CellStyle = AllCellStyleEven;
                                            else
                                                datacell.CellStyle = AllCellStyleOdd;

                                        }
                                        else
                                        {
                                            if (item.RowNumber % 2 == 0)
                                                datacell.CellStyle = AllCellStyleFstColmEven;
                                            else
                                                datacell.CellStyle = AllCellStyleFstColmOdd;
                                        }
                                    }
                                }
                                else
                                {
                                    datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                    if (k > 0)
                                    {
                                        if (item.RowNumber % 2 == 0)
                                            datacell.CellStyle = AllCellStyleEven;
                                        else
                                            datacell.CellStyle = AllCellStyleOdd;

                                    }
                                    else
                                    {
                                        if (item.RowNumber % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }
                                }



                            }
                        }
                        newshtincr++;
                    }
                }
            });
            #endregion
            for (int hd = 3; hd <= 3 + (ChunkData.Count() - 1); hd++)
                workbook.SetSheetHidden(hd, true);
            //for (int i = 0; i < listTableSubHeader.Count; i++)//No need ,it is taken care in Macro
            //	sheet.AutoSizeColumn(i);
            if (sheet.GetColumnWidth(0) < 11072)
                sheet.SetColumnWidth(0, 11072);

            #region Logo
            try
            {
                if (!string.IsNullOrEmpty(LogoPath))
                {
                    XSSFDrawing patriarch = (XSSFDrawing)sheet.CreateDrawingPatriarch();
                    XSSFClientAnchor anchor;
                    anchor = new XSSFClientAnchor(0, 0, 0, 255, 0, 0, 0, 3);
                    anchor.AnchorType = AnchorType.DontMoveAndResize;
                    XSSFPicture picture = (XSSFPicture)patriarch.CreatePicture(anchor, LoadImage(LogoPath, workbook, PictureType.PNG));
                    double x1 = .25;
                    double y1 = .75;
                    picture.Resize(x1, y1);
                    picture.LineStyle = LineStyle.None;
                }
            }
            catch (Exception ex)
            {
            }

            #endregion

            #region Source, Date As On and Report Generated On
            ICRArow = sheet.CreateRow(incr + 3);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrSource);

            ICRArow = sheet.CreateRow(incr + 4);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrDateAsOn);

            ICRArow = sheet.CreateRow(incr + 5);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrReportGeneratedOn);
            #endregion

            #region Sheet Two Logo
            try
            {
                if (!string.IsNullOrEmpty(LogoPath))
                {
                    XSSFDrawing patriarch = (XSSFDrawing)sheetTwo.CreateDrawingPatriarch();
                    XSSFClientAnchor anchor;
                    anchor = new XSSFClientAnchor(0, 0, 0, 255, 0, 0, 0, 3);
                    anchor.AnchorType = AnchorType.DontMoveAndResize;
                    XSSFPicture picture = (XSSFPicture)patriarch.CreatePicture(anchor, LoadImage(LogoPath, workbook, PictureType.PNG));
                    double x1 = 1.10;
                    double y1 = 1.10;
                    picture.Resize(x1, y1);
                    picture.LineStyle = LineStyle.None;
                }
            }
            catch (Exception ex)
            {
            }
            #endregion

            #region Disclaimer Sheet
            var Row = sheetTwo.CreateRow(1);
            var cellSheetTwo = Row.CreateCell(7);
            cellSheetTwo.SetCellValue("ICRA Analytics Limited");
            cellSheetTwo.CellStyle = HeaderStyle;

            Row = sheetTwo.CreateRow(4);
            ICell Cell;
            for (int i = 0; i < listTableSubHeader.Count; i++)
            {
                Cell = Row.CreateCell(i);
                if (i == 0)
                {
                    XSSFCellStyle declationstyle = (XSSFCellStyle)workbook.CreateCellStyle();

                    declationstyle.Alignment = HorizontalAlignment.Left;
                    declationstyle.VerticalAlignment = VerticalAlignment.Top;
                    declationstyle.WrapText = true;
                    IFont declarationfnt = (XSSFFont)workbook.CreateFont();
                    declarationfnt.FontName = "Calibri";
                    declarationfnt.FontHeightInPoints = (short)11;
                    declationstyle.SetFont(declarationfnt);
                    Cell.SetCellValue(!string.IsNullOrEmpty(Footer) ? Footer : "All information contained herein is obtained by ICRA Analytics Limited from sources believed by it to be accurate and reliable. Because of the possibility of human or mechanical error as well as other factors, however, all information contained herein is provided 'AS IS' without warranty of any kind. ICRA Analytics adopts all necessary measures so that the information it uses is of sufficient quality and from sources ICRA Analytics considers to be reliable including, when appropriate, independent third-party sources. However, ICRA Analytics is not an auditor and cannot in every instance independently verify or validate information received in preparing this document." +
                        "All information contained herein must be construed solely as statements of opinion, and  ICRA Analytics Limited or its affiliates or group companies and its respective and any of its officers, directors, personnel and employees, disclaim liability to any loss, damage of any nature, including but not limited to direct, indirect, punitive, special, exemplary, consequential, as also any loss of profit in any way arising from the use of this document or its contents in any manner or for any contingency within or beyond the control of, ICRA Analytics or any of its directors, officers, employees, agents, representatives, licensors or suppliers, arising from or in connection with the information contained herein or the use of or inability to use any such information.Opinions expressed in the document are not the opinions of our holding company, ICRA Limited(ICRA), and should not be construed as any indication of credit rating or grading of ICRA for any instruments that have been issued or are to be issued by any entity.The recipient alone shall be fully responsible and / or are liable for any decision taken on the basis of this document and / or the information contained herein.");
                    Cell.CellStyle = declationstyle;
                }

            }
            NPOIWrite.CellMerged(sheetTwo, 4, 4, 0, 17);
            sheetTwo.GetRow(4).HeightInPoints = 200;
            #endregion

            #region Disclaimer Sheet HyperLink
            XSSFCellStyle HyperLinkStyle = (XSSFCellStyle)workbook.CreateCellStyle();
            IFont HyperLinkFont = workbook.CreateFont();
            HyperLinkFont.Color = IndexedColors.Orange.Index;
            HyperLinkFont.Underline = FontUnderlineType.Single;
            HyperLinkStyle.SetFont(HyperLinkFont);

            Row = sheetTwo.CreateRow(5);
            Cell = Row.CreateCell(0);
            Cell.SetCellValue("Click here for third-party disclaimers");
            XSSFCreationHelper createHelper = (XSSFCreationHelper)workbook.GetCreationHelper();
            XSSFHyperlink link = (XSSFHyperlink)createHelper.CreateHyperlink(HyperlinkType.Url);
            link.Address = "https://www.icraanalytics.com/home/thirdpartydisclaimers";
            Cell.Hyperlink = link;
            Cell.CellStyle = HyperLinkStyle;
            #endregion

            sheet.ActiveCell = new CellAddress(0, 1);

            //var stream = new MemoryStream();
            //workbook.Write(stream);
            return workbook;
        }
        /// Written by Sourav Rakshit ////
        /// Export to Excel for single sheet ////
        public static NPOI.XSSF.UserModel.XSSFWorkbook ExportToExcelWorkBookWithNumberDecimalFormatMultiasetPurchs(UserBasicSettings ubs, List<TableHeaderEntity> listTableHeader, List<ExportEntity> listData, string LogoPath = "", string ReportName = "", string StrDateAsOn = "")
        {

            #region Variable
            string Header = ubs.Reporting_Format_Header;
            string Footer = ubs.Reporting_Format_Footer;
            string BlankData = ubs.BlankData == null ? "BLANK" : ubs.BlankData.ToUpper() == "BLANK" ? "" : ubs.BlankData;

            string StrHeader1 = "ICRA Analytics Limited";
            string StrHeader2 = "3rd Floor, Electric Mansion,Appasaheb Marathe Marg, Prabhadevi,Mumbai - 400 025 Maharashtra, India";
            string StrHeader3 = Header; //"Mumbai, Maharashtra 400093, IN";
            string StrReportName = ReportName;
            string StrSource = "Source: " + (string.IsNullOrEmpty(UserStatisticsEntity.SourceName) ? "MFI 360" : UserStatisticsEntity.SourceName);
            StrDateAsOn = "Data as on " + StrDateAsOn;
            string StrReportGeneratedOn = "Report Generated on " + DateTime.Now.ToString("dd-MMM-yyyy HH:mm:ss");

            #region number and decimal variable for AUM
            var aumPaddding = new string('0', (int)ubs.AUMDecimalFormat);
            var aumDecimalFormat = "0." + aumPaddding;
            string aumNUMBERFORMAT = ubs.NumberFormat;
            var aumNumberFormat = aumNUMBERFORMAT.Replace("0", "#");
            string aumNumberDecimalFormat = aumNumberFormat + "0." + new String('0', (int)ubs.AUMDecimalFormat);
            #endregion

            #region number and decimal variable for return
            var retPaddding = new string('0', (int)ubs.ReturnDecimalFormat);
            var retDecimalFormat = "0." + retPaddding;
            string retNUMBERFORMAT = ubs.NumberFormat;
            var retNumberFormat = retNUMBERFORMAT.Replace("0", "#");
            string retNumberDecimalFormat = retNumberFormat + "0." + new String('0', (int)ubs.ReturnDecimalFormat);
            #endregion

            #region number and decimal variable for NAV
            var navPaddding = new string('0', (int)ubs.NavDecimalFormat);
            var navDecimalFormat = "0." + navPaddding;
            string navNUMBERFORMAT = ubs.NumberFormat;
            var navNumberFormat = navNUMBERFORMAT.Replace("0", "#");
            string navNumberDecimalFormat = navNumberFormat + "0." + new String('0', (int)ubs.NavDecimalFormat);
            #endregion


            #region number and decimal variable for Other
            var othPaddding = new string('0', (int)ubs.OtherDecimal);
            var othDecimalFormat = "0." + othPaddding;
            string othNUMBERFORMAT = ubs.NumberFormat;
            var othNumberFormat = othNUMBERFORMAT.Replace("0", "#");
            string othNumberDecimalFormat = othNumberFormat + "0." + new String('0', (int)ubs.OtherDecimal);
            #endregion

            #region number and decimal variable for Ratio
            var ratioPaddding = new string('0', (int)ubs.RatioDecimalFormat);
            var ratioDecimalFormat = "0." + ratioPaddding;
            string ratioNUMBERFORMAT = ubs.NumberFormat;
            var ratioNumberFormat = ratioNUMBERFORMAT.Replace("0", "#");
            string ratioNumberDecimalFormat = ratioNumberFormat + "0." + new String('0', (int)ubs.RatioDecimalFormat);
            #endregion
            #region int Format with out Decimal
            var intNumberWithoutDecimalFormat = ubs.NumberFormat.Replace("0", "#");
            #endregion
            #endregion

            NPOI.XSSF.UserModel.XSSFWorkbook workbook = new NPOI.XSSF.UserModel.XSSFWorkbook();

            ISheet sheet = workbook.CreateSheet("Output");
            ISheet sheetTwo = workbook.CreateSheet("Disclaimer");

            #region Excel Sheet Gridlines Delete
            sheet.DisplayGridlines = false;
            sheetTwo.DisplayGridlines = false;
            #endregion

            #region Header Freeze
            sheet.CreateFreezePane(1, 6);
            #endregion

            #region Set Font For Header1,Header2 and Header3
            XSSFCellStyle HeaderStyle = (XSSFCellStyle)workbook.CreateCellStyle();
            IFont Headerfont = workbook.CreateFont();
            Headerfont.Boldweight = (short)FontBoldWeight.Bold;
            HeaderStyle.SetFont(Headerfont);
            #endregion

            #region Set Cell Value For Header1, Header2 and Header3
            var ICRArow = sheet.CreateRow(0);
            ICRArow.CreateCell(0);
            NPOIWrite.CellMerged(sheet, 0, 0, 1, 9);
            var ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader1);
            ICRACell.CellStyle = HeaderStyle;
            ICRArow = sheet.CreateRow(1);
            ICRArow.CreateCell(0);
            NPOIWrite.CellMerged(sheet, 1, 1, 1, 9);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader2);
            ICRACell.CellStyle = HeaderStyle;
            ICRArow = sheet.CreateRow(2);
            ICRArow.CreateCell(0);
            NPOIWrite.CellMerged(sheet, 2, 2, 1, 9);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader3);
            ICRACell.CellStyle = HeaderStyle;
            ICRACell.CellStyle.Alignment = HorizontalAlignment.Center;
            ICRArow = sheet.CreateRow(3);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.CellStyle.Alignment = HorizontalAlignment.Center;
            NPOIWrite.AutoFitColumn(sheet, 1);
            ICRACell.CellStyle = HeaderStyle;
            #endregion

            #region Report Name
            ICRArow = sheet.CreateRow(4);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrReportName);
            HeaderStyle.Alignment = HorizontalAlignment.Left;
            ICRACell.CellStyle = HeaderStyle;
            #endregion

            #region Header creation in the Excel
            var headerRow = sheet.CreateRow(5);
            sheet.GetRow(5).HeightInPoints = 30;
            var listHeaderFinal = listTableHeader.OrderBy(x => x.Position).ToList();
            for (int i = 0; i < listHeaderFinal.Count; i++)
            {
                var cell = headerRow.CreateCell(i);
                cell.SetCellValue(listHeaderFinal[i].ColumnName);
                NPOIWrite.AutoFitColumn(sheet, i);

                #region Commented by Subrata on 21 Feb 2018
                //ICellStyle CellStyle = workbook.CreateCellStyle();
                //CellStyle = workbook.CreateCellStyle();
                //CellStyle.FillBackgroundColor = IndexedColors.Blue.Index;
                #endregion

                #region Added by Subrata on 21 Feb 2018
                XSSFCellStyle style = (XSSFCellStyle)workbook.CreateCellStyle();
                XSSFColor colorToFill = new XSSFColor(new byte[] { 68, 114, 196 });//{ 51, 204, 204 }//Color.Blue);
                style.SetFillForegroundColor(colorToFill);
                IFont font = workbook.CreateFont();
                font.Color = IndexedColors.White.Index;
                font.Boldweight = (short)FontBoldWeight.Bold;
                style.SetFont(font);
                style.FillPattern = FillPattern.SolidForeground;
                style.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                style.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                style.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                style.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                if (i > 0)
                {
                    style.Alignment = HorizontalAlignment.Center;
                    style.VerticalAlignment = VerticalAlignment.Center;
                }
                else
                {
                    //style.Alignment = HorizontalAlignment.Left;
                    style.Alignment = (string.IsNullOrEmpty(listHeaderFinal[i].TextAlign) || listHeaderFinal[i].TextAlign == EnumTextAlign.left.ToString()) ? HorizontalAlignment.Left
                        : listHeaderFinal[i].TextAlign == EnumTextAlign.center.ToString() ? HorizontalAlignment.Center : HorizontalAlignment.Right;
                    style.VerticalAlignment = VerticalAlignment.Center;
                }
                #endregion

                cell.CellStyle = style;

            }
            #endregion

            #region Cell Style For Even Row

            #region With DecimalFormat AUM
            XSSFCellStyle aumAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor aumcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            aumAllCellStyleEvenDecFrmt.SetFillForegroundColor(aumcolorToFillEvenWtoutDec);
            aumAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat aumformatEven = workbook.CreateDataFormat();
            aumAllCellStyleEvenDecFrmt.DataFormat = aumformatEven.GetFormat(aumDecimalFormat);
            aumAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;
            //percentage format

            XSSFCellStyle cellStylePercentEven = (XSSFCellStyle)workbook.CreateCellStyle();
            cellStylePercentEven.DataFormat = HSSFDataFormat.GetBuiltinFormat("0.00%");
            cellStylePercentEven.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            cellStylePercentEven.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            cellStylePercentEven.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            cellStylePercentEven.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillFstClmnEvenpercent = new XSSFColor(new byte[] { 176, 196, 222 });
            cellStylePercentEven.SetFillForegroundColor(colorToFillFstClmnEvenpercent);
            cellStylePercentEven.FillPattern = FillPattern.SolidForeground;
            cellStylePercentEven.Alignment = HorizontalAlignment.Left;
            cellStylePercentEven.VerticalAlignment = VerticalAlignment.Center;
            cellStylePercentEven.SetDataFormat(workbook.CreateDataFormat().GetFormat("0.00%"));

            XSSFCellStyle cellStylePercentOdd = (XSSFCellStyle)workbook.CreateCellStyle();
            cellStylePercentOdd.DataFormat = HSSFDataFormat.GetBuiltinFormat("0.00%");
            cellStylePercentOdd.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            cellStylePercentOdd.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            cellStylePercentOdd.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            cellStylePercentOdd.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillFstClmnOddpercent = new XSSFColor(new byte[] { 255, 255, 255 });
            cellStylePercentOdd.SetFillForegroundColor(colorToFillFstClmnOddpercent);
            cellStylePercentOdd.FillPattern = FillPattern.SolidForeground;
            cellStylePercentOdd.Alignment = HorizontalAlignment.Left;
            cellStylePercentOdd.VerticalAlignment = VerticalAlignment.Center;
            cellStylePercentOdd.SetDataFormat(workbook.CreateDataFormat().GetFormat("0.00%"));

            /// Number Format ////
            XSSFCellStyle aumAllCellStyleEvenDecFrmtWNum = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleEvenDecFrmtWNum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmtWNum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmtWNum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmtWNum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor aumcolorToFillEvenWtoutDecWNum = new XSSFColor(new byte[] { 176, 196, 222 });
            aumAllCellStyleEvenDecFrmtWNum.SetFillForegroundColor(aumcolorToFillEvenWtoutDecWNum);
            aumAllCellStyleEvenDecFrmtWNum.FillPattern = FillPattern.SolidForeground;
            IDataFormat aumformatEvenWNum = workbook.CreateDataFormat();
            aumAllCellStyleEvenDecFrmtWNum.DataFormat = aumformatEvenWNum.GetFormat(aumNumberDecimalFormat);
            aumAllCellStyleEvenDecFrmtWNum.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleEvenDecFrmtWNum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Return
            XSSFCellStyle retAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            retAllCellStyleEvenDecFrmt.SetFillForegroundColor(retcolorToFillEvenWtoutDec);
            retAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatEven = workbook.CreateDataFormat();
            retAllCellStyleEvenDecFrmt.DataFormat = retformatEven.GetFormat(retDecimalFormat);
            retAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            retAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;


            ////Number Format ////
            XSSFCellStyle retAllCellStyleEvenDecFrmtWnum = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleEvenDecFrmtWnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmtWnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmtWnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmtWnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillEvenWtoutDecWnum = new XSSFColor(new byte[] { 176, 196, 222 });
            retAllCellStyleEvenDecFrmtWnum.SetFillForegroundColor(retcolorToFillEvenWtoutDecWnum);
            retAllCellStyleEvenDecFrmtWnum.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatEvenWnum = workbook.CreateDataFormat();
            retAllCellStyleEvenDecFrmtWnum.DataFormat = retformatEvenWnum.GetFormat(retNumberDecimalFormat);
            retAllCellStyleEvenDecFrmtWnum.Alignment = HorizontalAlignment.Center;
            retAllCellStyleEvenDecFrmtWnum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Nav
            XSSFCellStyle navAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor navcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            navAllCellStyleEvenDecFrmt.SetFillForegroundColor(navcolorToFillEvenWtoutDec);
            navAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat navformatEven = workbook.CreateDataFormat();
            navAllCellStyleEvenDecFrmt.DataFormat = navformatEven.GetFormat(navDecimalFormat);
            navAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            navAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;


            /// Number Format ////
            XSSFCellStyle navAllCellStyleEvenDecFrmtWnnum = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleEvenDecFrmtWnnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmtWnnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmtWnnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmtWnnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor navcolorToFillEvenWtoutDecWnnum = new XSSFColor(new byte[] { 176, 196, 222 });
            navAllCellStyleEvenDecFrmtWnnum.SetFillForegroundColor(navcolorToFillEvenWtoutDecWnnum);
            navAllCellStyleEvenDecFrmtWnnum.FillPattern = FillPattern.SolidForeground;
            IDataFormat navformatEvenWnnum = workbook.CreateDataFormat();
            navAllCellStyleEvenDecFrmtWnnum.DataFormat = navformatEvenWnnum.GetFormat(navNumberDecimalFormat);
            navAllCellStyleEvenDecFrmtWnnum.Alignment = HorizontalAlignment.Center;
            navAllCellStyleEvenDecFrmtWnnum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Other
            XSSFCellStyle otherAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            otherAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othercolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            otherAllCellStyleEvenDecFrmt.SetFillForegroundColor(othercolorToFillEvenWtoutDec);
            otherAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat otherformatEven = workbook.CreateDataFormat();
            otherAllCellStyleEvenDecFrmt.DataFormat = otherformatEven.GetFormat(othDecimalFormat);
            otherAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            otherAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            /// Number Format ///
            XSSFCellStyle otherAllCellStyleEvenDecFrmtWnum = (XSSFCellStyle)workbook.CreateCellStyle();
            otherAllCellStyleEvenDecFrmtWnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmtWnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmtWnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmtWnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othercolorToFillEvenWtoutDecWnum = new XSSFColor(new byte[] { 176, 196, 222 });
            otherAllCellStyleEvenDecFrmtWnum.SetFillForegroundColor(othercolorToFillEvenWtoutDecWnum);
            otherAllCellStyleEvenDecFrmtWnum.FillPattern = FillPattern.SolidForeground;
            IDataFormat otherformatEvenWnum = workbook.CreateDataFormat();
            otherAllCellStyleEvenDecFrmtWnum.DataFormat = otherformatEvenWnum.GetFormat(othNumberDecimalFormat);
            otherAllCellStyleEvenDecFrmtWnum.Alignment = HorizontalAlignment.Center;
            otherAllCellStyleEvenDecFrmtWnum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Ratio
            XSSFCellStyle ratAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor ratcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            ratAllCellStyleEvenDecFrmt.SetFillForegroundColor(ratcolorToFillEvenWtoutDec);
            ratAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat ratformatEven = workbook.CreateDataFormat();
            ratAllCellStyleEvenDecFrmt.DataFormat = ratformatEven.GetFormat(ratioDecimalFormat);
            ratAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle ratAllCellStyleEvenDecFrmtWth = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleEvenDecFrmtWth.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmtWth.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmtWth.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmtWth.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor ratcolorToFillEvenWtoutDecwth = new XSSFColor(new byte[] { 176, 196, 222 });
            ratAllCellStyleEvenDecFrmtWth.SetFillForegroundColor(ratcolorToFillEvenWtoutDecwth);
            ratAllCellStyleEvenDecFrmtWth.FillPattern = FillPattern.SolidForeground;
            IDataFormat ratformatEvenWth = workbook.CreateDataFormat();
            ratAllCellStyleEvenDecFrmtWth.DataFormat = ratformatEvenWth.GetFormat(ratioNumberDecimalFormat);
            ratAllCellStyleEvenDecFrmtWth.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleEvenDecFrmtWth.VerticalAlignment = VerticalAlignment.Center;
            #endregion


            #region No Format
            XSSFCellStyle AllCellStyleEven = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleEven.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillEven = new XSSFColor(new byte[] { 176, 196, 222 });
            AllCellStyleEven.SetFillForegroundColor(colorToFillEven);
            AllCellStyleEven.FillPattern = FillPattern.SolidForeground;
            AllCellStyleEven.Alignment = HorizontalAlignment.Center;
            AllCellStyleEven.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #endregion

            #region Cell Style For Odd Row

            #region With Decimal Format AUM
            XSSFCellStyle aumAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor AUMcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            aumAllCellStyleOddDec.SetFillForegroundColor(AUMcolorToFillOddDec);
            aumAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat AUMformatOddDec = workbook.CreateDataFormat();
            aumAllCellStyleOddDec.DataFormat = AUMformatOddDec.GetFormat(aumDecimalFormat);
            aumAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle aumAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor AUMcolorToFillOddDecWnf = new XSSFColor(new byte[] { 255, 255, 255 });
            aumAllCellStyleOddDecWnuf.SetFillForegroundColor(AUMcolorToFillOddDecWnf);
            aumAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat AUMformatOddDecWnuf = workbook.CreateDataFormat();
            aumAllCellStyleOddDecWnuf.DataFormat = AUMformatOddDecWnuf.GetFormat(aumNumberDecimalFormat);
            aumAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With Decimal Format Return
            XSSFCellStyle retAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor RETcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            retAllCellStyleOddDec.SetFillForegroundColor(RETcolorToFillOddDec);
            retAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat RETformatOddDec = workbook.CreateDataFormat();
            retAllCellStyleOddDec.DataFormat = RETformatOddDec.GetFormat(retDecimalFormat);
            retAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            retAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle retAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor RETcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            retAllCellStyleOddDecWnuf.SetFillForegroundColor(RETcolorToFillOddDecWnuf);
            retAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat RETformatOddDecWnuf = workbook.CreateDataFormat();
            retAllCellStyleOddDecWnuf.DataFormat = RETformatOddDecWnuf.GetFormat(retNumberDecimalFormat);
            retAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            retAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With Decimal Format Nav
            XSSFCellStyle navAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor naVcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            navAllCellStyleOddDec.SetFillForegroundColor(naVcolorToFillOddDec);
            navAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat naVformatOddDec = workbook.CreateDataFormat();
            navAllCellStyleOddDec.DataFormat = naVformatOddDec.GetFormat(navDecimalFormat);
            navAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            navAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            XSSFCellStyle navAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor naVcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            navAllCellStyleOddDecWnuf.SetFillForegroundColor(naVcolorToFillOddDecWnuf);
            navAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat naVformatOddDecWnuf = workbook.CreateDataFormat();
            navAllCellStyleOddDecWnuf.DataFormat = naVformatOddDecWnuf.GetFormat(navNumberDecimalFormat);
            navAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            navAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion


            #region With Decimal Format Other
            XSSFCellStyle othAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            othAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            othAllCellStyleOddDec.SetFillForegroundColor(othcolorToFillOddDec);
            othAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat othformatOddDec = workbook.CreateDataFormat();
            othAllCellStyleOddDec.DataFormat = othformatOddDec.GetFormat(othDecimalFormat);
            othAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            othAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            XSSFCellStyle othAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            othAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            othAllCellStyleOddDecWnuf.SetFillForegroundColor(othcolorToFillOddDecWnuf);
            othAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat othformatOddDecWnuf = workbook.CreateDataFormat();
            othAllCellStyleOddDecWnuf.DataFormat = othformatOddDecWnuf.GetFormat(othNumberDecimalFormat);
            othAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            othAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion


            #region With Decimal Format ratio
            XSSFCellStyle ratAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            ratAllCellStyleOddDec.SetFillForegroundColor(retcolorToFillOddDec);
            ratAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatOddDec = workbook.CreateDataFormat();
            ratAllCellStyleOddDec.DataFormat = retformatOddDec.GetFormat(ratioDecimalFormat);
            ratAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            XSSFCellStyle ratAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            ratAllCellStyleOddDecWnuf.SetFillForegroundColor(retcolorToFillOddDecWnuf);
            ratAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatOddDecWnuf = workbook.CreateDataFormat();
            ratAllCellStyleOddDecWnuf.DataFormat = retformatOddDecWnuf.GetFormat(ratioNumberDecimalFormat);
            ratAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region No Format
            XSSFCellStyle AllCellStyleOdd = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleOdd.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillOdd = new XSSFColor(new byte[] { 255, 255, 255 });
            AllCellStyleOdd.SetFillForegroundColor(colorToFillOdd);
            AllCellStyleOdd.FillPattern = FillPattern.SolidForeground;
            AllCellStyleOdd.Alignment = HorizontalAlignment.Center;
            AllCellStyleOdd.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #endregion

            #region Cell Style For First Column Even Row
            XSSFCellStyle AllCellStyleFstColmEven = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleFstColmEven.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillFstClmnEven = new XSSFColor(new byte[] { 176, 196, 222 });
            AllCellStyleFstColmEven.SetFillForegroundColor(colorToFillFstClmnEven);
            AllCellStyleFstColmEven.FillPattern = FillPattern.SolidForeground;
            AllCellStyleFstColmEven.Alignment = HorizontalAlignment.Left;
            AllCellStyleFstColmEven.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region Cell Style For First Column Odd Row
            XSSFCellStyle AllCellStyleFstColmOdd = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleFstColmOdd.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillFstClmnOdd = new XSSFColor(new byte[] { 255, 255, 255 });
            AllCellStyleFstColmOdd.SetFillForegroundColor(colorToFillFstClmnOdd);
            AllCellStyleFstColmOdd.FillPattern = FillPattern.SolidForeground;
            AllCellStyleFstColmOdd.Alignment = HorizontalAlignment.Left;
            AllCellStyleFstColmOdd.VerticalAlignment = VerticalAlignment.Center;
            #endregion
            #region Without Decimal Number Format Even Row
            XSSFCellStyle intAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            intAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            intAllCellStyleEvenDecFrmt.SetFillForegroundColor(intcolorToFillEvenWtoutDec);
            intAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat intformatEven = workbook.CreateDataFormat();
            intAllCellStyleEvenDecFrmt.DataFormat = intformatEven.GetFormat(intNumberWithoutDecimalFormat);
            intAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            intAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle intSimpleAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            intSimpleAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intSimplecolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            intSimpleAllCellStyleEvenDecFrmt.SetFillForegroundColor(intSimplecolorToFillEvenWtoutDec);
            intSimpleAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            intSimpleAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            intSimpleAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;
            #endregion
            #region Without Decimal Number Format Odd Row
            XSSFCellStyle intAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            intAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            intAllCellStyleOddDec.SetFillForegroundColor(intcolorToFillOddDec);
            intAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat intformatOddDec = workbook.CreateDataFormat();
            intAllCellStyleOddDec.DataFormat = intformatOddDec.GetFormat(intNumberWithoutDecimalFormat);
            intAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            intAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle intSimpleAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            intSimpleAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intSimplecolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            intSimpleAllCellStyleOddDec.SetFillForegroundColor(intSimplecolorToFillOddDec);
            intSimpleAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            intSimpleAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            intSimpleAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;
            #endregion
            #region With DateTime format
            var DateTimeFormat = ubs.DateFormat;
            XSSFCellStyle DateTimeAllCellStyleEvenFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            DateTimeAllCellStyleEvenFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleEvenFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleEvenFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleEvenFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor DateTimecolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            DateTimeAllCellStyleEvenFrmt.SetFillForegroundColor(DateTimecolorToFillEvenWtoutDec);
            DateTimeAllCellStyleEvenFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat DateTimeformatEven = workbook.CreateDataFormat();
            DateTimeAllCellStyleEvenFrmt.DataFormat = DateTimeformatEven.GetFormat(DateTimeFormat);
            DateTimeAllCellStyleEvenFrmt.Alignment = HorizontalAlignment.Center;
            DateTimeAllCellStyleEvenFrmt.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle DateTimeAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            DateTimeAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor DateTimecolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            DateTimeAllCellStyleOddDec.SetFillForegroundColor(DateTimecolorToFillOddDec);
            DateTimeAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat DateTimeformatOddDec = workbook.CreateDataFormat();
            DateTimeAllCellStyleOddDec.DataFormat = DateTimeformatOddDec.GetFormat(DateTimeFormat);
            DateTimeAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            DateTimeAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            #endregion
            #region Value added to the Excel

            #region Added by Subrata on 22 Feb 2018
            bool IsNumericKey = false;
            bool IsNumericValue = false;
            var AllListData = listData.SelectMany(x => x.LstKeyValuePair).ToArray();
            var AllDataKey = AllListData.Select(x => x.Key).Distinct().ToArray();
            int ValueRes;
            IsNumericKey = int.TryParse(AllDataKey[0], out ValueRes);
            #endregion

            int incr = 6;
            bool isNumeric = false;
            foreach (var item in listData)
            {
                if (item.LstKeyValuePair.Count() > 0)
                {
                    int value;
                    isNumeric = int.TryParse(item.LstKeyValuePair[0].Key, out value);
                }
                var dataRow = sheet.CreateRow(incr);
                sheet.GetRow(incr).HeightInPoints = 20;
                if (isNumeric == true)
                {
                    var cellValues = (from i in item.LstKeyValuePair
                                      from j in listTableHeader
                                      where i.Key.ToString() == j.Position.ToString()
                                      orderby j.Position
                                      select new
                                      {
                                          IsNum = j.IsNumberFormatReq,
                                          DecType = j.DecFormatType,
                                          Value = i.Value,
                                          IsMixedType = j.IsMixedValueType,
                                          IsPercentageType = j.IsPercentageValueType,
                                          IsDateTimeStringMixedType = j.IsDateTimeStringMixedType,
                                          IsDateTimeType = j.IsDateTimeType,
                                      }).ToArray();

                    for (int k = 0; k < cellValues.Length; k++)
                    {
                        var datacell = dataRow.CreateCell(k);
                        if (cellValues[k].DecType != DecimalFormatType.NoDecimalReq)
                        {
                            double OutVal;
                            if (string.IsNullOrEmpty(cellValues[k].Value) || cellValues[k].Value == BlankData || !double.TryParse(cellValues[k].Value, out OutVal))
                            {
                                datacell.SetCellValue(cellValues[k].Value);
                                if (k > 0)
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;

                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }

                            }
                            else
                            {
                                datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));

                                if (k > 0)
                                {
                                    if (cellValues[k].DecType == DecimalFormatType.AUM)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {

                                                datacell.CellStyle = aumAllCellStyleEvenDecFrmtWNum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = aumAllCellStyleEvenDecFrmt;
                                            }
                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = aumAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = aumAllCellStyleOddDec;
                                            }
                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.NAV)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = navAllCellStyleEvenDecFrmtWnnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = navAllCellStyleEvenDecFrmt;
                                            }
                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = navAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = navAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.OTHER)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = otherAllCellStyleEvenDecFrmtWnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = otherAllCellStyleEvenDecFrmt;
                                            }
                                        }

                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = othAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {

                                                datacell.CellStyle = othAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.RATIO)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = ratAllCellStyleEvenDecFrmtWth;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = ratAllCellStyleEvenDecFrmt;
                                            }
                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = ratAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = ratAllCellStyleOddDec;
                                            }
                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.RETURN)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = retAllCellStyleEvenDecFrmtWnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = retAllCellStyleEvenDecFrmt;
                                            }

                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = retAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = retAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.IntegerWithOutDecimal)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = intAllCellStyleEvenDecFrmt;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = intSimpleAllCellStyleEvenDecFrmt;
                                            }

                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = intAllCellStyleOddDec;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = intSimpleAllCellStyleOddDec;
                                            }

                                        }
                                    }

                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }

                            }

                        }
                        else
                        {
                            double OutVal;
                            if (double.TryParse(cellValues[k].Value, out OutVal) && !cellValues[k].IsMixedType && !cellValues[k].IsPercentageType)
                            {
                                datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                                if (k > 0)
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;

                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }
                            }
                            else if (cellValues[k].IsPercentageType)
                            {
                                if (double.TryParse(cellValues[k].Value, out OutVal))
                                {
                                    datacell.SetCellValue(OutVal / 100);
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = cellStylePercentEven;
                                    else
                                        datacell.CellStyle = cellStylePercentOdd;
                                }
                                else
                                {
                                    datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleEven;
                                        else
                                            datacell.CellStyle = AllCellStyleOdd;
                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }
                                }
                            }
                            else if (cellValues[k].IsDateTimeType)
                            {
                                DateTime OutValdt;
                                if (DateTime.TryParse(cellValues[k].Value, out OutValdt))
                                {
                                    datacell.SetCellValue(Convert.ToDateTime(cellValues[k].Value));
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = DateTimeAllCellStyleEvenFrmt;
                                    else
                                        datacell.CellStyle = DateTimeAllCellStyleOddDec;
                                }
                                else
                                {
                                    datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleEven;
                                        else
                                            datacell.CellStyle = AllCellStyleOdd;

                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }
                                }
                            }
                            else if (cellValues[k].IsDateTimeStringMixedType)
                            {
                                DateTime OutValdt;
                                if (DateTime.TryParse(cellValues[k].Value, out OutValdt))
                                {
                                    datacell.SetCellValue(Convert.ToDateTime(cellValues[k].Value));
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = DateTimeAllCellStyleEvenFrmt;
                                    else
                                        datacell.CellStyle = DateTimeAllCellStyleOddDec;
                                }
                                else
                                {
                                    datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleEven;
                                        else
                                            datacell.CellStyle = AllCellStyleOdd;

                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }
                                }
                            }
                            else
                            {
                                datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                if (k > 0)
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;

                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }
                            }
                        }


                    }
                    incr++;
                }
                else
                {
                    var cellValues = (from i in item.LstKeyValuePair
                                      from j in listTableHeader
                                      where i.Key == j.ColumnName
                                      orderby j.Position
                                      select new
                                      {
                                          IsNum = j.IsNumberFormatReq,
                                          DecType = j.DecFormatType,
                                          IsMixedType = j.IsMixedValueType,
                                          IsPercentageType = j.IsPercentageValueType,
                                          IsDateTimeStringMixedType = j.IsDateTimeStringMixedType,
                                          IsDateTimeType = j.IsDateTimeType,
                                          Value = i.Value
                                      }).ToArray();

                    for (int k = 0; k < cellValues.Length; k++)
                    {
                        var datacell = dataRow.CreateCell(k);
                        if (cellValues[k].DecType != DecimalFormatType.NoDecimalReq)
                        {
                            double OutVal;
                            if (string.IsNullOrEmpty(cellValues[k].Value) || cellValues[k].Value == BlankData || !double.TryParse(cellValues[k].Value, out OutVal))
                            {
                                datacell.SetCellValue(cellValues[k].Value);
                                if (k > 0)
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;
                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }

                            }
                            else
                            {
                                datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                                if (k > 0)
                                {
                                    if (cellValues[k].DecType == DecimalFormatType.AUM)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {

                                                datacell.CellStyle = aumAllCellStyleEvenDecFrmtWNum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = aumAllCellStyleEvenDecFrmt;
                                            }
                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = aumAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = aumAllCellStyleOddDec;
                                            }
                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.NAV)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = navAllCellStyleEvenDecFrmtWnnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = navAllCellStyleEvenDecFrmt;
                                            }
                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = navAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = navAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.OTHER)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = otherAllCellStyleEvenDecFrmtWnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = otherAllCellStyleEvenDecFrmt;
                                            }
                                        }

                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = othAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {

                                                datacell.CellStyle = othAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.RATIO)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = ratAllCellStyleEvenDecFrmtWth;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = ratAllCellStyleEvenDecFrmt;
                                            }
                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = ratAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = ratAllCellStyleOddDec;
                                            }
                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.RETURN)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = retAllCellStyleEvenDecFrmtWnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = retAllCellStyleEvenDecFrmt;
                                            }

                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = retAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = retAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.IntegerWithOutDecimal)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = intAllCellStyleEvenDecFrmt;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = intSimpleAllCellStyleEvenDecFrmt;
                                            }

                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = intAllCellStyleOddDec;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = intSimpleAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }

                            }

                        }
                        else
                        {
                            double OutVal;
                            if (double.TryParse(cellValues[k].Value, out OutVal) && !cellValues[k].IsMixedType && !cellValues[k].IsPercentageType)
                            {
                                datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                                if (k > 0)
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;

                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }
                            }
                            else if (cellValues[k].IsPercentageType)
                            {
                                if (double.TryParse(cellValues[k].Value, out OutVal))
                                {
                                    datacell.SetCellValue(OutVal / 100);
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = cellStylePercentEven;
                                    else
                                        datacell.CellStyle = cellStylePercentOdd;
                                }
                                else
                                {
                                    datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleEven;
                                        else
                                            datacell.CellStyle = AllCellStyleOdd;
                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }
                                }
                            }
                            else if (cellValues[k].IsDateTimeType)
                            {
                                DateTime OutValdt;
                                if (DateTime.TryParse(cellValues[k].Value, out OutValdt))
                                {
                                    datacell.SetCellValue(Convert.ToDateTime(cellValues[k].Value));
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = DateTimeAllCellStyleEvenFrmt;
                                    else
                                        datacell.CellStyle = DateTimeAllCellStyleOddDec;
                                }
                                else
                                {
                                    datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleEven;
                                        else
                                            datacell.CellStyle = AllCellStyleOdd;

                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }
                                }
                            }
                            else if (cellValues[k].IsDateTimeStringMixedType)
                            {
                                DateTime OutValdt;
                                if (DateTime.TryParse(cellValues[k].Value, out OutValdt))
                                {
                                    datacell.SetCellValue(Convert.ToDateTime(cellValues[k].Value));
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = DateTimeAllCellStyleEvenFrmt;
                                    else
                                        datacell.CellStyle = DateTimeAllCellStyleOddDec;
                                }
                                else
                                {
                                    datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleEven;
                                        else
                                            datacell.CellStyle = AllCellStyleOdd;

                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }
                                }
                            }
                            else
                            {
                                datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                if (k > 0)
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;

                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }
                            }
                        }


                    }
                    incr++;
                }

            }

            #region added on 18-Aug-2022
            CellMerged(sheet, 6, 9, 0, 0);
            CellMerged(sheet, 10, 13, 0, 0);
            #endregion
            #endregion

            for (int i = 0; i < listTableHeader.Count; i++)
                sheet.AutoSizeColumn(i);
            if (sheet.GetColumnWidth(0) < 11072)
                sheet.SetColumnWidth(0, 11072);

            #region Logo
            try
            {
                if (!string.IsNullOrEmpty(LogoPath))
                {
                    XSSFDrawing patriarch = (XSSFDrawing)sheet.CreateDrawingPatriarch();
                    XSSFClientAnchor anchor;
                    anchor = new XSSFClientAnchor(0, 0, 0, 255, 0, 0, 0, 3);
                    anchor.AnchorType = AnchorType.DontMoveAndResize;
                    XSSFPicture picture = (XSSFPicture)patriarch.CreatePicture(anchor, LoadImage(LogoPath, workbook, PictureType.PNG));
                    double x1 = .25;
                    double y1 = .75;
                    picture.Resize(x1, y1);
                    picture.LineStyle = LineStyle.None;
                }
            }
            catch (Exception ex)
            {
            }

            #endregion

            #region Source, Date As On and Report Generated On
            ICRArow = sheet.CreateRow(incr + 3);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrSource);

            ICRArow = sheet.CreateRow(incr + 4);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrDateAsOn);

            ICRArow = sheet.CreateRow(incr + 5);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrReportGeneratedOn);
            #endregion

            #region Sheet Two Logo
            try
            {
                if (!string.IsNullOrEmpty(LogoPath))
                {
                    XSSFDrawing patriarch = (XSSFDrawing)sheetTwo.CreateDrawingPatriarch();
                    XSSFClientAnchor anchor;
                    anchor = new XSSFClientAnchor(0, 0, 0, 255, 0, 0, 0, 3);
                    anchor.AnchorType = AnchorType.DontMoveAndResize;
                    XSSFPicture picture = (XSSFPicture)patriarch.CreatePicture(anchor, LoadImage(LogoPath, workbook, PictureType.PNG));
                    double x1 = 1.10;
                    double y1 = 1.10;
                    picture.Resize(x1, y1);
                    picture.LineStyle = LineStyle.None;
                }
            }
            catch (Exception ex)
            {
            }
            #endregion

            #region Disclaimer Sheet
            var Row = sheetTwo.CreateRow(1);
            var cellSheetTwo = Row.CreateCell(7);
            cellSheetTwo.SetCellValue(StrHeader1);
            cellSheetTwo.CellStyle = HeaderStyle;

            Row = sheetTwo.CreateRow(4);
            ICell Cell;
            for (int i = 0; i < 17; i++)
            {
                Cell = Row.CreateCell(i);

                XSSFCellStyle declationstyle = (XSSFCellStyle)workbook.CreateCellStyle();

                declationstyle.Alignment = HorizontalAlignment.Left;
                declationstyle.VerticalAlignment = VerticalAlignment.Top;
                declationstyle.WrapText = true;
                IFont declarationfnt = (XSSFFont)workbook.CreateFont();
                //declarationfnt.Boldweight = (short)FontBoldWeight.Bold;
                declarationfnt.FontName = "Calibri";
                declarationfnt.FontHeightInPoints = (short)11;
                declationstyle.SetFont(declarationfnt);
                Cell.SetCellValue(!string.IsNullOrEmpty(Footer) ? Footer : "All information contained herein is obtained by ICRA Analytics Limited from sources believed by it to be accurate and reliable. Because of the possibility of human or mechanical error as well as other factors, however, all information contained herein is provided 'AS IS' without warranty of any kind. ICRA Analytics adopts all necessary measures so that the information it uses is of sufficient quality and from sources ICRA Analytics considers to be reliable including, when appropriate, independent third-party sources. However, ICRA Analytics is not an auditor and cannot in every instance independently verify or validate information received in preparing this document." +
                    "All information contained herein must be construed solely as statements of opinion, and  ICRA Analytics Limited or its affiliates or group companies and its respective and any of its officers, directors, personnel and employees, disclaim liability to any loss, damage of any nature, including but not limited to direct, indirect, punitive, special, exemplary, consequential, as also any loss of profit in any way arising from the use of this document or its contents in any manner or for any contingency within or beyond the control of, ICRA Analytics or any of its directors, officers, employees, agents, representatives, licensors or suppliers, arising from or in connection with the information contained herein or the use of or inability to use any such information.Opinions expressed in the document are not the opinions of our holding company, ICRA Limited(ICRA), and should not be construed as any indication of credit rating or grading of ICRA for any instruments that have been issued or are to be issued by any entity.The recipient alone shall be fully responsible and / or are liable for any decision taken on the basis of this document and / or the information contained herein.");
                Cell.CellStyle = declationstyle;

            }
            NPOIWrite.CellMerged(sheetTwo, 4, 4, 0, 17);
            sheetTwo.GetRow(4).HeightInPoints = 200;
            #endregion

            #region Disclaimer Sheet HyperLink
            XSSFCellStyle HyperLinkStyle = (XSSFCellStyle)workbook.CreateCellStyle();
            IFont HyperLinkFont = workbook.CreateFont();
            HyperLinkFont.Color = IndexedColors.Orange.Index;
            HyperLinkFont.Underline = FontUnderlineType.Single;
            HyperLinkStyle.SetFont(HyperLinkFont);

            Row = sheetTwo.CreateRow(5);
            Cell = Row.CreateCell(0);
            Cell.SetCellValue("Click here for third-party disclaimers");
            XSSFCreationHelper createHelper = (XSSFCreationHelper)workbook.GetCreationHelper();
            XSSFHyperlink link = (XSSFHyperlink)createHelper.CreateHyperlink(HyperlinkType.Url);
            link.Address = "https://www.icraanalytics.com/home/thirdpartydisclaimers";
            Cell.Hyperlink = link;
            Cell.CellStyle = HyperLinkStyle;
            #endregion

            sheet.ActiveCell = new CellAddress(0, 1);
            var stream = new MemoryStream();
            workbook.Write(stream);

            return workbook;
        }
        public static NPOI.XSSF.UserModel.XSSFWorkbook ExportToExcelWorkBookWithNumberDecimalFormat(UserBasicSettings ubs, List<TableHeaderEntity> listTableHeader, List<ExportEntity> listData, string LogoPath = "", string ReportName = "", string StrDateAsOn = "")
        {

            #region Variable
            string Header = ubs.Reporting_Format_Header;
            string Footer = ubs.Reporting_Format_Footer;
            string BlankData = ubs.BlankData == null ? "BLANK" : ubs.BlankData.ToUpper() == "BLANK" ? "" : ubs.BlankData;

            string StrHeader1 = "ICRA Analytics Limited";
            string StrHeader2 = "3rd Floor, Electric Mansion,Appasaheb Marathe Marg, Prabhadevi,Mumbai - 400 025 Maharashtra, India";
            string StrHeader3 = Header; //"Mumbai, Maharashtra 400093, IN";
            string StrReportName = ReportName;
            string StrSource = "Source: " + (string.IsNullOrEmpty(UserStatisticsEntity.SourceName) ? "MFI 360" : UserStatisticsEntity.SourceName);
            StrDateAsOn = "Data as on " + StrDateAsOn;
            string StrReportGeneratedOn = "Report Generated on " + DateTime.Now.ToString("dd-MMM-yyyy HH:mm:ss");

            #region number and decimal variable for AUM
            var aumPaddding = new string('0', (int)ubs.AUMDecimalFormat);
            var aumDecimalFormat = "0." + aumPaddding;
            string aumNUMBERFORMAT = ubs.NumberFormat;
            var aumNumberFormat = aumNUMBERFORMAT.Replace("0", "#");
            string aumNumberDecimalFormat = aumNumberFormat + "0." + new String('0', (int)ubs.AUMDecimalFormat);
            #endregion

            #region number and decimal variable for return
            var retPaddding = new string('0', (int)ubs.ReturnDecimalFormat);
            var retDecimalFormat = "0." + retPaddding;
            string retNUMBERFORMAT = ubs.NumberFormat;
            var retNumberFormat = retNUMBERFORMAT.Replace("0", "#");
            string retNumberDecimalFormat = retNumberFormat + "0." + new String('0', (int)ubs.ReturnDecimalFormat);
            #endregion

            #region number and decimal variable for NAV
            var navPaddding = new string('0', (int)ubs.NavDecimalFormat);
            var navDecimalFormat = "0." + navPaddding;
            string navNUMBERFORMAT = ubs.NumberFormat;
            var navNumberFormat = navNUMBERFORMAT.Replace("0", "#");
            string navNumberDecimalFormat = navNumberFormat + "0." + new String('0', (int)ubs.NavDecimalFormat);
            #endregion


            #region number and decimal variable for Other
            var othPaddding = new string('0', (int)ubs.OtherDecimal);
            var othDecimalFormat = "0." + othPaddding;
            string othNUMBERFORMAT = ubs.NumberFormat;
            var othNumberFormat = othNUMBERFORMAT.Replace("0", "#");
            string othNumberDecimalFormat = othNumberFormat + "0." + new String('0', (int)ubs.OtherDecimal);
            #endregion

            #region number and decimal variable for Ratio
            var ratioPaddding = new string('0', (int)ubs.RatioDecimalFormat);
            var ratioDecimalFormat = "0." + ratioPaddding;
            string ratioNUMBERFORMAT = ubs.NumberFormat;
            var ratioNumberFormat = ratioNUMBERFORMAT.Replace("0", "#");
            string ratioNumberDecimalFormat = ratioNumberFormat + "0." + new String('0', (int)ubs.RatioDecimalFormat);
            #endregion
            #region int Format with out Decimal
            var intNumberWithoutDecimalFormat = ubs.NumberFormat.Replace("0", "#");
            #endregion
            #endregion

            NPOI.XSSF.UserModel.XSSFWorkbook workbook = new NPOI.XSSF.UserModel.XSSFWorkbook();

            ISheet sheet = workbook.CreateSheet("Output");
            ISheet sheetTwo = workbook.CreateSheet("Disclaimer");

            #region Excel Sheet Gridlines Delete
            sheet.DisplayGridlines = false;
            sheetTwo.DisplayGridlines = false;
            #endregion

            #region Header Freeze
            sheet.CreateFreezePane(1, 6);
            #endregion

            #region Set Font For Header1,Header2 and Header3
            XSSFCellStyle HeaderStyle = (XSSFCellStyle)workbook.CreateCellStyle();
            IFont Headerfont = workbook.CreateFont();
            Headerfont.Boldweight = (short)FontBoldWeight.Bold;
            HeaderStyle.SetFont(Headerfont);
            #endregion

            #region Set Cell Value For Header1, Header2 and Header3
            var ICRArow = sheet.CreateRow(0);
            ICRArow.CreateCell(0);
            NPOIWrite.CellMerged(sheet, 0, 0, 1, 9);
            var ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader1);
            ICRACell.CellStyle = HeaderStyle;
            ICRArow = sheet.CreateRow(1);
            ICRArow.CreateCell(0);
            NPOIWrite.CellMerged(sheet, 1, 1, 1, 9);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader2);
            ICRACell.CellStyle = HeaderStyle;
            ICRArow = sheet.CreateRow(2);
            ICRArow.CreateCell(0);
            NPOIWrite.CellMerged(sheet, 2, 2, 1, 9);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader3);
            ICRACell.CellStyle = HeaderStyle;
            ICRACell.CellStyle.Alignment = HorizontalAlignment.Center;
            ICRArow = sheet.CreateRow(3);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.CellStyle.Alignment = HorizontalAlignment.Center;
            NPOIWrite.AutoFitColumn(sheet, 1);
            ICRACell.CellStyle = HeaderStyle;
            #endregion

            #region Report Name
            ICRArow = sheet.CreateRow(4);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrReportName);
            HeaderStyle.Alignment = HorizontalAlignment.Left;
            ICRACell.CellStyle = HeaderStyle;
            #endregion

            #region Header creation in the Excel
            var headerRow = sheet.CreateRow(5);
            sheet.GetRow(5).HeightInPoints = 30;
            var listHeaderFinal = listTableHeader.OrderBy(x => x.Position).ToList();
            for (int i = 0; i < listHeaderFinal.Count; i++)
            {
                var cell = headerRow.CreateCell(i);
                cell.SetCellValue(listHeaderFinal[i].ColumnName);
                NPOIWrite.AutoFitColumn(sheet, i);

                #region Commented by Subrata on 21 Feb 2018
                //ICellStyle CellStyle = workbook.CreateCellStyle();
                //CellStyle = workbook.CreateCellStyle();
                //CellStyle.FillBackgroundColor = IndexedColors.Blue.Index;
                #endregion

                #region Added by Subrata on 21 Feb 2018
                XSSFCellStyle style = (XSSFCellStyle)workbook.CreateCellStyle();
                XSSFColor colorToFill = new XSSFColor(new byte[] { 68, 114, 196 });//{ 51, 204, 204 }//Color.Blue);
                style.SetFillForegroundColor(colorToFill);
                IFont font = workbook.CreateFont();
                font.Color = IndexedColors.White.Index;
                font.Boldweight = (short)FontBoldWeight.Bold;
                style.SetFont(font);
                style.FillPattern = FillPattern.SolidForeground;
                style.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                style.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                style.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                style.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                if (i > 0)
                {
                    style.Alignment = HorizontalAlignment.Center;
                    style.VerticalAlignment = VerticalAlignment.Center;
                }
                else
                {
                    //style.Alignment = HorizontalAlignment.Left;
                    style.Alignment = (string.IsNullOrEmpty(listHeaderFinal[i].TextAlign) || listHeaderFinal[i].TextAlign == EnumTextAlign.left.ToString()) ? HorizontalAlignment.Left
                        : listHeaderFinal[i].TextAlign == EnumTextAlign.center.ToString() ? HorizontalAlignment.Center : HorizontalAlignment.Right;
                    style.VerticalAlignment = VerticalAlignment.Center;
                }
                #endregion

                cell.CellStyle = style;

            }
            #endregion

            #region Cell Style For Even Row

            #region With DecimalFormat AUM
            XSSFCellStyle aumAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor aumcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            aumAllCellStyleEvenDecFrmt.SetFillForegroundColor(aumcolorToFillEvenWtoutDec);
            aumAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat aumformatEven = workbook.CreateDataFormat();
            aumAllCellStyleEvenDecFrmt.DataFormat = aumformatEven.GetFormat(aumDecimalFormat);
            aumAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;
            //percentage format

            XSSFCellStyle cellStylePercentEven = (XSSFCellStyle)workbook.CreateCellStyle();
            cellStylePercentEven.DataFormat = HSSFDataFormat.GetBuiltinFormat("0.00%");
            cellStylePercentEven.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            cellStylePercentEven.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            cellStylePercentEven.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            cellStylePercentEven.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillFstClmnEvenpercent = new XSSFColor(new byte[] { 176, 196, 222 });
            cellStylePercentEven.SetFillForegroundColor(colorToFillFstClmnEvenpercent);
            cellStylePercentEven.FillPattern = FillPattern.SolidForeground;
            cellStylePercentEven.Alignment = HorizontalAlignment.Left;
            cellStylePercentEven.VerticalAlignment = VerticalAlignment.Center;
            cellStylePercentEven.SetDataFormat(workbook.CreateDataFormat().GetFormat("0.00%"));

            XSSFCellStyle cellStylePercentOdd = (XSSFCellStyle)workbook.CreateCellStyle();
            cellStylePercentOdd.DataFormat = HSSFDataFormat.GetBuiltinFormat("0.00%");
            cellStylePercentOdd.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            cellStylePercentOdd.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            cellStylePercentOdd.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            cellStylePercentOdd.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillFstClmnOddpercent = new XSSFColor(new byte[] { 255, 255, 255 });
            cellStylePercentOdd.SetFillForegroundColor(colorToFillFstClmnOddpercent);
            cellStylePercentOdd.FillPattern = FillPattern.SolidForeground;
            cellStylePercentOdd.Alignment = HorizontalAlignment.Left;
            cellStylePercentOdd.VerticalAlignment = VerticalAlignment.Center;
            cellStylePercentOdd.SetDataFormat(workbook.CreateDataFormat().GetFormat("0.00%"));

            /// Number Format ////
            XSSFCellStyle aumAllCellStyleEvenDecFrmtWNum = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleEvenDecFrmtWNum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmtWNum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmtWNum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmtWNum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor aumcolorToFillEvenWtoutDecWNum = new XSSFColor(new byte[] { 176, 196, 222 });
            aumAllCellStyleEvenDecFrmtWNum.SetFillForegroundColor(aumcolorToFillEvenWtoutDecWNum);
            aumAllCellStyleEvenDecFrmtWNum.FillPattern = FillPattern.SolidForeground;
            IDataFormat aumformatEvenWNum = workbook.CreateDataFormat();
            aumAllCellStyleEvenDecFrmtWNum.DataFormat = aumformatEvenWNum.GetFormat(aumNumberDecimalFormat);
            aumAllCellStyleEvenDecFrmtWNum.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleEvenDecFrmtWNum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Return
            XSSFCellStyle retAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            retAllCellStyleEvenDecFrmt.SetFillForegroundColor(retcolorToFillEvenWtoutDec);
            retAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatEven = workbook.CreateDataFormat();
            retAllCellStyleEvenDecFrmt.DataFormat = retformatEven.GetFormat(retDecimalFormat);
            retAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            retAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;


            ////Number Format ////
            XSSFCellStyle retAllCellStyleEvenDecFrmtWnum = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleEvenDecFrmtWnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmtWnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmtWnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmtWnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillEvenWtoutDecWnum = new XSSFColor(new byte[] { 176, 196, 222 });
            retAllCellStyleEvenDecFrmtWnum.SetFillForegroundColor(retcolorToFillEvenWtoutDecWnum);
            retAllCellStyleEvenDecFrmtWnum.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatEvenWnum = workbook.CreateDataFormat();
            retAllCellStyleEvenDecFrmtWnum.DataFormat = retformatEvenWnum.GetFormat(retNumberDecimalFormat);
            retAllCellStyleEvenDecFrmtWnum.Alignment = HorizontalAlignment.Center;
            retAllCellStyleEvenDecFrmtWnum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Nav
            XSSFCellStyle navAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor navcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            navAllCellStyleEvenDecFrmt.SetFillForegroundColor(navcolorToFillEvenWtoutDec);
            navAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat navformatEven = workbook.CreateDataFormat();
            navAllCellStyleEvenDecFrmt.DataFormat = navformatEven.GetFormat(navDecimalFormat);
            navAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            navAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;


            /// Number Format ////
            XSSFCellStyle navAllCellStyleEvenDecFrmtWnnum = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleEvenDecFrmtWnnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmtWnnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmtWnnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmtWnnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor navcolorToFillEvenWtoutDecWnnum = new XSSFColor(new byte[] { 176, 196, 222 });
            navAllCellStyleEvenDecFrmtWnnum.SetFillForegroundColor(navcolorToFillEvenWtoutDecWnnum);
            navAllCellStyleEvenDecFrmtWnnum.FillPattern = FillPattern.SolidForeground;
            IDataFormat navformatEvenWnnum = workbook.CreateDataFormat();
            navAllCellStyleEvenDecFrmtWnnum.DataFormat = navformatEvenWnnum.GetFormat(navNumberDecimalFormat);
            navAllCellStyleEvenDecFrmtWnnum.Alignment = HorizontalAlignment.Center;
            navAllCellStyleEvenDecFrmtWnnum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Other
            XSSFCellStyle otherAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            otherAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othercolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            otherAllCellStyleEvenDecFrmt.SetFillForegroundColor(othercolorToFillEvenWtoutDec);
            otherAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat otherformatEven = workbook.CreateDataFormat();
            otherAllCellStyleEvenDecFrmt.DataFormat = otherformatEven.GetFormat(othDecimalFormat);
            otherAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            otherAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            /// Number Format ///
            XSSFCellStyle otherAllCellStyleEvenDecFrmtWnum = (XSSFCellStyle)workbook.CreateCellStyle();
            otherAllCellStyleEvenDecFrmtWnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmtWnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmtWnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmtWnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othercolorToFillEvenWtoutDecWnum = new XSSFColor(new byte[] { 176, 196, 222 });
            otherAllCellStyleEvenDecFrmtWnum.SetFillForegroundColor(othercolorToFillEvenWtoutDecWnum);
            otherAllCellStyleEvenDecFrmtWnum.FillPattern = FillPattern.SolidForeground;
            IDataFormat otherformatEvenWnum = workbook.CreateDataFormat();
            otherAllCellStyleEvenDecFrmtWnum.DataFormat = otherformatEvenWnum.GetFormat(othNumberDecimalFormat);
            otherAllCellStyleEvenDecFrmtWnum.Alignment = HorizontalAlignment.Center;
            otherAllCellStyleEvenDecFrmtWnum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Ratio
            XSSFCellStyle ratAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor ratcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            ratAllCellStyleEvenDecFrmt.SetFillForegroundColor(ratcolorToFillEvenWtoutDec);
            ratAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat ratformatEven = workbook.CreateDataFormat();
            ratAllCellStyleEvenDecFrmt.DataFormat = ratformatEven.GetFormat(ratioDecimalFormat);
            ratAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle ratAllCellStyleEvenDecFrmtWth = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleEvenDecFrmtWth.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmtWth.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmtWth.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmtWth.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor ratcolorToFillEvenWtoutDecwth = new XSSFColor(new byte[] { 176, 196, 222 });
            ratAllCellStyleEvenDecFrmtWth.SetFillForegroundColor(ratcolorToFillEvenWtoutDecwth);
            ratAllCellStyleEvenDecFrmtWth.FillPattern = FillPattern.SolidForeground;
            IDataFormat ratformatEvenWth = workbook.CreateDataFormat();
            ratAllCellStyleEvenDecFrmtWth.DataFormat = ratformatEvenWth.GetFormat(ratioNumberDecimalFormat);
            ratAllCellStyleEvenDecFrmtWth.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleEvenDecFrmtWth.VerticalAlignment = VerticalAlignment.Center;
            #endregion


            #region No Format
            XSSFCellStyle AllCellStyleEven = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleEven.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillEven = new XSSFColor(new byte[] { 176, 196, 222 });
            AllCellStyleEven.SetFillForegroundColor(colorToFillEven);
            AllCellStyleEven.FillPattern = FillPattern.SolidForeground;
            AllCellStyleEven.Alignment = HorizontalAlignment.Center;
            AllCellStyleEven.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #endregion

            #region Cell Style For Odd Row

            #region With Decimal Format AUM
            XSSFCellStyle aumAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor AUMcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            aumAllCellStyleOddDec.SetFillForegroundColor(AUMcolorToFillOddDec);
            aumAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat AUMformatOddDec = workbook.CreateDataFormat();
            aumAllCellStyleOddDec.DataFormat = AUMformatOddDec.GetFormat(aumDecimalFormat);
            aumAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle aumAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor AUMcolorToFillOddDecWnf = new XSSFColor(new byte[] { 255, 255, 255 });
            aumAllCellStyleOddDecWnuf.SetFillForegroundColor(AUMcolorToFillOddDecWnf);
            aumAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat AUMformatOddDecWnuf = workbook.CreateDataFormat();
            aumAllCellStyleOddDecWnuf.DataFormat = AUMformatOddDecWnuf.GetFormat(aumNumberDecimalFormat);
            aumAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With Decimal Format Return
            XSSFCellStyle retAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor RETcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            retAllCellStyleOddDec.SetFillForegroundColor(RETcolorToFillOddDec);
            retAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat RETformatOddDec = workbook.CreateDataFormat();
            retAllCellStyleOddDec.DataFormat = RETformatOddDec.GetFormat(retDecimalFormat);
            retAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            retAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle retAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor RETcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            retAllCellStyleOddDecWnuf.SetFillForegroundColor(RETcolorToFillOddDecWnuf);
            retAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat RETformatOddDecWnuf = workbook.CreateDataFormat();
            retAllCellStyleOddDecWnuf.DataFormat = RETformatOddDecWnuf.GetFormat(retNumberDecimalFormat);
            retAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            retAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With Decimal Format Nav
            XSSFCellStyle navAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor naVcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            navAllCellStyleOddDec.SetFillForegroundColor(naVcolorToFillOddDec);
            navAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat naVformatOddDec = workbook.CreateDataFormat();
            navAllCellStyleOddDec.DataFormat = naVformatOddDec.GetFormat(navDecimalFormat);
            navAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            navAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            XSSFCellStyle navAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor naVcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            navAllCellStyleOddDecWnuf.SetFillForegroundColor(naVcolorToFillOddDecWnuf);
            navAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat naVformatOddDecWnuf = workbook.CreateDataFormat();
            navAllCellStyleOddDecWnuf.DataFormat = naVformatOddDecWnuf.GetFormat(navNumberDecimalFormat);
            navAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            navAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion


            #region With Decimal Format Other
            XSSFCellStyle othAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            othAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            othAllCellStyleOddDec.SetFillForegroundColor(othcolorToFillOddDec);
            othAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat othformatOddDec = workbook.CreateDataFormat();
            othAllCellStyleOddDec.DataFormat = othformatOddDec.GetFormat(othDecimalFormat);
            othAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            othAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            XSSFCellStyle othAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            othAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            othAllCellStyleOddDecWnuf.SetFillForegroundColor(othcolorToFillOddDecWnuf);
            othAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat othformatOddDecWnuf = workbook.CreateDataFormat();
            othAllCellStyleOddDecWnuf.DataFormat = othformatOddDecWnuf.GetFormat(othNumberDecimalFormat);
            othAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            othAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion


            #region With Decimal Format ratio
            XSSFCellStyle ratAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            ratAllCellStyleOddDec.SetFillForegroundColor(retcolorToFillOddDec);
            ratAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatOddDec = workbook.CreateDataFormat();
            ratAllCellStyleOddDec.DataFormat = retformatOddDec.GetFormat(ratioDecimalFormat);
            ratAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            XSSFCellStyle ratAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            ratAllCellStyleOddDecWnuf.SetFillForegroundColor(retcolorToFillOddDecWnuf);
            ratAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatOddDecWnuf = workbook.CreateDataFormat();
            ratAllCellStyleOddDecWnuf.DataFormat = retformatOddDecWnuf.GetFormat(ratioNumberDecimalFormat);
            ratAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region No Format
            XSSFCellStyle AllCellStyleOdd = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleOdd.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillOdd = new XSSFColor(new byte[] { 255, 255, 255 });
            AllCellStyleOdd.SetFillForegroundColor(colorToFillOdd);
            AllCellStyleOdd.FillPattern = FillPattern.SolidForeground;
            AllCellStyleOdd.Alignment = HorizontalAlignment.Center;
            AllCellStyleOdd.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #endregion

            #region Cell Style For First Column Even Row
            XSSFCellStyle AllCellStyleFstColmEven = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleFstColmEven.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillFstClmnEven = new XSSFColor(new byte[] { 176, 196, 222 });
            AllCellStyleFstColmEven.SetFillForegroundColor(colorToFillFstClmnEven);
            AllCellStyleFstColmEven.FillPattern = FillPattern.SolidForeground;
            AllCellStyleFstColmEven.Alignment = HorizontalAlignment.Left;
            AllCellStyleFstColmEven.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region Cell Style For First Column Odd Row
            XSSFCellStyle AllCellStyleFstColmOdd = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleFstColmOdd.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillFstClmnOdd = new XSSFColor(new byte[] { 255, 255, 255 });
            AllCellStyleFstColmOdd.SetFillForegroundColor(colorToFillFstClmnOdd);
            AllCellStyleFstColmOdd.FillPattern = FillPattern.SolidForeground;
            AllCellStyleFstColmOdd.Alignment = HorizontalAlignment.Left;
            AllCellStyleFstColmOdd.VerticalAlignment = VerticalAlignment.Center;
            #endregion
            #region Without Decimal Number Format Even Row
            XSSFCellStyle intAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            intAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            intAllCellStyleEvenDecFrmt.SetFillForegroundColor(intcolorToFillEvenWtoutDec);
            intAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat intformatEven = workbook.CreateDataFormat();
            intAllCellStyleEvenDecFrmt.DataFormat = intformatEven.GetFormat(intNumberWithoutDecimalFormat);
            intAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            intAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle intSimpleAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            intSimpleAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intSimplecolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            intSimpleAllCellStyleEvenDecFrmt.SetFillForegroundColor(intSimplecolorToFillEvenWtoutDec);
            intSimpleAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            intSimpleAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            intSimpleAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;
            #endregion
            #region Without Decimal Number Format Odd Row
            XSSFCellStyle intAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            intAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            intAllCellStyleOddDec.SetFillForegroundColor(intcolorToFillOddDec);
            intAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat intformatOddDec = workbook.CreateDataFormat();
            intAllCellStyleOddDec.DataFormat = intformatOddDec.GetFormat(intNumberWithoutDecimalFormat);
            intAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            intAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle intSimpleAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            intSimpleAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intSimplecolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            intSimpleAllCellStyleOddDec.SetFillForegroundColor(intSimplecolorToFillOddDec);
            intSimpleAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            intSimpleAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            intSimpleAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;
            #endregion
            #region With DateTime format
            var DateTimeFormat = ubs.DateFormat;
            var MonthYearFormat = "MMM-yyyy";
            XSSFCellStyle DateTimeAllCellStyleEvenFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            DateTimeAllCellStyleEvenFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleEvenFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleEvenFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleEvenFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor DateTimecolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            DateTimeAllCellStyleEvenFrmt.SetFillForegroundColor(DateTimecolorToFillEvenWtoutDec);
            DateTimeAllCellStyleEvenFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat DateTimeformatEven = workbook.CreateDataFormat();
            DateTimeAllCellStyleEvenFrmt.DataFormat = DateTimeformatEven.GetFormat(DateTimeFormat);
            DateTimeAllCellStyleEvenFrmt.Alignment = HorizontalAlignment.Center;
            DateTimeAllCellStyleEvenFrmt.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle DateTimeAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            DateTimeAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor DateTimecolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            DateTimeAllCellStyleOddDec.SetFillForegroundColor(DateTimecolorToFillOddDec);
            DateTimeAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat DateTimeformatOddDec = workbook.CreateDataFormat();
            DateTimeAllCellStyleOddDec.DataFormat = DateTimeformatOddDec.GetFormat(DateTimeFormat);
            DateTimeAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            DateTimeAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            #endregion
            #region With MonthYear format
            XSSFCellStyle MonthYearAllCellStyleEvenFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            MonthYearAllCellStyleEvenFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            MonthYearAllCellStyleEvenFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            MonthYearAllCellStyleEvenFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            MonthYearAllCellStyleEvenFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor MonthYearcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            MonthYearAllCellStyleEvenFrmt.SetFillForegroundColor(MonthYearcolorToFillEvenWtoutDec);
            MonthYearAllCellStyleEvenFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat MonthYearformatEven = workbook.CreateDataFormat();
            MonthYearAllCellStyleEvenFrmt.DataFormat = DateTimeformatEven.GetFormat(MonthYearFormat);
            MonthYearAllCellStyleEvenFrmt.Alignment = HorizontalAlignment.Center;
            MonthYearAllCellStyleEvenFrmt.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle MonthYearAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            MonthYearAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            MonthYearAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            MonthYearAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            MonthYearAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor MonthYearcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            MonthYearAllCellStyleOddDec.SetFillForegroundColor(MonthYearcolorToFillOddDec);
            MonthYearAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat MonthYearformatOddDec = workbook.CreateDataFormat();
            MonthYearAllCellStyleOddDec.DataFormat = DateTimeformatOddDec.GetFormat(MonthYearFormat);
            MonthYearAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            MonthYearAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            #endregion
            #region Value added to the Excel

            #region Added by Subrata on 22 Feb 2018
            bool IsNumericKey = false;
            bool IsNumericValue = false;
            var AllListData = listData.SelectMany(x => x.LstKeyValuePair).ToArray();
            var AllDataKey = AllListData.Select(x => x.Key).Distinct().ToArray();
            int ValueRes;
            IsNumericKey = int.TryParse(AllDataKey[0], out ValueRes);
            #endregion

            int incr = 6;
            bool isNumeric = false;
            foreach (var item in listData)
            {
                if (item.LstKeyValuePair.Count() > 0)
                {
                    int value;
                    isNumeric = int.TryParse(item.LstKeyValuePair[0].Key, out value);
                }
                var dataRow = sheet.CreateRow(incr);
                sheet.GetRow(incr).HeightInPoints = 20;
                if (isNumeric == true)
                {
                    var cellValues = (from i in item.LstKeyValuePair
                                      join h in listTableHeader
                                      on i.Key.ToString() equals h.Position.ToString()
                                      orderby h.Position
                                      let j = item.HeaderEntity ?? h
                                      select new
                                      {
                                          IsNum = j.IsNumberFormatReq,
                                          DecType = j.DecFormatType,
                                          Value = i.Value,
                                          IsMixedType = j.IsMixedValueType,
                                          IsPercentageType = j.IsPercentageValueType,
                                          IsDateTimeStringMixedType = j.IsDateTimeStringMixedType,
                                          IsDateTimeType = j.IsDateTimeType,
                                          IsMonthYearType = j.IsMonthYearType
                                      }).ToArray();

                    for (int k = 0; k < cellValues.Length; k++)
                    {
                        var datacell = dataRow.CreateCell(k);
                        if (cellValues[k].DecType != DecimalFormatType.NoDecimalReq)
                        {
                            double OutVal;
                            if (string.IsNullOrEmpty(cellValues[k].Value) || cellValues[k].Value == BlankData || !double.TryParse(cellValues[k].Value, out OutVal))
                            {
                                datacell.SetCellValue(cellValues[k].Value);
                                if (k > 0)
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;

                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }

                            }
                            else
                            {
                                datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));

                                if (k > 0)
                                {
                                    if (cellValues[k].DecType == DecimalFormatType.AUM)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {

                                                datacell.CellStyle = aumAllCellStyleEvenDecFrmtWNum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = aumAllCellStyleEvenDecFrmt;
                                            }
                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = aumAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = aumAllCellStyleOddDec;
                                            }
                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.NAV)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = navAllCellStyleEvenDecFrmtWnnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = navAllCellStyleEvenDecFrmt;
                                            }
                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = navAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = navAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.OTHER)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = otherAllCellStyleEvenDecFrmtWnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = otherAllCellStyleEvenDecFrmt;
                                            }
                                        }

                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = othAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {

                                                datacell.CellStyle = othAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.RATIO)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = ratAllCellStyleEvenDecFrmtWth;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = ratAllCellStyleEvenDecFrmt;
                                            }
                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = ratAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = ratAllCellStyleOddDec;
                                            }
                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.RETURN)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = retAllCellStyleEvenDecFrmtWnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = retAllCellStyleEvenDecFrmt;
                                            }

                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = retAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = retAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.IntegerWithOutDecimal)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = intAllCellStyleEvenDecFrmt;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = intSimpleAllCellStyleEvenDecFrmt;
                                            }

                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = intAllCellStyleOddDec;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = intSimpleAllCellStyleOddDec;
                                            }

                                        }
                                    }

                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }

                            }

                        }
                        else
                        {
                            double OutVal;
                            if (double.TryParse(cellValues[k].Value, out OutVal) && !cellValues[k].IsMixedType && !cellValues[k].IsPercentageType)
                            {
                                datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                                if (k > 0)
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;

                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }
                            }
                            else if (cellValues[k].IsPercentageType)
                            {
                                if (double.TryParse(cellValues[k].Value, out OutVal))
                                {
                                    datacell.SetCellValue(OutVal / 100);
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = cellStylePercentEven;
                                    else
                                        datacell.CellStyle = cellStylePercentOdd;
                                }
                                else
                                {
                                    datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleEven;
                                        else
                                            datacell.CellStyle = AllCellStyleOdd;
                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }
                                }
                            }
                            else if (cellValues[k].IsDateTimeType)
                            {
                                DateTime OutValdt;
                                if (DateTime.TryParse(cellValues[k].Value, out OutValdt))
                                {
                                    datacell.SetCellValue(Convert.ToDateTime(cellValues[k].Value));
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = DateTimeAllCellStyleEvenFrmt;
                                    else
                                        datacell.CellStyle = DateTimeAllCellStyleOddDec;
                                    if (k == 0)
                                    {
                                        datacell.CellStyle.Alignment = HorizontalAlignment.Left;
                                    }
                                }
                                else
                                {
                                    datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleEven;
                                        else
                                            datacell.CellStyle = AllCellStyleOdd;

                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }
                                }
                            }
                            else if (cellValues[k].IsDateTimeStringMixedType)
                            {
                                DateTime OutValdt;
                                if (DateTime.TryParse(cellValues[k].Value, out OutValdt))
                                {
                                    datacell.SetCellValue(Convert.ToDateTime(cellValues[k].Value));
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = DateTimeAllCellStyleEvenFrmt;
                                    else
                                        datacell.CellStyle = DateTimeAllCellStyleOddDec;
                                    if (k == 0)
                                    {
                                        datacell.CellStyle.Alignment = HorizontalAlignment.Left;
                                    }
                                }
                                else
                                {
                                    datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleEven;
                                        else
                                            datacell.CellStyle = AllCellStyleOdd;

                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }
                                }
                            }
                            else if (cellValues[k].IsMonthYearType)
                            {
                                DateTime OutValdt;
                                if (DateTime.TryParse(cellValues[k].Value, out OutValdt))
                                {
                                    datacell.SetCellValue(Convert.ToDateTime(cellValues[k].Value));
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = MonthYearAllCellStyleEvenFrmt;
                                    else
                                        datacell.CellStyle = MonthYearAllCellStyleOddDec;
                                    if (k == 0)
                                    {
                                        datacell.CellStyle.Alignment = HorizontalAlignment.Left;
                                    }
                                }
                                else
                                {
                                    datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleEven;
                                        else
                                            datacell.CellStyle = AllCellStyleOdd;

                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }
                                }
                            }
                            else
                            {
                                datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                if (k > 0)
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;

                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }
                            }
                        }


                    }
                    incr++;
                }
                else
                {
                    var cellValues = (from i in item.LstKeyValuePair
                                      join h in listTableHeader
                                      on i.Key.ToUpper() equals h.ColumnName.ToUpper()
                                      orderby h.Position
                                      let j = item.HeaderEntity ?? h
                                      select new
                                      {
                                          IsNum = j.IsNumberFormatReq,
                                          DecType = j.DecFormatType,
                                          IsMixedType = j.IsMixedValueType,
                                          IsPercentageType = j.IsPercentageValueType,
                                          IsDateTimeStringMixedType = j.IsDateTimeStringMixedType,
                                          IsDateTimeType = j.IsDateTimeType,
                                          IsMonthYearType = j.IsMonthYearType,
                                          Value = i.Value
                                      }).ToArray();

                    for (int k = 0; k < cellValues.Length; k++)
                    {
                        var datacell = dataRow.CreateCell(k);
                        if (cellValues[k].DecType != DecimalFormatType.NoDecimalReq)
                        {
                            double OutVal;
                            if (string.IsNullOrEmpty(cellValues[k].Value) || cellValues[k].Value == BlankData || !double.TryParse(cellValues[k].Value, out OutVal))
                            {
                                datacell.SetCellValue(cellValues[k].Value);
                                if (k > 0)
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;
                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }

                            }
                            else
                            {
                                datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                                if (k > 0)
                                {
                                    if (cellValues[k].DecType == DecimalFormatType.AUM)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {

                                                datacell.CellStyle = aumAllCellStyleEvenDecFrmtWNum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = aumAllCellStyleEvenDecFrmt;
                                            }
                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = aumAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = aumAllCellStyleOddDec;
                                            }
                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.NAV)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = navAllCellStyleEvenDecFrmtWnnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = navAllCellStyleEvenDecFrmt;
                                            }
                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = navAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = navAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.OTHER)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = otherAllCellStyleEvenDecFrmtWnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = otherAllCellStyleEvenDecFrmt;
                                            }
                                        }

                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = othAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {

                                                datacell.CellStyle = othAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.RATIO)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = ratAllCellStyleEvenDecFrmtWth;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = ratAllCellStyleEvenDecFrmt;
                                            }
                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = ratAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = ratAllCellStyleOddDec;
                                            }
                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.RETURN)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = retAllCellStyleEvenDecFrmtWnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = retAllCellStyleEvenDecFrmt;
                                            }

                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = retAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = retAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.IntegerWithOutDecimal)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = intAllCellStyleEvenDecFrmt;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = intSimpleAllCellStyleEvenDecFrmt;
                                            }

                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = intAllCellStyleOddDec;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = intSimpleAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }

                            }

                        }
                        else
                        {
                            double OutVal;
                            if (double.TryParse(cellValues[k].Value, out OutVal) && !cellValues[k].IsMixedType && !cellValues[k].IsPercentageType)
                            {
                                datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                                if (k > 0)
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;

                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }
                            }
                            else if (cellValues[k].IsPercentageType)
                            {
                                if (double.TryParse(cellValues[k].Value, out OutVal))
                                {
                                    datacell.SetCellValue(OutVal / 100);
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = cellStylePercentEven;
                                    else
                                        datacell.CellStyle = cellStylePercentOdd;
                                }
                                else
                                {
                                    datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleEven;
                                        else
                                            datacell.CellStyle = AllCellStyleOdd;
                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }
                                }
                            }
                            else if (cellValues[k].IsDateTimeType)
                            {
                                DateTime OutValdt;
                                if (DateTime.TryParse(cellValues[k].Value, out OutValdt))
                                {
                                    datacell.SetCellValue(Convert.ToDateTime(cellValues[k].Value));
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = DateTimeAllCellStyleEvenFrmt;
                                    else
                                        datacell.CellStyle = DateTimeAllCellStyleOddDec;
                                    if (k == 0)
                                    {
                                        datacell.CellStyle.Alignment = HorizontalAlignment.Left;
                                    }
                                }
                                else
                                {
                                    datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleEven;
                                        else
                                            datacell.CellStyle = AllCellStyleOdd;

                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }
                                }
                            }
                            else if (cellValues[k].IsDateTimeStringMixedType)
                            {
                                DateTime OutValdt;
                                if (DateTime.TryParse(cellValues[k].Value, out OutValdt))
                                {
                                    datacell.SetCellValue(Convert.ToDateTime(cellValues[k].Value));
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = DateTimeAllCellStyleEvenFrmt;
                                    else
                                        datacell.CellStyle = DateTimeAllCellStyleOddDec;
                                    if (k == 0)
                                    {
                                        datacell.CellStyle.Alignment = HorizontalAlignment.Left;
                                    }
                                }
                                else
                                {
                                    datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleEven;
                                        else
                                            datacell.CellStyle = AllCellStyleOdd;

                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }
                                }
                            }
                            else if (cellValues[k].IsMonthYearType)
                            {
                                DateTime OutValdt;
                                if (DateTime.TryParse(cellValues[k].Value, out OutValdt))
                                {
                                    datacell.SetCellValue(Convert.ToDateTime(cellValues[k].Value));
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = MonthYearAllCellStyleEvenFrmt;
                                    else
                                        datacell.CellStyle = MonthYearAllCellStyleOddDec;
                                    if (k == 0)
                                    {
                                        datacell.CellStyle.Alignment = HorizontalAlignment.Left;
                                    }
                                }
                                else
                                {
                                    datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleEven;
                                        else
                                            datacell.CellStyle = AllCellStyleOdd;

                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }
                                }
                            }
                            else
                            {
                                datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                if (k > 0)
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;

                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }
                            }
                        }


                    }
                    incr++;
                }

            }
            #endregion

            for (int i = 0; i < listTableHeader.Count; i++)
                sheet.AutoSizeColumn(i);
            if (sheet.GetColumnWidth(0) < 11072)
                sheet.SetColumnWidth(0, 11072);

            #region Logo
            try
            {
                if (!string.IsNullOrEmpty(LogoPath))
                {
                    XSSFDrawing patriarch = (XSSFDrawing)sheet.CreateDrawingPatriarch();
                    XSSFClientAnchor anchor;
                    anchor = new XSSFClientAnchor(0, 0, 0, 255, 0, 0, 0, 3);
                    anchor.AnchorType = AnchorType.DontMoveAndResize;
                    XSSFPicture picture = (XSSFPicture)patriarch.CreatePicture(anchor, LoadImage(LogoPath, workbook, PictureType.PNG));
                    double x1 = .25;
                    double y1 = .75;
                    picture.Resize(x1, y1);
                    picture.LineStyle = LineStyle.None;
                }
            }
            catch (Exception ex)
            {
            }

            #endregion

            #region Source, Date As On and Report Generated On
            ICRArow = sheet.CreateRow(incr + 3);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrSource);

            ICRArow = sheet.CreateRow(incr + 4);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrDateAsOn);

            ICRArow = sheet.CreateRow(incr + 5);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrReportGeneratedOn);
            #endregion

            #region Sheet Two Logo
            try
            {
                if (!string.IsNullOrEmpty(LogoPath))
                {
                    XSSFDrawing patriarch = (XSSFDrawing)sheetTwo.CreateDrawingPatriarch();
                    XSSFClientAnchor anchor;
                    anchor = new XSSFClientAnchor(0, 0, 0, 255, 0, 0, 0, 3);
                    anchor.AnchorType = AnchorType.DontMoveAndResize;
                    XSSFPicture picture = (XSSFPicture)patriarch.CreatePicture(anchor, LoadImage(LogoPath, workbook, PictureType.PNG));
                    double x1 = 1.10;
                    double y1 = 1.10;
                    picture.Resize(x1, y1);
                    picture.LineStyle = LineStyle.None;
                }
            }
            catch (Exception ex)
            {
            }
            #endregion

            #region Disclaimer Sheet
            var Row = sheetTwo.CreateRow(1);
            var cellSheetTwo = Row.CreateCell(7);
            cellSheetTwo.SetCellValue(StrHeader1);
            cellSheetTwo.CellStyle = HeaderStyle;

            Row = sheetTwo.CreateRow(4);
            ICell Cell;
            for (int i = 0; i < 17; i++)
            {
                Cell = Row.CreateCell(i);

                XSSFCellStyle declationstyle = (XSSFCellStyle)workbook.CreateCellStyle();

                declationstyle.Alignment = HorizontalAlignment.Left;
                declationstyle.VerticalAlignment = VerticalAlignment.Top;
                declationstyle.WrapText = true;
                IFont declarationfnt = (XSSFFont)workbook.CreateFont();
                //declarationfnt.Boldweight = (short)FontBoldWeight.Bold;
                declarationfnt.FontName = "Calibri";
                declarationfnt.FontHeightInPoints = (short)11;
                declationstyle.SetFont(declarationfnt);
                Cell.SetCellValue(!string.IsNullOrEmpty(Footer) ? Footer : "All information contained herein is obtained by ICRA Analytics Limited from sources believed by it to be accurate and reliable. Because of the possibility of human or mechanical error as well as other factors, however, all information contained herein is provided 'AS IS' without warranty of any kind. ICRA Analytics adopts all necessary measures so that the information it uses is of sufficient quality and from sources ICRA Analytics considers to be reliable including, when appropriate, independent third-party sources. However, ICRA Analytics is not an auditor and cannot in every instance independently verify or validate information received in preparing this document." +
                    "All information contained herein must be construed solely as statements of opinion, and  ICRA Analytics Limited or its affiliates or group companies and its respective and any of its officers, directors, personnel and employees, disclaim liability to any loss, damage of any nature, including but not limited to direct, indirect, punitive, special, exemplary, consequential, as also any loss of profit in any way arising from the use of this document or its contents in any manner or for any contingency within or beyond the control of, ICRA Analytics or any of its directors, officers, employees, agents, representatives, licensors or suppliers, arising from or in connection with the information contained herein or the use of or inability to use any such information.Opinions expressed in the document are not the opinions of our holding company, ICRA Limited(ICRA), and should not be construed as any indication of credit rating or grading of ICRA for any instruments that have been issued or are to be issued by any entity.The recipient alone shall be fully responsible and / or are liable for any decision taken on the basis of this document and / or the information contained herein.");
                Cell.CellStyle = declationstyle;

            }
            NPOIWrite.CellMerged(sheetTwo, 4, 4, 0, 17);
            sheetTwo.GetRow(4).HeightInPoints = 200;
            #endregion

            #region Disclaimer Sheet HyperLink
            XSSFCellStyle HyperLinkStyle = (XSSFCellStyle)workbook.CreateCellStyle();
            IFont HyperLinkFont = workbook.CreateFont();
            HyperLinkFont.Color = IndexedColors.Orange.Index;
            HyperLinkFont.Underline = FontUnderlineType.Single;
            HyperLinkStyle.SetFont(HyperLinkFont);

            Row = sheetTwo.CreateRow(5);
            Cell = Row.CreateCell(0);
            Cell.SetCellValue("Click here for third-party disclaimers");
            XSSFCreationHelper createHelper = (XSSFCreationHelper)workbook.GetCreationHelper();
            XSSFHyperlink link = (XSSFHyperlink)createHelper.CreateHyperlink(HyperlinkType.Url);
            link.Address = "https://www.icraanalytics.com/home/thirdpartydisclaimers";
            Cell.Hyperlink = link;
            Cell.CellStyle = HyperLinkStyle;
            #endregion

            sheet.ActiveCell = new CellAddress(0, 1);
            var stream = new MemoryStream();
            workbook.Write(stream);

            return workbook;
        }
        public static NPOI.XSSF.UserModel.XSSFWorkbook ExportToExcelWorkBookWithNumberDecimalFormatDetailedPortfolio(UserBasicSettings ubs, List<TableHeaderEntity> listTableHeader, List<ExportEntity> listData, string LogoPath = "", string ReportName = "", string StrDateAsOn = "", int dynamicColCount = 0, bool IsTreasury = false)
        {

            #region Variable
            string Header = ubs.Reporting_Format_Header;
            string Footer = ubs.Reporting_Format_Footer;
            string BlankData = ubs.BlankData == null ? "BLANK" : ubs.BlankData.ToUpper() == "BLANK" ? "" : ubs.BlankData;

            string StrHeader1 = "ICRA Analytics Limited";
            string StrHeader2 = "3rd Floor, Electric Mansion,Appasaheb Marathe Marg, Prabhadevi,Mumbai - 400 025 Maharashtra, India";
            string StrHeader3 = Header; //"Mumbai, Maharashtra 400093, IN";
            string StrReportName = ReportName;
            string StrSource = "Source: " + (!IsTreasury ? "MFI 360" : "Treasury Solution");
            StrDateAsOn = "Data as on " + StrDateAsOn;
            string StrReportGeneratedOn = "Report Generated on " + DateTime.Now.ToString("dd-MMM-yyyy HH:mm:ss");

            #region number and decimal variable for AUM
            var aumPaddding = new string('0', (int)ubs.AUMDecimalFormat);
            var aumDecimalFormat = "0." + aumPaddding;
            string aumNUMBERFORMAT = ubs.NumberFormat;
            var aumNumberFormat = aumNUMBERFORMAT.Replace("0", "#");
            string aumNumberDecimalFormat = aumNumberFormat + "0." + new String('0', (int)ubs.AUMDecimalFormat);
            #endregion

            #region number and decimal variable for return
            var retPaddding = new string('0', (int)ubs.ReturnDecimalFormat);
            var retDecimalFormat = "0." + retPaddding;
            string retNUMBERFORMAT = ubs.NumberFormat;
            var retNumberFormat = retNUMBERFORMAT.Replace("0", "#");
            string retNumberDecimalFormat = retNumberFormat + "0." + new String('0', (int)ubs.ReturnDecimalFormat);
            #endregion

            #region number and decimal variable for NAV
            var navPaddding = new string('0', (int)ubs.NavDecimalFormat);
            var navDecimalFormat = "0." + navPaddding;
            string navNUMBERFORMAT = ubs.NumberFormat;
            var navNumberFormat = navNUMBERFORMAT.Replace("0", "#");
            string navNumberDecimalFormat = navNumberFormat + "0." + new String('0', (int)ubs.NavDecimalFormat);
            #endregion


            #region number and decimal variable for Other
            var othPaddding = new string('0', (int)ubs.OtherDecimal);
            var othDecimalFormat = "0." + othPaddding;
            string othNUMBERFORMAT = ubs.NumberFormat;
            var othNumberFormat = othNUMBERFORMAT.Replace("0", "#");
            string othNumberDecimalFormat = othNumberFormat + "0." + new String('0', (int)ubs.OtherDecimal);
            #endregion

            #region number and decimal variable for Ratio
            var ratioPaddding = new string('0', (int)ubs.RatioDecimalFormat);
            var ratioDecimalFormat = "0." + ratioPaddding;
            string ratioNUMBERFORMAT = ubs.NumberFormat;
            var ratioNumberFormat = ratioNUMBERFORMAT.Replace("0", "#");
            string ratioNumberDecimalFormat = ratioNumberFormat + "0." + new String('0', (int)ubs.RatioDecimalFormat);
            #endregion
            #region int Format with out Decimal
            var intNumberWithoutDecimalFormat = ubs.NumberFormat.Replace("0", "#");
            #endregion
            #endregion

            NPOI.XSSF.UserModel.XSSFWorkbook workbook = new NPOI.XSSF.UserModel.XSSFWorkbook();

            ISheet sheet = workbook.CreateSheet("Output");
            ISheet sheetTwo = workbook.CreateSheet("Disclaimer");

            #region Excel Sheet Gridlines Delete
            sheet.DisplayGridlines = false;
            sheetTwo.DisplayGridlines = false;
            #endregion

            #region Header Freeze
            sheet.CreateFreezePane(1, 6);
            #endregion

            #region Set Font For Header1,Header2 and Header3
            XSSFCellStyle HeaderStyle = (XSSFCellStyle)workbook.CreateCellStyle();
            IFont Headerfont = workbook.CreateFont();
            Headerfont.Boldweight = (short)FontBoldWeight.Bold;
            HeaderStyle.SetFont(Headerfont);
            #endregion

            #region Set Cell Value For Header1, Header2 and Header3
            var ICRArow = sheet.CreateRow(0);
            ICRArow.CreateCell(0);
            NPOIWrite.CellMerged(sheet, 0, 0, 1, 9);
            var ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader1);
            ICRACell.CellStyle = HeaderStyle;
            ICRArow = sheet.CreateRow(1);
            ICRArow.CreateCell(0);
            NPOIWrite.CellMerged(sheet, 1, 1, 1, 9);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader2);
            ICRACell.CellStyle = HeaderStyle;
            ICRArow = sheet.CreateRow(2);
            ICRArow.CreateCell(0);
            NPOIWrite.CellMerged(sheet, 2, 2, 1, 9);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader3);
            ICRACell.CellStyle = HeaderStyle;
            ICRACell.CellStyle.Alignment = HorizontalAlignment.Center;
            ICRArow = sheet.CreateRow(3);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.CellStyle.Alignment = HorizontalAlignment.Center;
            NPOIWrite.AutoFitColumn(sheet, 1);
            ICRACell.CellStyle = HeaderStyle;
            #endregion

            #region Report Name
            ICRArow = sheet.CreateRow(4);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrReportName);
            HeaderStyle.Alignment = HorizontalAlignment.Left;
            ICRACell.CellStyle = HeaderStyle;
            #endregion

            #region Header creation in the Excel
            var headerRow = sheet.CreateRow(5);
            sheet.GetRow(5).HeightInPoints = 30;
            var listHeaderFinal = listTableHeader.OrderBy(x => x.Position).ToList();
            for (int i = 0; i < listHeaderFinal.Count; i++)
            {
                var cell = headerRow.CreateCell(i);
                cell.SetCellValue(listHeaderFinal[i].ColumnName);
                NPOIWrite.AutoFitColumn(sheet, i);

                #region Commented by Subrata on 21 Feb 2018
                //ICellStyle CellStyle = workbook.CreateCellStyle();
                //CellStyle = workbook.CreateCellStyle();
                //CellStyle.FillBackgroundColor = IndexedColors.Blue.Index;
                #endregion

                #region Added by Subrata on 21 Feb 2018
                XSSFCellStyle style = (XSSFCellStyle)workbook.CreateCellStyle();
                XSSFColor colorToFill = new XSSFColor(new byte[] { 68, 114, 196 });//{ 51, 204, 204 }//Color.Blue);
                style.SetFillForegroundColor(colorToFill);
                IFont font = workbook.CreateFont();
                font.Color = IndexedColors.White.Index;
                font.Boldweight = (short)FontBoldWeight.Bold;
                style.SetFont(font);
                style.FillPattern = FillPattern.SolidForeground;
                style.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                style.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                style.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                style.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                if (i > 0)
                {
                    style.Alignment = HorizontalAlignment.Center;
                    style.VerticalAlignment = VerticalAlignment.Center;
                }
                else
                {
                    //style.Alignment = HorizontalAlignment.Left;
                    style.Alignment = (string.IsNullOrEmpty(listHeaderFinal[i].TextAlign) || listHeaderFinal[i].TextAlign == EnumTextAlign.left.ToString()) ? HorizontalAlignment.Left
                        : listHeaderFinal[i].TextAlign == EnumTextAlign.center.ToString() ? HorizontalAlignment.Center : HorizontalAlignment.Right;
                    style.VerticalAlignment = VerticalAlignment.Center;
                }
                #endregion

                cell.CellStyle = style;

            }
            #endregion

            #region Cell Style For Even Row

            #region With DecimalFormat AUM
            XSSFCellStyle aumAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor aumcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            aumAllCellStyleEvenDecFrmt.SetFillForegroundColor(aumcolorToFillEvenWtoutDec);
            aumAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat aumformatEven = workbook.CreateDataFormat();
            aumAllCellStyleEvenDecFrmt.DataFormat = aumformatEven.GetFormat(aumDecimalFormat);
            aumAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;
            //percentage format

            XSSFCellStyle cellStylePercentEven = (XSSFCellStyle)workbook.CreateCellStyle();
            cellStylePercentEven.DataFormat = HSSFDataFormat.GetBuiltinFormat("0.00%");
            cellStylePercentEven.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            cellStylePercentEven.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            cellStylePercentEven.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            cellStylePercentEven.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillFstClmnEvenpercent = new XSSFColor(new byte[] { 176, 196, 222 });
            cellStylePercentEven.SetFillForegroundColor(colorToFillFstClmnEvenpercent);
            cellStylePercentEven.FillPattern = FillPattern.SolidForeground;
            cellStylePercentEven.Alignment = HorizontalAlignment.Left;
            cellStylePercentEven.VerticalAlignment = VerticalAlignment.Center;
            cellStylePercentEven.SetDataFormat(workbook.CreateDataFormat().GetFormat("0.00%"));

            XSSFCellStyle cellStylePercentOdd = (XSSFCellStyle)workbook.CreateCellStyle();
            cellStylePercentOdd.DataFormat = HSSFDataFormat.GetBuiltinFormat("0.00%");
            cellStylePercentOdd.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            cellStylePercentOdd.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            cellStylePercentOdd.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            cellStylePercentOdd.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillFstClmnOddpercent = new XSSFColor(new byte[] { 255, 255, 255 });
            cellStylePercentOdd.SetFillForegroundColor(colorToFillFstClmnOddpercent);
            cellStylePercentOdd.FillPattern = FillPattern.SolidForeground;
            cellStylePercentOdd.Alignment = HorizontalAlignment.Left;
            cellStylePercentOdd.VerticalAlignment = VerticalAlignment.Center;
            cellStylePercentOdd.SetDataFormat(workbook.CreateDataFormat().GetFormat("0.00%"));

            /// Number Format ////
            XSSFCellStyle aumAllCellStyleEvenDecFrmtWNum = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleEvenDecFrmtWNum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmtWNum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmtWNum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmtWNum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor aumcolorToFillEvenWtoutDecWNum = new XSSFColor(new byte[] { 176, 196, 222 });
            aumAllCellStyleEvenDecFrmtWNum.SetFillForegroundColor(aumcolorToFillEvenWtoutDecWNum);
            aumAllCellStyleEvenDecFrmtWNum.FillPattern = FillPattern.SolidForeground;
            IDataFormat aumformatEvenWNum = workbook.CreateDataFormat();
            aumAllCellStyleEvenDecFrmtWNum.DataFormat = aumformatEvenWNum.GetFormat(aumNumberDecimalFormat);
            aumAllCellStyleEvenDecFrmtWNum.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleEvenDecFrmtWNum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Return
            XSSFCellStyle retAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            retAllCellStyleEvenDecFrmt.SetFillForegroundColor(retcolorToFillEvenWtoutDec);
            retAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatEven = workbook.CreateDataFormat();
            retAllCellStyleEvenDecFrmt.DataFormat = retformatEven.GetFormat(retDecimalFormat);
            retAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            retAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;


            ////Number Format ////
            XSSFCellStyle retAllCellStyleEvenDecFrmtWnum = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleEvenDecFrmtWnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmtWnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmtWnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmtWnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillEvenWtoutDecWnum = new XSSFColor(new byte[] { 176, 196, 222 });
            retAllCellStyleEvenDecFrmtWnum.SetFillForegroundColor(retcolorToFillEvenWtoutDecWnum);
            retAllCellStyleEvenDecFrmtWnum.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatEvenWnum = workbook.CreateDataFormat();
            retAllCellStyleEvenDecFrmtWnum.DataFormat = retformatEvenWnum.GetFormat(retNumberDecimalFormat);
            retAllCellStyleEvenDecFrmtWnum.Alignment = HorizontalAlignment.Center;
            retAllCellStyleEvenDecFrmtWnum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Nav
            XSSFCellStyle navAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor navcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            navAllCellStyleEvenDecFrmt.SetFillForegroundColor(navcolorToFillEvenWtoutDec);
            navAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat navformatEven = workbook.CreateDataFormat();
            navAllCellStyleEvenDecFrmt.DataFormat = navformatEven.GetFormat(navDecimalFormat);
            navAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            navAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;


            /// Number Format ////
            XSSFCellStyle navAllCellStyleEvenDecFrmtWnnum = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleEvenDecFrmtWnnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmtWnnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmtWnnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmtWnnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor navcolorToFillEvenWtoutDecWnnum = new XSSFColor(new byte[] { 176, 196, 222 });
            navAllCellStyleEvenDecFrmtWnnum.SetFillForegroundColor(navcolorToFillEvenWtoutDecWnnum);
            navAllCellStyleEvenDecFrmtWnnum.FillPattern = FillPattern.SolidForeground;
            IDataFormat navformatEvenWnnum = workbook.CreateDataFormat();
            navAllCellStyleEvenDecFrmtWnnum.DataFormat = navformatEvenWnnum.GetFormat(navNumberDecimalFormat);
            navAllCellStyleEvenDecFrmtWnnum.Alignment = HorizontalAlignment.Center;
            navAllCellStyleEvenDecFrmtWnnum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Other
            XSSFCellStyle otherAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            otherAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othercolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            otherAllCellStyleEvenDecFrmt.SetFillForegroundColor(othercolorToFillEvenWtoutDec);
            otherAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat otherformatEven = workbook.CreateDataFormat();
            otherAllCellStyleEvenDecFrmt.DataFormat = otherformatEven.GetFormat(othDecimalFormat);
            otherAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            otherAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            /// Number Format ///
            XSSFCellStyle otherAllCellStyleEvenDecFrmtWnum = (XSSFCellStyle)workbook.CreateCellStyle();
            otherAllCellStyleEvenDecFrmtWnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmtWnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmtWnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmtWnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othercolorToFillEvenWtoutDecWnum = new XSSFColor(new byte[] { 176, 196, 222 });
            otherAllCellStyleEvenDecFrmtWnum.SetFillForegroundColor(othercolorToFillEvenWtoutDecWnum);
            otherAllCellStyleEvenDecFrmtWnum.FillPattern = FillPattern.SolidForeground;
            IDataFormat otherformatEvenWnum = workbook.CreateDataFormat();
            otherAllCellStyleEvenDecFrmtWnum.DataFormat = otherformatEvenWnum.GetFormat(othNumberDecimalFormat);
            otherAllCellStyleEvenDecFrmtWnum.Alignment = HorizontalAlignment.Center;
            otherAllCellStyleEvenDecFrmtWnum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Ratio
            XSSFCellStyle ratAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor ratcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            ratAllCellStyleEvenDecFrmt.SetFillForegroundColor(ratcolorToFillEvenWtoutDec);
            ratAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat ratformatEven = workbook.CreateDataFormat();
            ratAllCellStyleEvenDecFrmt.DataFormat = ratformatEven.GetFormat(ratioDecimalFormat);
            ratAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle ratAllCellStyleEvenDecFrmtWth = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleEvenDecFrmtWth.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmtWth.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmtWth.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmtWth.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor ratcolorToFillEvenWtoutDecwth = new XSSFColor(new byte[] { 176, 196, 222 });
            ratAllCellStyleEvenDecFrmtWth.SetFillForegroundColor(ratcolorToFillEvenWtoutDecwth);
            ratAllCellStyleEvenDecFrmtWth.FillPattern = FillPattern.SolidForeground;
            IDataFormat ratformatEvenWth = workbook.CreateDataFormat();
            ratAllCellStyleEvenDecFrmtWth.DataFormat = ratformatEvenWth.GetFormat(ratioNumberDecimalFormat);
            ratAllCellStyleEvenDecFrmtWth.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleEvenDecFrmtWth.VerticalAlignment = VerticalAlignment.Center;
            #endregion


            #region No Format
            XSSFCellStyle AllCellStyleEven = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleEven.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillEven = new XSSFColor(new byte[] { 176, 196, 222 });
            AllCellStyleEven.SetFillForegroundColor(colorToFillEven);
            AllCellStyleEven.FillPattern = FillPattern.SolidForeground;
            AllCellStyleEven.Alignment = HorizontalAlignment.Center;
            AllCellStyleEven.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #endregion

            #region Cell Style For Odd Row

            #region With Decimal Format AUM
            XSSFCellStyle aumAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor AUMcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            aumAllCellStyleOddDec.SetFillForegroundColor(AUMcolorToFillOddDec);
            aumAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat AUMformatOddDec = workbook.CreateDataFormat();
            aumAllCellStyleOddDec.DataFormat = AUMformatOddDec.GetFormat(aumDecimalFormat);
            aumAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle aumAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor AUMcolorToFillOddDecWnf = new XSSFColor(new byte[] { 255, 255, 255 });
            aumAllCellStyleOddDecWnuf.SetFillForegroundColor(AUMcolorToFillOddDecWnf);
            aumAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat AUMformatOddDecWnuf = workbook.CreateDataFormat();
            aumAllCellStyleOddDecWnuf.DataFormat = AUMformatOddDecWnuf.GetFormat(aumNumberDecimalFormat);
            aumAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With Decimal Format Return
            XSSFCellStyle retAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor RETcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            retAllCellStyleOddDec.SetFillForegroundColor(RETcolorToFillOddDec);
            retAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat RETformatOddDec = workbook.CreateDataFormat();
            retAllCellStyleOddDec.DataFormat = RETformatOddDec.GetFormat(retDecimalFormat);
            retAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            retAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle retAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor RETcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            retAllCellStyleOddDecWnuf.SetFillForegroundColor(RETcolorToFillOddDecWnuf);
            retAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat RETformatOddDecWnuf = workbook.CreateDataFormat();
            retAllCellStyleOddDecWnuf.DataFormat = RETformatOddDecWnuf.GetFormat(retNumberDecimalFormat);
            retAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            retAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With Decimal Format Nav
            XSSFCellStyle navAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor naVcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            navAllCellStyleOddDec.SetFillForegroundColor(naVcolorToFillOddDec);
            navAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat naVformatOddDec = workbook.CreateDataFormat();
            navAllCellStyleOddDec.DataFormat = naVformatOddDec.GetFormat(navDecimalFormat);
            navAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            navAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            XSSFCellStyle navAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor naVcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            navAllCellStyleOddDecWnuf.SetFillForegroundColor(naVcolorToFillOddDecWnuf);
            navAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat naVformatOddDecWnuf = workbook.CreateDataFormat();
            navAllCellStyleOddDecWnuf.DataFormat = naVformatOddDecWnuf.GetFormat(navNumberDecimalFormat);
            navAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            navAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion


            #region With Decimal Format Other
            XSSFCellStyle othAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            othAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            othAllCellStyleOddDec.SetFillForegroundColor(othcolorToFillOddDec);
            othAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat othformatOddDec = workbook.CreateDataFormat();
            othAllCellStyleOddDec.DataFormat = othformatOddDec.GetFormat(othDecimalFormat);
            othAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            othAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            XSSFCellStyle othAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            othAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            othAllCellStyleOddDecWnuf.SetFillForegroundColor(othcolorToFillOddDecWnuf);
            othAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat othformatOddDecWnuf = workbook.CreateDataFormat();
            othAllCellStyleOddDecWnuf.DataFormat = othformatOddDecWnuf.GetFormat(othNumberDecimalFormat);
            othAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            othAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion


            #region With Decimal Format ratio
            XSSFCellStyle ratAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            ratAllCellStyleOddDec.SetFillForegroundColor(retcolorToFillOddDec);
            ratAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatOddDec = workbook.CreateDataFormat();
            ratAllCellStyleOddDec.DataFormat = retformatOddDec.GetFormat(ratioDecimalFormat);
            ratAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            XSSFCellStyle ratAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            ratAllCellStyleOddDecWnuf.SetFillForegroundColor(retcolorToFillOddDecWnuf);
            ratAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatOddDecWnuf = workbook.CreateDataFormat();
            ratAllCellStyleOddDecWnuf.DataFormat = retformatOddDecWnuf.GetFormat(ratioNumberDecimalFormat);
            ratAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region No Format
            XSSFCellStyle AllCellStyleOdd = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleOdd.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillOdd = new XSSFColor(new byte[] { 255, 255, 255 });
            AllCellStyleOdd.SetFillForegroundColor(colorToFillOdd);
            AllCellStyleOdd.FillPattern = FillPattern.SolidForeground;
            AllCellStyleOdd.Alignment = HorizontalAlignment.Center;
            AllCellStyleOdd.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #endregion

            #region Cell Style For First Column Even Row
            XSSFCellStyle AllCellStyleFstColmEven = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleFstColmEven.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillFstClmnEven = new XSSFColor(new byte[] { 176, 196, 222 });
            AllCellStyleFstColmEven.SetFillForegroundColor(colorToFillFstClmnEven);
            AllCellStyleFstColmEven.FillPattern = FillPattern.SolidForeground;
            AllCellStyleFstColmEven.Alignment = HorizontalAlignment.Left;
            AllCellStyleFstColmEven.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region Cell Style For First Column Odd Row
            XSSFCellStyle AllCellStyleFstColmOdd = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleFstColmOdd.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillFstClmnOdd = new XSSFColor(new byte[] { 255, 255, 255 });
            AllCellStyleFstColmOdd.SetFillForegroundColor(colorToFillFstClmnOdd);
            AllCellStyleFstColmOdd.FillPattern = FillPattern.SolidForeground;
            AllCellStyleFstColmOdd.Alignment = HorizontalAlignment.Left;
            AllCellStyleFstColmOdd.VerticalAlignment = VerticalAlignment.Center;
            #endregion
            #region Without Decimal Number Format Even Row
            XSSFCellStyle intAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            intAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            intAllCellStyleEvenDecFrmt.SetFillForegroundColor(intcolorToFillEvenWtoutDec);
            intAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat intformatEven = workbook.CreateDataFormat();
            intAllCellStyleEvenDecFrmt.DataFormat = intformatEven.GetFormat(intNumberWithoutDecimalFormat);
            intAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            intAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle intSimpleAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            intSimpleAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intSimplecolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            intSimpleAllCellStyleEvenDecFrmt.SetFillForegroundColor(intSimplecolorToFillEvenWtoutDec);
            intSimpleAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            intSimpleAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            intSimpleAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;
            #endregion
            #region Without Decimal Number Format Odd Row
            XSSFCellStyle intAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            intAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            intAllCellStyleOddDec.SetFillForegroundColor(intcolorToFillOddDec);
            intAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat intformatOddDec = workbook.CreateDataFormat();
            intAllCellStyleOddDec.DataFormat = intformatOddDec.GetFormat(intNumberWithoutDecimalFormat);
            intAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            intAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle intSimpleAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            intSimpleAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intSimplecolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            intSimpleAllCellStyleOddDec.SetFillForegroundColor(intSimplecolorToFillOddDec);
            intSimpleAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            intSimpleAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            intSimpleAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;
            #endregion
            #region With DateTime format
            var DateTimeFormat = ubs.DateFormat;
            XSSFCellStyle DateTimeAllCellStyleEvenFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            DateTimeAllCellStyleEvenFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleEvenFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleEvenFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleEvenFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor DateTimecolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            DateTimeAllCellStyleEvenFrmt.SetFillForegroundColor(DateTimecolorToFillEvenWtoutDec);
            DateTimeAllCellStyleEvenFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat DateTimeformatEven = workbook.CreateDataFormat();
            DateTimeAllCellStyleEvenFrmt.DataFormat = DateTimeformatEven.GetFormat(DateTimeFormat);
            DateTimeAllCellStyleEvenFrmt.Alignment = HorizontalAlignment.Center;
            DateTimeAllCellStyleEvenFrmt.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle DateTimeAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            DateTimeAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor DateTimecolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            DateTimeAllCellStyleOddDec.SetFillForegroundColor(DateTimecolorToFillOddDec);
            DateTimeAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat DateTimeformatOddDec = workbook.CreateDataFormat();
            DateTimeAllCellStyleOddDec.DataFormat = DateTimeformatOddDec.GetFormat(DateTimeFormat);
            DateTimeAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            DateTimeAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            #endregion
            #region Value added to the Excel

            #region Added by Subrata on 22 Feb 2018
            var AllListData = listData.SelectMany(x => x.LstKeyValuePair).ToArray();
            var AllDataKey = AllListData.Select(x => x.Key).Distinct().ToArray();
            #endregion

            int incr = 6;
            ICellStyle ColorStyle = workbook.CreateCellStyle();
            IFont fontbold = workbook.CreateFont();
            fontbold.Boldweight = (short)FontBoldWeight.Bold;
            foreach (var item in listData)
            {
                var dataRow = sheet.CreateRow(incr);
                sheet.GetRow(incr).HeightInPoints = 20;
                var cellValues = (from i in item.LstKeyValuePair
                                  from j in listTableHeader
                                  where i.Key == j.ColumnName
                                  orderby j.Position
                                  select new
                                  {
                                      IsNum = j.IsNumberFormatReq,
                                      DecType = j.DecFormatType,
                                      IsMixedType = j.IsMixedValueType,
                                      IsPercentageType = j.IsPercentageValueType,
                                      IsDateTimeStringMixedType = j.IsDateTimeStringMixedType,
                                      IsDateTimeType = j.IsDateTimeType,
                                      Value = i.Value
                                  }).ToArray();

                for (int k = 0; k < cellValues.Length; k++)
                {
                    var datacell = dataRow.CreateCell(k);
                    if (cellValues[k].DecType != DecimalFormatType.NoDecimalReq)
                    {
                        double OutVal;
                        if (string.IsNullOrEmpty(cellValues[k].Value) || cellValues[k].Value == BlankData || !double.TryParse(cellValues[k].Value, out OutVal))
                        {
                            datacell.SetCellValue(cellValues[k].Value);
                            if (k > 0)
                            {
                                if (incr % 2 == 0)
                                    datacell.CellStyle = AllCellStyleEven;
                                else
                                    datacell.CellStyle = AllCellStyleOdd;
                            }
                            else
                            {
                                if (incr % 2 == 0)
                                    datacell.CellStyle = AllCellStyleFstColmEven;
                                else
                                    datacell.CellStyle = AllCellStyleFstColmOdd;
                            }

                        }
                        else
                        {
                            datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                            if (k > 0)
                            {
                                if (cellValues[k].DecType == DecimalFormatType.AUM)
                                {
                                    if (incr % 2 == 0)
                                    {
                                        if (cellValues[k].IsNum == true)
                                        {

                                            datacell.CellStyle = aumAllCellStyleEvenDecFrmtWNum;
                                        }
                                        else
                                        {
                                            datacell.CellStyle = aumAllCellStyleEvenDecFrmt;
                                        }
                                    }
                                    else
                                    {
                                        if (cellValues[k].IsNum == true)
                                        {
                                            datacell.CellStyle = aumAllCellStyleOddDecWnuf;
                                        }
                                        else
                                        {
                                            datacell.CellStyle = aumAllCellStyleOddDec;
                                        }
                                    }
                                }
                                else if (cellValues[k].DecType == DecimalFormatType.NAV)
                                {
                                    if (incr % 2 == 0)
                                    {
                                        if (cellValues[k].IsNum == true)
                                        {
                                            datacell.CellStyle = navAllCellStyleEvenDecFrmtWnnum;
                                        }
                                        else
                                        {
                                            datacell.CellStyle = navAllCellStyleEvenDecFrmt;
                                        }
                                    }
                                    else
                                    {
                                        if (cellValues[k].IsNum == true)
                                        {
                                            datacell.CellStyle = navAllCellStyleOddDecWnuf;
                                        }
                                        else
                                        {
                                            datacell.CellStyle = navAllCellStyleOddDec;
                                        }

                                    }
                                }
                                else if (cellValues[k].DecType == DecimalFormatType.OTHER)
                                {
                                    if (incr % 2 == 0)
                                    {
                                        if (cellValues[k].IsNum == true)
                                        {
                                            datacell.CellStyle = otherAllCellStyleEvenDecFrmtWnum;
                                        }
                                        else
                                        {
                                            datacell.CellStyle = otherAllCellStyleEvenDecFrmt;
                                        }
                                    }

                                    else
                                    {
                                        if (cellValues[k].IsNum == true)
                                        {
                                            datacell.CellStyle = othAllCellStyleOddDecWnuf;
                                        }
                                        else
                                        {

                                            datacell.CellStyle = othAllCellStyleOddDec;
                                        }

                                    }
                                }
                                else if (cellValues[k].DecType == DecimalFormatType.RATIO)
                                {
                                    if (incr % 2 == 0)
                                    {
                                        if (cellValues[k].IsNum == true)
                                        {
                                            datacell.CellStyle = ratAllCellStyleEvenDecFrmtWth;
                                        }
                                        else
                                        {
                                            datacell.CellStyle = ratAllCellStyleEvenDecFrmt;
                                        }
                                    }
                                    else
                                    {
                                        if (cellValues[k].IsNum == true)
                                        {
                                            datacell.CellStyle = ratAllCellStyleOddDecWnuf;
                                        }
                                        else
                                        {
                                            datacell.CellStyle = ratAllCellStyleOddDec;
                                        }
                                    }
                                }
                                else if (cellValues[k].DecType == DecimalFormatType.RETURN)
                                {
                                    if (incr % 2 == 0)
                                    {
                                        if (cellValues[k].IsNum == true)
                                        {
                                            datacell.CellStyle = retAllCellStyleEvenDecFrmtWnum;
                                        }
                                        else
                                        {
                                            datacell.CellStyle = retAllCellStyleEvenDecFrmt;
                                        }

                                    }
                                    else
                                    {
                                        if (cellValues[k].IsNum == true)
                                        {
                                            datacell.CellStyle = retAllCellStyleOddDecWnuf;
                                        }
                                        else
                                        {
                                            datacell.CellStyle = retAllCellStyleOddDec;
                                        }

                                    }
                                }
                                else if (cellValues[k].DecType == DecimalFormatType.IntegerWithOutDecimal)
                                {
                                    if (incr % 2 == 0)
                                    {
                                        if (cellValues[k].IsNum == true)
                                        {
                                            datacell.CellStyle = intAllCellStyleEvenDecFrmt;
                                        }
                                        else
                                        {
                                            datacell.CellStyle = intSimpleAllCellStyleEvenDecFrmt;
                                        }

                                    }
                                    else
                                    {
                                        if (cellValues[k].IsNum == true)
                                        {
                                            datacell.CellStyle = intAllCellStyleOddDec;
                                        }
                                        else
                                        {
                                            datacell.CellStyle = intSimpleAllCellStyleOddDec;
                                        }

                                    }
                                }
                            }
                            else
                            {
                                if (incr % 2 == 0)
                                    datacell.CellStyle = AllCellStyleFstColmEven;
                                else
                                    datacell.CellStyle = AllCellStyleFstColmOdd;
                            }

                        }

                    }
                    else
                    {
                        double OutVal;
                        if (double.TryParse(cellValues[k].Value, out OutVal) && !cellValues[k].IsMixedType && !cellValues[k].IsPercentageType)
                        {
                            datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                            if (k > 0)
                            {
                                if (incr % 2 == 0)
                                    datacell.CellStyle = AllCellStyleEven;
                                else
                                    datacell.CellStyle = AllCellStyleOdd;

                            }
                            else
                            {
                                if (incr % 2 == 0)
                                    datacell.CellStyle = AllCellStyleFstColmEven;
                                else
                                    datacell.CellStyle = AllCellStyleFstColmOdd;
                            }
                        }
                        else if (cellValues[k].IsPercentageType)
                        {
                            if (double.TryParse(cellValues[k].Value, out OutVal))
                            {
                                datacell.SetCellValue(OutVal / 100);
                                if (incr % 2 == 0)
                                    datacell.CellStyle = cellStylePercentEven;
                                else
                                    datacell.CellStyle = cellStylePercentOdd;
                            }
                            else
                            {
                                datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                if (k > 0)
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;
                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }
                            }
                        }
                        else if (cellValues[k].IsDateTimeType)
                        {
                            DateTime OutValdt;
                            if (DateTime.TryParse(cellValues[k].Value, out OutValdt))
                            {
                                datacell.SetCellValue(Convert.ToDateTime(cellValues[k].Value));
                                if (incr % 2 == 0)
                                    datacell.CellStyle = DateTimeAllCellStyleEvenFrmt;
                                else
                                    datacell.CellStyle = DateTimeAllCellStyleOddDec;
                            }
                            else
                            {
                                datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                if (k > 0)
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;

                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }
                            }
                        }
                        else if (cellValues[k].IsDateTimeStringMixedType)
                        {
                            DateTime OutValdt;
                            if (DateTime.TryParse(cellValues[k].Value, out OutValdt))
                            {
                                datacell.SetCellValue(Convert.ToDateTime(cellValues[k].Value));
                                if (incr % 2 == 0)
                                    datacell.CellStyle = DateTimeAllCellStyleEvenFrmt;
                                else
                                    datacell.CellStyle = DateTimeAllCellStyleOddDec;
                            }
                            else
                            {
                                datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                if (k > 0)
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;

                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }
                            }
                        }
                        else
                        {
                            datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                            if (k > 0)
                            {
                                if (incr % 2 == 0)
                                    datacell.CellStyle = AllCellStyleEven;
                                else
                                    datacell.CellStyle = AllCellStyleOdd;

                            }
                            else
                            {
                                if (incr % 2 == 0)
                                    datacell.CellStyle = AllCellStyleFstColmEven;
                                else
                                    datacell.CellStyle = AllCellStyleFstColmOdd;
                            }
                        }
                    }
                }
                //var StartPos = !IsTreasury ? 0 : 2;
                //var getCell = dataRow.Cells[StartPos];
                //if (getCell.GetValue().ToString().ToUpper().Contains("TOTAL"))
                //{
                //	ColorStyle.CloneStyleFrom(getCell.CellStyle);
                //	ColorStyle.SetFont(fontbold);
                //	getCell.CellStyle = ColorStyle;
                //	getCell = dataRow.Cells[7 + StartPos + dynamicColCount];
                //	ColorStyle.CloneStyleFrom(getCell.CellStyle);
                //	ColorStyle.SetFont(fontbold);
                //	getCell.CellStyle = ColorStyle;
                //	getCell = dataRow.Cells[8 + StartPos + dynamicColCount];
                //	ColorStyle.CloneStyleFrom(getCell.CellStyle);
                //	ColorStyle.SetFont(fontbold);
                //	getCell.CellStyle = ColorStyle;
                //	getCell = dataRow.Cells[9 + StartPos + dynamicColCount];
                //	ColorStyle.CloneStyleFrom(getCell.CellStyle);
                //	ColorStyle.SetFont(fontbold);
                //	getCell.CellStyle = ColorStyle;
                //}
                incr++;
            }
            #endregion

            for (int i = 0; i < listTableHeader.Count; i++)
                sheet.AutoSizeColumn(i);
            if (sheet.GetColumnWidth(0) < 11072)
                sheet.SetColumnWidth(0, 11072);

            #region Logo
            try
            {
                if (!string.IsNullOrEmpty(LogoPath))
                {
                    XSSFDrawing patriarch = (XSSFDrawing)sheet.CreateDrawingPatriarch();
                    XSSFClientAnchor anchor;
                    anchor = new XSSFClientAnchor(0, 0, 0, 255, 0, 0, 0, 3);
                    anchor.AnchorType = AnchorType.DontMoveAndResize;
                    XSSFPicture picture = (XSSFPicture)patriarch.CreatePicture(anchor, LoadImage(LogoPath, workbook, PictureType.PNG));
                    double x1 = .25;
                    double y1 = .75;
                    picture.Resize(x1, y1);
                    picture.LineStyle = LineStyle.None;
                }
            }
            catch (Exception ex)
            {
            }

            #endregion

            #region Source, Date As On and Report Generated On
            ICRArow = sheet.CreateRow(incr + 3);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrSource);

            ICRArow = sheet.CreateRow(incr + 4);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrDateAsOn);

            ICRArow = sheet.CreateRow(incr + 5);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrReportGeneratedOn);
            #endregion

            #region Sheet Two Logo
            try
            {
                if (!string.IsNullOrEmpty(LogoPath))
                {
                    XSSFDrawing patriarch = (XSSFDrawing)sheetTwo.CreateDrawingPatriarch();
                    XSSFClientAnchor anchor;
                    anchor = new XSSFClientAnchor(0, 0, 0, 255, 0, 0, 0, 3);
                    anchor.AnchorType = AnchorType.DontMoveAndResize;
                    XSSFPicture picture = (XSSFPicture)patriarch.CreatePicture(anchor, LoadImage(LogoPath, workbook, PictureType.PNG));
                    double x1 = 1.10;
                    double y1 = 1.10;
                    picture.Resize(x1, y1);
                    picture.LineStyle = LineStyle.None;
                }
            }
            catch (Exception ex)
            {
            }
            #endregion

            #region Disclaimer Sheet
            var Row = sheetTwo.CreateRow(1);
            var cellSheetTwo = Row.CreateCell(7);
            cellSheetTwo.SetCellValue(StrHeader1);
            cellSheetTwo.CellStyle = HeaderStyle;

            Row = sheetTwo.CreateRow(4);
            ICell Cell;
            for (int i = 0; i < 17; i++)
            {
                Cell = Row.CreateCell(i);

                XSSFCellStyle declationstyle = (XSSFCellStyle)workbook.CreateCellStyle();

                declationstyle.Alignment = HorizontalAlignment.Left;
                declationstyle.VerticalAlignment = VerticalAlignment.Top;
                declationstyle.WrapText = true;
                IFont declarationfnt = (XSSFFont)workbook.CreateFont();
                //declarationfnt.Boldweight = (short)FontBoldWeight.Bold;
                declarationfnt.FontName = "Calibri";
                declarationfnt.FontHeightInPoints = (short)11;
                declationstyle.SetFont(declarationfnt);
                Cell.SetCellValue(!string.IsNullOrEmpty(Footer) ? Footer : "All information contained herein is obtained by ICRA Analytics Limited from sources believed by it to be accurate and reliable. Because of the possibility of human or mechanical error as well as other factors, however, all information contained herein is provided 'AS IS' without warranty of any kind. ICRA Analytics adopts all necessary measures so that the information it uses is of sufficient quality and from sources ICRA Analytics considers to be reliable including, when appropriate, independent third-party sources. However, ICRA Analytics is not an auditor and cannot in every instance independently verify or validate information received in preparing this document." +
                    "All information contained herein must be construed solely as statements of opinion, and  ICRA Analytics Limited or its affiliates or group companies and its respective and any of its officers, directors, personnel and employees, disclaim liability to any loss, damage of any nature, including but not limited to direct, indirect, punitive, special, exemplary, consequential, as also any loss of profit in any way arising from the use of this document or its contents in any manner or for any contingency within or beyond the control of, ICRA Analytics or any of its directors, officers, employees, agents, representatives, licensors or suppliers, arising from or in connection with the information contained herein or the use of or inability to use any such information.Opinions expressed in the document are not the opinions of our holding company, ICRA Limited(ICRA), and should not be construed as any indication of credit rating or grading of ICRA for any instruments that have been issued or are to be issued by any entity.The recipient alone shall be fully responsible and / or are liable for any decision taken on the basis of this document and / or the information contained herein.");
                Cell.CellStyle = declationstyle;

            }
            NPOIWrite.CellMerged(sheetTwo, 4, 4, 0, 17);
            sheetTwo.GetRow(4).HeightInPoints = 200;
            #endregion

            #region Disclaimer Sheet HyperLink
            XSSFCellStyle HyperLinkStyle = (XSSFCellStyle)workbook.CreateCellStyle();
            IFont HyperLinkFont = workbook.CreateFont();
            HyperLinkFont.Color = IndexedColors.Orange.Index;
            HyperLinkFont.Underline = FontUnderlineType.Single;
            HyperLinkStyle.SetFont(HyperLinkFont);

            Row = sheetTwo.CreateRow(5);
            Cell = Row.CreateCell(0);
            Cell.SetCellValue("Click here for third-party disclaimers");
            XSSFCreationHelper createHelper = (XSSFCreationHelper)workbook.GetCreationHelper();
            XSSFHyperlink link = (XSSFHyperlink)createHelper.CreateHyperlink(HyperlinkType.Url);
            link.Address = "https://www.icraanalytics.com/home/thirdpartydisclaimers";
            Cell.Hyperlink = link;
            Cell.CellStyle = HyperLinkStyle;
            #endregion

            sheet.ActiveCell = new CellAddress(0, 1);
            var stream = new MemoryStream();
            workbook.Write(stream);

            return workbook;
        }
        public static NPOI.XSSF.UserModel.XSSFWorkbook ExportToExcelWorkBookWithNumberDecimalFormatForRiskometer(UserBasicSettings ubs, List<TableHeaderEntity> listTableHeader, List<ExportEntity> listData, string LogoPath = "", string ReportName = "", string StrDateAsOn = "")
        {

            #region Variable
            string Header = ubs.Reporting_Format_Header;
            string Footer = ubs.Reporting_Format_Footer;
            string BlankData = ubs.BlankData.ToUpper() == "BLANK" ? "" : ubs.BlankData;

            string StrHeader1 = "ICRA Analytics Limited";
            string StrHeader2 = "3rd Floor, Electric Mansion,Appasaheb Marathe Marg, Prabhadevi,Mumbai - 400 025 Maharashtra, India";
            string StrHeader3 = Header; //"Mumbai, Maharashtra 400093, IN";
            string StrReportName = ReportName;
            string StrSource = "Source: Risk-o-Meter";
            StrDateAsOn = "Data as on " + StrDateAsOn;
            string StrReportGeneratedOn = "Report Generated on " + DateTime.Now.ToString("dd-MMM-yyyy HH:mm:ss");

            #region number and decimal variable for AUM
            var aumPaddding = new string('0', (int)ubs.AUMDecimalFormat);
            var aumDecimalFormat = "0." + aumPaddding;
            string aumNUMBERFORMAT = ubs.NumberFormat;
            var aumNumberFormat = aumNUMBERFORMAT.Replace("0", "#");
            string aumNumberDecimalFormat = aumNumberFormat + "0." + new String('0', (int)ubs.AUMDecimalFormat);
            #endregion

            #region number and decimal variable for return
            var retPaddding = new string('0', (int)ubs.ReturnDecimalFormat);
            var retDecimalFormat = "0." + retPaddding;
            string retNUMBERFORMAT = ubs.NumberFormat;
            var retNumberFormat = retNUMBERFORMAT.Replace("0", "#");
            string retNumberDecimalFormat = retNumberFormat + "0." + new String('0', (int)ubs.ReturnDecimalFormat);
            #endregion

            #region number and decimal variable for NAV
            var navPaddding = new string('0', (int)ubs.NavDecimalFormat);
            var navDecimalFormat = "0." + navPaddding;
            string navNUMBERFORMAT = ubs.NumberFormat;
            var navNumberFormat = navNUMBERFORMAT.Replace("0", "#");
            string navNumberDecimalFormat = navNumberFormat + "0." + new String('0', (int)ubs.NavDecimalFormat);
            #endregion


            #region number and decimal variable for Other
            var othPaddding = new string('0', (int)ubs.OtherDecimal);
            var othDecimalFormat = "0." + othPaddding;
            string othNUMBERFORMAT = ubs.NumberFormat;
            var othNumberFormat = othNUMBERFORMAT.Replace("0", "#");
            string othNumberDecimalFormat = othNumberFormat + "0." + new String('0', (int)ubs.OtherDecimal);
            #endregion

            #region number and decimal variable for Ratio
            var ratioPaddding = new string('0', (int)ubs.RatioDecimalFormat);
            var ratioDecimalFormat = "0." + ratioPaddding;
            string ratioNUMBERFORMAT = ubs.NumberFormat;
            var ratioNumberFormat = ratioNUMBERFORMAT.Replace("0", "#");
            string ratioNumberDecimalFormat = ratioNumberFormat + "0." + new String('0', (int)ubs.RatioDecimalFormat);
            #endregion
            #region int Format with out Decimal
            var intNumberWithoutDecimalFormat = ubs.NumberFormat.Replace("0", "#");
            #endregion
            #endregion

            NPOI.XSSF.UserModel.XSSFWorkbook workbook = new NPOI.XSSF.UserModel.XSSFWorkbook();

            ISheet sheet = workbook.CreateSheet("Output");
            ISheet sheetTwo = workbook.CreateSheet("Disclaimer");

            #region Excel Sheet Gridlines Delete
            sheet.DisplayGridlines = false;
            sheetTwo.DisplayGridlines = false;
            #endregion

            #region Header Freeze
            sheet.CreateFreezePane(1, 6);
            #endregion

            #region Set Font For Header1,Header2 and Header3
            XSSFCellStyle HeaderStyle = (XSSFCellStyle)workbook.CreateCellStyle();
            IFont Headerfont = workbook.CreateFont();
            Headerfont.Boldweight = (short)FontBoldWeight.Bold;
            HeaderStyle.SetFont(Headerfont);
            #endregion

            #region Set Cell Value For Header1, Header2 and Header3
            var ICRArow = sheet.CreateRow(0);
            ICRArow.CreateCell(0);
            NPOIWrite.CellMerged(sheet, 0, 0, 1, 9);
            var ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader1);
            ICRACell.CellStyle = HeaderStyle;
            ICRArow = sheet.CreateRow(1);
            ICRArow.CreateCell(0);
            NPOIWrite.CellMerged(sheet, 1, 1, 1, 9);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader2);
            ICRACell.CellStyle = HeaderStyle;
            ICRArow = sheet.CreateRow(2);
            ICRArow.CreateCell(0);
            NPOIWrite.CellMerged(sheet, 2, 2, 1, 9);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader3);
            ICRACell.CellStyle = HeaderStyle;
            ICRACell.CellStyle.Alignment = HorizontalAlignment.Center;
            ICRArow = sheet.CreateRow(3);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.CellStyle.Alignment = HorizontalAlignment.Center;
            NPOIWrite.AutoFitColumn(sheet, 1);
            ICRACell.CellStyle = HeaderStyle;
            #endregion

            #region Report Name
            ICRArow = sheet.CreateRow(4);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrReportName);
            HeaderStyle.Alignment = HorizontalAlignment.Left;
            ICRACell.CellStyle = HeaderStyle;
            #endregion

            #region Header creation in the Excel
            var headerRow = sheet.CreateRow(5);
            sheet.GetRow(5).HeightInPoints = 30;
            var listHeaderFinal = listTableHeader.OrderBy(x => x.Position).ToList();
            for (int i = 0; i < listHeaderFinal.Count; i++)
            {
                var cell = headerRow.CreateCell(i);
                cell.SetCellValue(listHeaderFinal[i].ColumnName);
                NPOIWrite.AutoFitColumn(sheet, i);

                #region Commented by Subrata on 21 Feb 2018
                //ICellStyle CellStyle = workbook.CreateCellStyle();
                //CellStyle = workbook.CreateCellStyle();
                //CellStyle.FillBackgroundColor = IndexedColors.Blue.Index;
                #endregion

                #region Added by Subrata on 21 Feb 2018
                XSSFCellStyle style = (XSSFCellStyle)workbook.CreateCellStyle();
                XSSFColor colorToFill = new XSSFColor(new byte[] { 68, 114, 196 });//{ 51, 204, 204 }//Color.Blue);
                style.SetFillForegroundColor(colorToFill);
                IFont font = workbook.CreateFont();
                font.Color = IndexedColors.White.Index;
                font.Boldweight = (short)FontBoldWeight.Bold;
                style.SetFont(font);
                style.FillPattern = FillPattern.SolidForeground;
                style.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                style.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                style.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                style.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                if (i > 0)
                {
                    style.Alignment = HorizontalAlignment.Center;
                    style.VerticalAlignment = VerticalAlignment.Center;
                }
                else
                {
                    style.Alignment = HorizontalAlignment.Left;
                    style.VerticalAlignment = VerticalAlignment.Center;
                }
                #endregion

                cell.CellStyle = style;

            }
            #endregion

            #region Cell Style For Even Row

            #region With DecimalFormat AUM
            XSSFCellStyle aumAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor aumcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            aumAllCellStyleEvenDecFrmt.SetFillForegroundColor(aumcolorToFillEvenWtoutDec);
            aumAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat aumformatEven = workbook.CreateDataFormat();
            aumAllCellStyleEvenDecFrmt.DataFormat = aumformatEven.GetFormat(aumDecimalFormat);
            aumAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            /// Number Format ////
            XSSFCellStyle aumAllCellStyleEvenDecFrmtWNum = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleEvenDecFrmtWNum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmtWNum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmtWNum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmtWNum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor aumcolorToFillEvenWtoutDecWNum = new XSSFColor(new byte[] { 176, 196, 222 });
            aumAllCellStyleEvenDecFrmtWNum.SetFillForegroundColor(aumcolorToFillEvenWtoutDecWNum);
            aumAllCellStyleEvenDecFrmtWNum.FillPattern = FillPattern.SolidForeground;
            IDataFormat aumformatEvenWNum = workbook.CreateDataFormat();
            aumAllCellStyleEvenDecFrmtWNum.DataFormat = aumformatEvenWNum.GetFormat(aumNumberDecimalFormat);
            aumAllCellStyleEvenDecFrmtWNum.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleEvenDecFrmtWNum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Return
            XSSFCellStyle retAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            retAllCellStyleEvenDecFrmt.SetFillForegroundColor(retcolorToFillEvenWtoutDec);
            retAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatEven = workbook.CreateDataFormat();
            retAllCellStyleEvenDecFrmt.DataFormat = retformatEven.GetFormat(retDecimalFormat);
            retAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            retAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;


            ////Number Format ////
            XSSFCellStyle retAllCellStyleEvenDecFrmtWnum = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleEvenDecFrmtWnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmtWnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmtWnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmtWnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillEvenWtoutDecWnum = new XSSFColor(new byte[] { 176, 196, 222 });
            retAllCellStyleEvenDecFrmtWnum.SetFillForegroundColor(retcolorToFillEvenWtoutDecWnum);
            retAllCellStyleEvenDecFrmtWnum.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatEvenWnum = workbook.CreateDataFormat();
            retAllCellStyleEvenDecFrmtWnum.DataFormat = retformatEvenWnum.GetFormat(retNumberDecimalFormat);
            retAllCellStyleEvenDecFrmtWnum.Alignment = HorizontalAlignment.Center;
            retAllCellStyleEvenDecFrmtWnum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Nav
            XSSFCellStyle navAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor navcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            navAllCellStyleEvenDecFrmt.SetFillForegroundColor(navcolorToFillEvenWtoutDec);
            navAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat navformatEven = workbook.CreateDataFormat();
            navAllCellStyleEvenDecFrmt.DataFormat = navformatEven.GetFormat(navDecimalFormat);
            navAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            navAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;


            /// Number Format ////
            XSSFCellStyle navAllCellStyleEvenDecFrmtWnnum = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleEvenDecFrmtWnnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmtWnnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmtWnnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmtWnnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor navcolorToFillEvenWtoutDecWnnum = new XSSFColor(new byte[] { 176, 196, 222 });
            navAllCellStyleEvenDecFrmtWnnum.SetFillForegroundColor(navcolorToFillEvenWtoutDecWnnum);
            navAllCellStyleEvenDecFrmtWnnum.FillPattern = FillPattern.SolidForeground;
            IDataFormat navformatEvenWnnum = workbook.CreateDataFormat();
            navAllCellStyleEvenDecFrmtWnnum.DataFormat = navformatEvenWnnum.GetFormat(navNumberDecimalFormat);
            navAllCellStyleEvenDecFrmtWnnum.Alignment = HorizontalAlignment.Center;
            navAllCellStyleEvenDecFrmtWnnum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Other
            XSSFCellStyle otherAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            otherAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othercolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            otherAllCellStyleEvenDecFrmt.SetFillForegroundColor(othercolorToFillEvenWtoutDec);
            otherAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat otherformatEven = workbook.CreateDataFormat();
            otherAllCellStyleEvenDecFrmt.DataFormat = otherformatEven.GetFormat(othDecimalFormat);
            otherAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            otherAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            /// Number Format ///
            XSSFCellStyle otherAllCellStyleEvenDecFrmtWnum = (XSSFCellStyle)workbook.CreateCellStyle();
            otherAllCellStyleEvenDecFrmtWnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmtWnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmtWnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmtWnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othercolorToFillEvenWtoutDecWnum = new XSSFColor(new byte[] { 176, 196, 222 });
            otherAllCellStyleEvenDecFrmtWnum.SetFillForegroundColor(othercolorToFillEvenWtoutDecWnum);
            otherAllCellStyleEvenDecFrmtWnum.FillPattern = FillPattern.SolidForeground;
            IDataFormat otherformatEvenWnum = workbook.CreateDataFormat();
            otherAllCellStyleEvenDecFrmtWnum.DataFormat = otherformatEvenWnum.GetFormat(othNumberDecimalFormat);
            otherAllCellStyleEvenDecFrmtWnum.Alignment = HorizontalAlignment.Center;
            otherAllCellStyleEvenDecFrmtWnum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Ratio
            XSSFCellStyle ratAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor ratcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            ratAllCellStyleEvenDecFrmt.SetFillForegroundColor(ratcolorToFillEvenWtoutDec);
            ratAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat ratformatEven = workbook.CreateDataFormat();
            ratAllCellStyleEvenDecFrmt.DataFormat = ratformatEven.GetFormat(ratioDecimalFormat);
            ratAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle ratAllCellStyleEvenDecFrmtWth = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleEvenDecFrmtWth.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmtWth.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmtWth.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmtWth.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor ratcolorToFillEvenWtoutDecwth = new XSSFColor(new byte[] { 176, 196, 222 });
            ratAllCellStyleEvenDecFrmtWth.SetFillForegroundColor(ratcolorToFillEvenWtoutDecwth);
            ratAllCellStyleEvenDecFrmtWth.FillPattern = FillPattern.SolidForeground;
            IDataFormat ratformatEvenWth = workbook.CreateDataFormat();
            ratAllCellStyleEvenDecFrmtWth.DataFormat = ratformatEvenWth.GetFormat(ratioNumberDecimalFormat);
            ratAllCellStyleEvenDecFrmtWth.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleEvenDecFrmtWth.VerticalAlignment = VerticalAlignment.Center;
            #endregion


            #region No Format
            XSSFCellStyle AllCellStyleEven = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleEven.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillEven = new XSSFColor(new byte[] { 176, 196, 222 });
            AllCellStyleEven.SetFillForegroundColor(colorToFillEven);
            AllCellStyleEven.FillPattern = FillPattern.SolidForeground;
            AllCellStyleEven.Alignment = HorizontalAlignment.Center;
            AllCellStyleEven.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #endregion

            #region Cell Style For Odd Row

            #region With Decimal Format AUM
            XSSFCellStyle aumAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor AUMcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            aumAllCellStyleOddDec.SetFillForegroundColor(AUMcolorToFillOddDec);
            aumAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat AUMformatOddDec = workbook.CreateDataFormat();
            aumAllCellStyleOddDec.DataFormat = AUMformatOddDec.GetFormat(aumDecimalFormat);
            aumAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle aumAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor AUMcolorToFillOddDecWnf = new XSSFColor(new byte[] { 255, 255, 255 });
            aumAllCellStyleOddDecWnuf.SetFillForegroundColor(AUMcolorToFillOddDecWnf);
            aumAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat AUMformatOddDecWnuf = workbook.CreateDataFormat();
            aumAllCellStyleOddDecWnuf.DataFormat = AUMformatOddDecWnuf.GetFormat(aumNumberDecimalFormat);
            aumAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With Decimal Format Return
            XSSFCellStyle retAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor RETcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            retAllCellStyleOddDec.SetFillForegroundColor(RETcolorToFillOddDec);
            retAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat RETformatOddDec = workbook.CreateDataFormat();
            retAllCellStyleOddDec.DataFormat = RETformatOddDec.GetFormat(retDecimalFormat);
            retAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            retAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle retAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor RETcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            retAllCellStyleOddDecWnuf.SetFillForegroundColor(RETcolorToFillOddDecWnuf);
            retAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat RETformatOddDecWnuf = workbook.CreateDataFormat();
            retAllCellStyleOddDecWnuf.DataFormat = RETformatOddDecWnuf.GetFormat(retNumberDecimalFormat);
            retAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            retAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With Decimal Format Nav
            XSSFCellStyle navAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor naVcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            navAllCellStyleOddDec.SetFillForegroundColor(naVcolorToFillOddDec);
            navAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat naVformatOddDec = workbook.CreateDataFormat();
            navAllCellStyleOddDec.DataFormat = naVformatOddDec.GetFormat(navDecimalFormat);
            navAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            navAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            XSSFCellStyle navAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor naVcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            navAllCellStyleOddDecWnuf.SetFillForegroundColor(naVcolorToFillOddDecWnuf);
            navAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat naVformatOddDecWnuf = workbook.CreateDataFormat();
            navAllCellStyleOddDecWnuf.DataFormat = naVformatOddDecWnuf.GetFormat(navNumberDecimalFormat);
            navAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            navAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion


            #region With Decimal Format Other
            XSSFCellStyle othAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            othAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            othAllCellStyleOddDec.SetFillForegroundColor(othcolorToFillOddDec);
            othAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat othformatOddDec = workbook.CreateDataFormat();
            othAllCellStyleOddDec.DataFormat = othformatOddDec.GetFormat(othDecimalFormat);
            othAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            othAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            XSSFCellStyle othAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            othAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            othAllCellStyleOddDecWnuf.SetFillForegroundColor(othcolorToFillOddDecWnuf);
            othAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat othformatOddDecWnuf = workbook.CreateDataFormat();
            othAllCellStyleOddDecWnuf.DataFormat = othformatOddDecWnuf.GetFormat(othNumberDecimalFormat);
            othAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            othAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion


            #region With Decimal Format ratio
            XSSFCellStyle ratAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            ratAllCellStyleOddDec.SetFillForegroundColor(retcolorToFillOddDec);
            ratAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatOddDec = workbook.CreateDataFormat();
            ratAllCellStyleOddDec.DataFormat = retformatOddDec.GetFormat(ratioDecimalFormat);
            ratAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            XSSFCellStyle ratAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            ratAllCellStyleOddDecWnuf.SetFillForegroundColor(retcolorToFillOddDecWnuf);
            ratAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatOddDecWnuf = workbook.CreateDataFormat();
            ratAllCellStyleOddDecWnuf.DataFormat = retformatOddDecWnuf.GetFormat(ratioNumberDecimalFormat);
            ratAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region No Format
            XSSFCellStyle AllCellStyleOdd = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleOdd.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillOdd = new XSSFColor(new byte[] { 255, 255, 255 });
            AllCellStyleOdd.SetFillForegroundColor(colorToFillOdd);
            AllCellStyleOdd.FillPattern = FillPattern.SolidForeground;
            AllCellStyleOdd.Alignment = HorizontalAlignment.Center;
            AllCellStyleOdd.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #endregion

            #region Cell Style For First Column Even Row
            XSSFCellStyle AllCellStyleFstColmEven = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleFstColmEven.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillFstClmnEven = new XSSFColor(new byte[] { 176, 196, 222 });
            AllCellStyleFstColmEven.SetFillForegroundColor(colorToFillFstClmnEven);
            AllCellStyleFstColmEven.FillPattern = FillPattern.SolidForeground;
            AllCellStyleFstColmEven.Alignment = HorizontalAlignment.Left;
            AllCellStyleFstColmEven.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region Cell Style For First Column Odd Row
            XSSFCellStyle AllCellStyleFstColmOdd = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleFstColmOdd.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillFstClmnOdd = new XSSFColor(new byte[] { 255, 255, 255 });
            AllCellStyleFstColmOdd.SetFillForegroundColor(colorToFillFstClmnOdd);
            AllCellStyleFstColmOdd.FillPattern = FillPattern.SolidForeground;
            AllCellStyleFstColmOdd.Alignment = HorizontalAlignment.Left;
            AllCellStyleFstColmOdd.VerticalAlignment = VerticalAlignment.Center;
            #endregion
            #region Without Decimal Number Format Even Row
            XSSFCellStyle intAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            intAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            intAllCellStyleEvenDecFrmt.SetFillForegroundColor(intcolorToFillEvenWtoutDec);
            intAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat intformatEven = workbook.CreateDataFormat();
            intAllCellStyleEvenDecFrmt.DataFormat = intformatEven.GetFormat(intNumberWithoutDecimalFormat);
            intAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            intAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle intSimpleAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            intSimpleAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intSimplecolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            intSimpleAllCellStyleEvenDecFrmt.SetFillForegroundColor(intSimplecolorToFillEvenWtoutDec);
            intSimpleAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            intSimpleAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            intSimpleAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;
            #endregion
            #region Without Decimal Number Format Odd Row
            XSSFCellStyle intAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            intAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            intAllCellStyleOddDec.SetFillForegroundColor(intcolorToFillOddDec);
            intAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat intformatOddDec = workbook.CreateDataFormat();
            intAllCellStyleOddDec.DataFormat = intformatOddDec.GetFormat(intNumberWithoutDecimalFormat);
            intAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            intAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle intSimpleAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            intSimpleAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intSimplecolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            intSimpleAllCellStyleOddDec.SetFillForegroundColor(intSimplecolorToFillOddDec);
            intSimpleAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            intSimpleAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            intSimpleAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region Value added to the Excel

            #region Added by Subrata on 22 Feb 2018
            bool IsNumericKey = false;
            bool IsNumericValue = false;
            var AllListData = listData.SelectMany(x => x.LstKeyValuePair).ToArray();
            var AllDataKey = AllListData.Select(x => x.Key).Distinct().ToArray();
            int ValueRes;
            IsNumericKey = int.TryParse(AllDataKey[0], out ValueRes);
            #endregion

            int incr = 6;
            bool isNumeric = false;
            foreach (var item in listData)
            {
                if (item.LstKeyValuePair.Count() > 0)
                {
                    int value;
                    isNumeric = int.TryParse(item.LstKeyValuePair[0].Key, out value);
                }
                var dataRow = sheet.CreateRow(incr);
                sheet.GetRow(incr).HeightInPoints = 20;
                if (isNumeric == true)
                {
                    var cellValues = (from i in item.LstKeyValuePair
                                      from j in listTableHeader
                                      where i.Key.ToString() == j.Position.ToString()
                                      orderby j.Position
                                      select new
                                      {
                                          IsNum = j.IsNumberFormatReq,
                                          DecType = j.DecFormatType,
                                          Value = i.Value
                                      }).ToArray();

                    for (int k = 0; k < cellValues.Length; k++)
                    {
                        var datacell = dataRow.CreateCell(k);
                        if (cellValues[k].DecType != DecimalFormatType.NoDecimalReq)
                        {
                            double OutVal;
                            if (string.IsNullOrEmpty(cellValues[k].Value) || cellValues[k].Value == BlankData || !double.TryParse(cellValues[k].Value, out OutVal))
                            {
                                datacell.SetCellValue(cellValues[k].Value);
                                if (k > 0)
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;

                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }

                            }
                            else
                            {
                                datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));

                                if (k > 0)
                                {
                                    if (cellValues[k].DecType == DecimalFormatType.AUM)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {

                                                datacell.CellStyle = aumAllCellStyleEvenDecFrmtWNum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = aumAllCellStyleEvenDecFrmt;
                                            }
                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = aumAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = aumAllCellStyleOddDec;
                                            }
                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.NAV)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = navAllCellStyleEvenDecFrmtWnnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = navAllCellStyleEvenDecFrmt;
                                            }
                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = navAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = navAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.OTHER)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = otherAllCellStyleEvenDecFrmtWnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = otherAllCellStyleEvenDecFrmt;
                                            }
                                        }

                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = othAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {

                                                datacell.CellStyle = othAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.RATIO)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = ratAllCellStyleEvenDecFrmtWth;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = ratAllCellStyleEvenDecFrmt;
                                            }
                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = ratAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = ratAllCellStyleOddDec;
                                            }
                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.RETURN)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = retAllCellStyleEvenDecFrmtWnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = retAllCellStyleEvenDecFrmt;
                                            }

                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = retAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = retAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.IntegerWithOutDecimal)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = intAllCellStyleEvenDecFrmt;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = intSimpleAllCellStyleEvenDecFrmt;
                                            }

                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = intAllCellStyleOddDec;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = intSimpleAllCellStyleOddDec;
                                            }

                                        }
                                    }

                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }

                            }

                        }
                        else
                        {
                            double OutVal;
                            if (double.TryParse(cellValues[k].Value, out OutVal))
                            {
                                datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                                if (k > 0)
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;

                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }
                            }
                            else
                            {
                                datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                if (k > 0)
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;

                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }
                            }
                        }


                    }
                    incr++;
                }
                else
                {
                    var cellValues = (from i in item.LstKeyValuePair
                                      from j in listTableHeader
                                      where i.Key == j.ColumnName
                                      orderby j.Position
                                      select new
                                      {
                                          IsNum = j.IsNumberFormatReq,
                                          DecType = j.DecFormatType,
                                          IsMixedType = j.IsMixedValueType,
                                          Value = i.Value
                                      }).ToArray();

                    for (int k = 0; k < cellValues.Length; k++)
                    {
                        var datacell = dataRow.CreateCell(k);
                        if (cellValues[k].DecType != DecimalFormatType.NoDecimalReq)
                        {
                            double OutVal;
                            if (string.IsNullOrEmpty(cellValues[k].Value) || cellValues[k].Value == BlankData || !double.TryParse(cellValues[k].Value, out OutVal))
                            {
                                datacell.SetCellValue(cellValues[k].Value);
                                if (k > 0)
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;
                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }

                            }
                            else
                            {
                                datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                                if (k > 0)
                                {
                                    if (cellValues[k].DecType == DecimalFormatType.AUM)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {

                                                datacell.CellStyle = aumAllCellStyleEvenDecFrmtWNum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = aumAllCellStyleEvenDecFrmt;
                                            }
                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = aumAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = aumAllCellStyleOddDec;
                                            }
                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.NAV)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = navAllCellStyleEvenDecFrmtWnnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = navAllCellStyleEvenDecFrmt;
                                            }
                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = navAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = navAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.OTHER)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = otherAllCellStyleEvenDecFrmtWnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = otherAllCellStyleEvenDecFrmt;
                                            }
                                        }

                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = othAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {

                                                datacell.CellStyle = othAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.RATIO)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = ratAllCellStyleEvenDecFrmtWth;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = ratAllCellStyleEvenDecFrmt;
                                            }
                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = ratAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = ratAllCellStyleOddDec;
                                            }
                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.RETURN)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = retAllCellStyleEvenDecFrmtWnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = retAllCellStyleEvenDecFrmt;
                                            }

                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = retAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = retAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.IntegerWithOutDecimal)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = intAllCellStyleEvenDecFrmt;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = intSimpleAllCellStyleEvenDecFrmt;
                                            }

                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = intAllCellStyleOddDec;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = intSimpleAllCellStyleOddDec;
                                            }

                                        }
                                    }



                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }

                            }

                        }
                        else
                        {
                            double OutVal;
                            if (double.TryParse(cellValues[k].Value, out OutVal) && !cellValues[k].IsMixedType)
                            {
                                datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                                if (k > 0)
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;

                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }
                            }
                            else
                            {
                                datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                if (k > 0)
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;

                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }
                            }
                        }


                    }
                    incr++;
                }

            }
            #endregion

            for (int i = 0; i < listTableHeader.Count; i++)
                sheet.AutoSizeColumn(i);
            if (sheet.GetColumnWidth(0) < 11072)
                sheet.SetColumnWidth(0, 11072);

            #region Logo
            try
            {
                if (!string.IsNullOrEmpty(LogoPath))
                {
                    XSSFDrawing patriarch = (XSSFDrawing)sheet.CreateDrawingPatriarch();
                    XSSFClientAnchor anchor;
                    anchor = new XSSFClientAnchor(0, 0, 0, 255, 0, 0, 0, 3);
                    anchor.AnchorType = AnchorType.DontMoveAndResize;
                    XSSFPicture picture = (XSSFPicture)patriarch.CreatePicture(anchor, LoadImage(LogoPath, workbook, PictureType.PNG));
                    double x1 = .25;
                    double y1 = .75;
                    picture.Resize(x1, y1);
                    picture.LineStyle = LineStyle.None;
                }
            }
            catch (Exception ex)
            {
            }

            #endregion

            #region Source, Date As On and Report Generated On
            ICRArow = sheet.CreateRow(incr + 3);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrSource);

            ICRArow = sheet.CreateRow(incr + 4);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrDateAsOn);

            ICRArow = sheet.CreateRow(incr + 5);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrReportGeneratedOn);
            #endregion

            #region Sheet Two Logo
            try
            {
                if (!string.IsNullOrEmpty(LogoPath))
                {
                    XSSFDrawing patriarch = (XSSFDrawing)sheetTwo.CreateDrawingPatriarch();
                    XSSFClientAnchor anchor;
                    anchor = new XSSFClientAnchor(0, 0, 0, 255, 0, 0, 0, 3);
                    anchor.AnchorType = AnchorType.DontMoveAndResize;
                    XSSFPicture picture = (XSSFPicture)patriarch.CreatePicture(anchor, LoadImage(LogoPath, workbook, PictureType.PNG));
                    double x1 = 1.10;
                    double y1 = 1.10;
                    picture.Resize(x1, y1);
                    picture.LineStyle = LineStyle.None;
                }
            }
            catch (Exception ex)
            {
            }
            #endregion

            #region Disclaimer Sheet
            var Row = sheetTwo.CreateRow(1);
            var cellSheetTwo = Row.CreateCell(7);
            cellSheetTwo.SetCellValue(StrHeader1);
            cellSheetTwo.CellStyle = HeaderStyle;

            Row = sheetTwo.CreateRow(4);
            ICell Cell;
            for (int i = 0; i < 17; i++)
            {
                Cell = Row.CreateCell(i);

                XSSFCellStyle declationstyle = (XSSFCellStyle)workbook.CreateCellStyle();

                declationstyle.Alignment = HorizontalAlignment.Left;
                declationstyle.VerticalAlignment = VerticalAlignment.Top;
                declationstyle.WrapText = true;
                IFont declarationfnt = (XSSFFont)workbook.CreateFont();
                //declarationfnt.Boldweight = (short)FontBoldWeight.Bold;
                declarationfnt.FontName = "Calibri";
                declarationfnt.FontHeightInPoints = (short)11;
                declationstyle.SetFont(declarationfnt);
                Cell.SetCellValue(!string.IsNullOrEmpty(Footer) ? Footer : "All information contained herein is obtained by ICRA Analytics Limited from sources believed by it to be accurate and reliable. Because of the possibility of human or mechanical error as well as other factors, however, all information contained herein is provided 'AS IS' without warranty of any kind. ICRA Analytics adopts all necessary measures so that the information it uses is of sufficient quality and from sources ICRA Analytics considers to be reliable including, when appropriate, independent third-party sources. However, ICRA Analytics is not an auditor and cannot in every instance independently verify or validate information received in preparing this document." +
                    "All information contained herein must be construed solely as statements of opinion, and  ICRA Analytics Limited or its affiliates or group companies and its respective and any of its officers, directors, personnel and employees, disclaim liability to any loss, damage of any nature, including but not limited to direct, indirect, punitive, special, exemplary, consequential, as also any loss of profit in any way arising from the use of this document or its contents in any manner or for any contingency within or beyond the control of, ICRA Analytics or any of its directors, officers, employees, agents, representatives, licensors or suppliers, arising from or in connection with the information contained herein or the use of or inability to use any such information.Opinions expressed in the document are not the opinions of our holding company, ICRA Limited(ICRA), and should not be construed as any indication of credit rating or grading of ICRA for any instruments that have been issued or are to be issued by any entity.The recipient alone shall be fully responsible and / or are liable for any decision taken on the basis of this document and / or the information contained herein.");
                Cell.CellStyle = declationstyle;

            }
            NPOIWrite.CellMerged(sheetTwo, 4, 4, 0, 17);
            sheetTwo.GetRow(4).HeightInPoints = 200;
            #endregion

            #region Disclaimer Sheet HyperLink
            XSSFCellStyle HyperLinkStyle = (XSSFCellStyle)workbook.CreateCellStyle();
            IFont HyperLinkFont = workbook.CreateFont();
            HyperLinkFont.Color = IndexedColors.Orange.Index;
            HyperLinkFont.Underline = FontUnderlineType.Single;
            HyperLinkStyle.SetFont(HyperLinkFont);

            Row = sheetTwo.CreateRow(5);
            Cell = Row.CreateCell(0);
            Cell.SetCellValue("Click here for third-party disclaimers");
            XSSFCreationHelper createHelper = (XSSFCreationHelper)workbook.GetCreationHelper();
            XSSFHyperlink link = (XSSFHyperlink)createHelper.CreateHyperlink(HyperlinkType.Url);
            link.Address = "https://www.icraanalytics.com/home/thirdpartydisclaimers";
            Cell.Hyperlink = link;
            Cell.CellStyle = HyperLinkStyle;
            #endregion

            sheet.ActiveCell = new CellAddress(0, 1);
            var stream = new MemoryStream();
            workbook.Write(stream);

            return workbook;
        }
        public static NPOI.XSSF.UserModel.XSSFWorkbook ExportToExcelWorkBookWithNumberDecimalFormatYearToYearForRiskometer(UserBasicSettings ubs, List<TableHeaderEntity> listMainTableHeader, List<TableHeaderEntity> listTableHeader, List<ExportEntity> listData, string LogoPath = "",
            string ReportName = "", string StrDateAsOn = "", List<ColorIndex> OverrideCellColorColIndex = null)
        {

            #region Variable
            string Header = ubs.Reporting_Format_Header;
            string Footer = ubs.Reporting_Format_Footer;
            string BlankData = ubs.BlankData.ToUpper() == "BLANK" ? "" : ubs.BlankData;
            string StrHeader1 = "ICRA Analytics Limited";
            string StrHeader2 = "3rd Floor, Electric Mansion,Appasaheb Marathe Marg, Prabhadevi,Mumbai - 400 025 Maharashtra, India";
            string StrHeader3 = Header; //"Mumbai, Maharashtra 400093, IN";
            string StrReportName = ReportName;
            string StrSource = "Source: Risk-o-Meter";
            StrDateAsOn = "Data as on " + StrDateAsOn;
            string StrReportGeneratedOn = "Report Generated on " + DateTime.Now.ToString("dd-MMM-yyyy HH:mm:ss");

            #region number and decimal variable for AUM
            var aumPaddding = new string('0', (int)ubs.AUMDecimalFormat);
            var aumDecimalFormat = "0." + aumPaddding;
            string aumNUMBERFORMAT = ubs.NumberFormat;
            var aumNumberFormat = aumNUMBERFORMAT.Replace("0", "#");
            string aumNumberDecimalFormat = aumNumberFormat + "0." + new String('0', (int)ubs.AUMDecimalFormat);
            #endregion

            #region number and decimal variable for return
            var retPaddding = new string('0', (int)ubs.ReturnDecimalFormat);
            var retDecimalFormat = "0." + retPaddding;
            string retNUMBERFORMAT = ubs.NumberFormat;
            var retNumberFormat = retNUMBERFORMAT.Replace("0", "#");
            string retNumberDecimalFormat = retNumberFormat + "0." + new String('0', (int)ubs.ReturnDecimalFormat);
            #endregion

            #region number and decimal variable for NAV
            var navPaddding = new string('0', (int)ubs.NavDecimalFormat);
            var navDecimalFormat = "0." + navPaddding;
            string navNUMBERFORMAT = ubs.NumberFormat;
            var navNumberFormat = navNUMBERFORMAT.Replace("0", "#");
            string navNumberDecimalFormat = navNumberFormat + "0." + new String('0', (int)ubs.NavDecimalFormat);
            #endregion


            #region number and decimal variable for Other
            var othPaddding = new string('0', (int)ubs.OtherDecimal);
            var othDecimalFormat = "0." + othPaddding;
            string othNUMBERFORMAT = ubs.NumberFormat;
            var othNumberFormat = othNUMBERFORMAT.Replace("0", "#");
            string othNumberDecimalFormat = othNumberFormat + "0." + new String('0', (int)ubs.OtherDecimal);
            #endregion

            #region number and decimal variable for Ratio
            var ratioPaddding = new string('0', (int)ubs.RatioDecimalFormat);
            var ratioDecimalFormat = "0." + ratioPaddding;
            string ratioNUMBERFORMAT = ubs.NumberFormat;
            var ratioNumberFormat = ratioNUMBERFORMAT.Replace("0", "#");
            string ratioNumberDecimalFormat = ratioNumberFormat + "0." + new String('0', (int)ubs.RatioDecimalFormat);
            #endregion
            #region int Format with out Decimal
            var intNumberWithoutDecimalFormat = ubs.NumberFormat.Replace("0", "#");
            #endregion
            #endregion

            NPOI.XSSF.UserModel.XSSFWorkbook workbook = new NPOI.XSSF.UserModel.XSSFWorkbook();

            ISheet sheet = workbook.CreateSheet("Output");
            ISheet sheetTwo = workbook.CreateSheet("Disclaimer");

            #region Excel Sheet Gridlines Delete
            sheet.DisplayGridlines = false;
            sheetTwo.DisplayGridlines = false;
            #endregion

            #region Header Freeze
            sheet.CreateFreezePane(1, 7);
            #endregion

            #region Set Font For Header1,Header2 and Header3
            XSSFCellStyle HeaderStyle = (XSSFCellStyle)workbook.CreateCellStyle();
            IFont Headerfont = workbook.CreateFont();
            Headerfont.Boldweight = (short)FontBoldWeight.Bold;
            HeaderStyle.SetFont(Headerfont);
            #endregion

            #region Set Cell Value For Header1, Header2 and Header3
            var ICRArow = sheet.CreateRow(0);
            ICRArow.CreateCell(0);
            NPOIWrite.CellMerged(sheet, 0, 0, 1, 9);
            var ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader1);
            ICRACell.CellStyle = HeaderStyle;
            ICRArow = sheet.CreateRow(1);
            ICRArow.CreateCell(0);
            NPOIWrite.CellMerged(sheet, 1, 1, 1, 9);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader2);
            ICRACell.CellStyle = HeaderStyle;
            ICRArow = sheet.CreateRow(2);
            ICRArow.CreateCell(0);
            NPOIWrite.CellMerged(sheet, 2, 2, 1, 9);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader3);
            ICRACell.CellStyle = HeaderStyle;
            ICRACell.CellStyle.Alignment = HorizontalAlignment.Center;
            ICRArow = sheet.CreateRow(3);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.CellStyle.Alignment = HorizontalAlignment.Center;
            NPOIWrite.AutoFitColumn(sheet, 1);
            ICRACell.CellStyle = HeaderStyle;
            #endregion

            #region Report Name
            ICRArow = sheet.CreateRow(4);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrReportName);
            HeaderStyle.Alignment = HorizontalAlignment.Left;
            ICRACell.CellStyle = HeaderStyle;
            #endregion
            #region MainHeader creation in the Excel
            var MainheaderRow = sheet.CreateRow(5);
            sheet.GetRow(5).HeightInPoints = 30;
            var cellincr = 0;
            for (int i = 0; i < listMainTableHeader.Count(); i++)
            {
                var cell = MainheaderRow.CreateCell(i);
                cell.SetCellValue(listMainTableHeader[i].ColumnName);
                NPOIWrite.AutoFitColumn(sheet, i);
                XSSFCellStyle style = (XSSFCellStyle)workbook.CreateCellStyle();
                XSSFColor colorToFill = new XSSFColor(new byte[] { 0, 32, 96 });//{ 51, 204, 204 }//Color.Blue);//68, 114, 196
                style.SetFillForegroundColor(colorToFill);
                IFont font = workbook.CreateFont();
                font.Color = IndexedColors.White.Index;
                font.Boldweight = (short)FontBoldWeight.Bold;
                style.SetFont(font);
                style.FillPattern = FillPattern.SolidForeground;
                style.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                style.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                style.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                style.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                if (i > 0)
                {
                    style.Alignment = HorizontalAlignment.Center;
                    style.VerticalAlignment = VerticalAlignment.Center;
                }
                else
                {
                    style.Alignment = HorizontalAlignment.Left;
                    style.VerticalAlignment = VerticalAlignment.Center;
                }
                int colspan = listMainTableHeader[i].Colspan;
                if (colspan > 1)
                {
                    for (int k = 0; k < colspan; k++)
                    {
                        cell = MainheaderRow.CreateCell(cellincr + k);
                        if (k == 0)
                            cell.SetCellValue(listMainTableHeader[i].ColumnName);
                        cell.CellStyle = style;
                    }
                    NPOIWrite.CellMerged(sheet, 5, 5, cellincr, cellincr + colspan - 1);
                    cellincr = cellincr + colspan;
                }
                else
                {
                    cell = MainheaderRow.CreateCell(cellincr);
                    cell.SetCellValue(listMainTableHeader[i].ColumnName);
                    cell.CellStyle = style;
                    cellincr = cellincr + colspan;
                }
            }
            #endregion
            #region Header creation in the Excel
            var headerRow = sheet.CreateRow(6);
            sheet.GetRow(6).HeightInPoints = 30;
            var listHeaderFinal = listTableHeader.OrderBy(x => x.Position).ToList();
            string blankString = "";
            if (listHeaderFinal.Where(x => !x.IsHeaderRowMerged).Count() < 5)
                blankString = "        ";
            for (int i = 0; i < listHeaderFinal.Count; i++)
            {
                var cell = headerRow.CreateCell(i);
                cell.SetCellValue(listHeaderFinal[i].ColumnName + blankString);
                NPOIWrite.AutoFitColumn(sheet, i);

                #region Commented by Subrata on 21 Feb 2018
                //ICellStyle CellStyle = workbook.CreateCellStyle();
                //CellStyle = workbook.CreateCellStyle();
                //CellStyle.FillBackgroundColor = IndexedColors.Blue.Index;
                #endregion

                #region Added by Subrata on 21 Feb 2018
                XSSFCellStyle style = (XSSFCellStyle)workbook.CreateCellStyle();
                XSSFColor colorToFill = new XSSFColor(new byte[] { 142, 169, 219 });//{ 51, 204, 204 }//Color.Blue);//68, 114, 196
                style.SetFillForegroundColor(colorToFill);
                IFont font = workbook.CreateFont();
                font.Color = IndexedColors.White.Index;
                font.Boldweight = (short)FontBoldWeight.Bold;
                style.SetFont(font);
                style.FillPattern = FillPattern.SolidForeground;
                style.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                style.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                style.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                style.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                if (i > 0)
                {
                    style.Alignment = HorizontalAlignment.Center;
                    style.VerticalAlignment = VerticalAlignment.Center;
                }
                else
                {
                    style.Alignment = HorizontalAlignment.Left;
                    style.VerticalAlignment = VerticalAlignment.Center;
                }
                #endregion
                if (!listHeaderFinal[i].IsHeaderRowMerged)
                    cell.CellStyle = style;
            }
            #endregion
            #region Cell Style For Even Row

            #region With DecimalFormat AUM
            XSSFCellStyle aumAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor aumcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 255, 255, 255 });
            aumAllCellStyleEvenDecFrmt.SetFillForegroundColor(aumcolorToFillEvenWtoutDec);
            aumAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat aumformatEven = workbook.CreateDataFormat();
            aumAllCellStyleEvenDecFrmt.DataFormat = aumformatEven.GetFormat(aumDecimalFormat);
            aumAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            /// Number Format ////
            XSSFCellStyle aumAllCellStyleEvenDecFrmtWNum = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleEvenDecFrmtWNum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmtWNum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmtWNum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmtWNum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor aumcolorToFillEvenWtoutDecWNum = new XSSFColor(new byte[] { 255, 255, 255 });
            aumAllCellStyleEvenDecFrmtWNum.SetFillForegroundColor(aumcolorToFillEvenWtoutDecWNum);
            aumAllCellStyleEvenDecFrmtWNum.FillPattern = FillPattern.SolidForeground;
            IDataFormat aumformatEvenWNum = workbook.CreateDataFormat();
            aumAllCellStyleEvenDecFrmtWNum.DataFormat = aumformatEvenWNum.GetFormat(aumNumberDecimalFormat);
            aumAllCellStyleEvenDecFrmtWNum.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleEvenDecFrmtWNum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Return
            XSSFCellStyle retAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 255, 255, 255 });
            retAllCellStyleEvenDecFrmt.SetFillForegroundColor(retcolorToFillEvenWtoutDec);
            retAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatEven = workbook.CreateDataFormat();
            retAllCellStyleEvenDecFrmt.DataFormat = retformatEven.GetFormat(retDecimalFormat);
            retAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            retAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;


            ////Number Format ////
            XSSFCellStyle retAllCellStyleEvenDecFrmtWnum = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleEvenDecFrmtWnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmtWnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmtWnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmtWnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillEvenWtoutDecWnum = new XSSFColor(new byte[] { 255, 255, 255 });
            retAllCellStyleEvenDecFrmtWnum.SetFillForegroundColor(retcolorToFillEvenWtoutDecWnum);
            retAllCellStyleEvenDecFrmtWnum.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatEvenWnum = workbook.CreateDataFormat();
            retAllCellStyleEvenDecFrmtWnum.DataFormat = retformatEvenWnum.GetFormat(retNumberDecimalFormat);
            retAllCellStyleEvenDecFrmtWnum.Alignment = HorizontalAlignment.Center;
            retAllCellStyleEvenDecFrmtWnum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Nav
            XSSFCellStyle navAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor navcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 255, 255, 255 });
            navAllCellStyleEvenDecFrmt.SetFillForegroundColor(navcolorToFillEvenWtoutDec);
            navAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat navformatEven = workbook.CreateDataFormat();
            navAllCellStyleEvenDecFrmt.DataFormat = navformatEven.GetFormat(navDecimalFormat);
            navAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            navAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;


            /// Number Format ////
            XSSFCellStyle navAllCellStyleEvenDecFrmtWnnum = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleEvenDecFrmtWnnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmtWnnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmtWnnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmtWnnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor navcolorToFillEvenWtoutDecWnnum = new XSSFColor(new byte[] { 255, 255, 255 });
            navAllCellStyleEvenDecFrmtWnnum.SetFillForegroundColor(navcolorToFillEvenWtoutDecWnnum);
            navAllCellStyleEvenDecFrmtWnnum.FillPattern = FillPattern.SolidForeground;
            IDataFormat navformatEvenWnnum = workbook.CreateDataFormat();
            navAllCellStyleEvenDecFrmtWnnum.DataFormat = navformatEvenWnnum.GetFormat(navNumberDecimalFormat);
            navAllCellStyleEvenDecFrmtWnnum.Alignment = HorizontalAlignment.Center;
            navAllCellStyleEvenDecFrmtWnnum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Other
            XSSFCellStyle otherAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            otherAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othercolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 255, 255, 255 });
            otherAllCellStyleEvenDecFrmt.SetFillForegroundColor(othercolorToFillEvenWtoutDec);
            otherAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat otherformatEven = workbook.CreateDataFormat();
            otherAllCellStyleEvenDecFrmt.DataFormat = otherformatEven.GetFormat(othDecimalFormat);
            otherAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            otherAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            /// Number Format ///
            XSSFCellStyle otherAllCellStyleEvenDecFrmtWnum = (XSSFCellStyle)workbook.CreateCellStyle();
            otherAllCellStyleEvenDecFrmtWnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmtWnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmtWnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmtWnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othercolorToFillEvenWtoutDecWnum = new XSSFColor(new byte[] { 255, 255, 255 });
            otherAllCellStyleEvenDecFrmtWnum.SetFillForegroundColor(othercolorToFillEvenWtoutDecWnum);
            otherAllCellStyleEvenDecFrmtWnum.FillPattern = FillPattern.SolidForeground;
            IDataFormat otherformatEvenWnum = workbook.CreateDataFormat();
            otherAllCellStyleEvenDecFrmtWnum.DataFormat = otherformatEvenWnum.GetFormat(othNumberDecimalFormat);
            otherAllCellStyleEvenDecFrmtWnum.Alignment = HorizontalAlignment.Center;
            otherAllCellStyleEvenDecFrmtWnum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Ratio
            XSSFCellStyle ratAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor ratcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 255, 255, 255 });
            ratAllCellStyleEvenDecFrmt.SetFillForegroundColor(ratcolorToFillEvenWtoutDec);
            ratAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat ratformatEven = workbook.CreateDataFormat();
            ratAllCellStyleEvenDecFrmt.DataFormat = ratformatEven.GetFormat(ratioDecimalFormat);
            ratAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle ratAllCellStyleEvenDecFrmtWth = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleEvenDecFrmtWth.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmtWth.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmtWth.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmtWth.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor ratcolorToFillEvenWtoutDecwth = new XSSFColor(new byte[] { 255, 255, 255 });
            ratAllCellStyleEvenDecFrmtWth.SetFillForegroundColor(ratcolorToFillEvenWtoutDecwth);
            ratAllCellStyleEvenDecFrmtWth.FillPattern = FillPattern.SolidForeground;
            IDataFormat ratformatEvenWth = workbook.CreateDataFormat();
            ratAllCellStyleEvenDecFrmtWth.DataFormat = ratformatEvenWth.GetFormat(ratioNumberDecimalFormat);
            ratAllCellStyleEvenDecFrmtWth.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleEvenDecFrmtWth.VerticalAlignment = VerticalAlignment.Center;
            #endregion


            #region No Format
            XSSFCellStyle AllCellStyleEven = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleEven.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillEven = new XSSFColor(new byte[] { 255, 255, 255 });
            AllCellStyleEven.SetFillForegroundColor(colorToFillEven);
            AllCellStyleEven.FillPattern = FillPattern.SolidForeground;
            AllCellStyleEven.Alignment = HorizontalAlignment.Center;
            AllCellStyleEven.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #endregion

            #region Cell Style For Odd Row

            #region With Decimal Format AUM
            XSSFCellStyle aumAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor AUMcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            aumAllCellStyleOddDec.SetFillForegroundColor(AUMcolorToFillOddDec);
            aumAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat AUMformatOddDec = workbook.CreateDataFormat();
            aumAllCellStyleOddDec.DataFormat = AUMformatOddDec.GetFormat(aumDecimalFormat);
            aumAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle aumAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor AUMcolorToFillOddDecWnf = new XSSFColor(new byte[] { 255, 255, 255 });
            aumAllCellStyleOddDecWnuf.SetFillForegroundColor(AUMcolorToFillOddDecWnf);
            aumAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat AUMformatOddDecWnuf = workbook.CreateDataFormat();
            aumAllCellStyleOddDecWnuf.DataFormat = AUMformatOddDecWnuf.GetFormat(aumNumberDecimalFormat);
            aumAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With Decimal Format Return
            XSSFCellStyle retAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor RETcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            retAllCellStyleOddDec.SetFillForegroundColor(RETcolorToFillOddDec);
            retAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat RETformatOddDec = workbook.CreateDataFormat();
            retAllCellStyleOddDec.DataFormat = RETformatOddDec.GetFormat(retDecimalFormat);
            retAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            retAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle retAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor RETcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            retAllCellStyleOddDecWnuf.SetFillForegroundColor(RETcolorToFillOddDecWnuf);
            retAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat RETformatOddDecWnuf = workbook.CreateDataFormat();
            retAllCellStyleOddDecWnuf.DataFormat = RETformatOddDecWnuf.GetFormat(retNumberDecimalFormat);
            retAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            retAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With Decimal Format Nav
            XSSFCellStyle navAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor naVcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            navAllCellStyleOddDec.SetFillForegroundColor(naVcolorToFillOddDec);
            navAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat naVformatOddDec = workbook.CreateDataFormat();
            navAllCellStyleOddDec.DataFormat = naVformatOddDec.GetFormat(navDecimalFormat);
            navAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            navAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            XSSFCellStyle navAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor naVcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            navAllCellStyleOddDecWnuf.SetFillForegroundColor(naVcolorToFillOddDecWnuf);
            navAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat naVformatOddDecWnuf = workbook.CreateDataFormat();
            navAllCellStyleOddDecWnuf.DataFormat = naVformatOddDecWnuf.GetFormat(navNumberDecimalFormat);
            navAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            navAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion


            #region With Decimal Format Other
            XSSFCellStyle othAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            othAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            othAllCellStyleOddDec.SetFillForegroundColor(othcolorToFillOddDec);
            othAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat othformatOddDec = workbook.CreateDataFormat();
            othAllCellStyleOddDec.DataFormat = othformatOddDec.GetFormat(othDecimalFormat);
            othAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            othAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            XSSFCellStyle othAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            othAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            othAllCellStyleOddDecWnuf.SetFillForegroundColor(othcolorToFillOddDecWnuf);
            othAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat othformatOddDecWnuf = workbook.CreateDataFormat();
            othAllCellStyleOddDecWnuf.DataFormat = othformatOddDecWnuf.GetFormat(othNumberDecimalFormat);
            othAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            othAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion


            #region With Decimal Format ratio
            XSSFCellStyle ratAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            ratAllCellStyleOddDec.SetFillForegroundColor(retcolorToFillOddDec);
            ratAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatOddDec = workbook.CreateDataFormat();
            ratAllCellStyleOddDec.DataFormat = retformatOddDec.GetFormat(ratioDecimalFormat);
            ratAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            XSSFCellStyle ratAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            ratAllCellStyleOddDecWnuf.SetFillForegroundColor(retcolorToFillOddDecWnuf);
            ratAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatOddDecWnuf = workbook.CreateDataFormat();
            ratAllCellStyleOddDecWnuf.DataFormat = retformatOddDecWnuf.GetFormat(ratioNumberDecimalFormat);
            ratAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region No Format
            XSSFCellStyle AllCellStyleOdd = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleOdd.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillOdd = new XSSFColor(new byte[] { 255, 255, 255 });
            AllCellStyleOdd.SetFillForegroundColor(colorToFillOdd);
            AllCellStyleOdd.FillPattern = FillPattern.SolidForeground;
            AllCellStyleOdd.Alignment = HorizontalAlignment.Center;
            AllCellStyleOdd.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #endregion

            #region Cell Style For First Column Even Row
            XSSFCellStyle AllCellStyleFstColmEven = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleFstColmEven.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillFstClmnEven = new XSSFColor(new byte[] { 255, 255, 255 });//new XSSFColor(new byte[] { 176, 196, 222 });
            AllCellStyleFstColmEven.SetFillForegroundColor(colorToFillFstClmnEven);
            AllCellStyleFstColmEven.FillPattern = FillPattern.SolidForeground;
            AllCellStyleFstColmEven.Alignment = HorizontalAlignment.Left;
            AllCellStyleFstColmEven.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region Cell Style For First Column Odd Row
            XSSFCellStyle AllCellStyleFstColmOdd = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleFstColmOdd.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillFstClmnOdd = new XSSFColor(new byte[] { 255, 255, 255 });
            AllCellStyleFstColmOdd.SetFillForegroundColor(colorToFillFstClmnOdd);
            AllCellStyleFstColmOdd.FillPattern = FillPattern.SolidForeground;
            AllCellStyleFstColmOdd.Alignment = HorizontalAlignment.Left;
            AllCellStyleFstColmOdd.VerticalAlignment = VerticalAlignment.Center;
            #endregion
            #region Without Decimal Number Format Even Row
            XSSFCellStyle intAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            intAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 255, 255, 255 });
            intAllCellStyleEvenDecFrmt.SetFillForegroundColor(intcolorToFillEvenWtoutDec);
            intAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat intformatEven = workbook.CreateDataFormat();
            intAllCellStyleEvenDecFrmt.DataFormat = intformatEven.GetFormat(intNumberWithoutDecimalFormat);
            intAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            intAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle intSimpleAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            intSimpleAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intSimplecolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 255, 255, 255 });
            intSimpleAllCellStyleEvenDecFrmt.SetFillForegroundColor(intSimplecolorToFillEvenWtoutDec);
            intSimpleAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            intSimpleAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            intSimpleAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;
            #endregion
            #region Without Decimal Number Format Odd Row
            XSSFCellStyle intAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            intAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            intAllCellStyleOddDec.SetFillForegroundColor(intcolorToFillOddDec);
            intAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat intformatOddDec = workbook.CreateDataFormat();
            intAllCellStyleOddDec.DataFormat = intformatOddDec.GetFormat(intNumberWithoutDecimalFormat);
            intAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            intAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle intSimpleAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            intSimpleAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intSimplecolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            intSimpleAllCellStyleOddDec.SetFillForegroundColor(intSimplecolorToFillOddDec);
            intSimpleAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            intSimpleAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            intSimpleAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region Value added to the Excel

            #region Added by Subrata on 22 Feb 2018
            bool IsNumericKey = false;
            var AllListData = listData.SelectMany(x => x.LstKeyValuePair).ToArray();
            var AllDataKey = AllListData.Select(x => x.Key).Distinct().ToArray();
            int ValueRes;
            IsNumericKey = int.TryParse(AllDataKey[0], out ValueRes);
            #endregion
            XSSFCellStyle OverrideCellColorStyle = (XSSFCellStyle)workbook.CreateCellStyle();
            OverrideCellColorStyle.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            OverrideCellColorStyle.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            OverrideCellColorStyle.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            OverrideCellColorStyle.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor OverrideColor = new XSSFColor(new byte[] { 252, 228, 214 });
            OverrideCellColorStyle.SetFillForegroundColor(OverrideColor);
            OverrideCellColorStyle.FillPattern = FillPattern.SolidForeground;
            IDataFormat OverrideCellformat = workbook.CreateDataFormat();
            OverrideCellColorStyle.DataFormat = OverrideCellformat.GetFormat(intNumberWithoutDecimalFormat);
            OverrideCellColorStyle.Alignment = HorizontalAlignment.Center;
            OverrideCellColorStyle.VerticalAlignment = VerticalAlignment.Center;

            int incr = 7;
            bool isNumeric = false;
            foreach (var item in listData)
            {
                if (item.LstKeyValuePair.Count() > 0)
                {
                    int value;
                    isNumeric = int.TryParse(item.LstKeyValuePair[0].Key, out value);
                }
                var dataRow = sheet.CreateRow(incr);
                sheet.GetRow(incr).HeightInPoints = 20;
                var cellValues = (from i in item.LstKeyValuePair
                                  from j in listTableHeader
                                  where i.Key == j.ColumnName
                                  orderby j.Position
                                  select new
                                  {
                                      IsNum = j.IsNumberFormatReq,
                                      DecType = j.DecFormatType,
                                      IsMixedType = j.IsMixedValueType,
                                      Value = i.Value
                                  }).ToArray();

                for (int k = 0; k < cellValues.Length; k++)
                {
                    var datacell = dataRow.CreateCell(k);
                    if (cellValues[k].DecType != DecimalFormatType.NoDecimalReq)
                    {
                        double OutVal;
                        if (string.IsNullOrEmpty(cellValues[k].Value) || cellValues[k].Value == BlankData || !double.TryParse(cellValues[k].Value, out OutVal))
                        {
                            datacell.SetCellValue(cellValues[k].Value);
                            if (k > 0)
                            {
                                if (incr % 2 == 0)
                                    datacell.CellStyle = AllCellStyleEven;
                                else
                                    datacell.CellStyle = AllCellStyleOdd;
                            }
                            else
                            {
                                if (incr % 2 == 0)
                                    datacell.CellStyle = AllCellStyleFstColmEven;
                                else
                                    datacell.CellStyle = AllCellStyleFstColmOdd;
                            }
                        }
                        else
                        {
                            datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                            if (k > 0)
                            {
                                if (cellValues[k].DecType == DecimalFormatType.AUM)
                                {
                                    if (incr % 2 == 0)
                                    {
                                        if (cellValues[k].IsNum == true)
                                        {

                                            datacell.CellStyle = aumAllCellStyleEvenDecFrmtWNum;
                                        }
                                        else
                                        {
                                            datacell.CellStyle = aumAllCellStyleEvenDecFrmt;
                                        }
                                    }
                                    else
                                    {
                                        if (cellValues[k].IsNum == true)
                                        {
                                            datacell.CellStyle = aumAllCellStyleOddDecWnuf;
                                        }
                                        else
                                        {
                                            datacell.CellStyle = aumAllCellStyleOddDec;
                                        }
                                    }
                                }
                                else if (cellValues[k].DecType == DecimalFormatType.NAV)
                                {
                                    if (incr % 2 == 0)
                                    {
                                        if (cellValues[k].IsNum == true)
                                        {
                                            datacell.CellStyle = navAllCellStyleEvenDecFrmtWnnum;
                                        }
                                        else
                                        {
                                            datacell.CellStyle = navAllCellStyleEvenDecFrmt;
                                        }
                                    }
                                    else
                                    {
                                        if (cellValues[k].IsNum == true)
                                        {
                                            datacell.CellStyle = navAllCellStyleOddDecWnuf;
                                        }
                                        else
                                        {
                                            datacell.CellStyle = navAllCellStyleOddDec;
                                        }

                                    }
                                }
                                else if (cellValues[k].DecType == DecimalFormatType.OTHER)
                                {
                                    if (incr % 2 == 0)
                                    {
                                        if (cellValues[k].IsNum == true)
                                        {
                                            datacell.CellStyle = otherAllCellStyleEvenDecFrmtWnum;
                                        }
                                        else
                                        {
                                            datacell.CellStyle = otherAllCellStyleEvenDecFrmt;
                                        }
                                    }

                                    else
                                    {
                                        if (cellValues[k].IsNum == true)
                                        {
                                            datacell.CellStyle = othAllCellStyleOddDecWnuf;
                                        }
                                        else
                                        {

                                            datacell.CellStyle = othAllCellStyleOddDec;
                                        }

                                    }
                                }
                                else if (cellValues[k].DecType == DecimalFormatType.RATIO)
                                {
                                    if (incr % 2 == 0)
                                    {
                                        if (cellValues[k].IsNum == true)
                                        {
                                            datacell.CellStyle = ratAllCellStyleEvenDecFrmtWth;
                                        }
                                        else
                                        {
                                            datacell.CellStyle = ratAllCellStyleEvenDecFrmt;
                                        }
                                    }
                                    else
                                    {
                                        if (cellValues[k].IsNum == true)
                                        {
                                            datacell.CellStyle = ratAllCellStyleOddDecWnuf;
                                        }
                                        else
                                        {
                                            datacell.CellStyle = ratAllCellStyleOddDec;
                                        }
                                    }
                                }
                                else if (cellValues[k].DecType == DecimalFormatType.RETURN)
                                {
                                    if (incr % 2 == 0)
                                    {
                                        if (cellValues[k].IsNum == true)
                                        {
                                            datacell.CellStyle = retAllCellStyleEvenDecFrmtWnum;
                                        }
                                        else
                                        {
                                            datacell.CellStyle = retAllCellStyleEvenDecFrmt;
                                        }

                                    }
                                    else
                                    {
                                        if (cellValues[k].IsNum == true)
                                        {
                                            datacell.CellStyle = retAllCellStyleOddDecWnuf;
                                        }
                                        else
                                        {
                                            datacell.CellStyle = retAllCellStyleOddDec;
                                        }

                                    }
                                }
                                else if (cellValues[k].DecType == DecimalFormatType.IntegerWithOutDecimal)
                                {
                                    if (incr % 2 == 0)
                                    {
                                        if (cellValues[k].IsNum == true)
                                        {
                                            datacell.CellStyle = intAllCellStyleEvenDecFrmt;
                                        }
                                        else
                                        {
                                            datacell.CellStyle = intSimpleAllCellStyleEvenDecFrmt;
                                        }
                                    }
                                    else
                                    {
                                        if (cellValues[k].IsNum == true)
                                        {
                                            datacell.CellStyle = intAllCellStyleOddDec;
                                        }
                                        else
                                        {
                                            datacell.CellStyle = intSimpleAllCellStyleOddDec;
                                        }

                                    }
                                    if (k == listTableHeader.Count() - 1 && Convert.ToDouble(cellValues[k].Value) > 0)
                                    {
                                        datacell.CellStyle = OverrideCellColorStyle;
                                    }
                                }
                            }
                            else
                            {
                                if (incr % 2 == 0)
                                    datacell.CellStyle = AllCellStyleFstColmEven;
                                else
                                    datacell.CellStyle = AllCellStyleFstColmOdd;
                            }
                        }

                    }
                    else
                    {
                        double OutVal;
                        if (double.TryParse(cellValues[k].Value, out OutVal) && !cellValues[k].IsMixedType)
                        {
                            datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                            if (k > 0)
                            {
                                if (incr % 2 == 0)
                                    datacell.CellStyle = AllCellStyleEven;
                                else
                                    datacell.CellStyle = AllCellStyleOdd;

                            }
                            else
                            {
                                if (incr % 2 == 0)
                                    datacell.CellStyle = AllCellStyleFstColmEven;
                                else
                                    datacell.CellStyle = AllCellStyleFstColmOdd;
                            }
                        }
                        else
                        {
                            datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                            if (k > 0)
                            {
                                if (incr % 2 == 0)
                                    datacell.CellStyle = AllCellStyleEven;
                                else
                                    datacell.CellStyle = AllCellStyleOdd;

                            }
                            else
                            {
                                if (incr % 2 == 0)
                                    datacell.CellStyle = AllCellStyleFstColmEven;
                                else
                                    datacell.CellStyle = AllCellStyleFstColmOdd;
                            }
                        }
                    }


                }
                incr++;

            }
            #endregion

            for (int i = 0; i < listTableHeader.Count; i++)
                sheet.AutoSizeColumn(i);
            for (int i = 0; i < listHeaderFinal.Count; i++)
            {
                var cell = headerRow.GetCell(i);
                cell.SetCellValue(listHeaderFinal[i].ColumnName.Trim());
            }
            for (int i = 0; i < listHeaderFinal.Count; i++)
            {
                if (listHeaderFinal[i].IsHeaderRowMerged)
                    NPOIWrite.CellMerged(sheet, 5, 6, i, i);
            }
            if (sheet.GetColumnWidth(0) < 11072)
                sheet.SetColumnWidth(0, 11072);

            #region Logo
            try
            {
                if (!string.IsNullOrEmpty(LogoPath))
                {
                    XSSFDrawing patriarch = (XSSFDrawing)sheet.CreateDrawingPatriarch();
                    XSSFClientAnchor anchor;
                    anchor = new XSSFClientAnchor(0, 0, 0, 255, 0, 0, 0, 3);
                    anchor.AnchorType = AnchorType.DontMoveAndResize;
                    XSSFPicture picture = (XSSFPicture)patriarch.CreatePicture(anchor, LoadImage(LogoPath, workbook, PictureType.PNG));
                    double x1 = .25;
                    double y1 = .75;
                    picture.Resize(x1, y1);
                    picture.LineStyle = LineStyle.None;
                }
            }
            catch (Exception ex)
            {
            }

            #endregion

            #region Source, Date As On and Report Generated On
            ICRArow = sheet.CreateRow(incr + 3);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrSource);

            ICRArow = sheet.CreateRow(incr + 4);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrDateAsOn);

            ICRArow = sheet.CreateRow(incr + 5);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrReportGeneratedOn);
            #endregion

            #region Sheet Two Logo
            try
            {
                if (!string.IsNullOrEmpty(LogoPath))
                {
                    XSSFDrawing patriarch = (XSSFDrawing)sheetTwo.CreateDrawingPatriarch();
                    XSSFClientAnchor anchor;
                    anchor = new XSSFClientAnchor(0, 0, 0, 255, 0, 0, 0, 3);
                    anchor.AnchorType = AnchorType.DontMoveAndResize;
                    XSSFPicture picture = (XSSFPicture)patriarch.CreatePicture(anchor, LoadImage(LogoPath, workbook, PictureType.PNG));
                    double x1 = 1.10;
                    double y1 = 1.10;
                    picture.Resize(x1, y1);
                    picture.LineStyle = LineStyle.None;
                }
            }
            catch (Exception ex)
            {
            }
            #endregion

            #region Disclaimer Sheet
            var Row = sheetTwo.CreateRow(1);
            var cellSheetTwo = Row.CreateCell(7);
            cellSheetTwo.SetCellValue(StrHeader1);
            cellSheetTwo.CellStyle = HeaderStyle;

            Row = sheetTwo.CreateRow(4);
            ICell Cell;
            for (int i = 0; i < 17; i++)
            {
                Cell = Row.CreateCell(i);

                XSSFCellStyle declationstyle = (XSSFCellStyle)workbook.CreateCellStyle();

                declationstyle.Alignment = HorizontalAlignment.Left;
                declationstyle.VerticalAlignment = VerticalAlignment.Top;
                declationstyle.WrapText = true;
                IFont declarationfnt = (XSSFFont)workbook.CreateFont();
                //declarationfnt.Boldweight = (short)FontBoldWeight.Bold;
                declarationfnt.FontName = "Calibri";
                declarationfnt.FontHeightInPoints = (short)11;
                declationstyle.SetFont(declarationfnt);
                Cell.SetCellValue(!string.IsNullOrEmpty(Footer) ? Footer : "All information contained herein is obtained by ICRA Analytics Limited from sources believed by it to be accurate and reliable. Because of the possibility of human or mechanical error as well as other factors, however, all information contained herein is provided 'AS IS' without warranty of any kind. ICRA Analytics adopts all necessary measures so that the information it uses is of sufficient quality and from sources ICRA Analytics considers to be reliable including, when appropriate, independent third-party sources. However, ICRA Analytics is not an auditor and cannot in every instance independently verify or validate information received in preparing this document." +
                    "All information contained herein must be construed solely as statements of opinion, and  ICRA Analytics Limited or its affiliates or group companies and its respective and any of its officers, directors, personnel and employees, disclaim liability to any loss, damage of any nature, including but not limited to direct, indirect, punitive, special, exemplary, consequential, as also any loss of profit in any way arising from the use of this document or its contents in any manner or for any contingency within or beyond the control of, ICRA Analytics or any of its directors, officers, employees, agents, representatives, licensors or suppliers, arising from or in connection with the information contained herein or the use of or inability to use any such information.Opinions expressed in the document are not the opinions of our holding company, ICRA Limited(ICRA), and should not be construed as any indication of credit rating or grading of ICRA for any instruments that have been issued or are to be issued by any entity.The recipient alone shall be fully responsible and / or are liable for any decision taken on the basis of this document and / or the information contained herein.");
                Cell.CellStyle = declationstyle;

            }
            NPOIWrite.CellMerged(sheetTwo, 4, 4, 0, 17);
            sheetTwo.GetRow(4).HeightInPoints = 200;
            #endregion

            #region Disclaimer Sheet HyperLink
            XSSFCellStyle HyperLinkStyle = (XSSFCellStyle)workbook.CreateCellStyle();
            IFont HyperLinkFont = workbook.CreateFont();
            HyperLinkFont.Color = IndexedColors.Orange.Index;
            HyperLinkFont.Underline = FontUnderlineType.Single;
            HyperLinkStyle.SetFont(HyperLinkFont);

            Row = sheetTwo.CreateRow(5);
            Cell = Row.CreateCell(0);
            Cell.SetCellValue("Click here for third-party disclaimers");
            XSSFCreationHelper createHelper = (XSSFCreationHelper)workbook.GetCreationHelper();
            XSSFHyperlink link = (XSSFHyperlink)createHelper.CreateHyperlink(HyperlinkType.Url);
            link.Address = "https://www.icraanalytics.com/home/thirdpartydisclaimers";
            Cell.Hyperlink = link;
            Cell.CellStyle = HyperLinkStyle;
            #endregion

            sheet.ActiveCell = new CellAddress(0, 1);
            var stream = new MemoryStream();
            workbook.Write(stream);

            return workbook;
        }


        public static NPOI.XSSF.UserModel.XSSFWorkbook ExportToExcelWorkBookWithNumberDecimalFormatRatingTracker(UserBasicSettings ubs, List<TableHeaderEntity> listTableHeader, List<ExportEntity> listData, string LogoPath = "", string ReportName = "", string StrDateAsOn = "", bool IsCustomizedDateAsOn = false)
        {

            #region Variable
            string Header = ubs.Reporting_Format_Header;
            string Footer = ubs.Reporting_Format_Footer;
            string BlankData = ubs.BlankData.ToUpper() == "BLANK" ? "" : ubs.BlankData;

            string StrHeader1 = "ICRA Analytics Limited";
            string StrHeader2 = "3rd Floor, Electric Mansion,Appasaheb Marathe Marg, Prabhadevi,Mumbai - 400 025 Maharashtra, India";
            string StrHeader3 = Header; //"Mumbai, Maharashtra 400093, IN";
            string StrReportName = ReportName;
            string StrSource = "Source: Rating Tracker";
            StrDateAsOn = !IsCustomizedDateAsOn ? "Data as on " + StrDateAsOn : StrDateAsOn;
            string StrReportGeneratedOn = "Report Generated on " + DateTime.Now.ToString("dd-MMM-yyyy HH:mm:ss");

            #region number and decimal variable for AUM
            var aumPaddding = new string('0', (int)ubs.AUMDecimalFormat);
            var aumDecimalFormat = "0." + aumPaddding;
            string aumNUMBERFORMAT = ubs.NumberFormat;
            var aumNumberFormat = aumNUMBERFORMAT.Replace("0", "#");
            string aumNumberDecimalFormat = aumNumberFormat + "0." + new String('0', (int)ubs.AUMDecimalFormat);
            #endregion

            #region number and decimal variable for return
            var retPaddding = new string('0', (int)ubs.ReturnDecimalFormat);
            var retDecimalFormat = "0." + retPaddding;
            string retNUMBERFORMAT = ubs.NumberFormat;
            var retNumberFormat = retNUMBERFORMAT.Replace("0", "#");
            string retNumberDecimalFormat = retNumberFormat + "0." + new String('0', (int)ubs.ReturnDecimalFormat);
            #endregion

            #region number and decimal variable for NAV
            var navPaddding = new string('0', (int)ubs.NavDecimalFormat);
            var navDecimalFormat = "0." + navPaddding;
            string navNUMBERFORMAT = ubs.NumberFormat;
            var navNumberFormat = navNUMBERFORMAT.Replace("0", "#");
            string navNumberDecimalFormat = navNumberFormat + "0." + new String('0', (int)ubs.NavDecimalFormat);
            #endregion
            #region DateTime Format
            var DateTimeFormat = ubs.DateFormat;
            #endregion

            #region number and decimal variable for Other
            var othPaddding = new string('0', (int)ubs.OtherDecimal);
            var othDecimalFormat = "0." + othPaddding;
            string othNUMBERFORMAT = ubs.NumberFormat;
            var othNumberFormat = othNUMBERFORMAT.Replace("0", "#");
            string othNumberDecimalFormat = othNumberFormat + "0." + new String('0', (int)ubs.OtherDecimal);
            #endregion

            #region number and decimal variable for Ratio
            var ratioPaddding = new string('0', (int)ubs.RatioDecimalFormat);
            var ratioDecimalFormat = "0." + ratioPaddding;
            string ratioNUMBERFORMAT = ubs.NumberFormat;
            var ratioNumberFormat = ratioNUMBERFORMAT.Replace("0", "#");
            string ratioNumberDecimalFormat = ratioNumberFormat + "0." + new String('0', (int)ubs.RatioDecimalFormat);
            #endregion
            #region int Format with out Decimal
            var intNumberWithoutDecimalFormat = ubs.NumberFormat.Replace("0", "#");
            #endregion
            #endregion

            NPOI.XSSF.UserModel.XSSFWorkbook workbook = new NPOI.XSSF.UserModel.XSSFWorkbook();

            ISheet sheet = workbook.CreateSheet("Output");
            sheet.SetZoom(4, 5);
            ISheet sheetTwo = workbook.CreateSheet("Disclaimer");

            #region Excel Sheet Gridlines Delete
            sheet.DisplayGridlines = false;
            sheetTwo.DisplayGridlines = false;
            #endregion

            #region Header Freeze
            sheet.CreateFreezePane(1, 6);
            #endregion

            #region Set Font For Header1,Header2 and Header3
            XSSFCellStyle HeaderStyle = (XSSFCellStyle)workbook.CreateCellStyle();
            IFont Headerfont = workbook.CreateFont();
            Headerfont.Boldweight = (short)FontBoldWeight.Bold;
            HeaderStyle.SetFont(Headerfont);
            #endregion

            #region Set Cell Value For Header1, Header2 and Header3
            var ICRArow = sheet.CreateRow(0);
            ICRArow.CreateCell(0);
            NPOIWrite.CellMerged(sheet, 0, 0, 1, 9);
            var ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader1);
            ICRACell.CellStyle = HeaderStyle;
            ICRArow = sheet.CreateRow(1);
            ICRArow.CreateCell(0);
            NPOIWrite.CellMerged(sheet, 1, 1, 1, 9);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader2);
            ICRACell.CellStyle = HeaderStyle;
            ICRArow = sheet.CreateRow(2);
            ICRArow.CreateCell(0);
            NPOIWrite.CellMerged(sheet, 2, 2, 1, 9);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader3);
            ICRACell.CellStyle = HeaderStyle;
            ICRACell.CellStyle.Alignment = HorizontalAlignment.Center;
            ICRArow = sheet.CreateRow(3);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.CellStyle.Alignment = HorizontalAlignment.Center;
            NPOIWrite.AutoFitColumn(sheet, 1);
            ICRACell.CellStyle = HeaderStyle;
            #endregion

            #region Report Name
            ICRArow = sheet.CreateRow(4);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrReportName);
            HeaderStyle.Alignment = HorizontalAlignment.Left;
            ICRACell.CellStyle = HeaderStyle;
            #endregion

            #region Header creation in the Excel
            var headerRow = sheet.CreateRow(5);
            sheet.GetRow(5).HeightInPoints = 30;
            var listHeaderFinal = listTableHeader.OrderBy(x => x.Position).ToList();
            for (int i = 0; i < listHeaderFinal.Count; i++)
            {
                var cell = headerRow.CreateCell(i);
                cell.SetCellValue(listHeaderFinal[i].ColumnName);
                NPOIWrite.AutoFitColumn(sheet, i);

                #region Commented by Subrata on 21 Feb 2018
                //ICellStyle CellStyle = workbook.CreateCellStyle();
                //CellStyle = workbook.CreateCellStyle();
                //CellStyle.FillBackgroundColor = IndexedColors.Blue.Index;
                #endregion

                #region Added by Subrata on 21 Feb 2018
                XSSFCellStyle style = (XSSFCellStyle)workbook.CreateCellStyle();
                XSSFColor colorToFill = new XSSFColor(new byte[] { 68, 114, 196 });//{ 51, 204, 204 }//Color.Blue);
                style.SetFillForegroundColor(colorToFill);
                IFont font = workbook.CreateFont();
                font.Color = IndexedColors.White.Index;
                font.Boldweight = (short)FontBoldWeight.Bold;
                style.SetFont(font);
                style.FillPattern = FillPattern.SolidForeground;
                style.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                style.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                style.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                style.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                if (i > 0)
                {
                    style.Alignment = HorizontalAlignment.Center;
                    style.VerticalAlignment = VerticalAlignment.Center;
                }
                else
                {
                    style.Alignment = (string.IsNullOrEmpty(listHeaderFinal[i].TextAlign) || listHeaderFinal[i].TextAlign == EnumTextAlign.left.ToString()) ? HorizontalAlignment.Left
                        : listHeaderFinal[i].TextAlign == EnumTextAlign.center.ToString() ? HorizontalAlignment.Center : HorizontalAlignment.Right;
                    style.VerticalAlignment = VerticalAlignment.Center;
                }
                #endregion

                cell.CellStyle = style;

            }
            #endregion

            #region Cell Style For Even Row

            #region With DecimalFormat AUM
            XSSFCellStyle aumAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor aumcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 255, 255, 255 });
            aumAllCellStyleEvenDecFrmt.SetFillForegroundColor(aumcolorToFillEvenWtoutDec);
            aumAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat aumformatEven = workbook.CreateDataFormat();
            aumAllCellStyleEvenDecFrmt.DataFormat = aumformatEven.GetFormat(aumDecimalFormat);
            aumAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            /// Number Format ////
            XSSFCellStyle aumAllCellStyleEvenDecFrmtWNum = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleEvenDecFrmtWNum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmtWNum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmtWNum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmtWNum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor aumcolorToFillEvenWtoutDecWNum = new XSSFColor(new byte[] { 255, 255, 255 });
            aumAllCellStyleEvenDecFrmtWNum.SetFillForegroundColor(aumcolorToFillEvenWtoutDecWNum);
            aumAllCellStyleEvenDecFrmtWNum.FillPattern = FillPattern.SolidForeground;
            IDataFormat aumformatEvenWNum = workbook.CreateDataFormat();
            aumAllCellStyleEvenDecFrmtWNum.DataFormat = aumformatEvenWNum.GetFormat(aumNumberDecimalFormat);
            aumAllCellStyleEvenDecFrmtWNum.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleEvenDecFrmtWNum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Return
            XSSFCellStyle retAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 255, 255, 255 });
            retAllCellStyleEvenDecFrmt.SetFillForegroundColor(retcolorToFillEvenWtoutDec);
            retAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatEven = workbook.CreateDataFormat();
            retAllCellStyleEvenDecFrmt.DataFormat = retformatEven.GetFormat(retDecimalFormat);
            retAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            retAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;


            ////Number Format ////
            XSSFCellStyle retAllCellStyleEvenDecFrmtWnum = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleEvenDecFrmtWnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmtWnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmtWnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmtWnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillEvenWtoutDecWnum = new XSSFColor(new byte[] { 255, 255, 255 });
            retAllCellStyleEvenDecFrmtWnum.SetFillForegroundColor(retcolorToFillEvenWtoutDecWnum);
            retAllCellStyleEvenDecFrmtWnum.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatEvenWnum = workbook.CreateDataFormat();
            retAllCellStyleEvenDecFrmtWnum.DataFormat = retformatEvenWnum.GetFormat(retNumberDecimalFormat);
            retAllCellStyleEvenDecFrmtWnum.Alignment = HorizontalAlignment.Center;
            retAllCellStyleEvenDecFrmtWnum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Nav
            XSSFCellStyle navAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor navcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 255, 255, 255 });
            navAllCellStyleEvenDecFrmt.SetFillForegroundColor(navcolorToFillEvenWtoutDec);
            navAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat navformatEven = workbook.CreateDataFormat();
            navAllCellStyleEvenDecFrmt.DataFormat = navformatEven.GetFormat(navDecimalFormat);
            navAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            navAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;


            /// Number Format ////
            XSSFCellStyle navAllCellStyleEvenDecFrmtWnnum = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleEvenDecFrmtWnnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmtWnnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmtWnnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmtWnnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor navcolorToFillEvenWtoutDecWnnum = new XSSFColor(new byte[] { 255, 255, 255 });
            navAllCellStyleEvenDecFrmtWnnum.SetFillForegroundColor(navcolorToFillEvenWtoutDecWnnum);
            navAllCellStyleEvenDecFrmtWnnum.FillPattern = FillPattern.SolidForeground;
            IDataFormat navformatEvenWnnum = workbook.CreateDataFormat();
            navAllCellStyleEvenDecFrmtWnnum.DataFormat = navformatEvenWnnum.GetFormat(navNumberDecimalFormat);
            navAllCellStyleEvenDecFrmtWnnum.Alignment = HorizontalAlignment.Center;
            navAllCellStyleEvenDecFrmtWnnum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Other
            XSSFCellStyle otherAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            otherAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othercolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 255, 255, 255 });
            otherAllCellStyleEvenDecFrmt.SetFillForegroundColor(othercolorToFillEvenWtoutDec);
            otherAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat otherformatEven = workbook.CreateDataFormat();
            otherAllCellStyleEvenDecFrmt.DataFormat = otherformatEven.GetFormat(othDecimalFormat);
            otherAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            otherAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            /// Number Format ///
            XSSFCellStyle otherAllCellStyleEvenDecFrmtWnum = (XSSFCellStyle)workbook.CreateCellStyle();
            otherAllCellStyleEvenDecFrmtWnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmtWnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmtWnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmtWnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othercolorToFillEvenWtoutDecWnum = new XSSFColor(new byte[] { 255, 255, 255 });
            otherAllCellStyleEvenDecFrmtWnum.SetFillForegroundColor(othercolorToFillEvenWtoutDecWnum);
            otherAllCellStyleEvenDecFrmtWnum.FillPattern = FillPattern.SolidForeground;
            IDataFormat otherformatEvenWnum = workbook.CreateDataFormat();
            otherAllCellStyleEvenDecFrmtWnum.DataFormat = otherformatEvenWnum.GetFormat(othNumberDecimalFormat);
            otherAllCellStyleEvenDecFrmtWnum.Alignment = HorizontalAlignment.Center;
            otherAllCellStyleEvenDecFrmtWnum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DateTime format
            XSSFCellStyle DateTimeAllCellStyleEvenFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            DateTimeAllCellStyleEvenFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleEvenFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleEvenFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleEvenFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor DateTimecolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 255, 255, 255 });
            DateTimeAllCellStyleEvenFrmt.SetFillForegroundColor(DateTimecolorToFillEvenWtoutDec);
            DateTimeAllCellStyleEvenFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat DateTimeformatEven = workbook.CreateDataFormat();
            DateTimeAllCellStyleEvenFrmt.DataFormat = DateTimeformatEven.GetFormat(DateTimeFormat);
            DateTimeAllCellStyleEvenFrmt.Alignment = HorizontalAlignment.Center;
            DateTimeAllCellStyleEvenFrmt.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle DateTimeAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            DateTimeAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor DateTimecolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            DateTimeAllCellStyleOddDec.SetFillForegroundColor(DateTimecolorToFillOddDec);
            DateTimeAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat DateTimeformatOddDec = workbook.CreateDataFormat();
            DateTimeAllCellStyleOddDec.DataFormat = DateTimeformatOddDec.GetFormat(DateTimeFormat);
            DateTimeAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            DateTimeAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            #endregion

            #region With DecimalFormat Ratio
            XSSFCellStyle ratAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor ratcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 255, 255, 255 });
            ratAllCellStyleEvenDecFrmt.SetFillForegroundColor(ratcolorToFillEvenWtoutDec);
            ratAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat ratformatEven = workbook.CreateDataFormat();
            ratAllCellStyleEvenDecFrmt.DataFormat = ratformatEven.GetFormat(ratioDecimalFormat);
            ratAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle ratAllCellStyleEvenDecFrmtWth = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleEvenDecFrmtWth.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmtWth.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmtWth.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmtWth.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor ratcolorToFillEvenWtoutDecwth = new XSSFColor(new byte[] { 255, 255, 255 });
            ratAllCellStyleEvenDecFrmtWth.SetFillForegroundColor(ratcolorToFillEvenWtoutDecwth);
            ratAllCellStyleEvenDecFrmtWth.FillPattern = FillPattern.SolidForeground;
            IDataFormat ratformatEvenWth = workbook.CreateDataFormat();
            ratAllCellStyleEvenDecFrmtWth.DataFormat = ratformatEvenWth.GetFormat(ratioNumberDecimalFormat);
            ratAllCellStyleEvenDecFrmtWth.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleEvenDecFrmtWth.VerticalAlignment = VerticalAlignment.Center;
            #endregion


            #region No Format
            XSSFCellStyle AllCellStyleEven = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleEven.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillEven = new XSSFColor(new byte[] { 255, 255, 255 });
            AllCellStyleEven.SetFillForegroundColor(colorToFillEven);
            AllCellStyleEven.FillPattern = FillPattern.SolidForeground;
            AllCellStyleEven.Alignment = HorizontalAlignment.Center;
            AllCellStyleEven.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #endregion

            #region Cell Style For Odd Row

            #region With Decimal Format AUM
            XSSFCellStyle aumAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor AUMcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            aumAllCellStyleOddDec.SetFillForegroundColor(AUMcolorToFillOddDec);
            aumAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat AUMformatOddDec = workbook.CreateDataFormat();
            aumAllCellStyleOddDec.DataFormat = AUMformatOddDec.GetFormat(aumDecimalFormat);
            aumAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle aumAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor AUMcolorToFillOddDecWnf = new XSSFColor(new byte[] { 255, 255, 255 });
            aumAllCellStyleOddDecWnuf.SetFillForegroundColor(AUMcolorToFillOddDecWnf);
            aumAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat AUMformatOddDecWnuf = workbook.CreateDataFormat();
            aumAllCellStyleOddDecWnuf.DataFormat = AUMformatOddDecWnuf.GetFormat(aumNumberDecimalFormat);
            aumAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With Decimal Format Return
            XSSFCellStyle retAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor RETcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            retAllCellStyleOddDec.SetFillForegroundColor(RETcolorToFillOddDec);
            retAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat RETformatOddDec = workbook.CreateDataFormat();
            retAllCellStyleOddDec.DataFormat = RETformatOddDec.GetFormat(retDecimalFormat);
            retAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            retAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle retAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor RETcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            retAllCellStyleOddDecWnuf.SetFillForegroundColor(RETcolorToFillOddDecWnuf);
            retAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat RETformatOddDecWnuf = workbook.CreateDataFormat();
            retAllCellStyleOddDecWnuf.DataFormat = RETformatOddDecWnuf.GetFormat(retNumberDecimalFormat);
            retAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            retAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With Decimal Format Nav
            XSSFCellStyle navAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor naVcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            navAllCellStyleOddDec.SetFillForegroundColor(naVcolorToFillOddDec);
            navAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat naVformatOddDec = workbook.CreateDataFormat();
            navAllCellStyleOddDec.DataFormat = naVformatOddDec.GetFormat(navDecimalFormat);
            navAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            navAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            XSSFCellStyle navAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor naVcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            navAllCellStyleOddDecWnuf.SetFillForegroundColor(naVcolorToFillOddDecWnuf);
            navAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat naVformatOddDecWnuf = workbook.CreateDataFormat();
            navAllCellStyleOddDecWnuf.DataFormat = naVformatOddDecWnuf.GetFormat(navNumberDecimalFormat);
            navAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            navAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion


            #region With Decimal Format Other
            XSSFCellStyle othAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            othAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            othAllCellStyleOddDec.SetFillForegroundColor(othcolorToFillOddDec);
            othAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat othformatOddDec = workbook.CreateDataFormat();
            othAllCellStyleOddDec.DataFormat = othformatOddDec.GetFormat(othDecimalFormat);
            othAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            othAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            XSSFCellStyle othAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            othAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            othAllCellStyleOddDecWnuf.SetFillForegroundColor(othcolorToFillOddDecWnuf);
            othAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat othformatOddDecWnuf = workbook.CreateDataFormat();
            othAllCellStyleOddDecWnuf.DataFormat = othformatOddDecWnuf.GetFormat(othNumberDecimalFormat);
            othAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            othAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion


            #region With Decimal Format ratio
            XSSFCellStyle ratAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            ratAllCellStyleOddDec.SetFillForegroundColor(retcolorToFillOddDec);
            ratAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatOddDec = workbook.CreateDataFormat();
            ratAllCellStyleOddDec.DataFormat = retformatOddDec.GetFormat(ratioDecimalFormat);
            ratAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            XSSFCellStyle ratAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            ratAllCellStyleOddDecWnuf.SetFillForegroundColor(retcolorToFillOddDecWnuf);
            ratAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatOddDecWnuf = workbook.CreateDataFormat();
            ratAllCellStyleOddDecWnuf.DataFormat = retformatOddDecWnuf.GetFormat(ratioNumberDecimalFormat);
            ratAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region No Format
            XSSFCellStyle AllCellStyleOdd = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleOdd.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillOdd = new XSSFColor(new byte[] { 255, 255, 255 });
            AllCellStyleOdd.SetFillForegroundColor(colorToFillOdd);
            AllCellStyleOdd.FillPattern = FillPattern.SolidForeground;
            AllCellStyleOdd.Alignment = HorizontalAlignment.Center;
            AllCellStyleOdd.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #endregion

            #region Cell Style For First Column Even Row
            XSSFCellStyle AllCellStyleFstColmEven = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleFstColmEven.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillFstClmnEven = new XSSFColor(new byte[] { 255, 255, 255 });
            AllCellStyleFstColmEven.SetFillForegroundColor(colorToFillFstClmnEven);
            AllCellStyleFstColmEven.FillPattern = FillPattern.SolidForeground;
            AllCellStyleFstColmEven.Alignment = HorizontalAlignment.Left;
            AllCellStyleFstColmEven.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region Cell Style For First Column Odd Row
            XSSFCellStyle AllCellStyleFstColmOdd = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleFstColmOdd.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillFstClmnOdd = new XSSFColor(new byte[] { 255, 255, 255 });
            AllCellStyleFstColmOdd.SetFillForegroundColor(colorToFillFstClmnOdd);
            AllCellStyleFstColmOdd.FillPattern = FillPattern.SolidForeground;
            AllCellStyleFstColmOdd.Alignment = HorizontalAlignment.Left;
            AllCellStyleFstColmOdd.VerticalAlignment = VerticalAlignment.Center;
            #endregion
            #region Without Decimal Number Format Even Row
            XSSFCellStyle intAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            intAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 255, 255, 255 });
            intAllCellStyleEvenDecFrmt.SetFillForegroundColor(intcolorToFillEvenWtoutDec);
            intAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat intformatEven = workbook.CreateDataFormat();
            intAllCellStyleEvenDecFrmt.DataFormat = intformatEven.GetFormat(intNumberWithoutDecimalFormat);
            intAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            intAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle intSimpleAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            intSimpleAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intSimplecolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 255, 255, 255 });
            intSimpleAllCellStyleEvenDecFrmt.SetFillForegroundColor(intSimplecolorToFillEvenWtoutDec);
            intSimpleAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            intSimpleAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            intSimpleAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;
            #endregion
            #region Without Decimal Number Format Odd Row
            XSSFCellStyle intAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            intAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            intAllCellStyleOddDec.SetFillForegroundColor(intcolorToFillOddDec);
            intAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat intformatOddDec = workbook.CreateDataFormat();
            intAllCellStyleOddDec.DataFormat = intformatOddDec.GetFormat(intNumberWithoutDecimalFormat);
            intAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            intAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle intSimpleAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            intSimpleAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intSimplecolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            intSimpleAllCellStyleOddDec.SetFillForegroundColor(intSimplecolorToFillOddDec);
            intSimpleAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            intSimpleAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            intSimpleAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region Value added to the Excel

            #region Added by Subrata on 22 Feb 2018
            bool IsNumericKey = false;
            bool IsNumericValue = false;
            var AllListData = listData.SelectMany(x => x.LstKeyValuePair).ToArray();
            var AllDataKey = AllListData.Select(x => x.Key).Distinct().ToArray();
            int ValueRes;
            IsNumericKey = int.TryParse(AllDataKey[0], out ValueRes);
            #endregion

            int incr = 6;
            foreach (var item in listData)
            {
                var dataRow = sheet.CreateRow(incr);
                sheet.GetRow(incr).HeightInPoints = 20;
                {
                    var cellValues = (from i in item.LstKeyValuePair
                                      from j in listTableHeader
                                      where i.Key == j.ColumnName
                                      orderby j.Position
                                      select new
                                      {
                                          IsNum = j.IsNumberFormatReq,
                                          DecType = j.DecFormatType,
                                          IsMixedType = j.IsMixedValueType,
                                          IsDateTimeStringMixedType = j.IsDateTimeStringMixedType,
                                          IsDateTimeType = j.IsDateTimeType,
                                          Value = i.Value
                                      }).ToArray();

                    for (int k = 0; k < cellValues.Length; k++)
                    {
                        var datacell = dataRow.CreateCell(k);
                        if (cellValues[k].DecType != DecimalFormatType.NoDecimalReq)
                        {
                            double OutVal;
                            if (string.IsNullOrEmpty(cellValues[k].Value) || cellValues[k].Value == BlankData || !double.TryParse(cellValues[k].Value, out OutVal))
                            {
                                datacell.SetCellValue(cellValues[k].Value);
                                if (k > 0)
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;
                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }

                            }
                            else
                            {
                                datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                                if (k > 0)
                                {
                                    if (cellValues[k].DecType == DecimalFormatType.OTHER)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = otherAllCellStyleEvenDecFrmtWnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = otherAllCellStyleEvenDecFrmt;
                                            }
                                        }

                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = othAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {

                                                datacell.CellStyle = othAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.IntegerWithOutDecimal)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = intAllCellStyleEvenDecFrmt;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = intSimpleAllCellStyleEvenDecFrmt;
                                            }

                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = intAllCellStyleOddDec;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = intSimpleAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = otherAllCellStyleEvenDecFrmtWnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = otherAllCellStyleEvenDecFrmt;
                                            }
                                        }

                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = othAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {

                                                datacell.CellStyle = othAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }

                            }

                        }
                        else
                        {
                            if (cellValues[k].IsMixedType)
                            {
                                double OutVal;
                                if (double.TryParse(cellValues[k].Value, out OutVal))
                                {
                                    datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = otherAllCellStyleEvenDecFrmtWnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = otherAllCellStyleEvenDecFrmt;
                                            }
                                        }

                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = othAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {

                                                datacell.CellStyle = othAllCellStyleOddDec;
                                            }

                                        }

                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }
                                }
                                else
                                {
                                    datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleEven;
                                        else
                                            datacell.CellStyle = AllCellStyleOdd;

                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }
                                }
                            }
                            else if (cellValues[k].IsDateTimeType)
                            {
                                DateTime OutVal;
                                if (DateTime.TryParse(cellValues[k].Value, out OutVal))
                                {
                                    datacell.SetCellValue(Convert.ToDateTime(cellValues[k].Value));
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = DateTimeAllCellStyleEvenFrmt;
                                        else
                                            datacell.CellStyle = DateTimeAllCellStyleOddDec;

                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = DateTimeAllCellStyleEvenFrmt;//AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = DateTimeAllCellStyleOddDec;//AllCellStyleFstColmOdd;
                                    }
                                }
                                else
                                {
                                    datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleEven;
                                        else
                                            datacell.CellStyle = AllCellStyleOdd;

                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }
                                }
                            }
                            else if (cellValues[k].IsDateTimeStringMixedType)
                            {
                                DateTime OutVal;
                                if (DateTime.TryParse(cellValues[k].Value, out OutVal))
                                {
                                    datacell.SetCellValue(Convert.ToDateTime(cellValues[k].Value));
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = DateTimeAllCellStyleEvenFrmt;
                                    else
                                        datacell.CellStyle = DateTimeAllCellStyleOddDec;
                                    //if (k > 0)
                                    //{
                                    //	if (incr % 2 == 0)
                                    //		datacell.CellStyle = DateTimeAllCellStyleEvenFrmt;
                                    //	else
                                    //		datacell.CellStyle = DateTimeAllCellStyleOddDec;

                                    //}
                                    //else
                                    //{
                                    //	if (incr % 2 == 0)
                                    //		datacell.CellStyle = AllCellStyleFstColmEven;
                                    //	else
                                    //		datacell.CellStyle = AllCellStyleFstColmOdd;
                                    //}
                                }
                                else
                                {
                                    datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleEven;
                                        else
                                            datacell.CellStyle = AllCellStyleOdd;

                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }
                                }
                            }
                            else
                            {
                                datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                if (k > 0)
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;

                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }
                            }
                        }


                    }
                    incr++;
                }

            }
            #endregion

            for (int i = 0; i < listTableHeader.Count; i++)
                sheet.AutoSizeColumn(i);
            if (sheet.GetColumnWidth(0) < 11072)
                sheet.SetColumnWidth(0, 11072);

            #region Logo
            try
            {
                if (!string.IsNullOrEmpty(LogoPath))
                {
                    XSSFDrawing patriarch = (XSSFDrawing)sheet.CreateDrawingPatriarch();
                    XSSFClientAnchor anchor;
                    anchor = new XSSFClientAnchor(0, 0, 0, 255, 0, 0, 0, 3);
                    anchor.AnchorType = AnchorType.DontMoveAndResize;
                    XSSFPicture picture = (XSSFPicture)patriarch.CreatePicture(anchor, LoadImage(LogoPath, workbook, PictureType.PNG));
                    double x1 = .25;
                    double y1 = .75;
                    picture.Resize(x1, y1);
                    picture.LineStyle = LineStyle.None;
                }
            }
            catch (Exception ex)
            {
            }

            #endregion

            #region Source, Date As On and Report Generated On
            ICRArow = sheet.CreateRow(incr + 3);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrSource);

            ICRArow = sheet.CreateRow(incr + 4);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrDateAsOn);

            ICRArow = sheet.CreateRow(incr + 5);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrReportGeneratedOn);
            #endregion

            #region Sheet Two Logo
            try
            {
                if (!string.IsNullOrEmpty(LogoPath))
                {
                    XSSFDrawing patriarch = (XSSFDrawing)sheetTwo.CreateDrawingPatriarch();
                    XSSFClientAnchor anchor;
                    anchor = new XSSFClientAnchor(0, 0, 0, 255, 0, 0, 0, 3);
                    anchor.AnchorType = AnchorType.DontMoveAndResize;
                    XSSFPicture picture = (XSSFPicture)patriarch.CreatePicture(anchor, LoadImage(LogoPath, workbook, PictureType.PNG));
                    double x1 = 1.10;
                    double y1 = 1.10;
                    picture.Resize(x1, y1);
                    picture.LineStyle = LineStyle.None;
                }
            }
            catch (Exception ex)
            {
            }
            #endregion

            #region Disclaimer Sheet
            var Row = sheetTwo.CreateRow(1);
            var cellSheetTwo = Row.CreateCell(7);
            cellSheetTwo.SetCellValue(StrHeader1);
            cellSheetTwo.CellStyle = HeaderStyle;

            Row = sheetTwo.CreateRow(4);
            ICell Cell;
            for (int i = 0; i < 17; i++)
            {
                Cell = Row.CreateCell(i);

                XSSFCellStyle declationstyle = (XSSFCellStyle)workbook.CreateCellStyle();

                declationstyle.Alignment = HorizontalAlignment.Left;
                declationstyle.VerticalAlignment = VerticalAlignment.Top;
                declationstyle.WrapText = true;
                IFont declarationfnt = (XSSFFont)workbook.CreateFont();
                //declarationfnt.Boldweight = (short)FontBoldWeight.Bold;
                declarationfnt.FontName = "Calibri";
                declarationfnt.FontHeightInPoints = (short)11;
                declationstyle.SetFont(declarationfnt);
                Cell.SetCellValue(!string.IsNullOrEmpty(Footer) ? Footer : "All information contained herein is obtained by ICRA Analytics Limited from sources believed by it to be accurate and reliable. Because of the possibility of human or mechanical error as well as other factors, however, all information contained herein is provided 'AS IS' without warranty of any kind. ICRA Analytics adopts all necessary measures so that the information it uses is of sufficient quality and from sources ICRA Analytics considers to be reliable including, when appropriate, independent third-party sources. However, ICRA Analytics is not an auditor and cannot in every instance independently verify or validate information received in preparing this document." +
                    "All information contained herein must be construed solely as statements of opinion, and  ICRA Analytics Limited or its affiliates or group companies and its respective and any of its officers, directors, personnel and employees, disclaim liability to any loss, damage of any nature, including but not limited to direct, indirect, punitive, special, exemplary, consequential, as also any loss of profit in any way arising from the use of this document or its contents in any manner or for any contingency within or beyond the control of, ICRA Analytics or any of its directors, officers, employees, agents, representatives, licensors or suppliers, arising from or in connection with the information contained herein or the use of or inability to use any such information.Opinions expressed in the document are not the opinions of our holding company, ICRA Limited(ICRA), and should not be construed as any indication of credit rating or grading of ICRA for any instruments that have been issued or are to be issued by any entity.The recipient alone shall be fully responsible and / or are liable for any decision taken on the basis of this document and / or the information contained herein.");
                Cell.CellStyle = declationstyle;

            }
            NPOIWrite.CellMerged(sheetTwo, 4, 4, 0, 17);
            sheetTwo.GetRow(4).HeightInPoints = 200;
            #endregion

            #region Disclaimer Sheet HyperLink
            XSSFCellStyle HyperLinkStyle = (XSSFCellStyle)workbook.CreateCellStyle();
            IFont HyperLinkFont = workbook.CreateFont();
            HyperLinkFont.Color = IndexedColors.Orange.Index;
            HyperLinkFont.Underline = FontUnderlineType.Single;
            HyperLinkStyle.SetFont(HyperLinkFont);

            Row = sheetTwo.CreateRow(5);
            Cell = Row.CreateCell(0);
            Cell.SetCellValue("Click here for third-party disclaimers");
            XSSFCreationHelper createHelper = (XSSFCreationHelper)workbook.GetCreationHelper();
            XSSFHyperlink link = (XSSFHyperlink)createHelper.CreateHyperlink(HyperlinkType.Url);
            link.Address = "https://www.icraanalytics.com/home/thirdpartydisclaimers";
            Cell.Hyperlink = link;
            Cell.CellStyle = HyperLinkStyle;
            #endregion

            sheet.ActiveCell = new CellAddress(0, 1);
            var stream = new MemoryStream();
            workbook.Write(stream);

            return workbook;
        }


        public static NPOI.XSSF.UserModel.XSSFWorkbook ExportToExcelWorkBookWithNumberDecimalFormatRatingTracker_With_Hyperlink(UserBasicSettings ubs, List<TableHeaderEntity> listTableHeader, List<ExportEntity> listData, string LogoPath = "", string ReportName = "", string StrDateAsOn = "", bool IsCustomizedDateAsOn = false)
        {

            #region Variable
            string Header = ubs.Reporting_Format_Header;
            string Footer = ubs.Reporting_Format_Footer;
            string BlankData = ubs.BlankData.ToUpper() == "BLANK" ? "" : ubs.BlankData;

            string StrHeader1 = "ICRA Analytics Limited";
            string StrHeader2 = "3rd Floor, Electric Mansion,Appasaheb Marathe Marg, Prabhadevi,Mumbai - 400 025 Maharashtra, India";
            string StrHeader3 = Header; //"Mumbai, Maharashtra 400093, IN";
            string StrReportName = ReportName;
            string StrSource = "Source: Rating Tracker";
            StrDateAsOn = !IsCustomizedDateAsOn ? "Data as on " + StrDateAsOn : StrDateAsOn;
            string StrReportGeneratedOn = "Report Generated on " + DateTime.Now.ToString("dd-MMM-yyyy HH:mm:ss");
            string StrDisclamer = "** ICRA rating rationale";

            #region number and decimal variable for AUM
            var aumPaddding = new string('0', (int)ubs.AUMDecimalFormat);
            var aumDecimalFormat = "0." + aumPaddding;
            string aumNUMBERFORMAT = ubs.NumberFormat;
            var aumNumberFormat = aumNUMBERFORMAT.Replace("0", "#");
            string aumNumberDecimalFormat = aumNumberFormat + "0." + new String('0', (int)ubs.AUMDecimalFormat);
            #endregion

            #region number and decimal variable for return
            var retPaddding = new string('0', (int)ubs.ReturnDecimalFormat);
            var retDecimalFormat = "0." + retPaddding;
            string retNUMBERFORMAT = ubs.NumberFormat;
            var retNumberFormat = retNUMBERFORMAT.Replace("0", "#");
            string retNumberDecimalFormat = retNumberFormat + "0." + new String('0', (int)ubs.ReturnDecimalFormat);
            #endregion

            #region number and decimal variable for NAV
            var navPaddding = new string('0', (int)ubs.NavDecimalFormat);
            var navDecimalFormat = "0." + navPaddding;
            string navNUMBERFORMAT = ubs.NumberFormat;
            var navNumberFormat = navNUMBERFORMAT.Replace("0", "#");
            string navNumberDecimalFormat = navNumberFormat + "0." + new String('0', (int)ubs.NavDecimalFormat);
            #endregion
            #region DateTime Format
            var DateTimeFormat = ubs.DateFormat;
            #endregion

            #region number and decimal variable for Other
            var othPaddding = new string('0', (int)ubs.OtherDecimal);
            var othDecimalFormat = "0." + othPaddding;
            string othNUMBERFORMAT = ubs.NumberFormat;
            var othNumberFormat = othNUMBERFORMAT.Replace("0", "#");
            string othNumberDecimalFormat = othNumberFormat + "0." + new String('0', (int)ubs.OtherDecimal);
            #endregion

            #region number and decimal variable for Ratio
            var ratioPaddding = new string('0', (int)ubs.RatioDecimalFormat);
            var ratioDecimalFormat = "0." + ratioPaddding;
            string ratioNUMBERFORMAT = ubs.NumberFormat;
            var ratioNumberFormat = ratioNUMBERFORMAT.Replace("0", "#");
            string ratioNumberDecimalFormat = ratioNumberFormat + "0." + new String('0', (int)ubs.RatioDecimalFormat);
            #endregion
            #region int Format with out Decimal
            var intNumberWithoutDecimalFormat = ubs.NumberFormat.Replace("0", "#");
            #endregion
            #endregion

            NPOI.XSSF.UserModel.XSSFWorkbook workbook = new NPOI.XSSF.UserModel.XSSFWorkbook();

            ISheet sheet = workbook.CreateSheet("Output");
            sheet.SetZoom(4, 5);
            ISheet sheetTwo = workbook.CreateSheet("Disclaimer");

            #region Excel Sheet Gridlines Delete
            sheet.DisplayGridlines = false;
            sheetTwo.DisplayGridlines = false;
            #endregion

            #region Header Freeze
            sheet.CreateFreezePane(1, 6);
            #endregion

            #region Set Font For Header1,Header2 and Header3
            XSSFCellStyle HeaderStyle = (XSSFCellStyle)workbook.CreateCellStyle();
            IFont Headerfont = workbook.CreateFont();
            Headerfont.Boldweight = (short)FontBoldWeight.Bold;
            HeaderStyle.SetFont(Headerfont);
            #endregion

            #region Set Cell Value For Header1, Header2 and Header3
            var ICRArow = sheet.CreateRow(0);
            ICRArow.CreateCell(0);
            NPOIWrite.CellMerged(sheet, 0, 0, 1, 9);
            var ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader1);
            ICRACell.CellStyle = HeaderStyle;
            ICRArow = sheet.CreateRow(1);
            ICRArow.CreateCell(0);
            NPOIWrite.CellMerged(sheet, 1, 1, 1, 9);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader2);
            ICRACell.CellStyle = HeaderStyle;
            ICRArow = sheet.CreateRow(2);
            ICRArow.CreateCell(0);
            NPOIWrite.CellMerged(sheet, 2, 2, 1, 9);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader3);
            ICRACell.CellStyle = HeaderStyle;
            ICRACell.CellStyle.Alignment = HorizontalAlignment.Center;
            ICRArow = sheet.CreateRow(3);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.CellStyle.Alignment = HorizontalAlignment.Center;
            NPOIWrite.AutoFitColumn(sheet, 1);
            ICRACell.CellStyle = HeaderStyle;
            #endregion

            #region Report Name
            ICRArow = sheet.CreateRow(4);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrReportName);
            HeaderStyle.Alignment = HorizontalAlignment.Left;
            ICRACell.CellStyle = HeaderStyle;
            #endregion

            #region Header creation in the Excel
            var headerRow = sheet.CreateRow(5);
            sheet.GetRow(5).HeightInPoints = 30;
            var listHeaderFinal = listTableHeader.OrderBy(x => x.Position).ToList();
            for (int i = 0; i < listHeaderFinal.Count; i++)
            {
                var cell = headerRow.CreateCell(i);
                cell.SetCellValue(listHeaderFinal[i].ColumnName);
                NPOIWrite.AutoFitColumn(sheet, i);

                #region Commented by Subrata on 21 Feb 2018
                //ICellStyle CellStyle = workbook.CreateCellStyle();
                //CellStyle = workbook.CreateCellStyle();
                //CellStyle.FillBackgroundColor = IndexedColors.Blue.Index;
                #endregion

                #region Added by Subrata on 21 Feb 2018
                XSSFCellStyle style = (XSSFCellStyle)workbook.CreateCellStyle();
                XSSFColor colorToFill = new XSSFColor(new byte[] { 68, 114, 196 });//{ 51, 204, 204 }//Color.Blue);
                style.SetFillForegroundColor(colorToFill);
                IFont font = workbook.CreateFont();
                font.Color = IndexedColors.White.Index;
                font.Boldweight = (short)FontBoldWeight.Bold;
                style.SetFont(font);
                style.FillPattern = FillPattern.SolidForeground;
                style.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                style.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                style.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                style.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                if (i > 0)
                {
                    style.Alignment = HorizontalAlignment.Center;
                    style.VerticalAlignment = VerticalAlignment.Center;
                }
                else
                {
                    style.Alignment = (string.IsNullOrEmpty(listHeaderFinal[i].TextAlign) || listHeaderFinal[i].TextAlign == EnumTextAlign.left.ToString()) ? HorizontalAlignment.Left
                        : listHeaderFinal[i].TextAlign == EnumTextAlign.center.ToString() ? HorizontalAlignment.Center : HorizontalAlignment.Right;
                    style.VerticalAlignment = VerticalAlignment.Center;
                }
                #endregion

                cell.CellStyle = style;

            }
            #endregion

            #region Cell Style For Even Row

            #region With DecimalFormat AUM
            XSSFCellStyle aumAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor aumcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 255, 255, 255 });
            aumAllCellStyleEvenDecFrmt.SetFillForegroundColor(aumcolorToFillEvenWtoutDec);
            aumAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat aumformatEven = workbook.CreateDataFormat();
            aumAllCellStyleEvenDecFrmt.DataFormat = aumformatEven.GetFormat(aumDecimalFormat);
            aumAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            /// Number Format ////
            XSSFCellStyle aumAllCellStyleEvenDecFrmtWNum = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleEvenDecFrmtWNum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmtWNum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmtWNum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmtWNum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor aumcolorToFillEvenWtoutDecWNum = new XSSFColor(new byte[] { 255, 255, 255 });
            aumAllCellStyleEvenDecFrmtWNum.SetFillForegroundColor(aumcolorToFillEvenWtoutDecWNum);
            aumAllCellStyleEvenDecFrmtWNum.FillPattern = FillPattern.SolidForeground;
            IDataFormat aumformatEvenWNum = workbook.CreateDataFormat();
            aumAllCellStyleEvenDecFrmtWNum.DataFormat = aumformatEvenWNum.GetFormat(aumNumberDecimalFormat);
            aumAllCellStyleEvenDecFrmtWNum.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleEvenDecFrmtWNum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Return
            XSSFCellStyle retAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 255, 255, 255 });
            retAllCellStyleEvenDecFrmt.SetFillForegroundColor(retcolorToFillEvenWtoutDec);
            retAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatEven = workbook.CreateDataFormat();
            retAllCellStyleEvenDecFrmt.DataFormat = retformatEven.GetFormat(retDecimalFormat);
            retAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            retAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;


            ////Number Format ////
            XSSFCellStyle retAllCellStyleEvenDecFrmtWnum = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleEvenDecFrmtWnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmtWnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmtWnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmtWnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillEvenWtoutDecWnum = new XSSFColor(new byte[] { 255, 255, 255 });
            retAllCellStyleEvenDecFrmtWnum.SetFillForegroundColor(retcolorToFillEvenWtoutDecWnum);
            retAllCellStyleEvenDecFrmtWnum.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatEvenWnum = workbook.CreateDataFormat();
            retAllCellStyleEvenDecFrmtWnum.DataFormat = retformatEvenWnum.GetFormat(retNumberDecimalFormat);
            retAllCellStyleEvenDecFrmtWnum.Alignment = HorizontalAlignment.Center;
            retAllCellStyleEvenDecFrmtWnum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Nav
            XSSFCellStyle navAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor navcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 255, 255, 255 });
            navAllCellStyleEvenDecFrmt.SetFillForegroundColor(navcolorToFillEvenWtoutDec);
            navAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat navformatEven = workbook.CreateDataFormat();
            navAllCellStyleEvenDecFrmt.DataFormat = navformatEven.GetFormat(navDecimalFormat);
            navAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            navAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;


            /// Number Format ////
            XSSFCellStyle navAllCellStyleEvenDecFrmtWnnum = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleEvenDecFrmtWnnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmtWnnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmtWnnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmtWnnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor navcolorToFillEvenWtoutDecWnnum = new XSSFColor(new byte[] { 255, 255, 255 });
            navAllCellStyleEvenDecFrmtWnnum.SetFillForegroundColor(navcolorToFillEvenWtoutDecWnnum);
            navAllCellStyleEvenDecFrmtWnnum.FillPattern = FillPattern.SolidForeground;
            IDataFormat navformatEvenWnnum = workbook.CreateDataFormat();
            navAllCellStyleEvenDecFrmtWnnum.DataFormat = navformatEvenWnnum.GetFormat(navNumberDecimalFormat);
            navAllCellStyleEvenDecFrmtWnnum.Alignment = HorizontalAlignment.Center;
            navAllCellStyleEvenDecFrmtWnnum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Other
            XSSFCellStyle otherAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            otherAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othercolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 255, 255, 255 });
            otherAllCellStyleEvenDecFrmt.SetFillForegroundColor(othercolorToFillEvenWtoutDec);
            otherAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat otherformatEven = workbook.CreateDataFormat();
            otherAllCellStyleEvenDecFrmt.DataFormat = otherformatEven.GetFormat(othDecimalFormat);
            otherAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            otherAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            /// Number Format ///
            XSSFCellStyle otherAllCellStyleEvenDecFrmtWnum = (XSSFCellStyle)workbook.CreateCellStyle();
            otherAllCellStyleEvenDecFrmtWnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmtWnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmtWnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmtWnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othercolorToFillEvenWtoutDecWnum = new XSSFColor(new byte[] { 255, 255, 255 });
            otherAllCellStyleEvenDecFrmtWnum.SetFillForegroundColor(othercolorToFillEvenWtoutDecWnum);
            otherAllCellStyleEvenDecFrmtWnum.FillPattern = FillPattern.SolidForeground;
            IDataFormat otherformatEvenWnum = workbook.CreateDataFormat();
            otherAllCellStyleEvenDecFrmtWnum.DataFormat = otherformatEvenWnum.GetFormat(othNumberDecimalFormat);
            otherAllCellStyleEvenDecFrmtWnum.Alignment = HorizontalAlignment.Center;
            otherAllCellStyleEvenDecFrmtWnum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DateTime format
            XSSFCellStyle DateTimeAllCellStyleEvenFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            DateTimeAllCellStyleEvenFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleEvenFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleEvenFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleEvenFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor DateTimecolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 255, 255, 255 });
            DateTimeAllCellStyleEvenFrmt.SetFillForegroundColor(DateTimecolorToFillEvenWtoutDec);
            DateTimeAllCellStyleEvenFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat DateTimeformatEven = workbook.CreateDataFormat();
            DateTimeAllCellStyleEvenFrmt.DataFormat = DateTimeformatEven.GetFormat(DateTimeFormat);
            DateTimeAllCellStyleEvenFrmt.Alignment = HorizontalAlignment.Center;
            DateTimeAllCellStyleEvenFrmt.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle DateTimeAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            DateTimeAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor DateTimecolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            DateTimeAllCellStyleOddDec.SetFillForegroundColor(DateTimecolorToFillOddDec);
            DateTimeAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat DateTimeformatOddDec = workbook.CreateDataFormat();
            DateTimeAllCellStyleOddDec.DataFormat = DateTimeformatOddDec.GetFormat(DateTimeFormat);
            DateTimeAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            DateTimeAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            #endregion

            #region With DecimalFormat Ratio
            XSSFCellStyle ratAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor ratcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 255, 255, 255 });
            ratAllCellStyleEvenDecFrmt.SetFillForegroundColor(ratcolorToFillEvenWtoutDec);
            ratAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat ratformatEven = workbook.CreateDataFormat();
            ratAllCellStyleEvenDecFrmt.DataFormat = ratformatEven.GetFormat(ratioDecimalFormat);
            ratAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle ratAllCellStyleEvenDecFrmtWth = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleEvenDecFrmtWth.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmtWth.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmtWth.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmtWth.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor ratcolorToFillEvenWtoutDecwth = new XSSFColor(new byte[] { 255, 255, 255 });
            ratAllCellStyleEvenDecFrmtWth.SetFillForegroundColor(ratcolorToFillEvenWtoutDecwth);
            ratAllCellStyleEvenDecFrmtWth.FillPattern = FillPattern.SolidForeground;
            IDataFormat ratformatEvenWth = workbook.CreateDataFormat();
            ratAllCellStyleEvenDecFrmtWth.DataFormat = ratformatEvenWth.GetFormat(ratioNumberDecimalFormat);
            ratAllCellStyleEvenDecFrmtWth.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleEvenDecFrmtWth.VerticalAlignment = VerticalAlignment.Center;
            #endregion


            #region No Format
            XSSFCellStyle AllCellStyleEven = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleEven.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillEven = new XSSFColor(new byte[] { 255, 255, 255 });
            AllCellStyleEven.SetFillForegroundColor(colorToFillEven);
            AllCellStyleEven.FillPattern = FillPattern.SolidForeground;
            AllCellStyleEven.Alignment = HorizontalAlignment.Center;
            AllCellStyleEven.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #endregion

            #region Cell Style For Odd Row

            #region With Decimal Format AUM
            XSSFCellStyle aumAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor AUMcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            aumAllCellStyleOddDec.SetFillForegroundColor(AUMcolorToFillOddDec);
            aumAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat AUMformatOddDec = workbook.CreateDataFormat();
            aumAllCellStyleOddDec.DataFormat = AUMformatOddDec.GetFormat(aumDecimalFormat);
            aumAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle aumAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor AUMcolorToFillOddDecWnf = new XSSFColor(new byte[] { 255, 255, 255 });
            aumAllCellStyleOddDecWnuf.SetFillForegroundColor(AUMcolorToFillOddDecWnf);
            aumAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat AUMformatOddDecWnuf = workbook.CreateDataFormat();
            aumAllCellStyleOddDecWnuf.DataFormat = AUMformatOddDecWnuf.GetFormat(aumNumberDecimalFormat);
            aumAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With Decimal Format Return
            XSSFCellStyle retAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor RETcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            retAllCellStyleOddDec.SetFillForegroundColor(RETcolorToFillOddDec);
            retAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat RETformatOddDec = workbook.CreateDataFormat();
            retAllCellStyleOddDec.DataFormat = RETformatOddDec.GetFormat(retDecimalFormat);
            retAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            retAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle retAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor RETcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            retAllCellStyleOddDecWnuf.SetFillForegroundColor(RETcolorToFillOddDecWnuf);
            retAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat RETformatOddDecWnuf = workbook.CreateDataFormat();
            retAllCellStyleOddDecWnuf.DataFormat = RETformatOddDecWnuf.GetFormat(retNumberDecimalFormat);
            retAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            retAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With Decimal Format Nav
            XSSFCellStyle navAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor naVcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            navAllCellStyleOddDec.SetFillForegroundColor(naVcolorToFillOddDec);
            navAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat naVformatOddDec = workbook.CreateDataFormat();
            navAllCellStyleOddDec.DataFormat = naVformatOddDec.GetFormat(navDecimalFormat);
            navAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            navAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            XSSFCellStyle navAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor naVcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            navAllCellStyleOddDecWnuf.SetFillForegroundColor(naVcolorToFillOddDecWnuf);
            navAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat naVformatOddDecWnuf = workbook.CreateDataFormat();
            navAllCellStyleOddDecWnuf.DataFormat = naVformatOddDecWnuf.GetFormat(navNumberDecimalFormat);
            navAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            navAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion


            #region With Decimal Format Other
            XSSFCellStyle othAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            othAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            othAllCellStyleOddDec.SetFillForegroundColor(othcolorToFillOddDec);
            othAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat othformatOddDec = workbook.CreateDataFormat();
            othAllCellStyleOddDec.DataFormat = othformatOddDec.GetFormat(othDecimalFormat);
            othAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            othAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            XSSFCellStyle othAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            othAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            othAllCellStyleOddDecWnuf.SetFillForegroundColor(othcolorToFillOddDecWnuf);
            othAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat othformatOddDecWnuf = workbook.CreateDataFormat();
            othAllCellStyleOddDecWnuf.DataFormat = othformatOddDecWnuf.GetFormat(othNumberDecimalFormat);
            othAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            othAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion


            #region With Decimal Format ratio
            XSSFCellStyle ratAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            ratAllCellStyleOddDec.SetFillForegroundColor(retcolorToFillOddDec);
            ratAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatOddDec = workbook.CreateDataFormat();
            ratAllCellStyleOddDec.DataFormat = retformatOddDec.GetFormat(ratioDecimalFormat);
            ratAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            XSSFCellStyle ratAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            ratAllCellStyleOddDecWnuf.SetFillForegroundColor(retcolorToFillOddDecWnuf);
            ratAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatOddDecWnuf = workbook.CreateDataFormat();
            ratAllCellStyleOddDecWnuf.DataFormat = retformatOddDecWnuf.GetFormat(ratioNumberDecimalFormat);
            ratAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region No Format
            XSSFCellStyle AllCellStyleOdd = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleOdd.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillOdd = new XSSFColor(new byte[] { 255, 255, 255 });
            AllCellStyleOdd.SetFillForegroundColor(colorToFillOdd);
            AllCellStyleOdd.FillPattern = FillPattern.SolidForeground;
            AllCellStyleOdd.Alignment = HorizontalAlignment.Center;
            AllCellStyleOdd.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #endregion

            #region Cell Style For First Column Even Row
            XSSFCellStyle AllCellStyleFstColmEven = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleFstColmEven.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillFstClmnEven = new XSSFColor(new byte[] { 255, 255, 255 });
            AllCellStyleFstColmEven.SetFillForegroundColor(colorToFillFstClmnEven);
            AllCellStyleFstColmEven.FillPattern = FillPattern.SolidForeground;
            AllCellStyleFstColmEven.Alignment = HorizontalAlignment.Left;
            AllCellStyleFstColmEven.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region Cell Style For First Column Odd Row
            XSSFCellStyle AllCellStyleFstColmOdd = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleFstColmOdd.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillFstClmnOdd = new XSSFColor(new byte[] { 255, 255, 255 });
            AllCellStyleFstColmOdd.SetFillForegroundColor(colorToFillFstClmnOdd);
            AllCellStyleFstColmOdd.FillPattern = FillPattern.SolidForeground;
            AllCellStyleFstColmOdd.Alignment = HorizontalAlignment.Left;
            AllCellStyleFstColmOdd.VerticalAlignment = VerticalAlignment.Center;
            #endregion
            #region Without Decimal Number Format Even Row
            XSSFCellStyle intAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            intAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 255, 255, 255 });
            intAllCellStyleEvenDecFrmt.SetFillForegroundColor(intcolorToFillEvenWtoutDec);
            intAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat intformatEven = workbook.CreateDataFormat();
            intAllCellStyleEvenDecFrmt.DataFormat = intformatEven.GetFormat(intNumberWithoutDecimalFormat);
            intAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            intAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle intSimpleAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            intSimpleAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intSimplecolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 255, 255, 255 });
            intSimpleAllCellStyleEvenDecFrmt.SetFillForegroundColor(intSimplecolorToFillEvenWtoutDec);
            intSimpleAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            intSimpleAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            intSimpleAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;
            #endregion
            #region Without Decimal Number Format Odd Row
            XSSFCellStyle intAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            intAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            intAllCellStyleOddDec.SetFillForegroundColor(intcolorToFillOddDec);
            intAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat intformatOddDec = workbook.CreateDataFormat();
            intAllCellStyleOddDec.DataFormat = intformatOddDec.GetFormat(intNumberWithoutDecimalFormat);
            intAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            intAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle intSimpleAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            intSimpleAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intSimplecolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            intSimpleAllCellStyleOddDec.SetFillForegroundColor(intSimplecolorToFillOddDec);
            intSimpleAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            intSimpleAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            intSimpleAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            //HyperLinkStylefrCl
            #region Cell Style fr Hyperlink
            XSSFCellStyle HyperLinkStylefrCl = (XSSFCellStyle)workbook.CreateCellStyle();
            IFont HyperLinkFontfrCl = workbook.CreateFont();
            HyperLinkFontfrCl.Color = IndexedColors.Orange.Index;
            HyperLinkFontfrCl.Underline = FontUnderlineType.Single;
            HyperLinkStylefrCl.SetFont(HyperLinkFontfrCl);

            HyperLinkStylefrCl.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            HyperLinkStylefrCl.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            HyperLinkStylefrCl.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            HyperLinkStylefrCl.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;

            HyperLinkStylefrCl.Alignment = HorizontalAlignment.Center;
            HyperLinkStylefrCl.VerticalAlignment = VerticalAlignment.Center;


            #endregion

            #region Value added to the Excel

            #region Added by Subrata on 22 Feb 2018
            bool IsNumericKey = false;
            bool IsNumericValue = false;
            var AllListData = listData.SelectMany(x => x.LstKeyValuePair).ToArray();
            var AllDataKey = AllListData.Select(x => x.Key).Distinct().ToArray();
            int ValueRes;
            IsNumericKey = int.TryParse(AllDataKey[0], out ValueRes);
            #endregion

            int incr = 6;
            foreach (var item in listData)
            {
                var dataRow = sheet.CreateRow(incr);
                sheet.GetRow(incr).HeightInPoints = 20;
                {
                    var cellValues = (from i in item.LstKeyValuePair
                                      from j in listTableHeader
                                      where i.Key == j.ColumnName
                                      orderby j.Position
                                      select new
                                      {
                                          IsNum = j.IsNumberFormatReq,
                                          DecType = j.DecFormatType,
                                          IsLinkReq = i.IsHyperLinkReq,
                                          LinkSheetval = i.LinkSheetName,
                                          IsMixedType = j.IsMixedValueType,
                                          IsDateTimeStringMixedType = j.IsDateTimeStringMixedType,
                                          IsDateTimeType = j.IsDateTimeType,
                                          Value = i.Value
                                      }).ToArray();

                    for (int k = 0; k < cellValues.Length; k++)
                    {
                        var datacell = dataRow.CreateCell(k);
                        if (cellValues[k].IsLinkReq)
                        {
                            datacell.SetCellValue(cellValues[k].Value == "" ? BlankData : cellValues[k].Value);

                            XSSFHyperlink linkfrCl = new XSSFHyperlink(HyperlinkType.Url);
                            linkfrCl.Address = cellValues[k].LinkSheetval;
                            datacell.Hyperlink = linkfrCl;
                            datacell.CellStyle = HyperLinkStylefrCl;
                        }
                        else
                        if (cellValues[k].DecType != DecimalFormatType.NoDecimalReq)
                        {
                            double OutVal;
                            if (string.IsNullOrEmpty(cellValues[k].Value) || cellValues[k].Value == BlankData || !double.TryParse(cellValues[k].Value, out OutVal))
                            {
                                datacell.SetCellValue(cellValues[k].Value);
                                if (k > 0)
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;
                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }

                            }
                            else
                            {
                                datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                                if (k > 0)
                                {
                                    if (cellValues[k].DecType == DecimalFormatType.OTHER)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = otherAllCellStyleEvenDecFrmtWnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = otherAllCellStyleEvenDecFrmt;
                                            }
                                        }

                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = othAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {

                                                datacell.CellStyle = othAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.IntegerWithOutDecimal)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = intAllCellStyleEvenDecFrmt;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = intSimpleAllCellStyleEvenDecFrmt;
                                            }

                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = intAllCellStyleOddDec;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = intSimpleAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = otherAllCellStyleEvenDecFrmtWnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = otherAllCellStyleEvenDecFrmt;
                                            }
                                        }

                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = othAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {

                                                datacell.CellStyle = othAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }

                            }

                        }
                        else
                        {
                            if (cellValues[k].IsMixedType)
                            {
                                double OutVal;
                                if (double.TryParse(cellValues[k].Value, out OutVal))
                                {
                                    datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = otherAllCellStyleEvenDecFrmtWnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = otherAllCellStyleEvenDecFrmt;
                                            }
                                        }

                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = othAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {

                                                datacell.CellStyle = othAllCellStyleOddDec;
                                            }

                                        }

                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }
                                }
                                else
                                {
                                    datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleEven;
                                        else
                                            datacell.CellStyle = AllCellStyleOdd;

                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }
                                }
                            }
                            else if (cellValues[k].IsDateTimeType)
                            {
                                DateTime OutVal;
                                if (DateTime.TryParse(cellValues[k].Value, out OutVal))
                                {
                                    datacell.SetCellValue(Convert.ToDateTime(cellValues[k].Value));
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = DateTimeAllCellStyleEvenFrmt;
                                        else
                                            datacell.CellStyle = DateTimeAllCellStyleOddDec;

                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = DateTimeAllCellStyleEvenFrmt;//AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = DateTimeAllCellStyleOddDec;//AllCellStyleFstColmOdd;
                                    }
                                }
                                else
                                {
                                    datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleEven;
                                        else
                                            datacell.CellStyle = AllCellStyleOdd;

                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }
                                }
                            }
                            else if (cellValues[k].IsDateTimeStringMixedType)
                            {
                                DateTime OutVal;
                                if (DateTime.TryParse(cellValues[k].Value, out OutVal))
                                {
                                    datacell.SetCellValue(Convert.ToDateTime(cellValues[k].Value));
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = DateTimeAllCellStyleEvenFrmt;
                                    else
                                        datacell.CellStyle = DateTimeAllCellStyleOddDec;
                                    //if (k > 0)
                                    //{
                                    //	if (incr % 2 == 0)
                                    //		datacell.CellStyle = DateTimeAllCellStyleEvenFrmt;
                                    //	else
                                    //		datacell.CellStyle = DateTimeAllCellStyleOddDec;

                                    //}
                                    //else
                                    //{
                                    //	if (incr % 2 == 0)
                                    //		datacell.CellStyle = AllCellStyleFstColmEven;
                                    //	else
                                    //		datacell.CellStyle = AllCellStyleFstColmOdd;
                                    //}
                                }
                                else
                                {
                                    datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleEven;
                                        else
                                            datacell.CellStyle = AllCellStyleOdd;

                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }
                                }
                            }
                            else
                            {
                                datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                if (k > 0)
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;

                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }
                            }
                        }


                    }
                    incr++;
                }

            }
            #endregion

            for (int i = 0; i < listTableHeader.Count; i++)
                sheet.AutoSizeColumn(i);
            if (sheet.GetColumnWidth(0) < 11072)
                sheet.SetColumnWidth(0, 11072);

            #region Logo
            try
            {
                if (!string.IsNullOrEmpty(LogoPath))
                {
                    XSSFDrawing patriarch = (XSSFDrawing)sheet.CreateDrawingPatriarch();
                    XSSFClientAnchor anchor;
                    anchor = new XSSFClientAnchor(0, 0, 0, 255, 0, 0, 0, 3);
                    anchor.AnchorType = AnchorType.DontMoveAndResize;
                    XSSFPicture picture = (XSSFPicture)patriarch.CreatePicture(anchor, LoadImage(LogoPath, workbook, PictureType.PNG));
                    double x1 = .25;
                    double y1 = .75;
                    picture.Resize(x1, y1);
                    picture.LineStyle = LineStyle.None;
                }
            }
            catch (Exception ex)
            {
            }

            #endregion

            #region Source, Date As On and Report Generated On
            ICRArow = sheet.CreateRow(incr + 3);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrSource);

            ICRArow = sheet.CreateRow(incr + 4);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrDateAsOn);

            ICRArow = sheet.CreateRow(incr + 5);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrReportGeneratedOn);

            // Additional disclamer for RT //
            ICRArow = sheet.CreateRow(incr + 7);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrDisclamer);

            #endregion

            #region Sheet Two Logo
            try
            {
                if (!string.IsNullOrEmpty(LogoPath))
                {
                    XSSFDrawing patriarch = (XSSFDrawing)sheetTwo.CreateDrawingPatriarch();
                    XSSFClientAnchor anchor;
                    anchor = new XSSFClientAnchor(0, 0, 0, 255, 0, 0, 0, 3);
                    anchor.AnchorType = AnchorType.DontMoveAndResize;
                    XSSFPicture picture = (XSSFPicture)patriarch.CreatePicture(anchor, LoadImage(LogoPath, workbook, PictureType.PNG));
                    double x1 = 1.10;
                    double y1 = 1.10;
                    picture.Resize(x1, y1);
                    picture.LineStyle = LineStyle.None;
                }
            }
            catch (Exception ex)
            {
            }
            #endregion

            #region Disclaimer Sheet
            var Row = sheetTwo.CreateRow(1);
            var cellSheetTwo = Row.CreateCell(7);
            cellSheetTwo.SetCellValue(StrHeader1);
            cellSheetTwo.CellStyle = HeaderStyle;

            Row = sheetTwo.CreateRow(4);
            ICell Cell;
            for (int i = 0; i < 17; i++)
            {
                Cell = Row.CreateCell(i);

                XSSFCellStyle declationstyle = (XSSFCellStyle)workbook.CreateCellStyle();

                declationstyle.Alignment = HorizontalAlignment.Left;
                declationstyle.VerticalAlignment = VerticalAlignment.Top;
                declationstyle.WrapText = true;
                IFont declarationfnt = (XSSFFont)workbook.CreateFont();
                //declarationfnt.Boldweight = (short)FontBoldWeight.Bold;
                declarationfnt.FontName = "Calibri";
                declarationfnt.FontHeightInPoints = (short)11;
                declationstyle.SetFont(declarationfnt);
                Cell.SetCellValue(!string.IsNullOrEmpty(Footer) ? Footer : "All information contained herein is obtained by ICRA Analytics Limited from sources believed by it to be accurate and reliable. Because of the possibility of human or mechanical error as well as other factors, however, all information contained herein is provided 'AS IS' without warranty of any kind. ICRA Analytics adopts all necessary measures so that the information it uses is of sufficient quality and from sources ICRA Analytics considers to be reliable including, when appropriate, independent third-party sources. However, ICRA Analytics is not an auditor and cannot in every instance independently verify or validate information received in preparing this document." +
                    "All information contained herein must be construed solely as statements of opinion, and  ICRA Analytics Limited or its affiliates or group companies and its respective and any of its officers, directors, personnel and employees, disclaim liability to any loss, damage of any nature, including but not limited to direct, indirect, punitive, special, exemplary, consequential, as also any loss of profit in any way arising from the use of this document or its contents in any manner or for any contingency within or beyond the control of, ICRA Analytics or any of its directors, officers, employees, agents, representatives, licensors or suppliers, arising from or in connection with the information contained herein or the use of or inability to use any such information.Opinions expressed in the document are not the opinions of our holding company, ICRA Limited(ICRA), and should not be construed as any indication of credit rating or grading of ICRA for any instruments that have been issued or are to be issued by any entity.The recipient alone shall be fully responsible and / or are liable for any decision taken on the basis of this document and / or the information contained herein.");
                Cell.CellStyle = declationstyle;

            }
            NPOIWrite.CellMerged(sheetTwo, 4, 4, 0, 17);
            sheetTwo.GetRow(4).HeightInPoints = 200;
            #endregion

            #region Disclaimer Sheet HyperLink
            XSSFCellStyle HyperLinkStyle = (XSSFCellStyle)workbook.CreateCellStyle();
            IFont HyperLinkFont = workbook.CreateFont();
            HyperLinkFont.Color = IndexedColors.Orange.Index;
            HyperLinkFont.Underline = FontUnderlineType.Single;
            HyperLinkStyle.SetFont(HyperLinkFont);

            Row = sheetTwo.CreateRow(5);
            Cell = Row.CreateCell(0);
            Cell.SetCellValue("Click here for third-party disclaimers");
            XSSFCreationHelper createHelper = (XSSFCreationHelper)workbook.GetCreationHelper();
            XSSFHyperlink link = (XSSFHyperlink)createHelper.CreateHyperlink(HyperlinkType.Url);
            link.Address = "https://www.icraanalytics.com/home/thirdpartydisclaimers";
            Cell.Hyperlink = link;
            Cell.CellStyle = HyperLinkStyle;
            #endregion

            sheet.ActiveCell = new CellAddress(0, 1);
            var stream = new MemoryStream();
            workbook.Write(stream);

            return workbook;
        }

        public static NPOI.XSSF.UserModel.XSSFWorkbook ExportToExcelWorkBookWithNumberDecimalFormatWithSubHeader(UserBasicSettings ubs, List<TableHeaderEntity> listTableHeader, List<TableSubHeaderEntity> listTableSubHeader, List<ExportEntity> listData, string LogoPath = "", string ReportName = "", string StrDateAsOn = "")
        {
            #region Variable
            string Header = ubs.Reporting_Format_Header;
            string Footer = ubs.Reporting_Format_Footer;
            string BlankData = ubs.BlankData.ToUpper() == "BLANK" ? "" : ubs.BlankData;
            string StrHeader1 = "ICRA Analytics Limited";
            string StrHeader2 = "1322, Level 13, Platinum Techno Park, Plot no. 17 & 18, Sector 30A, Vashi, Navi Mumbai 400705, Maharashtra, IN";
            string StrHeader3 = Header; //"Mumbai, Maharashtra 400093, IN";
            string StrReportName = ReportName;
            string StrSource = "Source: Rating Tracker";
            StrDateAsOn = "Data as on " + StrDateAsOn;
            string StrReportGeneratedOn = "Report Generated on " + DateTime.Now.ToString("dd-MMM-yyyy HH:mm:ss");


            #region number and decimal variable for AUM
            var aumPaddding = new string('0', (int)ubs.AUMDecimalFormat);
            var aumDecimalFormat = "0." + aumPaddding;
            string aumNUMBERFORMAT = ubs.NumberFormat;
            var aumNumberFormat = aumNUMBERFORMAT.Replace("0", "#");
            string aumNumberDecimalFormat = aumNumberFormat + "0." + new String('0', (int)ubs.AUMDecimalFormat);
            #endregion

            #region number and decimal variable for return
            var retPaddding = new string('0', (int)ubs.ReturnDecimalFormat);
            var retDecimalFormat = "0." + retPaddding;
            string retNUMBERFORMAT = ubs.NumberFormat;
            var retNumberFormat = retNUMBERFORMAT.Replace("0", "#");
            string retNumberDecimalFormat = retNumberFormat + "0." + new String('0', (int)ubs.ReturnDecimalFormat);
            #endregion

            #region number and decimal variable for NAV
            var navPaddding = new string('0', (int)ubs.NavDecimalFormat);
            var navDecimalFormat = "0." + navPaddding;
            string navNUMBERFORMAT = ubs.NumberFormat;
            var navNumberFormat = navNUMBERFORMAT.Replace("0", "#");
            string navNumberDecimalFormat = navNumberFormat + "0." + new String('0', (int)ubs.NavDecimalFormat);
            #endregion

            #region number and decimal variable for Other
            var othPaddding = new string('0', (int)ubs.OtherDecimal);
            var othDecimalFormat = "0." + othPaddding;
            string othNUMBERFORMAT = ubs.NumberFormat;
            var othNumberFormat = othNUMBERFORMAT.Replace("0", "#");
            string othNumberDecimalFormat = othNumberFormat + "0." + new String('0', (int)ubs.OtherDecimal);
            #endregion

            #region number and decimal variable for Ratio
            var ratioPaddding = new string('0', (int)ubs.RatioDecimalFormat);
            var ratioDecimalFormat = "0." + ratioPaddding;
            string ratioNUMBERFORMAT = ubs.NumberFormat;
            var ratioNumberFormat = ratioNUMBERFORMAT.Replace("0", "#");
            string ratioNumberDecimalFormat = ratioNumberFormat + "0." + new String('0', (int)ubs.RatioDecimalFormat);
            #endregion
            #region int Format with out Decimal
            var intNumberWithoutDecimalFormat = ubs.NumberFormat.Replace("0", "#");
            #endregion

            #endregion

            NPOI.XSSF.UserModel.XSSFWorkbook workbook = new NPOI.XSSF.UserModel.XSSFWorkbook();
            ISheet sheet = workbook.CreateSheet("Output");
            //ISheet sheetTwo = workbook.CreateSheet("Disclaimer");

            #region Excel Sheet Gridlines Delete
            sheet.DisplayGridlines = false;
            //sheetTwo.DisplayGridlines = false;
            #endregion

            #region Header Freeze
            sheet.CreateFreezePane(1, 6);
            #endregion

            #region Set Font For Header1,Header2 and Header3
            XSSFCellStyle HeaderStyle = (XSSFCellStyle)workbook.CreateCellStyle();
            IFont Headerfont = workbook.CreateFont();
            Headerfont.Boldweight = (short)FontBoldWeight.Bold;
            HeaderStyle.SetFont(Headerfont);
            #endregion

            #region Set Cell Value For Header1, Header2 and Header3
            var ICRArow = sheet.CreateRow(0);
            ICRArow.CreateCell(0);
            NPOIWrite.CellMerged(sheet, 0, 0, 1, 9);
            var ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader1);
            ICRACell.CellStyle = HeaderStyle;
            ICRArow = sheet.CreateRow(1);
            ICRArow.CreateCell(0);
            NPOIWrite.CellMerged(sheet, 1, 1, 1, 9);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader2);
            ICRACell.CellStyle = HeaderStyle;
            ICRArow = sheet.CreateRow(2);
            ICRArow.CreateCell(0);
            NPOIWrite.CellMerged(sheet, 2, 2, 1, 9);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader3);
            ICRACell.CellStyle = HeaderStyle;
            ICRACell.CellStyle.Alignment = HorizontalAlignment.Center;
            ICRArow = sheet.CreateRow(3);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.CellStyle = HeaderStyle;
            ICRACell.CellStyle.Alignment = HorizontalAlignment.Center;
            NPOIWrite.AutoFitColumn(sheet, 1);
            ICRACell.CellStyle = HeaderStyle;
            #endregion

            #region Report Name
            ICRArow = sheet.CreateRow(3);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrReportName);
            HeaderStyle.Alignment = HorizontalAlignment.Left;
            ICRACell.CellStyle = HeaderStyle;
            #endregion

            #region Header creation in the Excel
            var headerRow = sheet.CreateRow(4);
            sheet.GetRow(4).HeightInPoints = 30;
            var headerlistFinal = listTableHeader.OrderBy(x => x.Position).ToList();
            var cellincr = 0;
            for (int i = 0; i < headerlistFinal.Count; i++)
            {
                int colspan = headerlistFinal[i].Colspan;
                if (colspan > 1)
                {
                    for (int k = 0; k < colspan; k++)
                    {
                        var cell = headerRow.CreateCell(cellincr + k);
                        cell.SetCellValue(headerlistFinal[i].ColumnName);
                        NPOIWrite.AutoFitColumn(sheet, cellincr);

                        #region Added by Subrata on 21 Feb 2018
                        XSSFCellStyle style = (XSSFCellStyle)workbook.CreateCellStyle();
                        XSSFColor colorToFill = new XSSFColor(new byte[] { 68, 114, 196 });// { 51, 204, 204 });//Color.Blue);
                        style.SetFillForegroundColor(colorToFill);
                        IFont font = workbook.CreateFont();
                        font.Color = IndexedColors.White.Index;
                        font.Boldweight = (short)FontBoldWeight.Bold;
                        style.SetFont(font);
                        style.FillPattern = FillPattern.SolidForeground;
                        style.Alignment = HorizontalAlignment.Center;
                        style.VerticalAlignment = VerticalAlignment.Center;
                        style.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                        style.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                        style.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                        style.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                        #endregion

                        cell.CellStyle = style;
                    }
                    NPOIWrite.CellMerged(sheet, 4, 4, cellincr, cellincr + colspan - 1);
                    cellincr = cellincr + colspan;
                }
                else
                {
                    var cell = headerRow.CreateCell(cellincr);
                    cell.SetCellValue(headerlistFinal[i].ColumnName);
                    NPOIWrite.AutoFitColumn(sheet, cellincr);
                    cellincr = cellincr + colspan;

                    #region Added by Subrata on 21 Feb 2018
                    XSSFCellStyle style = (XSSFCellStyle)workbook.CreateCellStyle();
                    XSSFColor colorToFill = new XSSFColor(new byte[] { 68, 114, 196 });// { 51, 204, 204 });// Color.Blue);
                    style.SetFillForegroundColor(colorToFill);
                    IFont font = workbook.CreateFont();
                    font.Color = IndexedColors.White.Index;
                    font.Boldweight = (short)FontBoldWeight.Bold;
                    style.SetFont(font);
                    style.FillPattern = FillPattern.SolidForeground;
                    if (i > 0)
                    {
                        style.Alignment = HorizontalAlignment.Center;
                        style.VerticalAlignment = VerticalAlignment.Center;
                    }
                    else
                    {
                        style.Alignment = HorizontalAlignment.Left;
                        style.VerticalAlignment = VerticalAlignment.Center;
                    }
                    style.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                    style.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                    style.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                    style.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                    #endregion

                    cell.CellStyle = style;
                }
            }
            #endregion

            #region Sub Header creation in the Excel
            var subHeaderRow = sheet.CreateRow(5);
            sheet.GetRow(5).HeightInPoints = 30;
            var subHeaderlistFinal = listTableSubHeader.OrderBy(x => x.Position).ToList();
            for (int i = 0; i < subHeaderlistFinal.Count; i++)
            {
                int index = headerlistFinal.FindIndex(x => x.ColumnName.Equals(subHeaderlistFinal[i].ColumnName));
                if (index >= 0)
                {
                    var cell = subHeaderRow.CreateCell(i);

                    #region Added by Subrata on 21 Feb 2018
                    XSSFCellStyle style = (XSSFCellStyle)workbook.CreateCellStyle();
                    XSSFColor colorToFill = new XSSFColor(new byte[] { 68, 114, 196 });// Color.Blue);
                    style.SetFillForegroundColor(colorToFill);
                    IFont font = workbook.CreateFont();
                    font.Color = IndexedColors.White.Index;
                    font.Boldweight = (short)FontBoldWeight.Bold;
                    style.SetFont(font);
                    style.FillPattern = FillPattern.SolidForeground;
                    style.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                    style.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                    style.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                    style.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                    if (i > 0)
                    {
                        style.Alignment = HorizontalAlignment.Center;
                        style.VerticalAlignment = VerticalAlignment.Center;
                    }
                    else
                    {
                        style.Alignment = HorizontalAlignment.Left;
                        style.VerticalAlignment = VerticalAlignment.Center;
                    }
                    #endregion

                    cell.CellStyle = style;
                }
                else
                {
                    var cell = subHeaderRow.CreateCell(i);
                    cell.SetCellValue(subHeaderlistFinal[i].ColumnName);
                    NPOIWrite.AutoFitColumn(sheet, i);

                    #region Added by Subrata on 21 Feb 2018
                    XSSFCellStyle style = (XSSFCellStyle)workbook.CreateCellStyle();
                    XSSFColor colorToFill = new XSSFColor(new byte[] { 68, 114, 196 });// Color.Blue);
                    style.SetFillForegroundColor(colorToFill);
                    IFont font = workbook.CreateFont();
                    font.Color = IndexedColors.White.Index;
                    font.Boldweight = (short)FontBoldWeight.Bold;
                    style.SetFont(font);
                    style.FillPattern = FillPattern.SolidForeground;
                    style.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                    style.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                    style.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                    style.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                    if (i > 0)
                    {
                        style.Alignment = HorizontalAlignment.Center;
                        style.VerticalAlignment = VerticalAlignment.Center;
                    }
                    else
                    {
                        style.Alignment = HorizontalAlignment.Left;
                        style.VerticalAlignment = VerticalAlignment.Center;
                    }
                    #endregion

                    cell.CellStyle = style;
                }
            }
            #endregion

            #region Cell Style For Even Row

            #region Without DecimalFormat
            XSSFCellStyle AllCellStyleEven = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleEven.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillEven = new XSSFColor(new byte[] { 176, 196, 222 });
            AllCellStyleEven.SetFillForegroundColor(colorToFillEven);
            AllCellStyleEven.FillPattern = FillPattern.SolidForeground;
            AllCellStyleEven.Alignment = HorizontalAlignment.Center;
            AllCellStyleEven.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat AUM
            XSSFCellStyle aumAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor aumcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            aumAllCellStyleEvenDecFrmt.SetFillForegroundColor(aumcolorToFillEvenWtoutDec);
            aumAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat aumformatEven = workbook.CreateDataFormat();
            aumAllCellStyleEvenDecFrmt.DataFormat = aumformatEven.GetFormat(aumDecimalFormat);
            aumAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            /// Number Format ////
            XSSFCellStyle aumAllCellStyleEvenDecFrmtWNum = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleEvenDecFrmtWNum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmtWNum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmtWNum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmtWNum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor aumcolorToFillEvenWtoutDecWNum = new XSSFColor(new byte[] { 176, 196, 222 });
            aumAllCellStyleEvenDecFrmtWNum.SetFillForegroundColor(aumcolorToFillEvenWtoutDecWNum);
            aumAllCellStyleEvenDecFrmtWNum.FillPattern = FillPattern.SolidForeground;
            IDataFormat aumformatEvenWNum = workbook.CreateDataFormat();
            aumAllCellStyleEvenDecFrmtWNum.DataFormat = aumformatEvenWNum.GetFormat(aumNumberDecimalFormat);
            aumAllCellStyleEvenDecFrmtWNum.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleEvenDecFrmtWNum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Return
            XSSFCellStyle retAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            retAllCellStyleEvenDecFrmt.SetFillForegroundColor(retcolorToFillEvenWtoutDec);
            retAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatEven = workbook.CreateDataFormat();
            retAllCellStyleEvenDecFrmt.DataFormat = retformatEven.GetFormat(retDecimalFormat);
            retAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            retAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;


            ////Number Format ////
            XSSFCellStyle retAllCellStyleEvenDecFrmtWnum = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleEvenDecFrmtWnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmtWnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmtWnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmtWnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillEvenWtoutDecWnum = new XSSFColor(new byte[] { 176, 196, 222 });
            retAllCellStyleEvenDecFrmtWnum.SetFillForegroundColor(retcolorToFillEvenWtoutDecWnum);
            retAllCellStyleEvenDecFrmtWnum.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatEvenWnum = workbook.CreateDataFormat();
            retAllCellStyleEvenDecFrmtWnum.DataFormat = retformatEvenWnum.GetFormat(retNumberDecimalFormat);
            retAllCellStyleEvenDecFrmtWnum.Alignment = HorizontalAlignment.Center;
            retAllCellStyleEvenDecFrmtWnum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Nav
            XSSFCellStyle navAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor navcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            navAllCellStyleEvenDecFrmt.SetFillForegroundColor(navcolorToFillEvenWtoutDec);
            navAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat navformatEven = workbook.CreateDataFormat();
            navAllCellStyleEvenDecFrmt.DataFormat = navformatEven.GetFormat(navDecimalFormat);
            navAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            navAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;


            /// Number Format ////
            XSSFCellStyle navAllCellStyleEvenDecFrmtWnnum = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleEvenDecFrmtWnnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmtWnnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmtWnnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmtWnnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor navcolorToFillEvenWtoutDecWnnum = new XSSFColor(new byte[] { 176, 196, 222 });
            navAllCellStyleEvenDecFrmtWnnum.SetFillForegroundColor(navcolorToFillEvenWtoutDecWnnum);
            navAllCellStyleEvenDecFrmtWnnum.FillPattern = FillPattern.SolidForeground;
            IDataFormat navformatEvenWnnum = workbook.CreateDataFormat();
            navAllCellStyleEvenDecFrmtWnnum.DataFormat = navformatEvenWnnum.GetFormat(navNumberDecimalFormat);
            navAllCellStyleEvenDecFrmtWnnum.Alignment = HorizontalAlignment.Center;
            navAllCellStyleEvenDecFrmtWnnum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Other
            XSSFCellStyle otherAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            otherAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othercolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            otherAllCellStyleEvenDecFrmt.SetFillForegroundColor(othercolorToFillEvenWtoutDec);
            otherAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat otherformatEven = workbook.CreateDataFormat();
            otherAllCellStyleEvenDecFrmt.DataFormat = otherformatEven.GetFormat(othDecimalFormat);
            otherAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            otherAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            /// Number Format ///
            XSSFCellStyle otherAllCellStyleEvenDecFrmtWnum = (XSSFCellStyle)workbook.CreateCellStyle();
            otherAllCellStyleEvenDecFrmtWnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmtWnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmtWnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmtWnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othercolorToFillEvenWtoutDecWnum = new XSSFColor(new byte[] { 176, 196, 222 });
            otherAllCellStyleEvenDecFrmtWnum.SetFillForegroundColor(othercolorToFillEvenWtoutDecWnum);
            otherAllCellStyleEvenDecFrmtWnum.FillPattern = FillPattern.SolidForeground;
            IDataFormat otherformatEvenWnum = workbook.CreateDataFormat();
            otherAllCellStyleEvenDecFrmtWnum.DataFormat = otherformatEvenWnum.GetFormat(othNumberDecimalFormat);
            otherAllCellStyleEvenDecFrmtWnum.Alignment = HorizontalAlignment.Center;
            otherAllCellStyleEvenDecFrmtWnum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Ratio
            XSSFCellStyle ratAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor ratcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            ratAllCellStyleEvenDecFrmt.SetFillForegroundColor(ratcolorToFillEvenWtoutDec);
            ratAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat ratformatEven = workbook.CreateDataFormat();
            ratAllCellStyleEvenDecFrmt.DataFormat = ratformatEven.GetFormat(ratioDecimalFormat);
            ratAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle ratAllCellStyleEvenDecFrmtWth = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleEvenDecFrmtWth.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmtWth.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmtWth.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmtWth.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor ratcolorToFillEvenWtoutDecwth = new XSSFColor(new byte[] { 176, 196, 222 });
            ratAllCellStyleEvenDecFrmtWth.SetFillForegroundColor(ratcolorToFillEvenWtoutDecwth);
            ratAllCellStyleEvenDecFrmtWth.FillPattern = FillPattern.SolidForeground;
            IDataFormat ratformatEvenWth = workbook.CreateDataFormat();
            ratAllCellStyleEvenDecFrmtWth.DataFormat = ratformatEvenWth.GetFormat(ratioNumberDecimalFormat);
            ratAllCellStyleEvenDecFrmtWth.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleEvenDecFrmtWth.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #endregion

            #region Cell Style For Odd Row

            #region With Decimal Format AUM
            XSSFCellStyle aumAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor AUMcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            aumAllCellStyleOddDec.SetFillForegroundColor(AUMcolorToFillOddDec);
            aumAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat AUMformatOddDec = workbook.CreateDataFormat();
            aumAllCellStyleOddDec.DataFormat = AUMformatOddDec.GetFormat(aumDecimalFormat);
            aumAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle aumAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor AUMcolorToFillOddDecWnf = new XSSFColor(new byte[] { 255, 255, 255 });
            aumAllCellStyleOddDecWnuf.SetFillForegroundColor(AUMcolorToFillOddDecWnf);
            aumAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat AUMformatOddDecWnuf = workbook.CreateDataFormat();
            aumAllCellStyleOddDecWnuf.DataFormat = AUMformatOddDecWnuf.GetFormat(aumNumberDecimalFormat);
            aumAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With Decimal Format Return
            XSSFCellStyle retAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor RETcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            retAllCellStyleOddDec.SetFillForegroundColor(RETcolorToFillOddDec);
            retAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat RETformatOddDec = workbook.CreateDataFormat();
            retAllCellStyleOddDec.DataFormat = RETformatOddDec.GetFormat(retDecimalFormat);
            retAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            retAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle retAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor RETcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            retAllCellStyleOddDecWnuf.SetFillForegroundColor(RETcolorToFillOddDecWnuf);
            retAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat RETformatOddDecWnuf = workbook.CreateDataFormat();
            retAllCellStyleOddDecWnuf.DataFormat = RETformatOddDecWnuf.GetFormat(retNumberDecimalFormat);
            retAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            retAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With Decimal Format Nav
            XSSFCellStyle navAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor naVcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            navAllCellStyleOddDec.SetFillForegroundColor(naVcolorToFillOddDec);
            navAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat naVformatOddDec = workbook.CreateDataFormat();
            navAllCellStyleOddDec.DataFormat = naVformatOddDec.GetFormat(navDecimalFormat);
            navAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            navAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            XSSFCellStyle navAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor naVcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            navAllCellStyleOddDecWnuf.SetFillForegroundColor(naVcolorToFillOddDecWnuf);
            navAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat naVformatOddDecWnuf = workbook.CreateDataFormat();
            navAllCellStyleOddDecWnuf.DataFormat = naVformatOddDecWnuf.GetFormat(navNumberDecimalFormat);
            navAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            navAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion


            #region With Decimal Format Other
            XSSFCellStyle othAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            othAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            othAllCellStyleOddDec.SetFillForegroundColor(othcolorToFillOddDec);
            othAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat othformatOddDec = workbook.CreateDataFormat();
            othAllCellStyleOddDec.DataFormat = othformatOddDec.GetFormat(othDecimalFormat);
            othAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            othAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            XSSFCellStyle othAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            othAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            othAllCellStyleOddDecWnuf.SetFillForegroundColor(othcolorToFillOddDecWnuf);
            othAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat othformatOddDecWnuf = workbook.CreateDataFormat();
            othAllCellStyleOddDecWnuf.DataFormat = othformatOddDecWnuf.GetFormat(othNumberDecimalFormat);
            othAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            othAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion


            #region With Decimal Format ratio
            XSSFCellStyle ratAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            ratAllCellStyleOddDec.SetFillForegroundColor(retcolorToFillOddDec);
            ratAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatOddDec = workbook.CreateDataFormat();
            ratAllCellStyleOddDec.DataFormat = retformatOddDec.GetFormat(ratioDecimalFormat);
            ratAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            XSSFCellStyle ratAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            ratAllCellStyleOddDecWnuf.SetFillForegroundColor(retcolorToFillOddDecWnuf);
            ratAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatOddDecWnuf = workbook.CreateDataFormat();
            ratAllCellStyleOddDecWnuf.DataFormat = retformatOddDecWnuf.GetFormat(ratioNumberDecimalFormat);
            ratAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion



            #region Without Decimal Format
            XSSFCellStyle AllCellStyleOdd = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleOdd.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillOdd = new XSSFColor(new byte[] { 255, 255, 255 });
            AllCellStyleOdd.SetFillForegroundColor(colorToFillOdd);
            AllCellStyleOdd.FillPattern = FillPattern.SolidForeground;
            AllCellStyleOdd.Alignment = HorizontalAlignment.Center;
            AllCellStyleOdd.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #endregion

            #region Cell Style For First Column Even Row
            XSSFCellStyle AllCellStyleFstColmEven = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleFstColmEven.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillFstClmnEven = new XSSFColor(new byte[] { 176, 196, 222 });
            AllCellStyleFstColmEven.SetFillForegroundColor(colorToFillFstClmnEven);
            AllCellStyleFstColmEven.FillPattern = FillPattern.SolidForeground;
            AllCellStyleFstColmEven.Alignment = HorizontalAlignment.Left;
            AllCellStyleFstColmEven.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region Cell Style For First Column Odd Row
            XSSFCellStyle AllCellStyleFstColmOdd = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleFstColmOdd.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillFstClmnOdd = new XSSFColor(new byte[] { 255, 255, 255 });
            AllCellStyleFstColmOdd.SetFillForegroundColor(colorToFillFstClmnOdd);
            AllCellStyleFstColmOdd.FillPattern = FillPattern.SolidForeground;
            AllCellStyleFstColmOdd.Alignment = HorizontalAlignment.Left;
            AllCellStyleFstColmOdd.VerticalAlignment = VerticalAlignment.Center;
            #endregion
            #region Without Decimal Number Format Even Row
            XSSFCellStyle intAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            intAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            intAllCellStyleEvenDecFrmt.SetFillForegroundColor(intcolorToFillEvenWtoutDec);
            intAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat intformatEven = workbook.CreateDataFormat();
            intAllCellStyleEvenDecFrmt.DataFormat = intformatEven.GetFormat(intNumberWithoutDecimalFormat);
            intAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            intAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle intSimpleAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            intSimpleAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intSimplecolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            intSimpleAllCellStyleEvenDecFrmt.SetFillForegroundColor(intSimplecolorToFillEvenWtoutDec);
            intSimpleAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            intSimpleAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            intSimpleAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;
            #endregion
            #region Without Decimal Number Format Odd Row
            XSSFCellStyle intAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            intAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            intAllCellStyleOddDec.SetFillForegroundColor(intcolorToFillOddDec);
            intAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat intformatOddDec = workbook.CreateDataFormat();
            intAllCellStyleOddDec.DataFormat = intformatOddDec.GetFormat(intNumberWithoutDecimalFormat);
            intAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            intAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle intSimpleAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            intSimpleAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intSimplecolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            intSimpleAllCellStyleOddDec.SetFillForegroundColor(intSimplecolorToFillOddDec);
            intSimpleAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            intSimpleAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            intSimpleAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region Value added to the Excel

            int incr = 6;
            bool isNumeric = false;

            #region Added by Subrata on 22 Feb 2018
            bool IsNumericKey = false;
            bool IsNumericValue = false;
            var AllListData = listData.SelectMany(x => x.LstKeyValuePair).ToArray();
            var AllDataKey = AllListData.Select(x => x.Key).Distinct().ToArray();
            int ValueRes;
            IsNumericKey = int.TryParse(AllDataKey[0], out ValueRes);

            #endregion

            foreach (var item in listData)
            {
                if (item.LstKeyValuePair.Count() > 0)
                {
                    int value;
                    isNumeric = int.TryParse(item.LstKeyValuePair[0].Key, out value);
                }


                var dataRow = sheet.CreateRow(incr);
                sheet.GetRow(incr).HeightInPoints = 20;
                if (isNumeric == true)
                {
                    var cellValues = (from i in item.LstKeyValuePair
                                      from j in listTableSubHeader
                                      where i.Key.ToString() == j.Position.ToString()
                                      orderby j.Position
                                      select new
                                      {
                                          IsNum = j.IsNumberFormatReq,
                                          DecType = j.DecFormatType,
                                          IsMixedType = j.IsMixedValueType,
                                          Value = i.Value
                                      }).ToArray();

                    for (int k = 0; k < cellValues.Length; k++)
                    {
                        var datacell = dataRow.CreateCell(k);
                        if (cellValues[k].DecType != DecimalFormatType.NoDecimalReq)
                        {
                            double OutVal;
                            if (cellValues[k].Value == "" || cellValues[k].Value == null || cellValues[k].Value == BlankData || !double.TryParse(cellValues[k].Value, out OutVal))
                            {
                                if (k > 0)
                                {
                                    datacell.SetCellValue(cellValues[k].Value);
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;
                                }
                                else
                                {
                                    datacell.SetCellValue(cellValues[k].Value);
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }

                            }
                            else
                            {
                                if (k > 0)
                                {
                                    datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                                    //if (incr % 2 == 0)
                                    //    datacell.CellStyle = AllCellStyleEven;
                                    //else
                                    //    datacell.CellStyle = AllCellStyleOdd;
                                    if (cellValues[k].DecType == DecimalFormatType.AUM)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {

                                                datacell.CellStyle = aumAllCellStyleEvenDecFrmtWNum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = aumAllCellStyleEvenDecFrmt;
                                            }
                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = aumAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = aumAllCellStyleOddDec;
                                            }
                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.NAV)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = navAllCellStyleEvenDecFrmtWnnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = navAllCellStyleEvenDecFrmt;
                                            }
                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = navAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = navAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.OTHER)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = otherAllCellStyleEvenDecFrmtWnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = otherAllCellStyleEvenDecFrmt;
                                            }
                                        }

                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = othAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {

                                                datacell.CellStyle = othAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.RATIO)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = ratAllCellStyleEvenDecFrmtWth;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = ratAllCellStyleEvenDecFrmt;
                                            }
                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = ratAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = ratAllCellStyleOddDec;
                                            }
                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.RETURN)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = retAllCellStyleEvenDecFrmtWnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = retAllCellStyleEvenDecFrmt;
                                            }

                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = retAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = retAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.IntegerWithOutDecimal)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = intAllCellStyleEvenDecFrmt;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = intSimpleAllCellStyleEvenDecFrmt;
                                            }

                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = intAllCellStyleOddDec;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = intSimpleAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                }
                                else
                                {
                                    datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }

                            }

                        }
                        else
                        {
                            double OutVal;
                            if (double.TryParse(cellValues[k].Value, out OutVal) && !cellValues[k].IsMixedType)
                            {
                                datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                                if (k > 0)
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;

                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }
                            }
                            else
                            {
                                datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                if (k > 0)
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;

                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }
                            }



                        }
                    }
                    incr++;
                }
                else
                {
                    var cellValues = (from i in item.LstKeyValuePair
                                      from j in listTableSubHeader
                                      where i.Key == j.ColumnName
                                      orderby j.Position
                                      select new
                                      {
                                          IsNum = j.IsNumberFormatReq,
                                          DecType = j.DecFormatType,
                                          Value = i.Value
                                      }).ToArray();

                    for (int k = 0; k < cellValues.Length; k++)
                    {
                        var datacell = dataRow.CreateCell(k);
                        if (cellValues[k].DecType != DecimalFormatType.NoDecimalReq)
                        {
                            double OutVal;
                            if (cellValues[k].Value == "" || cellValues[k].Value == null || cellValues[k].Value == BlankData || !double.TryParse(cellValues[k].Value, out OutVal))
                            {
                                if (k > 0)
                                {
                                    datacell.SetCellValue(cellValues[k].Value);
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;
                                }
                                else
                                {
                                    datacell.SetCellValue(cellValues[k].Value);
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;

                                }

                            }
                            else
                            {
                                if (k > 0)
                                {
                                    datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                                    if (cellValues[k].DecType == DecimalFormatType.AUM)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {

                                                datacell.CellStyle = aumAllCellStyleEvenDecFrmtWNum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = aumAllCellStyleEvenDecFrmt;
                                            }
                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = aumAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = aumAllCellStyleOddDec;
                                            }
                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.NAV)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = navAllCellStyleEvenDecFrmtWnnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = navAllCellStyleEvenDecFrmt;
                                            }
                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = navAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = navAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.OTHER)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = otherAllCellStyleEvenDecFrmtWnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = otherAllCellStyleEvenDecFrmt;
                                            }
                                        }

                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = othAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {

                                                datacell.CellStyle = othAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.RATIO)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = ratAllCellStyleEvenDecFrmtWth;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = ratAllCellStyleEvenDecFrmt;
                                            }
                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = ratAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = ratAllCellStyleOddDec;
                                            }
                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.RETURN)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = retAllCellStyleEvenDecFrmtWnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = retAllCellStyleEvenDecFrmt;
                                            }

                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = retAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = retAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.IntegerWithOutDecimal)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = intAllCellStyleEvenDecFrmt;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = intSimpleAllCellStyleEvenDecFrmt;
                                            }

                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = intAllCellStyleOddDec;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = intSimpleAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                }
                                else
                                {
                                    datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }

                            }

                        }
                        else
                        {


                            double OutVal;
                            if (double.TryParse(cellValues[k].Value, out OutVal))
                            {
                                datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                                if (k > 0)
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;

                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }
                            }
                            else
                            {
                                datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                if (k > 0)
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;

                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }
                            }

                        }
                    }
                    incr++;
                }
            }
            #endregion

            for (int i = 0; i < listTableSubHeader.Count; i++)
                sheet.AutoSizeColumn(i);
            if (sheet.GetColumnWidth(0) < 11072)
                sheet.SetColumnWidth(0, 11072);

            #region Logo
            try
            {
                if (!string.IsNullOrEmpty(LogoPath))
                {
                    XSSFDrawing patriarch = (XSSFDrawing)sheet.CreateDrawingPatriarch();
                    XSSFClientAnchor anchor;
                    anchor = new XSSFClientAnchor(0, 0, 0, 255, 0, 0, 0, 3);
                    anchor.AnchorType = AnchorType.DontMoveAndResize;
                    XSSFPicture picture = (XSSFPicture)patriarch.CreatePicture(anchor, LoadImage(LogoPath, workbook, PictureType.PNG));
                    double x1 = .25;
                    double y1 = .75;
                    picture.Resize(x1, y1);
                    picture.LineStyle = LineStyle.None;
                }
            }
            catch (Exception ex)
            {
            }

            #endregion

            #region Source, Date As On and Report Generated On
            ICRArow = sheet.CreateRow(incr + 3);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrSource);

            ICRArow = sheet.CreateRow(incr + 4);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrDateAsOn);

            ICRArow = sheet.CreateRow(incr + 5);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrReportGeneratedOn);
            #endregion

            #region Sheet Two Logo
            try
            {
                //if (!string.IsNullOrEmpty(LogoPath))
                //{
                //    XSSFDrawing patriarch = (XSSFDrawing)sheetTwo.CreateDrawingPatriarch();
                //    XSSFClientAnchor anchor;
                //    anchor = new XSSFClientAnchor(0, 0, 0, 255, 0, 0, 0, 3);
                //    anchor.AnchorType = AnchorType.DontMoveAndResize;
                //    XSSFPicture picture = (XSSFPicture)patriarch.CreatePicture(anchor, LoadImage(LogoPath, workbook, PictureType.PNG));
                //    double x1 = 1.10;
                //    double y1 = 1.10;
                //    picture.Resize(x1, y1);
                //    picture.LineStyle = LineStyle.None;
                //}
            }
            catch (Exception ex)
            {
            }
            #endregion

            //#region Disclaimer Sheet
            //var Row = sheetTwo.CreateRow(1);
            //var cellSheetTwo = Row.CreateCell(7);
            //cellSheetTwo.SetCellValue("ICRA Analytics Limited");
            //cellSheetTwo.CellStyle = HeaderStyle;

            //Row = sheetTwo.CreateRow(4);
            //ICell Cell;
            //for (int i = 0; i < listTableSubHeader.Count; i++)
            //{
            //    Cell = Row.CreateCell(i);

            //    XSSFCellStyle declationstyle = (XSSFCellStyle)workbook.CreateCellStyle();

            //    declationstyle.Alignment = HorizontalAlignment.Left;
            //    declationstyle.VerticalAlignment = VerticalAlignment.Top;
            //    declationstyle.WrapText = true;
            //    IFont declarationfnt = (XSSFFont)workbook.CreateFont();
            //    declarationfnt.FontName = "Calibri";
            //    declarationfnt.FontHeightInPoints = (short)11;
            //    declationstyle.SetFont(declarationfnt);
            //    Cell.SetCellValue(!string.IsNullOrEmpty(Footer) ? Footer : "All information contained herein is obtained by ICRA Analytics Limited from sources believed by it to be accurate and reliable. Because of the possibility of human or mechanical error as well as other factors, however, all information contained herein is provided 'AS IS' without warranty of any kind. ICRA Analytics adopts all necessary measures so that the information it uses is of sufficient quality and from sources ICRA Analytics considers to be reliable including, when appropriate, independent third-party sources. However, ICRA Analytics is not an auditor and cannot in every instance independently verify or validate information received in preparing this document." +
            //        "All information contained herein must be construed solely as statements of opinion, and  ICRA Analytics Limited or its affiliates or group companies and its respective and any of its officers, directors, personnel and employees, disclaim liability to any loss, damage of any nature, including but not limited to direct, indirect, punitive, special, exemplary, consequential, as also any loss of profit in any way arising from the use of this document or its contents in any manner or for any contingency within or beyond the control of, ICRA Analytics or any of its directors, officers, employees, agents, representatives, licensors or suppliers, arising from or in connection with the information contained herein or the use of or inability to use any such information.Opinions expressed in the document are not the opinions of our holding company, ICRA Limited(ICRA), and should not be construed as any indication of credit rating or grading of ICRA for any instruments that have been issued or are to be issued by any entity.The recipient alone shall be fully responsible and / or are liable for any decision taken on the basis of this document and / or the information contained herein.");
            //    Cell.CellStyle = declationstyle;

            //}
            //NPOIWrite.CellMerged(sheetTwo, 4, 4, 0, 17);
            //sheetTwo.GetRow(4).HeightInPoints = 200;
            //#endregion

            //#region Disclaimer Sheet HyperLink
            //XSSFCellStyle HyperLinkStyle = (XSSFCellStyle)workbook.CreateCellStyle();
            //IFont HyperLinkFont = workbook.CreateFont();
            //HyperLinkFont.Color = IndexedColors.Orange.Index;
            //HyperLinkFont.Underline = FontUnderlineType.Single;
            //HyperLinkStyle.SetFont(HyperLinkFont);

            //Row = sheetTwo.CreateRow(5);
            //Cell = Row.CreateCell(0);
            //Cell.SetCellValue("Click here for third-party disclaimers");
            //XSSFCreationHelper createHelper = (XSSFCreationHelper)workbook.GetCreationHelper();
            //XSSFHyperlink link = (XSSFHyperlink)createHelper.CreateHyperlink(HyperlinkType.Url);
            //link.Address = "https://www.icraanalytics.com/home/thirdpartydisclaimers";
            //Cell.Hyperlink = link;
            //Cell.CellStyle = HyperLinkStyle;
            //#endregion

            sheet.ActiveCell = new CellAddress(0, 1);

            var stream = new MemoryStream();
            workbook.Write(stream);
            return workbook;
        }





        /// Written by Sourav Rakshit ////
        /// Export to Excel for header and sub-header ////
        public static NPOI.XSSF.UserModel.XSSFWorkbook ExportToExcelWorkBookWithNumberDecimalFormatRatingTracker(UserBasicSettings ubs, List<TableHeaderEntity> listTableHeader, List<TableSubHeaderEntity> listTableSubHeader, List<ExportEntity> listData, string LogoPath = "", string ReportName = "", string StrDateAsOn = "")
        {
            #region Variable
            string Header = ubs.Reporting_Format_Header;
            string Footer = ubs.Reporting_Format_Footer;
            string BlankData = ubs.BlankData.ToUpper() == "BLANK" ? "" : ubs.BlankData;
            string StrHeader1 = "ICRA Analytics Limited";
            string StrHeader2 = "3rd Floor, Electric Mansion,Appasaheb Marathe Marg, Prabhadevi,Mumbai - 400 025 Maharashtra, India";
            string StrHeader3 = Header; //"Mumbai, Maharashtra 400093, IN";
            string StrReportName = ReportName;
            string StrSource = "Source: Rating Tracker";
            StrDateAsOn = "Data as on " + StrDateAsOn;
            string StrReportGeneratedOn = "Report Generated on " + DateTime.Now.ToString("dd-MMM-yyyy HH:mm:ss");


            #region number and decimal variable for AUM
            var aumPaddding = new string('0', (int)ubs.AUMDecimalFormat);
            var aumDecimalFormat = "0." + aumPaddding;
            string aumNUMBERFORMAT = ubs.NumberFormat;
            var aumNumberFormat = aumNUMBERFORMAT.Replace("0", "#");
            string aumNumberDecimalFormat = aumNumberFormat + "0." + new String('0', (int)ubs.AUMDecimalFormat);
            #endregion

            #region number and decimal variable for return
            var retPaddding = new string('0', (int)ubs.ReturnDecimalFormat);
            var retDecimalFormat = "0." + retPaddding;
            string retNUMBERFORMAT = ubs.NumberFormat;
            var retNumberFormat = retNUMBERFORMAT.Replace("0", "#");
            string retNumberDecimalFormat = retNumberFormat + "0." + new String('0', (int)ubs.ReturnDecimalFormat);
            #endregion

            #region number and decimal variable for NAV
            var navPaddding = new string('0', (int)ubs.NavDecimalFormat);
            var navDecimalFormat = "0." + navPaddding;
            string navNUMBERFORMAT = ubs.NumberFormat;
            var navNumberFormat = navNUMBERFORMAT.Replace("0", "#");
            string navNumberDecimalFormat = navNumberFormat + "0." + new String('0', (int)ubs.NavDecimalFormat);
            #endregion

            #region number and decimal variable for Other
            var othPaddding = new string('0', (int)ubs.OtherDecimal);
            var othDecimalFormat = "0." + othPaddding;
            string othNUMBERFORMAT = ubs.NumberFormat;
            var othNumberFormat = othNUMBERFORMAT.Replace("0", "#");
            string othNumberDecimalFormat = othNumberFormat + "0." + new String('0', (int)ubs.OtherDecimal);
            #endregion

            #region number and decimal variable for Ratio
            var ratioPaddding = new string('0', (int)ubs.RatioDecimalFormat);
            var ratioDecimalFormat = "0." + ratioPaddding;
            string ratioNUMBERFORMAT = ubs.NumberFormat;
            var ratioNumberFormat = ratioNUMBERFORMAT.Replace("0", "#");
            string ratioNumberDecimalFormat = ratioNumberFormat + "0." + new String('0', (int)ubs.RatioDecimalFormat);
            #endregion
            #region int Format with out Decimal
            var intNumberWithoutDecimalFormat = ubs.NumberFormat.Replace("0", "#");
            #endregion

            #endregion

            NPOI.XSSF.UserModel.XSSFWorkbook workbook = new NPOI.XSSF.UserModel.XSSFWorkbook();
            ISheet sheet = workbook.CreateSheet("Output");
            //ISheet sheetTwo = workbook.CreateSheet("Disclaimer");

            #region Excel Sheet Gridlines Delete
            sheet.DisplayGridlines = false;
            //sheetTwo.DisplayGridlines = false;
            #endregion

            #region Header Freeze
            sheet.CreateFreezePane(1, 6);
            #endregion

            #region Set Font For Header1,Header2 and Header3
            XSSFCellStyle HeaderStyle = (XSSFCellStyle)workbook.CreateCellStyle();
            IFont Headerfont = workbook.CreateFont();
            Headerfont.Boldweight = (short)FontBoldWeight.Bold;
            HeaderStyle.SetFont(Headerfont);
            #endregion

            #region Set Cell Value For Header1, Header2 and Header3
            var ICRArow = sheet.CreateRow(0);
            ICRArow.CreateCell(0);
            NPOIWrite.CellMerged(sheet, 0, 0, 1, 9);
            var ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader1);
            ICRACell.CellStyle = HeaderStyle;
            ICRArow = sheet.CreateRow(1);
            ICRArow.CreateCell(0);
            NPOIWrite.CellMerged(sheet, 1, 1, 1, 9);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader2);
            ICRACell.CellStyle = HeaderStyle;
            ICRArow = sheet.CreateRow(2);
            ICRArow.CreateCell(0);
            NPOIWrite.CellMerged(sheet, 2, 2, 1, 9);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader3);
            ICRACell.CellStyle = HeaderStyle;
            ICRACell.CellStyle.Alignment = HorizontalAlignment.Center;
            ICRArow = sheet.CreateRow(3);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.CellStyle = HeaderStyle;
            ICRACell.CellStyle.Alignment = HorizontalAlignment.Center;
            NPOIWrite.AutoFitColumn(sheet, 1);
            ICRACell.CellStyle = HeaderStyle;
            #endregion

            #region Report Name
            ICRArow = sheet.CreateRow(3);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrReportName);
            HeaderStyle.Alignment = HorizontalAlignment.Left;
            ICRACell.CellStyle = HeaderStyle;
            #endregion

            #region Header creation in the Excel
            var headerRow = sheet.CreateRow(4);
            sheet.GetRow(4).HeightInPoints = 30;
            var headerlistFinal = listTableHeader.OrderBy(x => x.Position).ToList();
            var cellincr = 0;
            for (int i = 0; i < headerlistFinal.Count; i++)
            {
                int colspan = headerlistFinal[i].Colspan;
                if (colspan > 1)
                {
                    for (int k = 0; k < colspan; k++)
                    {
                        var cell = headerRow.CreateCell(cellincr + k);
                        cell.SetCellValue(headerlistFinal[i].ColumnName);
                        NPOIWrite.AutoFitColumn(sheet, cellincr);

                        #region Added by Subrata on 21 Feb 2018
                        XSSFCellStyle style = (XSSFCellStyle)workbook.CreateCellStyle();
                        XSSFColor colorToFill = new XSSFColor(new byte[] { 68, 114, 196 });// { 51, 204, 204 });//Color.Blue);
                        style.SetFillForegroundColor(colorToFill);
                        IFont font = workbook.CreateFont();
                        font.Color = IndexedColors.White.Index;
                        font.Boldweight = (short)FontBoldWeight.Bold;
                        style.SetFont(font);
                        style.FillPattern = FillPattern.SolidForeground;
                        style.Alignment = HorizontalAlignment.Center;
                        style.VerticalAlignment = VerticalAlignment.Center;
                        style.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                        style.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                        style.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                        style.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                        #endregion

                        cell.CellStyle = style;
                    }
                    NPOIWrite.CellMerged(sheet, 4, 4, cellincr, cellincr + colspan - 1);
                    cellincr = cellincr + colspan;
                }
                else
                {
                    var cell = headerRow.CreateCell(cellincr);
                    cell.SetCellValue(headerlistFinal[i].ColumnName);
                    NPOIWrite.AutoFitColumn(sheet, cellincr);
                    cellincr = cellincr + colspan;

                    #region Added by Subrata on 21 Feb 2018
                    XSSFCellStyle style = (XSSFCellStyle)workbook.CreateCellStyle();
                    XSSFColor colorToFill = new XSSFColor(new byte[] { 68, 114, 196 });// { 51, 204, 204 });// Color.Blue);
                    style.SetFillForegroundColor(colorToFill);
                    IFont font = workbook.CreateFont();
                    font.Color = IndexedColors.White.Index;
                    font.Boldweight = (short)FontBoldWeight.Bold;
                    style.SetFont(font);
                    style.FillPattern = FillPattern.SolidForeground;
                    if (i > 0)
                    {
                        style.Alignment = HorizontalAlignment.Center;
                        style.VerticalAlignment = VerticalAlignment.Center;
                    }
                    else
                    {
                        style.Alignment = HorizontalAlignment.Left;
                        style.VerticalAlignment = VerticalAlignment.Center;
                    }
                    style.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                    style.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                    style.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                    style.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                    #endregion

                    cell.CellStyle = style;
                }
            }
            #endregion

            #region Sub Header creation in the Excel
            var subHeaderRow = sheet.CreateRow(5);
            sheet.GetRow(5).HeightInPoints = 30;
            var subHeaderlistFinal = listTableSubHeader.OrderBy(x => x.Position).ToList();
            for (int i = 0; i < subHeaderlistFinal.Count; i++)
            {
                int index = headerlistFinal.FindIndex(x => x.ColumnName.Equals(subHeaderlistFinal[i].ColumnName));
                if (index >= 0)
                {
                    var cell = subHeaderRow.CreateCell(i);

                    #region Added by Subrata on 21 Feb 2018
                    XSSFCellStyle style = (XSSFCellStyle)workbook.CreateCellStyle();
                    XSSFColor colorToFill = new XSSFColor(new byte[] { 68, 114, 196 });// Color.Blue);
                    style.SetFillForegroundColor(colorToFill);
                    IFont font = workbook.CreateFont();
                    font.Color = IndexedColors.White.Index;
                    font.Boldweight = (short)FontBoldWeight.Bold;
                    style.SetFont(font);
                    style.FillPattern = FillPattern.SolidForeground;
                    style.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                    style.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                    style.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                    style.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                    if (i > 0)
                    {
                        style.Alignment = HorizontalAlignment.Center;
                        style.VerticalAlignment = VerticalAlignment.Center;
                    }
                    else
                    {
                        style.Alignment = HorizontalAlignment.Left;
                        style.VerticalAlignment = VerticalAlignment.Center;
                    }
                    #endregion

                    cell.CellStyle = style;
                }
                else
                {
                    var cell = subHeaderRow.CreateCell(i);
                    cell.SetCellValue(subHeaderlistFinal[i].ColumnName);
                    NPOIWrite.AutoFitColumn(sheet, i);

                    #region Added by Subrata on 21 Feb 2018
                    XSSFCellStyle style = (XSSFCellStyle)workbook.CreateCellStyle();
                    XSSFColor colorToFill = new XSSFColor(new byte[] { 68, 114, 196 });// Color.Blue);
                    style.SetFillForegroundColor(colorToFill);
                    IFont font = workbook.CreateFont();
                    font.Color = IndexedColors.White.Index;
                    font.Boldweight = (short)FontBoldWeight.Bold;
                    style.SetFont(font);
                    style.FillPattern = FillPattern.SolidForeground;
                    style.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                    style.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                    style.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                    style.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                    if (i > 0)
                    {
                        style.Alignment = HorizontalAlignment.Center;
                        style.VerticalAlignment = VerticalAlignment.Center;
                    }
                    else
                    {
                        style.Alignment = HorizontalAlignment.Left;
                        style.VerticalAlignment = VerticalAlignment.Center;
                    }
                    #endregion

                    cell.CellStyle = style;
                }
            }
            #endregion

            #region Cell Style For Even Row

            #region Without DecimalFormat
            XSSFCellStyle AllCellStyleEven = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleEven.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillEven = new XSSFColor(new byte[] { 176, 196, 222 });
            AllCellStyleEven.SetFillForegroundColor(colorToFillEven);
            AllCellStyleEven.FillPattern = FillPattern.SolidForeground;
            AllCellStyleEven.Alignment = HorizontalAlignment.Center;
            AllCellStyleEven.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat AUM
            XSSFCellStyle aumAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor aumcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            aumAllCellStyleEvenDecFrmt.SetFillForegroundColor(aumcolorToFillEvenWtoutDec);
            aumAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat aumformatEven = workbook.CreateDataFormat();
            aumAllCellStyleEvenDecFrmt.DataFormat = aumformatEven.GetFormat(aumDecimalFormat);
            aumAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            /// Number Format ////
            XSSFCellStyle aumAllCellStyleEvenDecFrmtWNum = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleEvenDecFrmtWNum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmtWNum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmtWNum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmtWNum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor aumcolorToFillEvenWtoutDecWNum = new XSSFColor(new byte[] { 176, 196, 222 });
            aumAllCellStyleEvenDecFrmtWNum.SetFillForegroundColor(aumcolorToFillEvenWtoutDecWNum);
            aumAllCellStyleEvenDecFrmtWNum.FillPattern = FillPattern.SolidForeground;
            IDataFormat aumformatEvenWNum = workbook.CreateDataFormat();
            aumAllCellStyleEvenDecFrmtWNum.DataFormat = aumformatEvenWNum.GetFormat(aumNumberDecimalFormat);
            aumAllCellStyleEvenDecFrmtWNum.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleEvenDecFrmtWNum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Return
            XSSFCellStyle retAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            retAllCellStyleEvenDecFrmt.SetFillForegroundColor(retcolorToFillEvenWtoutDec);
            retAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatEven = workbook.CreateDataFormat();
            retAllCellStyleEvenDecFrmt.DataFormat = retformatEven.GetFormat(retDecimalFormat);
            retAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            retAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;


            ////Number Format ////
            XSSFCellStyle retAllCellStyleEvenDecFrmtWnum = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleEvenDecFrmtWnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmtWnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmtWnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmtWnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillEvenWtoutDecWnum = new XSSFColor(new byte[] { 176, 196, 222 });
            retAllCellStyleEvenDecFrmtWnum.SetFillForegroundColor(retcolorToFillEvenWtoutDecWnum);
            retAllCellStyleEvenDecFrmtWnum.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatEvenWnum = workbook.CreateDataFormat();
            retAllCellStyleEvenDecFrmtWnum.DataFormat = retformatEvenWnum.GetFormat(retNumberDecimalFormat);
            retAllCellStyleEvenDecFrmtWnum.Alignment = HorizontalAlignment.Center;
            retAllCellStyleEvenDecFrmtWnum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Nav
            XSSFCellStyle navAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor navcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            navAllCellStyleEvenDecFrmt.SetFillForegroundColor(navcolorToFillEvenWtoutDec);
            navAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat navformatEven = workbook.CreateDataFormat();
            navAllCellStyleEvenDecFrmt.DataFormat = navformatEven.GetFormat(navDecimalFormat);
            navAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            navAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;


            /// Number Format ////
            XSSFCellStyle navAllCellStyleEvenDecFrmtWnnum = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleEvenDecFrmtWnnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmtWnnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmtWnnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmtWnnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor navcolorToFillEvenWtoutDecWnnum = new XSSFColor(new byte[] { 176, 196, 222 });
            navAllCellStyleEvenDecFrmtWnnum.SetFillForegroundColor(navcolorToFillEvenWtoutDecWnnum);
            navAllCellStyleEvenDecFrmtWnnum.FillPattern = FillPattern.SolidForeground;
            IDataFormat navformatEvenWnnum = workbook.CreateDataFormat();
            navAllCellStyleEvenDecFrmtWnnum.DataFormat = navformatEvenWnnum.GetFormat(navNumberDecimalFormat);
            navAllCellStyleEvenDecFrmtWnnum.Alignment = HorizontalAlignment.Center;
            navAllCellStyleEvenDecFrmtWnnum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Other
            XSSFCellStyle otherAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            otherAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othercolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            otherAllCellStyleEvenDecFrmt.SetFillForegroundColor(othercolorToFillEvenWtoutDec);
            otherAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat otherformatEven = workbook.CreateDataFormat();
            otherAllCellStyleEvenDecFrmt.DataFormat = otherformatEven.GetFormat(othDecimalFormat);
            otherAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            otherAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            /// Number Format ///
            XSSFCellStyle otherAllCellStyleEvenDecFrmtWnum = (XSSFCellStyle)workbook.CreateCellStyle();
            otherAllCellStyleEvenDecFrmtWnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmtWnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmtWnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmtWnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othercolorToFillEvenWtoutDecWnum = new XSSFColor(new byte[] { 176, 196, 222 });
            otherAllCellStyleEvenDecFrmtWnum.SetFillForegroundColor(othercolorToFillEvenWtoutDecWnum);
            otherAllCellStyleEvenDecFrmtWnum.FillPattern = FillPattern.SolidForeground;
            IDataFormat otherformatEvenWnum = workbook.CreateDataFormat();
            otherAllCellStyleEvenDecFrmtWnum.DataFormat = otherformatEvenWnum.GetFormat(othNumberDecimalFormat);
            otherAllCellStyleEvenDecFrmtWnum.Alignment = HorizontalAlignment.Center;
            otherAllCellStyleEvenDecFrmtWnum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Ratio
            XSSFCellStyle ratAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor ratcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            ratAllCellStyleEvenDecFrmt.SetFillForegroundColor(ratcolorToFillEvenWtoutDec);
            ratAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat ratformatEven = workbook.CreateDataFormat();
            ratAllCellStyleEvenDecFrmt.DataFormat = ratformatEven.GetFormat(ratioDecimalFormat);
            ratAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle ratAllCellStyleEvenDecFrmtWth = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleEvenDecFrmtWth.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmtWth.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmtWth.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmtWth.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor ratcolorToFillEvenWtoutDecwth = new XSSFColor(new byte[] { 176, 196, 222 });
            ratAllCellStyleEvenDecFrmtWth.SetFillForegroundColor(ratcolorToFillEvenWtoutDecwth);
            ratAllCellStyleEvenDecFrmtWth.FillPattern = FillPattern.SolidForeground;
            IDataFormat ratformatEvenWth = workbook.CreateDataFormat();
            ratAllCellStyleEvenDecFrmtWth.DataFormat = ratformatEvenWth.GetFormat(ratioNumberDecimalFormat);
            ratAllCellStyleEvenDecFrmtWth.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleEvenDecFrmtWth.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #endregion

            #region Cell Style For Odd Row

            #region With Decimal Format AUM
            XSSFCellStyle aumAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor AUMcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            aumAllCellStyleOddDec.SetFillForegroundColor(AUMcolorToFillOddDec);
            aumAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat AUMformatOddDec = workbook.CreateDataFormat();
            aumAllCellStyleOddDec.DataFormat = AUMformatOddDec.GetFormat(aumDecimalFormat);
            aumAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle aumAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor AUMcolorToFillOddDecWnf = new XSSFColor(new byte[] { 255, 255, 255 });
            aumAllCellStyleOddDecWnuf.SetFillForegroundColor(AUMcolorToFillOddDecWnf);
            aumAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat AUMformatOddDecWnuf = workbook.CreateDataFormat();
            aumAllCellStyleOddDecWnuf.DataFormat = AUMformatOddDecWnuf.GetFormat(aumNumberDecimalFormat);
            aumAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With Decimal Format Return
            XSSFCellStyle retAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor RETcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            retAllCellStyleOddDec.SetFillForegroundColor(RETcolorToFillOddDec);
            retAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat RETformatOddDec = workbook.CreateDataFormat();
            retAllCellStyleOddDec.DataFormat = RETformatOddDec.GetFormat(retDecimalFormat);
            retAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            retAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle retAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor RETcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            retAllCellStyleOddDecWnuf.SetFillForegroundColor(RETcolorToFillOddDecWnuf);
            retAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat RETformatOddDecWnuf = workbook.CreateDataFormat();
            retAllCellStyleOddDecWnuf.DataFormat = RETformatOddDecWnuf.GetFormat(retNumberDecimalFormat);
            retAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            retAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With Decimal Format Nav
            XSSFCellStyle navAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor naVcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            navAllCellStyleOddDec.SetFillForegroundColor(naVcolorToFillOddDec);
            navAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat naVformatOddDec = workbook.CreateDataFormat();
            navAllCellStyleOddDec.DataFormat = naVformatOddDec.GetFormat(navDecimalFormat);
            navAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            navAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            XSSFCellStyle navAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor naVcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            navAllCellStyleOddDecWnuf.SetFillForegroundColor(naVcolorToFillOddDecWnuf);
            navAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat naVformatOddDecWnuf = workbook.CreateDataFormat();
            navAllCellStyleOddDecWnuf.DataFormat = naVformatOddDecWnuf.GetFormat(navNumberDecimalFormat);
            navAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            navAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion


            #region With Decimal Format Other
            XSSFCellStyle othAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            othAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            othAllCellStyleOddDec.SetFillForegroundColor(othcolorToFillOddDec);
            othAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat othformatOddDec = workbook.CreateDataFormat();
            othAllCellStyleOddDec.DataFormat = othformatOddDec.GetFormat(othDecimalFormat);
            othAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            othAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            XSSFCellStyle othAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            othAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            othAllCellStyleOddDecWnuf.SetFillForegroundColor(othcolorToFillOddDecWnuf);
            othAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat othformatOddDecWnuf = workbook.CreateDataFormat();
            othAllCellStyleOddDecWnuf.DataFormat = othformatOddDecWnuf.GetFormat(othNumberDecimalFormat);
            othAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            othAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion


            #region With Decimal Format ratio
            XSSFCellStyle ratAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            ratAllCellStyleOddDec.SetFillForegroundColor(retcolorToFillOddDec);
            ratAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatOddDec = workbook.CreateDataFormat();
            ratAllCellStyleOddDec.DataFormat = retformatOddDec.GetFormat(ratioDecimalFormat);
            ratAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            XSSFCellStyle ratAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            ratAllCellStyleOddDecWnuf.SetFillForegroundColor(retcolorToFillOddDecWnuf);
            ratAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatOddDecWnuf = workbook.CreateDataFormat();
            ratAllCellStyleOddDecWnuf.DataFormat = retformatOddDecWnuf.GetFormat(ratioNumberDecimalFormat);
            ratAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion



            #region Without Decimal Format
            XSSFCellStyle AllCellStyleOdd = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleOdd.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillOdd = new XSSFColor(new byte[] { 255, 255, 255 });
            AllCellStyleOdd.SetFillForegroundColor(colorToFillOdd);
            AllCellStyleOdd.FillPattern = FillPattern.SolidForeground;
            AllCellStyleOdd.Alignment = HorizontalAlignment.Center;
            AllCellStyleOdd.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #endregion

            #region Cell Style For First Column Even Row
            XSSFCellStyle AllCellStyleFstColmEven = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleFstColmEven.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillFstClmnEven = new XSSFColor(new byte[] { 176, 196, 222 });
            AllCellStyleFstColmEven.SetFillForegroundColor(colorToFillFstClmnEven);
            AllCellStyleFstColmEven.FillPattern = FillPattern.SolidForeground;
            AllCellStyleFstColmEven.Alignment = HorizontalAlignment.Left;
            AllCellStyleFstColmEven.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region Cell Style For First Column Odd Row
            XSSFCellStyle AllCellStyleFstColmOdd = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleFstColmOdd.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillFstClmnOdd = new XSSFColor(new byte[] { 255, 255, 255 });
            AllCellStyleFstColmOdd.SetFillForegroundColor(colorToFillFstClmnOdd);
            AllCellStyleFstColmOdd.FillPattern = FillPattern.SolidForeground;
            AllCellStyleFstColmOdd.Alignment = HorizontalAlignment.Left;
            AllCellStyleFstColmOdd.VerticalAlignment = VerticalAlignment.Center;
            #endregion
            #region Without Decimal Number Format Even Row
            XSSFCellStyle intAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            intAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            intAllCellStyleEvenDecFrmt.SetFillForegroundColor(intcolorToFillEvenWtoutDec);
            intAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat intformatEven = workbook.CreateDataFormat();
            intAllCellStyleEvenDecFrmt.DataFormat = intformatEven.GetFormat(intNumberWithoutDecimalFormat);
            intAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            intAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle intSimpleAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            intSimpleAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intSimplecolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            intSimpleAllCellStyleEvenDecFrmt.SetFillForegroundColor(intSimplecolorToFillEvenWtoutDec);
            intSimpleAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            intSimpleAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            intSimpleAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;
            #endregion
            #region Without Decimal Number Format Odd Row
            XSSFCellStyle intAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            intAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            intAllCellStyleOddDec.SetFillForegroundColor(intcolorToFillOddDec);
            intAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat intformatOddDec = workbook.CreateDataFormat();
            intAllCellStyleOddDec.DataFormat = intformatOddDec.GetFormat(intNumberWithoutDecimalFormat);
            intAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            intAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle intSimpleAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            intSimpleAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intSimplecolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            intSimpleAllCellStyleOddDec.SetFillForegroundColor(intSimplecolorToFillOddDec);
            intSimpleAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            intSimpleAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            intSimpleAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region Value added to the Excel

            int incr = 6;
            bool isNumeric = false;

            #region Added by Subrata on 22 Feb 2018
            bool IsNumericKey = false;
            bool IsNumericValue = false;
            var AllListData = listData.SelectMany(x => x.LstKeyValuePair).ToArray();
            var AllDataKey = AllListData.Select(x => x.Key).Distinct().ToArray();
            int ValueRes;
            IsNumericKey = int.TryParse(AllDataKey[0], out ValueRes);

            #endregion

            foreach (var item in listData)
            {
                if (item.LstKeyValuePair.Count() > 0)
                {
                    int value;
                    isNumeric = int.TryParse(item.LstKeyValuePair[0].Key, out value);
                }


                var dataRow = sheet.CreateRow(incr);
                sheet.GetRow(incr).HeightInPoints = 20;
                if (isNumeric == true)
                {
                    var cellValues = (from i in item.LstKeyValuePair
                                      from j in listTableSubHeader
                                      where i.Key.ToString() == j.Position.ToString()
                                      orderby j.Position
                                      select new
                                      {
                                          IsNum = j.IsNumberFormatReq,
                                          DecType = j.DecFormatType,
                                          IsMixedType = j.IsMixedValueType,
                                          Value = i.Value
                                      }).ToArray();

                    for (int k = 0; k < cellValues.Length; k++)
                    {
                        var datacell = dataRow.CreateCell(k);
                        if (cellValues[k].DecType != DecimalFormatType.NoDecimalReq)
                        {
                            double OutVal;
                            if (cellValues[k].Value == "" || cellValues[k].Value == null || cellValues[k].Value == BlankData || !double.TryParse(cellValues[k].Value, out OutVal))
                            {
                                if (k > 0)
                                {
                                    datacell.SetCellValue(cellValues[k].Value);
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;
                                }
                                else
                                {
                                    datacell.SetCellValue(cellValues[k].Value);
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }

                            }
                            else
                            {
                                if (k > 0)
                                {
                                    datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                                    //if (incr % 2 == 0)
                                    //    datacell.CellStyle = AllCellStyleEven;
                                    //else
                                    //    datacell.CellStyle = AllCellStyleOdd;
                                    if (cellValues[k].DecType == DecimalFormatType.AUM)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {

                                                datacell.CellStyle = aumAllCellStyleEvenDecFrmtWNum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = aumAllCellStyleEvenDecFrmt;
                                            }
                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = aumAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = aumAllCellStyleOddDec;
                                            }
                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.NAV)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = navAllCellStyleEvenDecFrmtWnnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = navAllCellStyleEvenDecFrmt;
                                            }
                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = navAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = navAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.OTHER)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = otherAllCellStyleEvenDecFrmtWnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = otherAllCellStyleEvenDecFrmt;
                                            }
                                        }

                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = othAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {

                                                datacell.CellStyle = othAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.RATIO)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = ratAllCellStyleEvenDecFrmtWth;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = ratAllCellStyleEvenDecFrmt;
                                            }
                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = ratAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = ratAllCellStyleOddDec;
                                            }
                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.RETURN)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = retAllCellStyleEvenDecFrmtWnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = retAllCellStyleEvenDecFrmt;
                                            }

                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = retAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = retAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.IntegerWithOutDecimal)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = intAllCellStyleEvenDecFrmt;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = intSimpleAllCellStyleEvenDecFrmt;
                                            }

                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = intAllCellStyleOddDec;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = intSimpleAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                }
                                else
                                {
                                    datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }

                            }

                        }
                        else
                        {
                            double OutVal;
                            if (double.TryParse(cellValues[k].Value, out OutVal) && !cellValues[k].IsMixedType)
                            {
                                datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                                if (k > 0)
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;

                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }
                            }
                            else
                            {
                                datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                if (k > 0)
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;

                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }
                            }



                        }
                    }
                    incr++;
                }
                else
                {
                    var cellValues = (from i in item.LstKeyValuePair
                                      from j in listTableSubHeader
                                      where i.Key == j.ColumnName
                                      orderby j.Position
                                      select new
                                      {
                                          IsNum = j.IsNumberFormatReq,
                                          DecType = j.DecFormatType,
                                          Value = i.Value
                                      }).ToArray();

                    for (int k = 0; k < cellValues.Length; k++)
                    {
                        var datacell = dataRow.CreateCell(k);
                        if (cellValues[k].DecType != DecimalFormatType.NoDecimalReq)
                        {
                            double OutVal;
                            if (cellValues[k].Value == "" || cellValues[k].Value == null || cellValues[k].Value == BlankData || !double.TryParse(cellValues[k].Value, out OutVal))
                            {
                                if (k > 0)
                                {
                                    datacell.SetCellValue(cellValues[k].Value);
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;
                                }
                                else
                                {
                                    datacell.SetCellValue(cellValues[k].Value);
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;

                                }

                            }
                            else
                            {
                                if (k > 0)
                                {
                                    datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                                    if (cellValues[k].DecType == DecimalFormatType.AUM)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {

                                                datacell.CellStyle = aumAllCellStyleEvenDecFrmtWNum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = aumAllCellStyleEvenDecFrmt;
                                            }
                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = aumAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = aumAllCellStyleOddDec;
                                            }
                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.NAV)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = navAllCellStyleEvenDecFrmtWnnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = navAllCellStyleEvenDecFrmt;
                                            }
                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = navAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = navAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.OTHER)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = otherAllCellStyleEvenDecFrmtWnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = otherAllCellStyleEvenDecFrmt;
                                            }
                                        }

                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = othAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {

                                                datacell.CellStyle = othAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.RATIO)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = ratAllCellStyleEvenDecFrmtWth;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = ratAllCellStyleEvenDecFrmt;
                                            }
                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = ratAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = ratAllCellStyleOddDec;
                                            }
                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.RETURN)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = retAllCellStyleEvenDecFrmtWnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = retAllCellStyleEvenDecFrmt;
                                            }

                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = retAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = retAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.IntegerWithOutDecimal)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = intAllCellStyleEvenDecFrmt;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = intSimpleAllCellStyleEvenDecFrmt;
                                            }

                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = intAllCellStyleOddDec;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = intSimpleAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                }
                                else
                                {
                                    datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }

                            }

                        }
                        else
                        {


                            double OutVal;
                            if (double.TryParse(cellValues[k].Value, out OutVal))
                            {
                                datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                                if (k > 0)
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;

                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }
                            }
                            else
                            {
                                datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                if (k > 0)
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;

                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }
                            }

                        }
                    }
                    incr++;
                }
            }
            #endregion

            for (int i = 0; i < listTableSubHeader.Count; i++)
                sheet.AutoSizeColumn(i);
            if (sheet.GetColumnWidth(0) < 11072)
                sheet.SetColumnWidth(0, 11072);

            #region Logo
            try
            {
                if (!string.IsNullOrEmpty(LogoPath))
                {
                    XSSFDrawing patriarch = (XSSFDrawing)sheet.CreateDrawingPatriarch();
                    XSSFClientAnchor anchor;
                    anchor = new XSSFClientAnchor(0, 0, 0, 255, 0, 0, 0, 3);
                    anchor.AnchorType = AnchorType.DontMoveAndResize;
                    XSSFPicture picture = (XSSFPicture)patriarch.CreatePicture(anchor, LoadImage(LogoPath, workbook, PictureType.PNG));
                    double x1 = .25;
                    double y1 = .75;
                    picture.Resize(x1, y1);
                    picture.LineStyle = LineStyle.None;
                }
            }
            catch (Exception ex)
            {
            }

            #endregion

            #region Source, Date As On and Report Generated On
            ICRArow = sheet.CreateRow(incr + 3);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrSource);

            ICRArow = sheet.CreateRow(incr + 4);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrDateAsOn);

            ICRArow = sheet.CreateRow(incr + 5);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrReportGeneratedOn);
            #endregion

            #region Sheet Two Logo
            try
            {
                //if (!string.IsNullOrEmpty(LogoPath))
                //{
                //    XSSFDrawing patriarch = (XSSFDrawing)sheetTwo.CreateDrawingPatriarch();
                //    XSSFClientAnchor anchor;
                //    anchor = new XSSFClientAnchor(0, 0, 0, 255, 0, 0, 0, 3);
                //    anchor.AnchorType = AnchorType.DontMoveAndResize;
                //    XSSFPicture picture = (XSSFPicture)patriarch.CreatePicture(anchor, LoadImage(LogoPath, workbook, PictureType.PNG));
                //    double x1 = 1.10;
                //    double y1 = 1.10;
                //    picture.Resize(x1, y1);
                //    picture.LineStyle = LineStyle.None;
                //}
            }
            catch (Exception ex)
            {
            }
            #endregion

            //#region Disclaimer Sheet
            //var Row = sheetTwo.CreateRow(1);
            //var cellSheetTwo = Row.CreateCell(7);
            //cellSheetTwo.SetCellValue("ICRA Analytics Limited");
            //cellSheetTwo.CellStyle = HeaderStyle;

            //Row = sheetTwo.CreateRow(4);
            //ICell Cell;
            //for (int i = 0; i < listTableSubHeader.Count; i++)
            //{
            //    Cell = Row.CreateCell(i);

            //    XSSFCellStyle declationstyle = (XSSFCellStyle)workbook.CreateCellStyle();

            //    declationstyle.Alignment = HorizontalAlignment.Left;
            //    declationstyle.VerticalAlignment = VerticalAlignment.Top;
            //    declationstyle.WrapText = true;
            //    IFont declarationfnt = (XSSFFont)workbook.CreateFont();
            //    declarationfnt.FontName = "Calibri";
            //    declarationfnt.FontHeightInPoints = (short)11;
            //    declationstyle.SetFont(declarationfnt);
            //    Cell.SetCellValue(!string.IsNullOrEmpty(Footer) ? Footer : "All information contained herein is obtained by ICRA Analytics Limited from sources believed by it to be accurate and reliable. Because of the possibility of human or mechanical error as well as other factors, however, all information contained herein is provided 'AS IS' without warranty of any kind. ICRA Analytics adopts all necessary measures so that the information it uses is of sufficient quality and from sources ICRA Analytics considers to be reliable including, when appropriate, independent third-party sources. However, ICRA Analytics is not an auditor and cannot in every instance independently verify or validate information received in preparing this document." +
            //        "All information contained herein must be construed solely as statements of opinion, and  ICRA Analytics Limited or its affiliates or group companies and its respective and any of its officers, directors, personnel and employees, disclaim liability to any loss, damage of any nature, including but not limited to direct, indirect, punitive, special, exemplary, consequential, as also any loss of profit in any way arising from the use of this document or its contents in any manner or for any contingency within or beyond the control of, ICRA Analytics or any of its directors, officers, employees, agents, representatives, licensors or suppliers, arising from or in connection with the information contained herein or the use of or inability to use any such information.Opinions expressed in the document are not the opinions of our holding company, ICRA Limited(ICRA), and should not be construed as any indication of credit rating or grading of ICRA for any instruments that have been issued or are to be issued by any entity.The recipient alone shall be fully responsible and / or are liable for any decision taken on the basis of this document and / or the information contained herein.");
            //    Cell.CellStyle = declationstyle;

            //}
            //NPOIWrite.CellMerged(sheetTwo, 4, 4, 0, 17);
            //sheetTwo.GetRow(4).HeightInPoints = 200;
            //#endregion

            //#region Disclaimer Sheet HyperLink
            //XSSFCellStyle HyperLinkStyle = (XSSFCellStyle)workbook.CreateCellStyle();
            //IFont HyperLinkFont = workbook.CreateFont();
            //HyperLinkFont.Color = IndexedColors.Orange.Index;
            //HyperLinkFont.Underline = FontUnderlineType.Single;
            //HyperLinkStyle.SetFont(HyperLinkFont);

            //Row = sheetTwo.CreateRow(5);
            //Cell = Row.CreateCell(0);
            //Cell.SetCellValue("Click here for third-party disclaimers");
            //XSSFCreationHelper createHelper = (XSSFCreationHelper)workbook.GetCreationHelper();
            //XSSFHyperlink link = (XSSFHyperlink)createHelper.CreateHyperlink(HyperlinkType.Url);
            //link.Address = "https://www.icraanalytics.com/home/thirdpartydisclaimers";
            //Cell.Hyperlink = link;
            //Cell.CellStyle = HyperLinkStyle;
            //#endregion

            sheet.ActiveCell = new CellAddress(0, 1);

            var stream = new MemoryStream();
            workbook.Write(stream);
            return workbook;
        }

        public static NPOI.XSSF.UserModel.XSSFWorkbook ExportToExcelWorkBookWithNumberDecimalFormatFI(UserBasicSettings ubs, List<TableHeaderEntity> listTableHeader, List<ExportEntity> listData, string LogoPath = "", string ReportName = "", string StrDateAsOn = "", bool IsCustomizedDateAsOn = false)
        {

            #region Variable
            string Header = ubs.Reporting_Format_Header;
            string Footer = ubs.Reporting_Format_Footer;
            string BlankData = ubs.BlankData.ToUpper() == "BLANK" ? "" : ubs.BlankData;

            string StrHeader1 = "ICRA Analytics Limited";
            string StrHeader2 = "3rd Floor, Electric Mansion,Appasaheb Marathe Marg, Prabhadevi,Mumbai - 400 025 Maharashtra, India";
            string StrHeader3 = Header; //"Mumbai, Maharashtra 400093, IN";
            string StrReportName = ReportName;
            string StrSource = "Source: FI Report";
            StrDateAsOn = !IsCustomizedDateAsOn ? "Data as on " + StrDateAsOn : StrDateAsOn;
            string StrReportGeneratedOn = "Report Generated on " + DateTime.Now.ToString("dd-MMM-yyyy HH:mm:ss");
            string StrRatingnote = "Current rating represents conservative rating of the isin";
            #region number and decimal variable for AUM
            var aumPaddding = new string('0', (int)ubs.AUMDecimalFormat);
            var aumDecimalFormat = "0." + aumPaddding;
            string aumNUMBERFORMAT = ubs.NumberFormat;
            var aumNumberFormat = aumNUMBERFORMAT.Replace("0", "#");
            string aumNumberDecimalFormat = aumNumberFormat + "0." + new String('0', (int)ubs.AUMDecimalFormat);
            #endregion

            #region number and decimal variable for return
            var retPaddding = new string('0', (int)ubs.ReturnDecimalFormat);
            var retDecimalFormat = "0." + retPaddding;
            string retNUMBERFORMAT = ubs.NumberFormat;
            var retNumberFormat = retNUMBERFORMAT.Replace("0", "#");
            string retNumberDecimalFormat = retNumberFormat + "0." + new String('0', (int)ubs.ReturnDecimalFormat);
            #endregion

            #region number and decimal variable for NAV
            var navPaddding = new string('0', (int)ubs.NavDecimalFormat);
            var navDecimalFormat = "0." + navPaddding;
            string navNUMBERFORMAT = ubs.NumberFormat;
            var navNumberFormat = navNUMBERFORMAT.Replace("0", "#");
            string navNumberDecimalFormat = navNumberFormat + "0." + new String('0', (int)ubs.NavDecimalFormat);
            #endregion
            #region DateTime Format
            var DateTimeFormat = ubs.DateFormat;
            #endregion

            #region number and decimal variable for Other
            var othPaddding = new string('0', (int)ubs.OtherDecimal);
            var othDecimalFormat = "0." + othPaddding;
            string othNUMBERFORMAT = ubs.NumberFormat;
            var othNumberFormat = othNUMBERFORMAT.Replace("0", "#");
            string othNumberDecimalFormat = othNumberFormat + "0." + new String('0', (int)ubs.OtherDecimal);
            #endregion

            #region number and decimal variable for Ratio
            var ratioPaddding = new string('0', (int)ubs.RatioDecimalFormat);
            var ratioDecimalFormat = "0." + ratioPaddding;
            string ratioNUMBERFORMAT = ubs.NumberFormat;
            var ratioNumberFormat = ratioNUMBERFORMAT.Replace("0", "#");
            string ratioNumberDecimalFormat = ratioNumberFormat + "0." + new String('0', (int)ubs.RatioDecimalFormat);
            #endregion
            #region int Format with out Decimal
            var intNumberWithoutDecimalFormat = ubs.NumberFormat.Replace("0", "#");
            #endregion
            #endregion

            NPOI.XSSF.UserModel.XSSFWorkbook workbook = new NPOI.XSSF.UserModel.XSSFWorkbook();

            ISheet sheet = workbook.CreateSheet("Output");
            sheet.SetZoom(4, 5);
            ISheet sheetTwo = workbook.CreateSheet("Disclaimer");

            #region Excel Sheet Gridlines Delete
            sheet.DisplayGridlines = false;
            sheetTwo.DisplayGridlines = false;
            #endregion

            #region Header Freeze
            sheet.CreateFreezePane(1, 6);
            #endregion

            #region Set Font For Header1,Header2 and Header3
            XSSFCellStyle HeaderStyle = (XSSFCellStyle)workbook.CreateCellStyle();
            IFont Headerfont = workbook.CreateFont();
            Headerfont.Boldweight = (short)FontBoldWeight.Bold;
            HeaderStyle.SetFont(Headerfont);
            #endregion

            #region Set Cell Value For Header1, Header2 and Header3
            var ICRArow = sheet.CreateRow(0);
            ICRArow.CreateCell(0);
            NPOIWrite.CellMerged(sheet, 0, 0, 1, 9);
            var ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader1);
            ICRACell.CellStyle = HeaderStyle;
            ICRArow = sheet.CreateRow(1);
            ICRArow.CreateCell(0);
            NPOIWrite.CellMerged(sheet, 1, 1, 1, 9);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader2);
            ICRACell.CellStyle = HeaderStyle;
            ICRArow = sheet.CreateRow(2);
            ICRArow.CreateCell(0);
            NPOIWrite.CellMerged(sheet, 2, 2, 1, 9);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader3);
            ICRACell.CellStyle = HeaderStyle;
            ICRACell.CellStyle.Alignment = HorizontalAlignment.Center;
            ICRArow = sheet.CreateRow(3);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.CellStyle.Alignment = HorizontalAlignment.Center;
            NPOIWrite.AutoFitColumn(sheet, 1);
            ICRACell.CellStyle = HeaderStyle;
            #endregion

            #region Report Name
            ICRArow = sheet.CreateRow(4);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrReportName);
            HeaderStyle.Alignment = HorizontalAlignment.Left;
            ICRACell.CellStyle = HeaderStyle;
            #endregion

            #region Header creation in the Excel
            var headerRow = sheet.CreateRow(5);
            sheet.GetRow(5).HeightInPoints = 30;
            var listHeaderFinal = listTableHeader.OrderBy(x => x.Position).ToList();
            for (int i = 0; i < listHeaderFinal.Count; i++)
            {
                var cell = headerRow.CreateCell(i);
                cell.SetCellValue(listHeaderFinal[i].ColumnName);
                NPOIWrite.AutoFitColumn(sheet, i);

                #region Commented by Subrata on 21 Feb 2018
                //ICellStyle CellStyle = workbook.CreateCellStyle();
                //CellStyle = workbook.CreateCellStyle();
                //CellStyle.FillBackgroundColor = IndexedColors.Blue.Index;
                #endregion

                #region Added by Subrata on 21 Feb 2018
                XSSFCellStyle style = (XSSFCellStyle)workbook.CreateCellStyle();
                XSSFColor colorToFill = new XSSFColor(new byte[] { 68, 114, 196 });//{ 51, 204, 204 }//Color.Blue);
                style.SetFillForegroundColor(colorToFill);
                IFont font = workbook.CreateFont();
                font.Color = IndexedColors.White.Index;
                font.Boldweight = (short)FontBoldWeight.Bold;
                style.SetFont(font);
                style.FillPattern = FillPattern.SolidForeground;
                style.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                style.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                style.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                style.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                if (i > 0)
                {
                    style.Alignment = HorizontalAlignment.Center;
                    style.VerticalAlignment = VerticalAlignment.Center;
                }
                else
                {
                    style.Alignment = (string.IsNullOrEmpty(listHeaderFinal[i].TextAlign) || listHeaderFinal[i].TextAlign == EnumTextAlign.left.ToString()) ? HorizontalAlignment.Left
                        : listHeaderFinal[i].TextAlign == EnumTextAlign.center.ToString() ? HorizontalAlignment.Center : HorizontalAlignment.Right;
                    style.VerticalAlignment = VerticalAlignment.Center;
                }
                #endregion

                cell.CellStyle = style;

            }
            #endregion

            #region Cell Style For Even Row

            #region With DecimalFormat AUM
            XSSFCellStyle aumAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor aumcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 255, 255, 255 });
            aumAllCellStyleEvenDecFrmt.SetFillForegroundColor(aumcolorToFillEvenWtoutDec);
            aumAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat aumformatEven = workbook.CreateDataFormat();
            aumAllCellStyleEvenDecFrmt.DataFormat = aumformatEven.GetFormat(aumDecimalFormat);
            aumAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            /// Number Format ////
            XSSFCellStyle aumAllCellStyleEvenDecFrmtWNum = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleEvenDecFrmtWNum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmtWNum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmtWNum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmtWNum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor aumcolorToFillEvenWtoutDecWNum = new XSSFColor(new byte[] { 255, 255, 255 });
            aumAllCellStyleEvenDecFrmtWNum.SetFillForegroundColor(aumcolorToFillEvenWtoutDecWNum);
            aumAllCellStyleEvenDecFrmtWNum.FillPattern = FillPattern.SolidForeground;
            IDataFormat aumformatEvenWNum = workbook.CreateDataFormat();
            aumAllCellStyleEvenDecFrmtWNum.DataFormat = aumformatEvenWNum.GetFormat(aumNumberDecimalFormat);
            aumAllCellStyleEvenDecFrmtWNum.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleEvenDecFrmtWNum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Return
            XSSFCellStyle retAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 255, 255, 255 });
            retAllCellStyleEvenDecFrmt.SetFillForegroundColor(retcolorToFillEvenWtoutDec);
            retAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatEven = workbook.CreateDataFormat();
            retAllCellStyleEvenDecFrmt.DataFormat = retformatEven.GetFormat(retDecimalFormat);
            retAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            retAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;


            ////Number Format ////
            XSSFCellStyle retAllCellStyleEvenDecFrmtWnum = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleEvenDecFrmtWnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmtWnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmtWnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmtWnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillEvenWtoutDecWnum = new XSSFColor(new byte[] { 255, 255, 255 });
            retAllCellStyleEvenDecFrmtWnum.SetFillForegroundColor(retcolorToFillEvenWtoutDecWnum);
            retAllCellStyleEvenDecFrmtWnum.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatEvenWnum = workbook.CreateDataFormat();
            retAllCellStyleEvenDecFrmtWnum.DataFormat = retformatEvenWnum.GetFormat(retNumberDecimalFormat);
            retAllCellStyleEvenDecFrmtWnum.Alignment = HorizontalAlignment.Center;
            retAllCellStyleEvenDecFrmtWnum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Nav
            XSSFCellStyle navAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor navcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 255, 255, 255 });
            navAllCellStyleEvenDecFrmt.SetFillForegroundColor(navcolorToFillEvenWtoutDec);
            navAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat navformatEven = workbook.CreateDataFormat();
            navAllCellStyleEvenDecFrmt.DataFormat = navformatEven.GetFormat(navDecimalFormat);
            navAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            navAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;


            /// Number Format ////
            XSSFCellStyle navAllCellStyleEvenDecFrmtWnnum = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleEvenDecFrmtWnnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmtWnnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmtWnnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmtWnnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor navcolorToFillEvenWtoutDecWnnum = new XSSFColor(new byte[] { 255, 255, 255 });
            navAllCellStyleEvenDecFrmtWnnum.SetFillForegroundColor(navcolorToFillEvenWtoutDecWnnum);
            navAllCellStyleEvenDecFrmtWnnum.FillPattern = FillPattern.SolidForeground;
            IDataFormat navformatEvenWnnum = workbook.CreateDataFormat();
            navAllCellStyleEvenDecFrmtWnnum.DataFormat = navformatEvenWnnum.GetFormat(navNumberDecimalFormat);
            navAllCellStyleEvenDecFrmtWnnum.Alignment = HorizontalAlignment.Center;
            navAllCellStyleEvenDecFrmtWnnum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Other
            XSSFCellStyle otherAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            otherAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othercolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 255, 255, 255 });
            otherAllCellStyleEvenDecFrmt.SetFillForegroundColor(othercolorToFillEvenWtoutDec);
            otherAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat otherformatEven = workbook.CreateDataFormat();
            otherAllCellStyleEvenDecFrmt.DataFormat = otherformatEven.GetFormat(othDecimalFormat);
            otherAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            otherAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            /// Number Format ///
            XSSFCellStyle otherAllCellStyleEvenDecFrmtWnum = (XSSFCellStyle)workbook.CreateCellStyle();
            otherAllCellStyleEvenDecFrmtWnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmtWnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmtWnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmtWnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othercolorToFillEvenWtoutDecWnum = new XSSFColor(new byte[] { 255, 255, 255 });
            otherAllCellStyleEvenDecFrmtWnum.SetFillForegroundColor(othercolorToFillEvenWtoutDecWnum);
            otherAllCellStyleEvenDecFrmtWnum.FillPattern = FillPattern.SolidForeground;
            IDataFormat otherformatEvenWnum = workbook.CreateDataFormat();
            otherAllCellStyleEvenDecFrmtWnum.DataFormat = otherformatEvenWnum.GetFormat(othNumberDecimalFormat);
            otherAllCellStyleEvenDecFrmtWnum.Alignment = HorizontalAlignment.Center;
            otherAllCellStyleEvenDecFrmtWnum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DateTime format
            XSSFCellStyle DateTimeAllCellStyleEvenFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            DateTimeAllCellStyleEvenFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleEvenFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleEvenFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleEvenFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor DateTimecolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 255, 255, 255 });
            DateTimeAllCellStyleEvenFrmt.SetFillForegroundColor(DateTimecolorToFillEvenWtoutDec);
            DateTimeAllCellStyleEvenFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat DateTimeformatEven = workbook.CreateDataFormat();
            DateTimeAllCellStyleEvenFrmt.DataFormat = DateTimeformatEven.GetFormat(DateTimeFormat);
            DateTimeAllCellStyleEvenFrmt.Alignment = HorizontalAlignment.Center;
            DateTimeAllCellStyleEvenFrmt.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle DateTimeAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            DateTimeAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor DateTimecolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            DateTimeAllCellStyleOddDec.SetFillForegroundColor(DateTimecolorToFillOddDec);
            DateTimeAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat DateTimeformatOddDec = workbook.CreateDataFormat();
            DateTimeAllCellStyleOddDec.DataFormat = DateTimeformatOddDec.GetFormat(DateTimeFormat);
            DateTimeAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            DateTimeAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            #endregion

            #region With DecimalFormat Ratio
            XSSFCellStyle ratAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor ratcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 255, 255, 255 });
            ratAllCellStyleEvenDecFrmt.SetFillForegroundColor(ratcolorToFillEvenWtoutDec);
            ratAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat ratformatEven = workbook.CreateDataFormat();
            ratAllCellStyleEvenDecFrmt.DataFormat = ratformatEven.GetFormat(ratioDecimalFormat);
            ratAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle ratAllCellStyleEvenDecFrmtWth = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleEvenDecFrmtWth.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmtWth.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmtWth.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmtWth.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor ratcolorToFillEvenWtoutDecwth = new XSSFColor(new byte[] { 255, 255, 255 });
            ratAllCellStyleEvenDecFrmtWth.SetFillForegroundColor(ratcolorToFillEvenWtoutDecwth);
            ratAllCellStyleEvenDecFrmtWth.FillPattern = FillPattern.SolidForeground;
            IDataFormat ratformatEvenWth = workbook.CreateDataFormat();
            ratAllCellStyleEvenDecFrmtWth.DataFormat = ratformatEvenWth.GetFormat(ratioNumberDecimalFormat);
            ratAllCellStyleEvenDecFrmtWth.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleEvenDecFrmtWth.VerticalAlignment = VerticalAlignment.Center;
            #endregion


            #region No Format
            XSSFCellStyle AllCellStyleEven = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleEven.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillEven = new XSSFColor(new byte[] { 255, 255, 255 });
            AllCellStyleEven.SetFillForegroundColor(colorToFillEven);
            AllCellStyleEven.FillPattern = FillPattern.SolidForeground;
            AllCellStyleEven.Alignment = HorizontalAlignment.Center;
            AllCellStyleEven.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #endregion

            #region Cell Style For Odd Row

            #region With Decimal Format AUM
            XSSFCellStyle aumAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor AUMcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            aumAllCellStyleOddDec.SetFillForegroundColor(AUMcolorToFillOddDec);
            aumAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat AUMformatOddDec = workbook.CreateDataFormat();
            aumAllCellStyleOddDec.DataFormat = AUMformatOddDec.GetFormat(aumDecimalFormat);
            aumAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle aumAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor AUMcolorToFillOddDecWnf = new XSSFColor(new byte[] { 255, 255, 255 });
            aumAllCellStyleOddDecWnuf.SetFillForegroundColor(AUMcolorToFillOddDecWnf);
            aumAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat AUMformatOddDecWnuf = workbook.CreateDataFormat();
            aumAllCellStyleOddDecWnuf.DataFormat = AUMformatOddDecWnuf.GetFormat(aumNumberDecimalFormat);
            aumAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With Decimal Format Return
            XSSFCellStyle retAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor RETcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            retAllCellStyleOddDec.SetFillForegroundColor(RETcolorToFillOddDec);
            retAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat RETformatOddDec = workbook.CreateDataFormat();
            retAllCellStyleOddDec.DataFormat = RETformatOddDec.GetFormat(retDecimalFormat);
            retAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            retAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle retAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor RETcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            retAllCellStyleOddDecWnuf.SetFillForegroundColor(RETcolorToFillOddDecWnuf);
            retAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat RETformatOddDecWnuf = workbook.CreateDataFormat();
            retAllCellStyleOddDecWnuf.DataFormat = RETformatOddDecWnuf.GetFormat(retNumberDecimalFormat);
            retAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            retAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With Decimal Format Nav
            XSSFCellStyle navAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor naVcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            navAllCellStyleOddDec.SetFillForegroundColor(naVcolorToFillOddDec);
            navAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat naVformatOddDec = workbook.CreateDataFormat();
            navAllCellStyleOddDec.DataFormat = naVformatOddDec.GetFormat(navDecimalFormat);
            navAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            navAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            XSSFCellStyle navAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor naVcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            navAllCellStyleOddDecWnuf.SetFillForegroundColor(naVcolorToFillOddDecWnuf);
            navAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat naVformatOddDecWnuf = workbook.CreateDataFormat();
            navAllCellStyleOddDecWnuf.DataFormat = naVformatOddDecWnuf.GetFormat(navNumberDecimalFormat);
            navAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            navAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion


            #region With Decimal Format Other
            XSSFCellStyle othAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            othAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            othAllCellStyleOddDec.SetFillForegroundColor(othcolorToFillOddDec);
            othAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat othformatOddDec = workbook.CreateDataFormat();
            othAllCellStyleOddDec.DataFormat = othformatOddDec.GetFormat(othDecimalFormat);
            othAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            othAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            XSSFCellStyle othAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            othAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            othAllCellStyleOddDecWnuf.SetFillForegroundColor(othcolorToFillOddDecWnuf);
            othAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat othformatOddDecWnuf = workbook.CreateDataFormat();
            othAllCellStyleOddDecWnuf.DataFormat = othformatOddDecWnuf.GetFormat(othNumberDecimalFormat);
            othAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            othAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion


            #region With Decimal Format ratio
            XSSFCellStyle ratAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            ratAllCellStyleOddDec.SetFillForegroundColor(retcolorToFillOddDec);
            ratAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatOddDec = workbook.CreateDataFormat();
            ratAllCellStyleOddDec.DataFormat = retformatOddDec.GetFormat(ratioDecimalFormat);
            ratAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            XSSFCellStyle ratAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            ratAllCellStyleOddDecWnuf.SetFillForegroundColor(retcolorToFillOddDecWnuf);
            ratAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatOddDecWnuf = workbook.CreateDataFormat();
            ratAllCellStyleOddDecWnuf.DataFormat = retformatOddDecWnuf.GetFormat(ratioNumberDecimalFormat);
            ratAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region No Format
            XSSFCellStyle AllCellStyleOdd = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleOdd.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillOdd = new XSSFColor(new byte[] { 255, 255, 255 });
            AllCellStyleOdd.SetFillForegroundColor(colorToFillOdd);
            AllCellStyleOdd.FillPattern = FillPattern.SolidForeground;
            AllCellStyleOdd.Alignment = HorizontalAlignment.Center;
            AllCellStyleOdd.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #endregion

            #region Cell Style For First Column Even Row
            XSSFCellStyle AllCellStyleFstColmEven = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleFstColmEven.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillFstClmnEven = new XSSFColor(new byte[] { 255, 255, 255 });
            AllCellStyleFstColmEven.SetFillForegroundColor(colorToFillFstClmnEven);
            AllCellStyleFstColmEven.FillPattern = FillPattern.SolidForeground;
            AllCellStyleFstColmEven.Alignment = HorizontalAlignment.Left;
            AllCellStyleFstColmEven.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region Cell Style For First Column Odd Row
            XSSFCellStyle AllCellStyleFstColmOdd = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleFstColmOdd.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillFstClmnOdd = new XSSFColor(new byte[] { 255, 255, 255 });
            AllCellStyleFstColmOdd.SetFillForegroundColor(colorToFillFstClmnOdd);
            AllCellStyleFstColmOdd.FillPattern = FillPattern.SolidForeground;
            AllCellStyleFstColmOdd.Alignment = HorizontalAlignment.Left;
            AllCellStyleFstColmOdd.VerticalAlignment = VerticalAlignment.Center;
            #endregion
            #region Without Decimal Number Format Even Row
            XSSFCellStyle intAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            intAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 255, 255, 255 });
            intAllCellStyleEvenDecFrmt.SetFillForegroundColor(intcolorToFillEvenWtoutDec);
            intAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat intformatEven = workbook.CreateDataFormat();
            intAllCellStyleEvenDecFrmt.DataFormat = intformatEven.GetFormat(intNumberWithoutDecimalFormat);
            intAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            intAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle intSimpleAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            intSimpleAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intSimplecolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 255, 255, 255 });
            intSimpleAllCellStyleEvenDecFrmt.SetFillForegroundColor(intSimplecolorToFillEvenWtoutDec);
            intSimpleAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            intSimpleAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            intSimpleAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;
            #endregion
            #region Without Decimal Number Format Odd Row
            XSSFCellStyle intAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            intAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            intAllCellStyleOddDec.SetFillForegroundColor(intcolorToFillOddDec);
            intAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat intformatOddDec = workbook.CreateDataFormat();
            intAllCellStyleOddDec.DataFormat = intformatOddDec.GetFormat(intNumberWithoutDecimalFormat);
            intAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            intAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle intSimpleAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            intSimpleAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intSimplecolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            intSimpleAllCellStyleOddDec.SetFillForegroundColor(intSimplecolorToFillOddDec);
            intSimpleAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            intSimpleAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            intSimpleAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region Value added to the Excel

            #region Added by Subrata on 22 Feb 2018
            bool IsNumericKey = false;
            bool IsNumericValue = false;
            var AllListData = listData.SelectMany(x => x.LstKeyValuePair).ToArray();
            var AllDataKey = AllListData.Select(x => x.Key).Distinct().ToArray();
            int ValueRes;
            IsNumericKey = int.TryParse(AllDataKey[0], out ValueRes);
            #endregion

            //percentage format

            XSSFCellStyle cellStylePercentEven = (XSSFCellStyle)workbook.CreateCellStyle();
            cellStylePercentEven.DataFormat = HSSFDataFormat.GetBuiltinFormat("0.00%");
            cellStylePercentEven.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            cellStylePercentEven.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            cellStylePercentEven.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            cellStylePercentEven.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillFstClmnEvenpercent = new XSSFColor(new byte[] { 255, 255, 255 });
            cellStylePercentEven.SetFillForegroundColor(colorToFillFstClmnEvenpercent);
            cellStylePercentEven.FillPattern = FillPattern.SolidForeground;
            cellStylePercentEven.Alignment = HorizontalAlignment.Left;
            cellStylePercentEven.VerticalAlignment = VerticalAlignment.Center;
            cellStylePercentEven.SetDataFormat(workbook.CreateDataFormat().GetFormat("0.00%"));

            XSSFCellStyle cellStylePercentOdd = (XSSFCellStyle)workbook.CreateCellStyle();
            cellStylePercentOdd.DataFormat = HSSFDataFormat.GetBuiltinFormat("0.00%");
            cellStylePercentOdd.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            cellStylePercentOdd.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            cellStylePercentOdd.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            cellStylePercentOdd.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillFstClmnOddpercent = new XSSFColor(new byte[] { 255, 255, 255 });
            cellStylePercentOdd.SetFillForegroundColor(colorToFillFstClmnOddpercent);
            cellStylePercentOdd.FillPattern = FillPattern.SolidForeground;
            cellStylePercentOdd.Alignment = HorizontalAlignment.Left;
            cellStylePercentOdd.VerticalAlignment = VerticalAlignment.Center;
            cellStylePercentOdd.SetDataFormat(workbook.CreateDataFormat().GetFormat("0.00%"));
            int incr = 6;
            foreach (var item in listData)
            {
                var dataRow = sheet.CreateRow(incr);
                sheet.GetRow(incr).HeightInPoints = 20;
                {
                    var cellValues = (from i in item.LstKeyValuePair
                                      from j in listTableHeader
                                      where i.Key == j.ColumnName
                                      orderby j.Position
                                      select new
                                      {
                                          IsNum = j.IsNumberFormatReq,
                                          DecType = j.DecFormatType,
                                          //IsMixedType = j.IsMixedValueType,
                                          IsPercentageType = j.IsPercentageValueType,
                                          IsDateTimeStringMixedType = j.IsDateTimeStringMixedType,
                                          IsDateTimeType = j.IsDateTimeType,
                                          Value = i.Value,
                                          ColumnName = i.Key
                                      }).ToArray();

                    for (int k = 0; k < cellValues.Length; k++)
                    {
                        var datacell = dataRow.CreateCell(k);
                        if (cellValues[k].DecType != DecimalFormatType.NoDecimalReq)
                        {
                            double OutVal;
                            if (string.IsNullOrEmpty(cellValues[k].Value) || cellValues[k].Value == BlankData || !double.TryParse(cellValues[k].Value, out OutVal))
                            {
                                datacell.SetCellValue(cellValues[k].Value);
                                if (k > 0)
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;
                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }

                            }
                            else
                            {
                                datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                                if (k > 0)
                                {
                                    if (cellValues[k].DecType == DecimalFormatType.OTHER)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = otherAllCellStyleEvenDecFrmtWnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = otherAllCellStyleEvenDecFrmt;
                                            }
                                        }

                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = othAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {

                                                datacell.CellStyle = othAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.IntegerWithOutDecimal)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = intAllCellStyleEvenDecFrmt;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = intSimpleAllCellStyleEvenDecFrmt;
                                            }

                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = intAllCellStyleOddDec;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = intSimpleAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = otherAllCellStyleEvenDecFrmtWnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = otherAllCellStyleEvenDecFrmt;
                                            }
                                        }

                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = othAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {

                                                datacell.CellStyle = othAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }

                            }

                        }
                        else
                        {
                            if (cellValues[k].IsPercentageType)
                            {
                                double OutVal;
                                if (double.TryParse(cellValues[k].Value, out OutVal))
                                {
                                    datacell.SetCellValue(OutVal / 100);
                                    datacell.CellStyle = cellStylePercentEven;
                                }
                                else
                                {
                                    datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleEven;
                                        else
                                            datacell.CellStyle = AllCellStyleOdd;
                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }
                                }
                            }
                            else if (cellValues[k].IsDateTimeType)
                            {
                                DateTime OutVal;
                                if (DateTime.TryParse(cellValues[k].Value, out OutVal))
                                {
                                    datacell.SetCellValue(Convert.ToDateTime(cellValues[k].Value));
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = DateTimeAllCellStyleEvenFrmt;
                                        else
                                            datacell.CellStyle = DateTimeAllCellStyleOddDec;

                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = DateTimeAllCellStyleEvenFrmt;//AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = DateTimeAllCellStyleOddDec;//AllCellStyleFstColmOdd;
                                    }
                                }
                                else
                                {
                                    datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleEven;
                                        else
                                            datacell.CellStyle = AllCellStyleOdd;

                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }
                                }
                            }
                            else if (cellValues[k].IsDateTimeStringMixedType)
                            {
                                DateTime OutVal;
                                if (DateTime.TryParse(cellValues[k].Value, out OutVal))
                                {
                                    datacell.SetCellValue(Convert.ToDateTime(cellValues[k].Value));
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = DateTimeAllCellStyleEvenFrmt;
                                    else
                                        datacell.CellStyle = DateTimeAllCellStyleOddDec;
                                    //if (k > 0)
                                    //{
                                    //	if (incr % 2 == 0)
                                    //		datacell.CellStyle = DateTimeAllCellStyleEvenFrmt;
                                    //	else
                                    //		datacell.CellStyle = DateTimeAllCellStyleOddDec;

                                    //}
                                    //else
                                    //{
                                    //	if (incr % 2 == 0)
                                    //		datacell.CellStyle = AllCellStyleFstColmEven;
                                    //	else
                                    //		datacell.CellStyle = AllCellStyleFstColmOdd;
                                    //}
                                }
                                else
                                {
                                    datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            //datacell.CellStyle = AllCellStyleEven;
                                            if (cellValues[k].ColumnName.Contains("Cut-Off Yield(%)") || cellValues[k].ColumnName.Contains("Weighted Average Yield(%)"))
                                            {
                                                datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? Convert.ToDouble(datacell.ToString()) / 100 : 0);
                                                datacell.CellStyle = cellStylePercentEven;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = AllCellStyleEven;
                                            }
                                        }
                                        else
                                        {
                                            if (cellValues[k].ColumnName.Contains("Cut-Off Yield(%)") || cellValues[k].ColumnName.Contains("Weighted Average Yield(%)"))
                                            {
                                                datacell.SetCellValue(!string.IsNullOrEmpty(cellValues[k].Value) ? Convert.ToDouble(datacell.ToString()) / 100 : 0);
                                                datacell.CellStyle = cellStylePercentOdd;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = AllCellStyleOdd;
                                            }
                                        }

                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }
                                }
                            }
                            else
                            {
                                datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                if (k > 0)
                                {
                                    if (incr % 2 == 0)
                                    {
                                        if (cellValues[k].ColumnName.Contains("Cut-Off Yield(%)") || cellValues[k].ColumnName.Contains("Weighted Average Yield(%)"))
                                        {
                                            datacell.SetCellValue(!string.IsNullOrEmpty(cellValues[k].Value) ? Convert.ToDouble(datacell.ToString()) / 100 : 0);
                                            datacell.CellStyle = cellStylePercentEven;
                                        }
                                        else
                                        {
                                            datacell.CellStyle = AllCellStyleEven;
                                        }
                                    }
                                    else
                                    {
                                        if (cellValues[k].ColumnName.Contains("Cut-Off Yield(%)") || cellValues[k].ColumnName.Contains("Weighted Average Yield(%)"))
                                        {
                                            datacell.SetCellValue(!string.IsNullOrEmpty(cellValues[k].Value) ? Convert.ToDouble(datacell.ToString()) / 100 : 0);
                                            datacell.CellStyle = cellStylePercentOdd;
                                        }
                                        else
                                        {

                                            datacell.CellStyle = AllCellStyleOdd;
                                        }
                                    }

                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                    {
                                        if (cellValues[k].ColumnName.Contains("Cut-Off Yield(%)") || cellValues[k].ColumnName.Contains("Weighted Average Yield(%)"))
                                        {
                                            datacell.SetCellValue(!string.IsNullOrEmpty(cellValues[k].Value) ? Convert.ToDouble(datacell.ToString()) / 100 : 0);
                                            datacell.CellStyle = cellStylePercentEven;
                                        }
                                        else
                                        {
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        }
                                    }
                                    else
                                    {
                                        if (cellValues[k].ColumnName.Contains("Cut-Off Yield(%)") || cellValues[k].ColumnName.Contains("Weighted Average Yield(%)"))
                                        {
                                            datacell.SetCellValue(!string.IsNullOrEmpty(cellValues[k].Value) ? Convert.ToDouble(datacell.ToString()) / 100 : 0);
                                            datacell.CellStyle = cellStylePercentOdd;
                                        }
                                        else
                                        {
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                        }
                                    }
                                }

                            }
                        }


                    }
                    incr++;
                }

            }
            #endregion

            for (int i = 0; i < listTableHeader.Count; i++)
                sheet.AutoSizeColumn(i);
            if (sheet.GetColumnWidth(0) < 11072)
                sheet.SetColumnWidth(0, 11072);

            #region Logo
            try
            {
                if (!string.IsNullOrEmpty(LogoPath))
                {
                    XSSFDrawing patriarch = (XSSFDrawing)sheet.CreateDrawingPatriarch();
                    XSSFClientAnchor anchor;
                    anchor = new XSSFClientAnchor(0, 0, 0, 255, 0, 0, 0, 3);
                    anchor.AnchorType = AnchorType.DontMoveAndResize;
                    XSSFPicture picture = (XSSFPicture)patriarch.CreatePicture(anchor, LoadImage(LogoPath, workbook, PictureType.PNG));
                    double x1 = .25;
                    double y1 = .75;
                    picture.Resize(x1, y1);
                    picture.LineStyle = LineStyle.None;
                }
            }
            catch (Exception ex)
            {
            }

            #endregion

            #region Source, Date As On and Report Generated On
            ICRArow = sheet.CreateRow(incr + 3);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrSource);

            ICRArow = sheet.CreateRow(incr + 4);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrDateAsOn);

            ICRArow = sheet.CreateRow(incr + 5);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrReportGeneratedOn);
            if (ReportName.Trim().ToLower() == "screener report")
            {
                ICRArow = sheet.CreateRow(incr + 6);
                ICRArow.CreateCell(0);
                ICRACell = ICRArow.CreateCell(0);
                ICRACell.SetCellValue(StrRatingnote);
            }
            #endregion

            #region Sheet Two Logo
            try
            {
                if (!string.IsNullOrEmpty(LogoPath))
                {
                    XSSFDrawing patriarch = (XSSFDrawing)sheetTwo.CreateDrawingPatriarch();
                    XSSFClientAnchor anchor;
                    anchor = new XSSFClientAnchor(0, 0, 0, 255, 0, 0, 0, 3);
                    anchor.AnchorType = AnchorType.DontMoveAndResize;
                    XSSFPicture picture = (XSSFPicture)patriarch.CreatePicture(anchor, LoadImage(LogoPath, workbook, PictureType.PNG));
                    double x1 = 1.10;
                    double y1 = 1.10;
                    picture.Resize(x1, y1);
                    picture.LineStyle = LineStyle.None;
                }
            }
            catch (Exception ex)
            {
            }
            #endregion

            #region Disclaimer Sheet
            var Row = sheetTwo.CreateRow(1);
            var cellSheetTwo = Row.CreateCell(7);
            cellSheetTwo.SetCellValue(StrHeader1);
            cellSheetTwo.CellStyle = HeaderStyle;

            Row = sheetTwo.CreateRow(4);
            ICell Cell;
            for (int i = 0; i < 17; i++)
            {
                Cell = Row.CreateCell(i);

                XSSFCellStyle declationstyle = (XSSFCellStyle)workbook.CreateCellStyle();

                declationstyle.Alignment = HorizontalAlignment.Left;
                declationstyle.VerticalAlignment = VerticalAlignment.Top;
                declationstyle.WrapText = true;
                IFont declarationfnt = (XSSFFont)workbook.CreateFont();
                //declarationfnt.Boldweight = (short)FontBoldWeight.Bold;
                declarationfnt.FontName = "Calibri";
                declarationfnt.FontHeightInPoints = (short)11;
                declationstyle.SetFont(declarationfnt);
                Cell.SetCellValue(!string.IsNullOrEmpty(Footer) ? Footer : "All information contained herein is obtained by ICRA Analytics Limited from sources believed by it to be accurate and reliable. Because of the possibility of human or mechanical error as well as other factors, however, all information contained herein is provided 'AS IS' without warranty of any kind. ICRA Analytics adopts all necessary measures so that the information it uses is of sufficient quality and from sources ICRA Analytics considers to be reliable including, when appropriate, independent third-party sources. However, ICRA Analytics is not an auditor and cannot in every instance independently verify or validate information received in preparing this document." +
                    "All information contained herein must be construed solely as statements of opinion, and  ICRA Analytics Limited or its affiliates or group companies and its respective and any of its officers, directors, personnel and employees, disclaim liability to any loss, damage of any nature, including but not limited to direct, indirect, punitive, special, exemplary, consequential, as also any loss of profit in any way arising from the use of this document or its contents in any manner or for any contingency within or beyond the control of, ICRA Analytics or any of its directors, officers, employees, agents, representatives, licensors or suppliers, arising from or in connection with the information contained herein or the use of or inability to use any such information.Opinions expressed in the document are not the opinions of our holding company, ICRA Limited(ICRA), and should not be construed as any indication of credit rating or grading of ICRA for any instruments that have been issued or are to be issued by any entity.The recipient alone shall be fully responsible and / or are liable for any decision taken on the basis of this document and / or the information contained herein.");
                Cell.CellStyle = declationstyle;

            }
            NPOIWrite.CellMerged(sheetTwo, 4, 4, 0, 17);
            sheetTwo.GetRow(4).HeightInPoints = 200;
            #endregion

            #region Disclaimer Sheet HyperLink
            XSSFCellStyle HyperLinkStyle = (XSSFCellStyle)workbook.CreateCellStyle();
            IFont HyperLinkFont = workbook.CreateFont();
            HyperLinkFont.Color = IndexedColors.Orange.Index;
            HyperLinkFont.Underline = FontUnderlineType.Single;
            HyperLinkStyle.SetFont(HyperLinkFont);

            Row = sheetTwo.CreateRow(5);
            Cell = Row.CreateCell(0);
            Cell.SetCellValue("Click here for third-party disclaimers");
            XSSFCreationHelper createHelper = (XSSFCreationHelper)workbook.GetCreationHelper();
            XSSFHyperlink link = (XSSFHyperlink)createHelper.CreateHyperlink(HyperlinkType.Url);
            link.Address = "https://www.icraanalytics.com/home/thirdpartydisclaimers";
            Cell.Hyperlink = link;
            Cell.CellStyle = HyperLinkStyle;
            #endregion

            sheet.ActiveCell = new CellAddress(0, 1);
            var stream = new MemoryStream();
            workbook.Write(stream);

            return workbook;
        }

        public static NPOI.XSSF.UserModel.XSSFWorkbook ExportToExcelWorkBookWithNumberDecimalFormatSchemePerformance(UserBasicSettings ubs, List<TableHeaderEntity> listTableHeader,
            List<ExportEntity> listData, RankColor ObjRankColors, QuartileColor ObjQuartileColors, bool IsRankColor = false, bool IsQuartileColor = false, string LogoPath = "", string ReportName = "", string StrDateAsOn = "", string SheetName = "Output")
        {
            try
            {


                var RankIndexes = listTableHeader.Where(x => x.ColumnName.Contains("Rank")).Select(x => x.Position).ToArray();
                var QuartileIndexes = listTableHeader.Where(x => x.ColumnName.Contains("Quartile")).Select(x => x.Position).ToArray();

                HSSFPalette palette = new HSSFWorkbook().GetCustomPalette();
                short palRank1Index = 0;
                short palRank2Index = 0;
                short palRank3Index = 0;
                short palQuartile1Index = 0;
                short palQuartile2Index = 0;
                short palQuartile3Index = 0;
                short palQuartile4Index = 0;
                var DateTimeFormat = ubs.DateFormat;
                var MonthYearFormat = "MMM-yyyy";
                Color color = new Color();
                Color Rank1color = new Color(); Color Rank2color = new Color(); Color Rank3color = new Color();
                Color Quartile1color = new Color(); Color Quartile2color = new Color(); Color Quartile3color = new Color();
                Color Quartile4color = new Color();
                if (IsRankColor)
                {
                    color = !string.IsNullOrEmpty(ObjRankColors.Rank1Color) ? ColorTranslator.FromHtml(ObjRankColors.Rank1Color) : Color.Empty;
                    palRank1Index = !color.IsEmpty ? palette.FindSimilarColor(color.R, color.G, color.B).Indexed : (short)0;
                    Rank1color = !string.IsNullOrEmpty(ObjRankColors.Rank1Color) ? ColorTranslator.FromHtml(ObjRankColors.Rank1Color) : Color.Empty;

                    color = !string.IsNullOrEmpty(ObjRankColors.Rank2Color) ? ColorTranslator.FromHtml(ObjRankColors.Rank2Color) : Color.Empty;
                    palRank2Index = !color.IsEmpty ? palette.FindSimilarColor(color.R, color.G, color.B).Indexed : (short)0;
                    Rank2color = !string.IsNullOrEmpty(ObjRankColors.Rank2Color) ? ColorTranslator.FromHtml(ObjRankColors.Rank2Color) : Color.Empty;

                    color = !string.IsNullOrEmpty(ObjRankColors.Rank3Color) ? ColorTranslator.FromHtml(ObjRankColors.Rank3Color) : Color.Empty;
                    palRank3Index = !color.IsEmpty ? palette.FindSimilarColor(color.R, color.G, color.B).Indexed : (short)0;
                    Rank3color = !string.IsNullOrEmpty(ObjRankColors.Rank3Color) ? ColorTranslator.FromHtml(ObjRankColors.Rank3Color) : Color.Empty;
                }
                if (IsQuartileColor)
                {
                    color = !string.IsNullOrEmpty(ObjQuartileColors.Quartile1Color) ? ColorTranslator.FromHtml(ObjQuartileColors.Quartile1Color) : Color.Empty;
                    palQuartile1Index = !color.IsEmpty ? palette.FindSimilarColor(color.R, color.G, color.B).Indexed : (short)0;
                    Quartile1color = !string.IsNullOrEmpty(ObjQuartileColors.Quartile1Color) ? ColorTranslator.FromHtml(ObjQuartileColors.Quartile1Color) : Color.Empty;

                    color = !string.IsNullOrEmpty(ObjQuartileColors.Quartile2Color) ? ColorTranslator.FromHtml(ObjQuartileColors.Quartile2Color) : Color.Empty;
                    palQuartile2Index = !color.IsEmpty ? palette.FindSimilarColor(color.R, color.G, color.B).Indexed : (short)0;
                    Quartile2color = !string.IsNullOrEmpty(ObjQuartileColors.Quartile2Color) ? ColorTranslator.FromHtml(ObjQuartileColors.Quartile2Color) : Color.Empty;

                    color = !string.IsNullOrEmpty(ObjQuartileColors.Quartile3Color) ? ColorTranslator.FromHtml(ObjQuartileColors.Quartile3Color) : Color.Empty;
                    palQuartile3Index = !color.IsEmpty ? palette.FindSimilarColor(color.R, color.G, color.B).Indexed : (short)0;
                    Quartile3color = !string.IsNullOrEmpty(ObjQuartileColors.Quartile3Color) ? ColorTranslator.FromHtml(ObjQuartileColors.Quartile3Color) : Color.Empty;

                    color = !string.IsNullOrEmpty(ObjQuartileColors.Quartile4Color) ? ColorTranslator.FromHtml(ObjQuartileColors.Quartile4Color) : Color.Empty;
                    palQuartile4Index = !color.IsEmpty ? palette.FindSimilarColor(color.R, color.G, color.B).Indexed : (short)0;
                    Quartile4color = !string.IsNullOrEmpty(ObjQuartileColors.Quartile4Color) ? ColorTranslator.FromHtml(ObjQuartileColors.Quartile4Color) : Color.Empty;
                }

                #region Variable
                string Header = ubs.Reporting_Format_Header;
                string Footer = ubs.Reporting_Format_Footer;
                string BlankData = ubs.BlankData.ToUpper() == "BLANK" ? "" : ubs.BlankData;

                string StrHeader1 = "ICRA Analytics Limited";
                string StrHeader2 = "3rd Floor, Electric Mansion,Appasaheb Marathe Marg, Prabhadevi,Mumbai - 400 025 Maharashtra, India";
                string StrHeader3 = Header;//"Mumbai, Maharashtra 400093, IN";
                string StrReportName = ReportName;
                //string StrSource = "Source: MFI 360";
                string StrSource = "Source: " + (string.IsNullOrEmpty(UserStatisticsEntity.SourceName) ? "MFI 360" : UserStatisticsEntity.SourceName);
                StrDateAsOn = "Data as on " + StrDateAsOn;
                string StrReportGeneratedOn = "Report Generated on " + DateTime.Now.ToString("dd-MMM-yyyy HH:mm:ss");

                #region number and decimal variable for AUM
                var aumPaddding = new string('0', (int)ubs.AUMDecimalFormat);
                var aumDecimalFormat = "0." + aumPaddding;
                string aumNUMBERFORMAT = ubs.NumberFormat;
                var aumNumberFormat = aumNUMBERFORMAT.Replace("0", "#");
                string aumNumberDecimalFormat = aumNumberFormat + "0." + new String('0', (int)ubs.AUMDecimalFormat);
                #endregion

                #region number and decimal variable for return
                var retPaddding = new string('0', (int)ubs.ReturnDecimalFormat);
                var retDecimalFormat = "0." + retPaddding;
                string retNUMBERFORMAT = ubs.NumberFormat;
                var retNumberFormat = retNUMBERFORMAT.Replace("0", "#");
                string retNumberDecimalFormat = retNumberFormat + "0." + new String('0', (int)ubs.ReturnDecimalFormat);
                #endregion

                #region number and decimal variable for NAV
                var navPaddding = new string('0', (int)ubs.NavDecimalFormat);
                var navDecimalFormat = "0." + navPaddding;
                string navNUMBERFORMAT = ubs.NumberFormat;
                var navNumberFormat = navNUMBERFORMAT.Replace("0", "#");
                string navNumberDecimalFormat = navNumberFormat + "0." + new String('0', (int)ubs.NavDecimalFormat);
                #endregion


                #region number and decimal variable for Other
                var othPaddding = new string('0', (int)ubs.OtherDecimal);
                var othDecimalFormat = "0." + othPaddding;
                string othNUMBERFORMAT = ubs.NumberFormat;
                var othNumberFormat = othNUMBERFORMAT.Replace("0", "#");
                string othNumberDecimalFormat = othNumberFormat + "0." + new String('0', (int)ubs.OtherDecimal);
                #endregion

                #region number and decimal variable for Ratio
                var ratioPaddding = new string('0', (int)ubs.RatioDecimalFormat);
                var ratioDecimalFormat = "0." + ratioPaddding;
                string ratioNUMBERFORMAT = ubs.NumberFormat;
                var ratioNumberFormat = ratioNUMBERFORMAT.Replace("0", "#");
                string ratioNumberDecimalFormat = ratioNumberFormat + "0." + new String('0', (int)ubs.RatioDecimalFormat);
                #endregion
                #region int Format with out Decimal
                var intNumberWithoutDecimalFormat = ubs.NumberFormat.Replace("0", "#");
                #endregion
                #endregion

                NPOI.XSSF.UserModel.XSSFWorkbook workbook = new NPOI.XSSF.UserModel.XSSFWorkbook();

                ISheet sheet = workbook.CreateSheet(SheetName);
                ISheet sheetTwo = workbook.CreateSheet("Disclaimer");

                #region Excel Sheet Gridlines Delete
                sheet.DisplayGridlines = false;
                sheetTwo.DisplayGridlines = false;
                #endregion

                #region Header Freeze
                sheet.CreateFreezePane(1, 6);
                #endregion

                #region Set Font For Header1,Header2 and Header3
                XSSFCellStyle HeaderStyle = (XSSFCellStyle)workbook.CreateCellStyle();
                IFont Headerfont = workbook.CreateFont();
                Headerfont.Boldweight = (short)FontBoldWeight.Bold;
                HeaderStyle.SetFont(Headerfont);
                #endregion

                #region Set Cell Value For Header1, Header2 and Header3
                var ICRArow = sheet.CreateRow(0);
                ICRArow.CreateCell(0);
                NPOIWrite.CellMerged(sheet, 0, 0, 1, 9);
                var ICRACell = ICRArow.CreateCell(1);

                ICRACell.SetCellValue(StrHeader1);
                ICRACell.CellStyle = HeaderStyle;
                ICRArow = sheet.CreateRow(1);
                ICRArow.CreateCell(0);
                NPOIWrite.CellMerged(sheet, 1, 1, 1, 9);
                ICRACell = ICRArow.CreateCell(1);
                ICRACell.SetCellValue(StrHeader2);
                ICRACell.CellStyle = HeaderStyle;
                ICRArow = sheet.CreateRow(2);
                NPOIWrite.CellMerged(sheet, 2, 2, 1, 9);
                ICRArow.CreateCell(0);
                ICRACell = ICRArow.CreateCell(1);
                ICRACell.SetCellValue(StrHeader3);
                ICRACell.CellStyle = HeaderStyle;
                ICRACell.CellStyle.Alignment = HorizontalAlignment.Center;
                ICRArow = sheet.CreateRow(3);
                ICRArow.CreateCell(0);
                ICRACell = ICRArow.CreateCell(1);
                ICRACell.CellStyle.Alignment = HorizontalAlignment.Center;
                NPOIWrite.AutoFitColumn(sheet, 1);
                ICRACell.CellStyle = HeaderStyle;
                #endregion

                #region Report Name
                ICRArow = sheet.CreateRow(4);
                ICRArow.CreateCell(0);
                ICRACell = ICRArow.CreateCell(0);
                ICRACell.SetCellValue(StrReportName);
                HeaderStyle.Alignment = HorizontalAlignment.Left;
                ICRACell.CellStyle = HeaderStyle;
                #endregion

                #region Header creation in the Excel
                var headerRow = sheet.CreateRow(5);
                sheet.GetRow(5).HeightInPoints = 30;
                var listHeaderFinal = listTableHeader.OrderBy(x => x.Position).ToList();
                for (int i = 0; i < listHeaderFinal.Count; i++)
                {
                    var cell = headerRow.CreateCell(i);
                    cell.SetCellValue(listHeaderFinal[i].ColumnName);
                    NPOIWrite.AutoFitColumn(sheet, i);

                    #region Commented by Subrata on 21 Feb 2018
                    //ICellStyle CellStyle = workbook.CreateCellStyle();
                    //CellStyle = workbook.CreateCellStyle();
                    //CellStyle.FillBackgroundColor = IndexedColors.Blue.Index;
                    #endregion

                    #region Added by Subrata on 21 Feb 2018
                    XSSFCellStyle style = (XSSFCellStyle)workbook.CreateCellStyle();
                    XSSFColor colorToFill = new XSSFColor(new byte[] { 68, 114, 196 });//{ 51, 204, 204 }//Color.Blue);
                    style.SetFillForegroundColor(colorToFill);
                    IFont font = workbook.CreateFont();
                    font.Color = IndexedColors.White.Index;
                    font.Boldweight = (short)FontBoldWeight.Bold;
                    style.SetFont(font);
                    style.FillPattern = FillPattern.SolidForeground;
                    style.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                    style.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                    style.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                    style.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                    if (i > 0)
                    {
                        style.Alignment = HorizontalAlignment.Center;
                        style.VerticalAlignment = VerticalAlignment.Center;
                    }
                    else
                    {
                        //style.Alignment = HorizontalAlignment.Left;
                        style.Alignment = (string.IsNullOrEmpty(listHeaderFinal[i].TextAlign) || listHeaderFinal[i].TextAlign == EnumTextAlign.left.ToString()) ? HorizontalAlignment.Left
                        : listHeaderFinal[i].TextAlign == EnumTextAlign.center.ToString() ? HorizontalAlignment.Center : HorizontalAlignment.Right;
                        style.VerticalAlignment = VerticalAlignment.Center;
                    }
                    #endregion

                    cell.CellStyle = style;

                }
                #endregion

                #region Cell Style For Even Row

                #region With DecimalFormat AUM
                XSSFCellStyle aumAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                aumAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                aumAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                aumAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                aumAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor aumcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
                aumAllCellStyleEvenDecFrmt.SetFillForegroundColor(aumcolorToFillEvenWtoutDec);
                aumAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
                IDataFormat aumformatEven = workbook.CreateDataFormat();
                aumAllCellStyleEvenDecFrmt.DataFormat = aumformatEven.GetFormat(aumDecimalFormat);
                aumAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
                aumAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

                /// Number Format ////
                XSSFCellStyle aumAllCellStyleEvenDecFrmtWNum = (XSSFCellStyle)workbook.CreateCellStyle();
                aumAllCellStyleEvenDecFrmtWNum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                aumAllCellStyleEvenDecFrmtWNum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                aumAllCellStyleEvenDecFrmtWNum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                aumAllCellStyleEvenDecFrmtWNum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor aumcolorToFillEvenWtoutDecWNum = new XSSFColor(new byte[] { 176, 196, 222 });
                aumAllCellStyleEvenDecFrmtWNum.SetFillForegroundColor(aumcolorToFillEvenWtoutDecWNum);
                aumAllCellStyleEvenDecFrmtWNum.FillPattern = FillPattern.SolidForeground;
                IDataFormat aumformatEvenWNum = workbook.CreateDataFormat();
                aumAllCellStyleEvenDecFrmtWNum.DataFormat = aumformatEvenWNum.GetFormat(aumNumberDecimalFormat);
                aumAllCellStyleEvenDecFrmtWNum.Alignment = HorizontalAlignment.Center;
                aumAllCellStyleEvenDecFrmtWNum.VerticalAlignment = VerticalAlignment.Center;
                #endregion

                #region With DecimalFormat Return
                XSSFCellStyle retAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                retAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                retAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                retAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                retAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor retcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
                retAllCellStyleEvenDecFrmt.SetFillForegroundColor(retcolorToFillEvenWtoutDec);
                retAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
                IDataFormat retformatEven = workbook.CreateDataFormat();
                retAllCellStyleEvenDecFrmt.DataFormat = retformatEven.GetFormat(retDecimalFormat);
                retAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
                retAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;


                ////Number Format ////
                XSSFCellStyle retAllCellStyleEvenDecFrmtWnum = (XSSFCellStyle)workbook.CreateCellStyle();
                retAllCellStyleEvenDecFrmtWnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                retAllCellStyleEvenDecFrmtWnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                retAllCellStyleEvenDecFrmtWnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                retAllCellStyleEvenDecFrmtWnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor retcolorToFillEvenWtoutDecWnum = new XSSFColor(new byte[] { 176, 196, 222 });
                retAllCellStyleEvenDecFrmtWnum.SetFillForegroundColor(retcolorToFillEvenWtoutDecWnum);
                retAllCellStyleEvenDecFrmtWnum.FillPattern = FillPattern.SolidForeground;
                IDataFormat retformatEvenWnum = workbook.CreateDataFormat();
                retAllCellStyleEvenDecFrmtWnum.DataFormat = retformatEvenWnum.GetFormat(retNumberDecimalFormat);
                retAllCellStyleEvenDecFrmtWnum.Alignment = HorizontalAlignment.Center;
                retAllCellStyleEvenDecFrmtWnum.VerticalAlignment = VerticalAlignment.Center;
                #endregion

                #region With DecimalFormat Nav
                XSSFCellStyle navAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                navAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                navAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                navAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                navAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor navcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
                navAllCellStyleEvenDecFrmt.SetFillForegroundColor(navcolorToFillEvenWtoutDec);
                navAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
                IDataFormat navformatEven = workbook.CreateDataFormat();
                navAllCellStyleEvenDecFrmt.DataFormat = navformatEven.GetFormat(navDecimalFormat);
                navAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
                navAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;


                /// Number Format ////
                XSSFCellStyle navAllCellStyleEvenDecFrmtWnnum = (XSSFCellStyle)workbook.CreateCellStyle();
                navAllCellStyleEvenDecFrmtWnnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                navAllCellStyleEvenDecFrmtWnnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                navAllCellStyleEvenDecFrmtWnnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                navAllCellStyleEvenDecFrmtWnnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor navcolorToFillEvenWtoutDecWnnum = new XSSFColor(new byte[] { 176, 196, 222 });
                navAllCellStyleEvenDecFrmtWnnum.SetFillForegroundColor(navcolorToFillEvenWtoutDecWnnum);
                navAllCellStyleEvenDecFrmtWnnum.FillPattern = FillPattern.SolidForeground;
                IDataFormat navformatEvenWnnum = workbook.CreateDataFormat();
                navAllCellStyleEvenDecFrmtWnnum.DataFormat = navformatEvenWnnum.GetFormat(navNumberDecimalFormat);
                navAllCellStyleEvenDecFrmtWnnum.Alignment = HorizontalAlignment.Center;
                navAllCellStyleEvenDecFrmtWnnum.VerticalAlignment = VerticalAlignment.Center;
                #endregion

                #region With DecimalFormat Other
                XSSFCellStyle otherAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                otherAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                otherAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                otherAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                otherAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor othercolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
                otherAllCellStyleEvenDecFrmt.SetFillForegroundColor(othercolorToFillEvenWtoutDec);
                otherAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
                IDataFormat otherformatEven = workbook.CreateDataFormat();
                otherAllCellStyleEvenDecFrmt.DataFormat = otherformatEven.GetFormat(othDecimalFormat);
                otherAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
                otherAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

                /// Number Format ///
                XSSFCellStyle otherAllCellStyleEvenDecFrmtWnum = (XSSFCellStyle)workbook.CreateCellStyle();
                otherAllCellStyleEvenDecFrmtWnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                otherAllCellStyleEvenDecFrmtWnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                otherAllCellStyleEvenDecFrmtWnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                otherAllCellStyleEvenDecFrmtWnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor othercolorToFillEvenWtoutDecWnum = new XSSFColor(new byte[] { 176, 196, 222 });
                otherAllCellStyleEvenDecFrmtWnum.SetFillForegroundColor(othercolorToFillEvenWtoutDecWnum);
                otherAllCellStyleEvenDecFrmtWnum.FillPattern = FillPattern.SolidForeground;
                IDataFormat otherformatEvenWnum = workbook.CreateDataFormat();
                otherAllCellStyleEvenDecFrmtWnum.DataFormat = otherformatEvenWnum.GetFormat(othNumberDecimalFormat);
                otherAllCellStyleEvenDecFrmtWnum.Alignment = HorizontalAlignment.Center;
                otherAllCellStyleEvenDecFrmtWnum.VerticalAlignment = VerticalAlignment.Center;
                #endregion

                #region With DecimalFormat Ratio
                XSSFCellStyle ratAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                ratAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                ratAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                ratAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                ratAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor ratcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
                ratAllCellStyleEvenDecFrmt.SetFillForegroundColor(ratcolorToFillEvenWtoutDec);
                ratAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
                IDataFormat ratformatEven = workbook.CreateDataFormat();
                ratAllCellStyleEvenDecFrmt.DataFormat = ratformatEven.GetFormat(ratioDecimalFormat);
                ratAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
                ratAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

                XSSFCellStyle ratAllCellStyleEvenDecFrmtWth = (XSSFCellStyle)workbook.CreateCellStyle();
                ratAllCellStyleEvenDecFrmtWth.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                ratAllCellStyleEvenDecFrmtWth.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                ratAllCellStyleEvenDecFrmtWth.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                ratAllCellStyleEvenDecFrmtWth.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor ratcolorToFillEvenWtoutDecwth = new XSSFColor(new byte[] { 176, 196, 222 });
                ratAllCellStyleEvenDecFrmtWth.SetFillForegroundColor(ratcolorToFillEvenWtoutDecwth);
                ratAllCellStyleEvenDecFrmtWth.FillPattern = FillPattern.SolidForeground;
                IDataFormat ratformatEvenWth = workbook.CreateDataFormat();
                ratAllCellStyleEvenDecFrmtWth.DataFormat = ratformatEvenWth.GetFormat(ratioNumberDecimalFormat);
                ratAllCellStyleEvenDecFrmtWth.Alignment = HorizontalAlignment.Center;
                ratAllCellStyleEvenDecFrmtWth.VerticalAlignment = VerticalAlignment.Center;
                #endregion


                #region No Format
                XSSFCellStyle AllCellStyleEven = (XSSFCellStyle)workbook.CreateCellStyle();
                AllCellStyleEven.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                AllCellStyleEven.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                AllCellStyleEven.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                AllCellStyleEven.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor colorToFillEven = new XSSFColor(new byte[] { 176, 196, 222 });
                AllCellStyleEven.SetFillForegroundColor(colorToFillEven);
                AllCellStyleEven.FillPattern = FillPattern.SolidForeground;
                AllCellStyleEven.Alignment = HorizontalAlignment.Center;
                AllCellStyleEven.VerticalAlignment = VerticalAlignment.Center;
                #endregion

                #endregion

                #region Cell Style For Odd Row

                #region With Decimal Format AUM
                XSSFCellStyle aumAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
                aumAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                aumAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                aumAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                aumAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor AUMcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
                aumAllCellStyleOddDec.SetFillForegroundColor(AUMcolorToFillOddDec);
                aumAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
                IDataFormat AUMformatOddDec = workbook.CreateDataFormat();
                aumAllCellStyleOddDec.DataFormat = AUMformatOddDec.GetFormat(aumDecimalFormat);
                aumAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
                aumAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

                XSSFCellStyle aumAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
                aumAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                aumAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                aumAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                aumAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor AUMcolorToFillOddDecWnf = new XSSFColor(new byte[] { 255, 255, 255 });
                aumAllCellStyleOddDecWnuf.SetFillForegroundColor(AUMcolorToFillOddDecWnf);
                aumAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
                IDataFormat AUMformatOddDecWnuf = workbook.CreateDataFormat();
                aumAllCellStyleOddDecWnuf.DataFormat = AUMformatOddDecWnuf.GetFormat(aumNumberDecimalFormat);
                aumAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
                aumAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
                #endregion

                #region With Decimal Format Return
                XSSFCellStyle retAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
                retAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                retAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                retAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                retAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor RETcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
                retAllCellStyleOddDec.SetFillForegroundColor(RETcolorToFillOddDec);
                retAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
                IDataFormat RETformatOddDec = workbook.CreateDataFormat();
                retAllCellStyleOddDec.DataFormat = RETformatOddDec.GetFormat(retDecimalFormat);
                retAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
                retAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

                XSSFCellStyle retAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
                retAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                retAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                retAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                retAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor RETcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
                retAllCellStyleOddDecWnuf.SetFillForegroundColor(RETcolorToFillOddDecWnuf);
                retAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
                IDataFormat RETformatOddDecWnuf = workbook.CreateDataFormat();
                retAllCellStyleOddDecWnuf.DataFormat = RETformatOddDecWnuf.GetFormat(retNumberDecimalFormat);
                retAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
                retAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
                #endregion

                #region With Decimal Format Nav
                XSSFCellStyle navAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
                navAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                navAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                navAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                navAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor naVcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
                navAllCellStyleOddDec.SetFillForegroundColor(naVcolorToFillOddDec);
                navAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
                IDataFormat naVformatOddDec = workbook.CreateDataFormat();
                navAllCellStyleOddDec.DataFormat = naVformatOddDec.GetFormat(navDecimalFormat);
                navAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
                navAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


                XSSFCellStyle navAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
                navAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                navAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                navAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                navAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor naVcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
                navAllCellStyleOddDecWnuf.SetFillForegroundColor(naVcolorToFillOddDecWnuf);
                navAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
                IDataFormat naVformatOddDecWnuf = workbook.CreateDataFormat();
                navAllCellStyleOddDecWnuf.DataFormat = naVformatOddDecWnuf.GetFormat(navNumberDecimalFormat);
                navAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
                navAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
                #endregion


                #region With Decimal Format Other
                XSSFCellStyle othAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
                othAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                othAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                othAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                othAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor othcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
                othAllCellStyleOddDec.SetFillForegroundColor(othcolorToFillOddDec);
                othAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
                IDataFormat othformatOddDec = workbook.CreateDataFormat();
                othAllCellStyleOddDec.DataFormat = othformatOddDec.GetFormat(othDecimalFormat);
                othAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
                othAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


                XSSFCellStyle othAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
                othAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                othAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                othAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                othAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor othcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
                othAllCellStyleOddDecWnuf.SetFillForegroundColor(othcolorToFillOddDecWnuf);
                othAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
                IDataFormat othformatOddDecWnuf = workbook.CreateDataFormat();
                othAllCellStyleOddDecWnuf.DataFormat = othformatOddDecWnuf.GetFormat(othNumberDecimalFormat);
                othAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
                othAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
                #endregion


                #region With Decimal Format ratio
                XSSFCellStyle ratAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
                ratAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                ratAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                ratAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                ratAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor retcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
                ratAllCellStyleOddDec.SetFillForegroundColor(retcolorToFillOddDec);
                ratAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
                IDataFormat retformatOddDec = workbook.CreateDataFormat();
                ratAllCellStyleOddDec.DataFormat = retformatOddDec.GetFormat(ratioDecimalFormat);
                ratAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
                ratAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


                XSSFCellStyle ratAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
                ratAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                ratAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                ratAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                ratAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor retcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
                ratAllCellStyleOddDecWnuf.SetFillForegroundColor(retcolorToFillOddDecWnuf);
                ratAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
                IDataFormat retformatOddDecWnuf = workbook.CreateDataFormat();
                ratAllCellStyleOddDecWnuf.DataFormat = retformatOddDecWnuf.GetFormat(ratioNumberDecimalFormat);
                ratAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
                ratAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
                #endregion

                #region No Format
                XSSFCellStyle AllCellStyleOdd = (XSSFCellStyle)workbook.CreateCellStyle();
                AllCellStyleOdd.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                AllCellStyleOdd.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                AllCellStyleOdd.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                AllCellStyleOdd.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor colorToFillOdd = new XSSFColor(new byte[] { 255, 255, 255 });
                AllCellStyleOdd.SetFillForegroundColor(colorToFillOdd);
                AllCellStyleOdd.FillPattern = FillPattern.SolidForeground;
                AllCellStyleOdd.Alignment = HorizontalAlignment.Center;
                AllCellStyleOdd.VerticalAlignment = VerticalAlignment.Center;
                #endregion

                #endregion

                #region Cell Style For First Column Even Row
                XSSFCellStyle AllCellStyleFstColmEven = (XSSFCellStyle)workbook.CreateCellStyle();
                AllCellStyleFstColmEven.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                AllCellStyleFstColmEven.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                AllCellStyleFstColmEven.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                AllCellStyleFstColmEven.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor colorToFillFstClmnEven = new XSSFColor(new byte[] { 176, 196, 222 });
                AllCellStyleFstColmEven.SetFillForegroundColor(colorToFillFstClmnEven);
                AllCellStyleFstColmEven.FillPattern = FillPattern.SolidForeground;
                AllCellStyleFstColmEven.Alignment = HorizontalAlignment.Left;
                AllCellStyleFstColmEven.VerticalAlignment = VerticalAlignment.Center;
                #endregion

                #region Cell Style For First Column Odd Row
                XSSFCellStyle AllCellStyleFstColmOdd = (XSSFCellStyle)workbook.CreateCellStyle();
                AllCellStyleFstColmOdd.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                AllCellStyleFstColmOdd.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                AllCellStyleFstColmOdd.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                AllCellStyleFstColmOdd.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor colorToFillFstClmnOdd = new XSSFColor(new byte[] { 255, 255, 255 });
                AllCellStyleFstColmOdd.SetFillForegroundColor(colorToFillFstClmnOdd);
                AllCellStyleFstColmOdd.FillPattern = FillPattern.SolidForeground;
                AllCellStyleFstColmOdd.Alignment = HorizontalAlignment.Left;
                AllCellStyleFstColmOdd.VerticalAlignment = VerticalAlignment.Center;
                #endregion
                #region Without Decimal Number Format Even Row
                XSSFCellStyle intAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                intAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                intAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                intAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                intAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor intcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
                intAllCellStyleEvenDecFrmt.SetFillForegroundColor(intcolorToFillEvenWtoutDec);
                intAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
                IDataFormat intformatEven = workbook.CreateDataFormat();
                intAllCellStyleEvenDecFrmt.DataFormat = intformatEven.GetFormat(intNumberWithoutDecimalFormat);
                intAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
                intAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;
                //========Rank & Quartile Style for Even

                XSSFCellStyle Rank1EvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                Rank1EvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                Rank1EvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                Rank1EvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                Rank1EvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                //Rank1EvenDecFrmt.SetFillForegroundColor(intcolorToFillEvenWtoutDec);
                Rank1EvenDecFrmt.SetFillForegroundColor(Rank1color.IsEmpty ? intcolorToFillEvenWtoutDec : new XSSFColor(Rank1color));
                Rank1EvenDecFrmt.FillPattern = FillPattern.SolidForeground;
                //var rank1font = workbook.CreateFont();
                //rank1font.Color = palRank1Index;
                //rank1font.Boldweight = (short)FontBoldWeight.Bold;
                //Rank1EvenDecFrmt.SetFont(rank1font);
                Rank1EvenDecFrmt.DataFormat = 0;
                Rank1EvenDecFrmt.Alignment = HorizontalAlignment.Center;
                Rank1EvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;
                XSSFCellStyle Rank2EvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                Rank2EvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                Rank2EvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                Rank2EvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                Rank2EvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                //Rank2EvenDecFrmt.SetFillForegroundColor(intcolorToFillEvenWtoutDec);
                Rank2EvenDecFrmt.SetFillForegroundColor(Rank2color.IsEmpty ? intcolorToFillEvenWtoutDec : new XSSFColor(Rank2color));
                Rank2EvenDecFrmt.FillPattern = FillPattern.SolidForeground;
                //var rank2font = workbook.CreateFont();
                //rank2font.Color = palRank2Index;
                //rank2font.Boldweight = (short)FontBoldWeight.Bold;
                //Rank2EvenDecFrmt.SetFont(rank2font);
                Rank2EvenDecFrmt.DataFormat = 0;
                Rank2EvenDecFrmt.Alignment = HorizontalAlignment.Center;
                Rank2EvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;
                XSSFCellStyle Rank3EvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                Rank3EvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                Rank3EvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                Rank3EvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                Rank3EvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                //Rank3EvenDecFrmt.SetFillForegroundColor(intcolorToFillEvenWtoutDec);
                Rank3EvenDecFrmt.SetFillForegroundColor(Rank3color.IsEmpty ? intcolorToFillEvenWtoutDec : new XSSFColor(Rank3color));
                Rank3EvenDecFrmt.FillPattern = FillPattern.SolidForeground;
                //var rank3font = workbook.CreateFont();
                //rank3font.Color = palRank3Index;
                //rank3font.Boldweight = (short)FontBoldWeight.Bold;
                //Rank3EvenDecFrmt.SetFont(rank3font);
                Rank3EvenDecFrmt.DataFormat = 0;
                Rank3EvenDecFrmt.Alignment = HorizontalAlignment.Center;
                Rank3EvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;
                XSSFCellStyle RankNocolorEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                RankNocolorEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                RankNocolorEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                RankNocolorEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                RankNocolorEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                RankNocolorEvenDecFrmt.SetFillForegroundColor(intcolorToFillEvenWtoutDec);
                RankNocolorEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
                //var rankNocolorfont = workbook.CreateFont();
                //rankNocolorfont.Color = (short)0;
                //rankNocolorfont.Boldweight = (short)FontBoldWeight.None;
                //RankNocolorEvenDecFrmt.SetFont(rankNocolorfont);
                RankNocolorEvenDecFrmt.DataFormat = 0;
                RankNocolorEvenDecFrmt.Alignment = HorizontalAlignment.Center;
                RankNocolorEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

                XSSFCellStyle Quartile1EvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                Quartile1EvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                Quartile1EvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                Quartile1EvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                Quartile1EvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                //Quartile1EvenDecFrmt.SetFillForegroundColor(intcolorToFillEvenWtoutDec);
                Quartile1EvenDecFrmt.SetFillForegroundColor(Quartile1color.IsEmpty ? intcolorToFillEvenWtoutDec : new XSSFColor(Quartile1color));
                Quartile1EvenDecFrmt.FillPattern = FillPattern.SolidForeground;
                //var Quartile1font = workbook.CreateFont();
                //Quartile1font.Color = palQuartile1Index;
                //Quartile1font.Boldweight = (short)FontBoldWeight.Bold;
                //Quartile1EvenDecFrmt.SetFont(Quartile1font);
                Quartile1EvenDecFrmt.DataFormat = 0;
                Quartile1EvenDecFrmt.Alignment = HorizontalAlignment.Center;
                Quartile1EvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;
                XSSFCellStyle Quartile2EvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                Quartile2EvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                Quartile2EvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                Quartile2EvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                Quartile2EvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                //Quartile2EvenDecFrmt.SetFillForegroundColor(intcolorToFillEvenWtoutDec);
                Quartile2EvenDecFrmt.SetFillForegroundColor(Quartile2color.IsEmpty ? intcolorToFillEvenWtoutDec : new XSSFColor(Quartile2color));
                Quartile2EvenDecFrmt.FillPattern = FillPattern.SolidForeground;
                //var Quartile2font = workbook.CreateFont();
                //Quartile2font.Color = palQuartile2Index;
                //Quartile2font.Boldweight = (short)FontBoldWeight.Bold;
                //Quartile2EvenDecFrmt.SetFont(Quartile2font);
                Quartile2EvenDecFrmt.DataFormat = 0;
                Quartile2EvenDecFrmt.Alignment = HorizontalAlignment.Center;
                Quartile2EvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;
                XSSFCellStyle Quartile3EvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                Quartile3EvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                Quartile3EvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                Quartile3EvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                Quartile3EvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                //Quartile3EvenDecFrmt.SetFillForegroundColor(intcolorToFillEvenWtoutDec);
                Quartile3EvenDecFrmt.SetFillForegroundColor(Quartile3color.IsEmpty ? intcolorToFillEvenWtoutDec : new XSSFColor(Quartile3color));
                Quartile3EvenDecFrmt.FillPattern = FillPattern.SolidForeground;
                //var Quartile3font = workbook.CreateFont();
                //Quartile3font.Color = palQuartile3Index;
                //Quartile3font.Boldweight = (short)FontBoldWeight.Bold;
                //Quartile3EvenDecFrmt.SetFont(Quartile3font);
                Quartile3EvenDecFrmt.DataFormat = 0;
                Quartile3EvenDecFrmt.Alignment = HorizontalAlignment.Center;
                Quartile3EvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;
                XSSFCellStyle Quartile4EvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                Quartile4EvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                Quartile4EvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                Quartile4EvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                Quartile4EvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                //Quartile4EvenDecFrmt.SetFillForegroundColor(intcolorToFillEvenWtoutDec);
                Quartile4EvenDecFrmt.SetFillForegroundColor(Quartile4color.IsEmpty ? intcolorToFillEvenWtoutDec : new XSSFColor(Quartile4color));
                Quartile4EvenDecFrmt.FillPattern = FillPattern.SolidForeground;
                //var Quartile4font = workbook.CreateFont();
                //Quartile4font.Color = palQuartile4Index;
                //Quartile4font.Boldweight = (short)FontBoldWeight.Bold;
                //Quartile4EvenDecFrmt.SetFont(Quartile4font);
                Quartile4EvenDecFrmt.DataFormat = 0;
                Quartile4EvenDecFrmt.Alignment = HorizontalAlignment.Center;
                Quartile4EvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;
                XSSFCellStyle QuartileNocolorEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                QuartileNocolorEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                QuartileNocolorEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                QuartileNocolorEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                QuartileNocolorEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                QuartileNocolorEvenDecFrmt.SetFillForegroundColor(intcolorToFillEvenWtoutDec);
                intAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
                //var QuartileNocolorfont = workbook.CreateFont();
                //QuartileNocolorfont.Color = (short)0;
                //QuartileNocolorfont.Boldweight = (short)FontBoldWeight.None;
                //QuartileNocolorEvenDecFrmt.SetFont(QuartileNocolorfont);
                QuartileNocolorEvenDecFrmt.DataFormat = 0;
                QuartileNocolorEvenDecFrmt.Alignment = HorizontalAlignment.Center;
                QuartileNocolorEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;
                //===============

                XSSFCellStyle intSimpleAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                intSimpleAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                intSimpleAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                intSimpleAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                intSimpleAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor intSimplecolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
                intSimpleAllCellStyleEvenDecFrmt.SetFillForegroundColor(intSimplecolorToFillEvenWtoutDec);
                intSimpleAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
                intSimpleAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
                intSimpleAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;
                #endregion
                #region Without Decimal Number Format Odd Row
                XSSFCellStyle intAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
                intAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                intAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                intAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                intAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor intcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
                intAllCellStyleOddDec.SetFillForegroundColor(intcolorToFillOddDec);
                intAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
                IDataFormat intformatOddDec = workbook.CreateDataFormat();
                intAllCellStyleOddDec.DataFormat = intformatOddDec.GetFormat(intNumberWithoutDecimalFormat);
                intAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
                intAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;
                //========Rank & Quartile Style for Odd
                XSSFCellStyle Rank1OddDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                Rank1OddDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                Rank1OddDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                Rank1OddDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                Rank1OddDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                //Rank1OddDecFrmt.SetFillForegroundColor(intcolorToFillOddDec);
                Rank1OddDecFrmt.SetFillForegroundColor(Rank1color.IsEmpty ? intcolorToFillOddDec : new XSSFColor(Rank1color));
                Rank1OddDecFrmt.FillPattern = FillPattern.SolidForeground;
                //var rank1Oddfont = workbook.CreateFont();
                //rank1Oddfont.Color = palRank1Index;
                //rank1Oddfont.Boldweight = (short)FontBoldWeight.Bold;
                //Rank1OddDecFrmt.SetFont(rank1Oddfont);
                Rank1OddDecFrmt.DataFormat = 0;
                Rank1OddDecFrmt.Alignment = HorizontalAlignment.Center;
                Rank1OddDecFrmt.VerticalAlignment = VerticalAlignment.Center;
                XSSFCellStyle Rank2OddDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                Rank2OddDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                Rank2OddDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                Rank2OddDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                Rank2OddDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                //Rank2OddDecFrmt.SetFillForegroundColor(intcolorToFillOddDec);
                Rank2OddDecFrmt.SetFillForegroundColor(Rank2color.IsEmpty ? intcolorToFillOddDec : new XSSFColor(Rank2color));
                Rank2OddDecFrmt.FillPattern = FillPattern.SolidForeground;
                //var rank2Oddfont = workbook.CreateFont();
                //rank2Oddfont.Color = palRank2Index;
                //rank2Oddfont.Boldweight = (short)FontBoldWeight.Bold;
                //Rank2OddDecFrmt.SetFont(rank2Oddfont);
                Rank2OddDecFrmt.DataFormat = 0;
                Rank2OddDecFrmt.Alignment = HorizontalAlignment.Center;
                Rank2OddDecFrmt.VerticalAlignment = VerticalAlignment.Center;
                XSSFCellStyle Rank3OddDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                Rank3OddDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                Rank3OddDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                Rank3OddDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                Rank3OddDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                //Rank3OddDecFrmt.SetFillForegroundColor(intcolorToFillOddDec);
                Rank3OddDecFrmt.SetFillForegroundColor(Rank3color.IsEmpty ? intcolorToFillOddDec : new XSSFColor(Rank3color));
                Rank3OddDecFrmt.FillPattern = FillPattern.SolidForeground;
                //var rank3Oddfont = workbook.CreateFont();
                //rank3Oddfont.Color = palRank3Index;
                //rank3Oddfont.Boldweight = (short)FontBoldWeight.Bold;
                //Rank3OddDecFrmt.SetFont(rank3Oddfont);
                Rank3OddDecFrmt.DataFormat = 0;
                Rank3OddDecFrmt.Alignment = HorizontalAlignment.Center;
                Rank3OddDecFrmt.VerticalAlignment = VerticalAlignment.Center;
                XSSFCellStyle RankNocolorOddDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                RankNocolorOddDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                RankNocolorOddDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                RankNocolorOddDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                RankNocolorOddDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                RankNocolorOddDecFrmt.SetFillForegroundColor(intcolorToFillOddDec);
                RankNocolorOddDecFrmt.FillPattern = FillPattern.SolidForeground;
                //var rankNocolorOddfont = workbook.CreateFont();
                //rankNocolorOddfont.Color = (short)0;
                //rankNocolorOddfont.Boldweight = (short)FontBoldWeight.None;
                //RankNocolorOddDecFrmt.SetFont(rankNocolorOddfont);
                RankNocolorOddDecFrmt.DataFormat = 0;
                RankNocolorOddDecFrmt.Alignment = HorizontalAlignment.Center;
                RankNocolorOddDecFrmt.VerticalAlignment = VerticalAlignment.Center;

                XSSFCellStyle Quartile1OddDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                Quartile1OddDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                Quartile1OddDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                Quartile1OddDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                Quartile1OddDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                //Quartile1OddDecFrmt.SetFillForegroundColor(intcolorToFillOddDec);
                Quartile1OddDecFrmt.SetFillForegroundColor(Quartile1color.IsEmpty ? intcolorToFillOddDec : new XSSFColor(Quartile1color));
                Quartile1OddDecFrmt.FillPattern = FillPattern.SolidForeground;
                //var Quartile1Oddfont = workbook.CreateFont();
                //Quartile1Oddfont.Color = palQuartile1Index;
                //Quartile1Oddfont.Boldweight = (short)FontBoldWeight.Bold;
                //Quartile1OddDecFrmt.SetFont(Quartile1Oddfont);
                Quartile1OddDecFrmt.DataFormat = 0;
                Quartile1OddDecFrmt.Alignment = HorizontalAlignment.Center;
                Quartile1OddDecFrmt.VerticalAlignment = VerticalAlignment.Center;
                XSSFCellStyle Quartile2OddDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                Quartile2OddDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                Quartile2OddDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                Quartile2OddDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                Quartile2OddDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                //Quartile2OddDecFrmt.SetFillForegroundColor(intcolorToFillOddDec);
                Quartile2OddDecFrmt.SetFillForegroundColor(Quartile2color.IsEmpty ? intcolorToFillOddDec : new XSSFColor(Quartile2color));
                Quartile2OddDecFrmt.FillPattern = FillPattern.SolidForeground;
                //var Quartile2Oddfont = workbook.CreateFont();
                //Quartile2Oddfont.Color = palQuartile2Index;
                //Quartile2Oddfont.Boldweight = (short)FontBoldWeight.Bold;
                //Quartile2OddDecFrmt.SetFont(Quartile2Oddfont);
                Quartile2OddDecFrmt.DataFormat = 0;
                Quartile2OddDecFrmt.Alignment = HorizontalAlignment.Center;
                Quartile2OddDecFrmt.VerticalAlignment = VerticalAlignment.Center;
                XSSFCellStyle Quartile3OddDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                Quartile3OddDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                Quartile3OddDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                Quartile3OddDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                Quartile3OddDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                //Quartile3OddDecFrmt.SetFillForegroundColor(intcolorToFillOddDec);
                Quartile3OddDecFrmt.SetFillForegroundColor(Quartile3color.IsEmpty ? intcolorToFillOddDec : new XSSFColor(Quartile3color));
                Quartile3OddDecFrmt.FillPattern = FillPattern.SolidForeground;
                //var Quartile3Oddfont = workbook.CreateFont();
                //Quartile3Oddfont.Color = palQuartile3Index;
                //Quartile3Oddfont.Boldweight = (short)FontBoldWeight.Bold;
                //Quartile3OddDecFrmt.SetFont(Quartile3Oddfont);
                Quartile3OddDecFrmt.DataFormat = 0;
                Quartile3OddDecFrmt.Alignment = HorizontalAlignment.Center;
                Quartile3OddDecFrmt.VerticalAlignment = VerticalAlignment.Center;
                XSSFCellStyle Quartile4OddDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                Quartile4OddDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                Quartile4OddDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                Quartile4OddDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                Quartile4OddDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                //Quartile4OddDecFrmt.SetFillForegroundColor(intcolorToFillOddDec);
                Quartile4OddDecFrmt.SetFillForegroundColor(Quartile4color.IsEmpty ? intcolorToFillOddDec : new XSSFColor(Quartile4color));
                Quartile4OddDecFrmt.FillPattern = FillPattern.SolidForeground;
                //var Quartile4Oddfont = workbook.CreateFont();
                //Quartile4Oddfont.Color = palQuartile4Index;
                //Quartile4Oddfont.Boldweight = (short)FontBoldWeight.Bold;
                //Quartile4OddDecFrmt.SetFont(Quartile4Oddfont);
                Quartile4OddDecFrmt.DataFormat = 0;
                Quartile4OddDecFrmt.Alignment = HorizontalAlignment.Center;
                Quartile4OddDecFrmt.VerticalAlignment = VerticalAlignment.Center;
                XSSFCellStyle QuartileNocolorOddDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                QuartileNocolorOddDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                QuartileNocolorOddDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                QuartileNocolorOddDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                QuartileNocolorOddDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                QuartileNocolorOddDecFrmt.SetFillForegroundColor(intcolorToFillOddDec);
                intAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
                //var QuartileNocolorOddfont = workbook.CreateFont();
                //QuartileNocolorOddfont.Color = (short)0;
                //QuartileNocolorOddfont.Boldweight = (short)FontBoldWeight.None;
                //QuartileNocolorOddDecFrmt.SetFont(QuartileNocolorOddfont);
                QuartileNocolorOddDecFrmt.DataFormat = 0;
                QuartileNocolorOddDecFrmt.Alignment = HorizontalAlignment.Center;
                QuartileNocolorOddDecFrmt.VerticalAlignment = VerticalAlignment.Center;
                //===============

                XSSFCellStyle intSimpleAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
                intSimpleAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                intSimpleAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                intSimpleAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                intSimpleAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor intSimplecolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
                intSimpleAllCellStyleOddDec.SetFillForegroundColor(intSimplecolorToFillOddDec);
                intSimpleAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
                intSimpleAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
                intSimpleAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;
                #endregion
                #region With DateTime format
                XSSFCellStyle DateTimeAllCellStyleEvenFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                DateTimeAllCellStyleEvenFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                DateTimeAllCellStyleEvenFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                DateTimeAllCellStyleEvenFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                DateTimeAllCellStyleEvenFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor DateTimecolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
                DateTimeAllCellStyleEvenFrmt.SetFillForegroundColor(DateTimecolorToFillEvenWtoutDec);
                DateTimeAllCellStyleEvenFrmt.FillPattern = FillPattern.SolidForeground;
                IDataFormat DateTimeformatEven = workbook.CreateDataFormat();
                DateTimeAllCellStyleEvenFrmt.DataFormat = DateTimeformatEven.GetFormat(DateTimeFormat);
                DateTimeAllCellStyleEvenFrmt.Alignment = HorizontalAlignment.Center;
                DateTimeAllCellStyleEvenFrmt.VerticalAlignment = VerticalAlignment.Center;

                XSSFCellStyle DateTimeAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
                DateTimeAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                DateTimeAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                DateTimeAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                DateTimeAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor DateTimecolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
                DateTimeAllCellStyleOddDec.SetFillForegroundColor(DateTimecolorToFillOddDec);
                DateTimeAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
                IDataFormat DateTimeformatOddDec = workbook.CreateDataFormat();
                DateTimeAllCellStyleOddDec.DataFormat = DateTimeformatOddDec.GetFormat(DateTimeFormat);
                DateTimeAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
                DateTimeAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


                #endregion
                #region With MonthYear format
                XSSFCellStyle MonthYearAllCellStyleEvenFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                MonthYearAllCellStyleEvenFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                MonthYearAllCellStyleEvenFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                MonthYearAllCellStyleEvenFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                MonthYearAllCellStyleEvenFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor MonthYearcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
                MonthYearAllCellStyleEvenFrmt.SetFillForegroundColor(MonthYearcolorToFillEvenWtoutDec);
                MonthYearAllCellStyleEvenFrmt.FillPattern = FillPattern.SolidForeground;
                IDataFormat MonthYearformatEven = workbook.CreateDataFormat();
                MonthYearAllCellStyleEvenFrmt.DataFormat = DateTimeformatEven.GetFormat(MonthYearFormat);
                MonthYearAllCellStyleEvenFrmt.Alignment = HorizontalAlignment.Center;
                MonthYearAllCellStyleEvenFrmt.VerticalAlignment = VerticalAlignment.Center;

                XSSFCellStyle MonthYearAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
                MonthYearAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                MonthYearAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                MonthYearAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                MonthYearAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor MonthYearcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
                MonthYearAllCellStyleOddDec.SetFillForegroundColor(MonthYearcolorToFillOddDec);
                MonthYearAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
                IDataFormat MonthYearformatOddDec = workbook.CreateDataFormat();
                MonthYearAllCellStyleOddDec.DataFormat = DateTimeformatOddDec.GetFormat(MonthYearFormat);
                MonthYearAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
                MonthYearAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


                #endregion
                #region Value added to the Excel

                #region Added by Subrata on 22 Feb 2018
                bool IsNumericKey = false;
                bool IsNumericValue = false;
                var AllListData = listData.SelectMany(x => x.LstKeyValuePair).ToArray();
                var AllDataKey = AllListData.Select(x => x.Key).Distinct().ToArray();
                int ValueRes;
                IsNumericKey = int.TryParse(AllDataKey[0], out ValueRes);
                #endregion

                int incr = 6;
                bool isNumeric = false;
                XSSFCellStyle ColorStyle = (XSSFCellStyle)workbook.CreateCellStyle();
                IFont rankfont = workbook.CreateFont();

                foreach (var item in listData)
                {
                    var dataRow = sheet.CreateRow(incr);
                    sheet.GetRow(incr).HeightInPoints = 20;
                    {
                        var cellValues = (from i in item.LstKeyValuePair
                                          from j in listTableHeader
                                          where i.Key == j.ColumnName
                                          orderby j.Position
                                          select new
                                          {
                                              IsNum = j.IsNumberFormatReq,
                                              DecType = j.DecFormatType,
                                              IsMixedType = j.IsMixedValueType,
                                              IsDateTimeStringMixedType = j.IsDateTimeStringMixedType,
                                              IsDateTimeType = j.IsDateTimeType,
                                              IsMonthYearType = j.IsMonthYearType,
                                              Value = i.Value
                                          }).ToArray();

                        for (int k = 0; k < cellValues.Length; k++)
                        {
                            var datacell = dataRow.CreateCell(k);
                            if (cellValues[k].DecType != DecimalFormatType.NoDecimalReq)
                            {
                                double OutVal;
                                if (string.IsNullOrEmpty(cellValues[k].Value) || cellValues[k].Value == BlankData || !double.TryParse(cellValues[k].Value, out OutVal))
                                {
                                    datacell.SetCellValue(cellValues[k].Value);
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleEven;
                                        else
                                            datacell.CellStyle = AllCellStyleOdd;
                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }

                                }
                                else
                                {
                                    datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                                    if (k > 0)
                                    {
                                        if (cellValues[k].DecType == DecimalFormatType.AUM)
                                        {
                                            if (incr % 2 == 0)
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {

                                                    datacell.CellStyle = aumAllCellStyleEvenDecFrmtWNum;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = aumAllCellStyleEvenDecFrmt;
                                                }
                                            }
                                            else
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    datacell.CellStyle = aumAllCellStyleOddDecWnuf;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = aumAllCellStyleOddDec;
                                                }
                                            }
                                        }
                                        else if (cellValues[k].DecType == DecimalFormatType.NAV)
                                        {
                                            if (incr % 2 == 0)
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    datacell.CellStyle = navAllCellStyleEvenDecFrmtWnnum;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = navAllCellStyleEvenDecFrmt;
                                                }
                                            }
                                            else
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    datacell.CellStyle = navAllCellStyleOddDecWnuf;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = navAllCellStyleOddDec;
                                                }

                                            }
                                        }
                                        else if (cellValues[k].DecType == DecimalFormatType.OTHER)
                                        {
                                            if (incr % 2 == 0)
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    datacell.CellStyle = otherAllCellStyleEvenDecFrmtWnum;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = otherAllCellStyleEvenDecFrmt;
                                                }
                                            }

                                            else
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    datacell.CellStyle = othAllCellStyleOddDecWnuf;
                                                }
                                                else
                                                {

                                                    datacell.CellStyle = othAllCellStyleOddDec;
                                                }

                                            }
                                        }
                                        else if (cellValues[k].DecType == DecimalFormatType.RATIO)
                                        {
                                            if (incr % 2 == 0)
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    datacell.CellStyle = ratAllCellStyleEvenDecFrmtWth;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = ratAllCellStyleEvenDecFrmt;
                                                }
                                            }
                                            else
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    datacell.CellStyle = ratAllCellStyleOddDecWnuf;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = ratAllCellStyleOddDec;
                                                }
                                            }
                                        }
                                        else if (cellValues[k].DecType == DecimalFormatType.RETURN)
                                        {
                                            if (incr % 2 == 0)
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    datacell.CellStyle = retAllCellStyleEvenDecFrmtWnum;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = retAllCellStyleEvenDecFrmt;
                                                }

                                            }
                                            else
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    datacell.CellStyle = retAllCellStyleOddDecWnuf;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = retAllCellStyleOddDec;
                                                }

                                            }
                                        }
                                        else if (cellValues[k].DecType == DecimalFormatType.IntegerWithOutDecimal)
                                        {
                                            if (incr % 2 == 0)
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    if (RankIndexes.Contains(k))
                                                    {
                                                        datacell.CellStyle = datacell.GetValue().ToString() == "1" ? Rank1EvenDecFrmt :
                                                        datacell.GetValue().ToString() == "2" ? Rank2EvenDecFrmt : datacell.GetValue().ToString() == "3" ? Rank3EvenDecFrmt : RankNocolorEvenDecFrmt;
                                                    }
                                                    else if (QuartileIndexes.Contains(k))
                                                    {
                                                        datacell.CellStyle = datacell.GetValue().ToString() == "1" ? Quartile1EvenDecFrmt :
                                                        datacell.GetValue().ToString() == "2" ? Quartile2EvenDecFrmt : datacell.GetValue().ToString() == "3" ? Quartile3EvenDecFrmt
                                                        : datacell.GetValue().ToString() == "4" ? Quartile4EvenDecFrmt : QuartileNocolorEvenDecFrmt;
                                                    }
                                                    else
                                                        datacell.CellStyle = intAllCellStyleEvenDecFrmt;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = intSimpleAllCellStyleEvenDecFrmt;
                                                }

                                            }
                                            else
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    if (RankIndexes.Contains(k))
                                                    {
                                                        datacell.CellStyle = datacell.GetValue().ToString() == "1" ? Rank1OddDecFrmt :
                                                        datacell.GetValue().ToString() == "2" ? Rank2OddDecFrmt : datacell.GetValue().ToString() == "3" ? Rank3OddDecFrmt : RankNocolorOddDecFrmt;
                                                    }
                                                    else if (QuartileIndexes.Contains(k))
                                                    {
                                                        datacell.CellStyle = datacell.GetValue().ToString() == "1" ? Quartile1OddDecFrmt :
                                                        datacell.GetValue().ToString() == "2" ? Quartile2OddDecFrmt : datacell.GetValue().ToString() == "3" ? Quartile3OddDecFrmt
                                                        : datacell.GetValue().ToString() == "4" ? Quartile4OddDecFrmt : QuartileNocolorOddDecFrmt;
                                                    }
                                                    else
                                                        datacell.CellStyle = intAllCellStyleOddDec;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = intSimpleAllCellStyleOddDec;
                                                }

                                            }
                                        }



                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }

                                }

                            }
                            else
                            {
                                double OutVal;
                                if (double.TryParse(cellValues[k].Value, out OutVal) && !cellValues[k].IsMixedType)
                                {
                                    datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleEven;
                                        else
                                            datacell.CellStyle = AllCellStyleOdd;

                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }
                                }
                                else if (cellValues[k].IsDateTimeType)
                                {
                                    DateTime OutValdt;
                                    if (DateTime.TryParse(cellValues[k].Value, out OutValdt))
                                    {
                                        datacell.SetCellValue(Convert.ToDateTime(cellValues[k].Value));
                                        if (k > 0)
                                        {
                                            if (incr % 2 == 0)
                                                datacell.CellStyle = DateTimeAllCellStyleEvenFrmt;
                                            else
                                                datacell.CellStyle = DateTimeAllCellStyleOddDec;

                                        }
                                        else
                                        {
                                            if (incr % 2 == 0)
                                                datacell.CellStyle = DateTimeAllCellStyleEvenFrmt;//AllCellStyleFstColmEven;
                                            else
                                                datacell.CellStyle = DateTimeAllCellStyleOddDec;//AllCellStyleFstColmOdd;
                                        }
                                    }
                                    else
                                    {
                                        datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                        if (k > 0)
                                        {
                                            if (incr % 2 == 0)
                                                datacell.CellStyle = AllCellStyleEven;
                                            else
                                                datacell.CellStyle = AllCellStyleOdd;

                                        }
                                        else
                                        {
                                            if (incr % 2 == 0)
                                                datacell.CellStyle = AllCellStyleFstColmEven;
                                            else
                                                datacell.CellStyle = AllCellStyleFstColmOdd;
                                        }
                                    }
                                }
                                else if (cellValues[k].IsDateTimeStringMixedType)
                                {
                                    DateTime OutValdt;
                                    if (DateTime.TryParse(cellValues[k].Value, out OutValdt))
                                    {
                                        datacell.SetCellValue(Convert.ToDateTime(cellValues[k].Value));
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = DateTimeAllCellStyleEvenFrmt;
                                        else
                                            datacell.CellStyle = DateTimeAllCellStyleOddDec;
                                        //if (k > 0)
                                        //{
                                        //	if (incr % 2 == 0)
                                        //		datacell.CellStyle = DateTimeAllCellStyleEvenFrmt;
                                        //	else
                                        //		datacell.CellStyle = DateTimeAllCellStyleOddDec;

                                        //}
                                        //else
                                        //{
                                        //	if (incr % 2 == 0)
                                        //		datacell.CellStyle = AllCellStyleFstColmEven;
                                        //	else
                                        //		datacell.CellStyle = AllCellStyleFstColmOdd;
                                        //}
                                    }
                                    else
                                    {
                                        datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                        if (k > 0)
                                        {
                                            if (incr % 2 == 0)
                                                datacell.CellStyle = AllCellStyleEven;
                                            else
                                                datacell.CellStyle = AllCellStyleOdd;

                                        }
                                        else
                                        {
                                            if (incr % 2 == 0)
                                                datacell.CellStyle = AllCellStyleFstColmEven;
                                            else
                                                datacell.CellStyle = AllCellStyleFstColmOdd;
                                        }
                                    }
                                }
                                else if (cellValues[k].IsMonthYearType)
                                {
                                    DateTime OutValdt;
                                    if (DateTime.TryParse(cellValues[k].Value, out OutValdt))
                                    {
                                        datacell.SetCellValue(Convert.ToDateTime(cellValues[k].Value));
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = MonthYearAllCellStyleEvenFrmt;
                                        else
                                            datacell.CellStyle = MonthYearAllCellStyleOddDec;
                                    }
                                    else
                                    {
                                        datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                        if (k > 0)
                                        {
                                            if (incr % 2 == 0)
                                                datacell.CellStyle = AllCellStyleEven;
                                            else
                                                datacell.CellStyle = AllCellStyleOdd;

                                        }
                                        else
                                        {
                                            if (incr % 2 == 0)
                                                datacell.CellStyle = AllCellStyleFstColmEven;
                                            else
                                                datacell.CellStyle = AllCellStyleFstColmOdd;
                                        }
                                    }
                                }
                                else
                                {
                                    datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleEven;
                                        else
                                            datacell.CellStyle = AllCellStyleOdd;

                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }
                                }
                            }
                        }
                        incr++;
                    }

                    //var Celltext = dataRow.GetCell(0).StringCellValue;
                    var Celltext = dataRow.GetCell(0).GetValue();
                    if (new[] { "MIN. INVESTMENT (IN RS.)" }.Contains(Celltext.ToString().ToUpper()))
                    {
                        for (int i = 1; i < listTableHeader.Count; i++)
                        {
                            var doublecell = dataRow.GetCell(i);
                            double parsevalue;
                            var isdouble = double.TryParse(doublecell.GetValue().ToString(), out parsevalue);
                            if (isdouble)
                                doublecell.SetCellValue(parsevalue.NumberFormatWithOutRoundUp(ubs.NumberFormat));
                        }
                    }
                }
                #endregion

                for (int i = 0; i < listTableHeader.Count; i++)
                    sheet.AutoSizeColumn(i);
                if (sheet.GetColumnWidth(0) < 11072)
                    sheet.SetColumnWidth(0, 11072);

                #region Logo
                try
                {
                    if (!string.IsNullOrEmpty(LogoPath))
                    {
                        XSSFDrawing patriarch = (XSSFDrawing)sheet.CreateDrawingPatriarch();
                        XSSFClientAnchor anchor;
                        anchor = new XSSFClientAnchor(0, 0, 0, 255, 0, 0, 0, 3);
                        anchor.AnchorType = AnchorType.DontMoveAndResize;
                        XSSFPicture picture = (XSSFPicture)patriarch.CreatePicture(anchor, LoadImage(LogoPath, workbook, PictureType.PNG));
                        double x1 = .25;
                        double y1 = .75;
                        picture.Resize(x1, y1);
                        picture.LineStyle = LineStyle.None;
                    }
                }
                catch (Exception ex)
                {
                }

                #endregion

                #region Source, Date As On and Report Generated On
                ICRArow = sheet.CreateRow(incr + 3);
                ICRArow.CreateCell(0);
                ICRACell = ICRArow.CreateCell(0);
                ICRACell.SetCellValue(StrSource);

                ICRArow = sheet.CreateRow(incr + 4);
                ICRArow.CreateCell(0);
                ICRACell = ICRArow.CreateCell(0);
                ICRACell.SetCellValue(StrDateAsOn);

                ICRArow = sheet.CreateRow(incr + 5);
                ICRArow.CreateCell(0);
                ICRACell = ICRArow.CreateCell(0);
                ICRACell.SetCellValue(StrReportGeneratedOn);
                #endregion

                #region Sheet Two Logo
                try
                {
                    if (!string.IsNullOrEmpty(LogoPath))
                    {
                        XSSFDrawing patriarch = (XSSFDrawing)sheetTwo.CreateDrawingPatriarch();
                        XSSFClientAnchor anchor;
                        anchor = new XSSFClientAnchor(0, 0, 0, 255, 0, 0, 0, 3);
                        anchor.AnchorType = AnchorType.DontMoveAndResize;
                        XSSFPicture picture = (XSSFPicture)patriarch.CreatePicture(anchor, LoadImage(LogoPath, workbook, PictureType.PNG));
                        double x1 = 1.10;
                        double y1 = 1.10;
                        picture.Resize(x1, y1);
                        picture.LineStyle = LineStyle.None;
                    }
                }
                catch (Exception ex)
                {
                }
                #endregion

                #region Disclaimer Sheet
                var Row = sheetTwo.CreateRow(1);
                var cellSheetTwo = Row.CreateCell(7);
                cellSheetTwo.SetCellValue(StrHeader1);
                cellSheetTwo.CellStyle = HeaderStyle;

                Row = sheetTwo.CreateRow(4);
                ICell Cell;
                for (int i = 0; i < 17; i++)
                {
                    Cell = Row.CreateCell(i);

                    XSSFCellStyle declationstyle = (XSSFCellStyle)workbook.CreateCellStyle();

                    declationstyle.Alignment = HorizontalAlignment.Left;
                    declationstyle.VerticalAlignment = VerticalAlignment.Top;
                    declationstyle.WrapText = true;
                    IFont declarationfnt = (XSSFFont)workbook.CreateFont();
                    //declarationfnt.Boldweight = (short)FontBoldWeight.Bold;
                    declarationfnt.FontName = "Calibri";
                    declarationfnt.FontHeightInPoints = (short)11;
                    declationstyle.SetFont(declarationfnt);
                    Cell.SetCellValue(!string.IsNullOrEmpty(Footer) ? Footer : "All information contained herein is obtained by ICRA Analytics Limited from sources believed by it to be accurate and reliable. Because of the possibility of human or mechanical error as well as other factors, however, all information contained herein is provided 'AS IS' without warranty of any kind. ICRA Analytics adopts all necessary measures so that the information it uses is of sufficient quality and from sources ICRA Analytics considers to be reliable including, when appropriate, independent third-party sources. However, ICRA Analytics is not an auditor and cannot in every instance independently verify or validate information received in preparing this document." +
                        "All information contained herein must be construed solely as statements of opinion, and  ICRA Analytics Limited or its affiliates or group companies and its respective and any of its officers, directors, personnel and employees, disclaim liability to any loss, damage of any nature, including but not limited to direct, indirect, punitive, special, exemplary, consequential, as also any loss of profit in any way arising from the use of this document or its contents in any manner or for any contingency within or beyond the control of, ICRA Analytics or any of its directors, officers, employees, agents, representatives, licensors or suppliers, arising from or in connection with the information contained herein or the use of or inability to use any such information.Opinions expressed in the document are not the opinions of our holding company, ICRA Limited(ICRA), and should not be construed as any indication of credit rating or grading of ICRA for any instruments that have been issued or are to be issued by any entity.The recipient alone shall be fully responsible and / or are liable for any decision taken on the basis of this document and / or the information contained herein.");
                    Cell.CellStyle = declationstyle;

                }
                NPOIWrite.CellMerged(sheetTwo, 4, 4, 0, 17);
                sheetTwo.GetRow(4).HeightInPoints = 200;
                #endregion

                #region Disclaimer Sheet HyperLink
                XSSFCellStyle HyperLinkStyle = (XSSFCellStyle)workbook.CreateCellStyle();
                IFont HyperLinkFont = workbook.CreateFont();
                HyperLinkFont.Color = IndexedColors.Orange.Index;
                HyperLinkFont.Underline = FontUnderlineType.Single;
                HyperLinkStyle.SetFont(HyperLinkFont);

                Row = sheetTwo.CreateRow(5);
                Cell = Row.CreateCell(0);
                Cell.SetCellValue("Click here for third-party disclaimers");
                XSSFCreationHelper createHelper = (XSSFCreationHelper)workbook.GetCreationHelper();
                XSSFHyperlink link = (XSSFHyperlink)createHelper.CreateHyperlink(HyperlinkType.Url);
                link.Address = "https://www.icraanalytics.com/home/thirdpartydisclaimers";
                Cell.Hyperlink = link;
                Cell.CellStyle = HyperLinkStyle;
                #endregion

                sheet.ActiveCell = new CellAddress(0, 1);
                var stream = new MemoryStream();
                workbook.Write(stream);

                return workbook;
            }
            catch (Exception ex)
            {


            }
            return null;
        }

        public static NPOI.XSSF.UserModel.XSSFWorkbook ExportToExcelWorkBookWithNumberDecimalFormatReportBuilder(UserBasicSettings ubs, List<TableHeaderEntity> listTableHeader,
           List<ExportEntity> listData, RankColor ObjRankColors, QuartileColor ObjQuartileColors, bool IsRankColor = false, bool IsQuartileColor = false, string LogoPath = "", string ReportName = "", string StrDateAsOn = "", string SheetName = "Output", string StrCalculationLogic = "")
        {
            try
            {


                var RankIndexes = listTableHeader.Where(x => x.ColumnName.Contains("Rank")).Select(x => x.Position).ToArray();
                var QuartileIndexes = listTableHeader.Where(x => x.ColumnName.Contains("Quartile")).Select(x => x.Position).ToArray();

                HSSFPalette palette = new HSSFWorkbook().GetCustomPalette();
                short palRank1Index = 0;
                short palRank2Index = 0;
                short palRank3Index = 0;
                short palQuartile1Index = 0;
                short palQuartile2Index = 0;
                short palQuartile3Index = 0;
                short palQuartile4Index = 0;
                var DateTimeFormat = ubs.DateFormat;
                var MonthYearFormat = "MMM-yyyy";
                Color color = new Color();
                Color Rank1color = new Color(); Color Rank2color = new Color(); Color Rank3color = new Color();
                Color Quartile1color = new Color(); Color Quartile2color = new Color(); Color Quartile3color = new Color();
                Color Quartile4color = new Color();
                if (IsRankColor)
                {
                    color = !string.IsNullOrEmpty(ObjRankColors.Rank1Color) ? ColorTranslator.FromHtml(ObjRankColors.Rank1Color) : Color.Empty;
                    palRank1Index = !color.IsEmpty ? palette.FindSimilarColor(color.R, color.G, color.B).Indexed : (short)0;
                    Rank1color = !string.IsNullOrEmpty(ObjRankColors.Rank1Color) ? ColorTranslator.FromHtml(ObjRankColors.Rank1Color) : Color.Empty;

                    color = !string.IsNullOrEmpty(ObjRankColors.Rank2Color) ? ColorTranslator.FromHtml(ObjRankColors.Rank2Color) : Color.Empty;
                    palRank2Index = !color.IsEmpty ? palette.FindSimilarColor(color.R, color.G, color.B).Indexed : (short)0;
                    Rank2color = !string.IsNullOrEmpty(ObjRankColors.Rank2Color) ? ColorTranslator.FromHtml(ObjRankColors.Rank2Color) : Color.Empty;

                    color = !string.IsNullOrEmpty(ObjRankColors.Rank3Color) ? ColorTranslator.FromHtml(ObjRankColors.Rank3Color) : Color.Empty;
                    palRank3Index = !color.IsEmpty ? palette.FindSimilarColor(color.R, color.G, color.B).Indexed : (short)0;
                    Rank3color = !string.IsNullOrEmpty(ObjRankColors.Rank3Color) ? ColorTranslator.FromHtml(ObjRankColors.Rank3Color) : Color.Empty;
                }
                if (IsQuartileColor)
                {
                    color = !string.IsNullOrEmpty(ObjQuartileColors.Quartile1Color) ? ColorTranslator.FromHtml(ObjQuartileColors.Quartile1Color) : Color.Empty;
                    palQuartile1Index = !color.IsEmpty ? palette.FindSimilarColor(color.R, color.G, color.B).Indexed : (short)0;
                    Quartile1color = !string.IsNullOrEmpty(ObjQuartileColors.Quartile1Color) ? ColorTranslator.FromHtml(ObjQuartileColors.Quartile1Color) : Color.Empty;

                    color = !string.IsNullOrEmpty(ObjQuartileColors.Quartile2Color) ? ColorTranslator.FromHtml(ObjQuartileColors.Quartile2Color) : Color.Empty;
                    palQuartile2Index = !color.IsEmpty ? palette.FindSimilarColor(color.R, color.G, color.B).Indexed : (short)0;
                    Quartile2color = !string.IsNullOrEmpty(ObjQuartileColors.Quartile2Color) ? ColorTranslator.FromHtml(ObjQuartileColors.Quartile2Color) : Color.Empty;

                    color = !string.IsNullOrEmpty(ObjQuartileColors.Quartile3Color) ? ColorTranslator.FromHtml(ObjQuartileColors.Quartile3Color) : Color.Empty;
                    palQuartile3Index = !color.IsEmpty ? palette.FindSimilarColor(color.R, color.G, color.B).Indexed : (short)0;
                    Quartile3color = !string.IsNullOrEmpty(ObjQuartileColors.Quartile3Color) ? ColorTranslator.FromHtml(ObjQuartileColors.Quartile3Color) : Color.Empty;

                    color = !string.IsNullOrEmpty(ObjQuartileColors.Quartile4Color) ? ColorTranslator.FromHtml(ObjQuartileColors.Quartile4Color) : Color.Empty;
                    palQuartile4Index = !color.IsEmpty ? palette.FindSimilarColor(color.R, color.G, color.B).Indexed : (short)0;
                    Quartile4color = !string.IsNullOrEmpty(ObjQuartileColors.Quartile4Color) ? ColorTranslator.FromHtml(ObjQuartileColors.Quartile4Color) : Color.Empty;
                }

                #region Variable
                string Header = ubs.Reporting_Format_Header;
                string Footer = ubs.Reporting_Format_Footer;
                string BlankData = ubs.BlankData.ToUpper() == "BLANK" ? "" : ubs.BlankData;

                string StrHeader1 = "ICRA Analytics Limited";
                string StrHeader2 = "3rd Floor, Electric Mansion,Appasaheb Marathe Marg, Prabhadevi,Mumbai - 400 025 Maharashtra, India";
                string StrHeader3 = Header;//"Mumbai, Maharashtra 400093, IN";
                string StrReportName = ReportName;
                //string StrSource = "Source: MFI 360";
                string StrSource = "Source: " + (string.IsNullOrEmpty(UserStatisticsEntity.SourceName) ? "MFI 360" : UserStatisticsEntity.SourceName);
                StrDateAsOn = "Data as on " + StrDateAsOn;
                string StrReportGeneratedOn = "Report Generated on " + DateTime.Now.ToString("dd-MMM-yyyy HH:mm:ss");

                #region number and decimal variable for AUM
                var aumPaddding = new string('0', (int)ubs.AUMDecimalFormat);
                var aumDecimalFormat = "0." + aumPaddding;
                string aumNUMBERFORMAT = ubs.NumberFormat;
                var aumNumberFormat = aumNUMBERFORMAT.Replace("0", "#");
                string aumNumberDecimalFormat = aumNumberFormat + "0." + new String('0', (int)ubs.AUMDecimalFormat);
                #endregion

                #region number and decimal variable for return
                var retPaddding = new string('0', (int)ubs.ReturnDecimalFormat);
                var retDecimalFormat = "0." + retPaddding;
                string retNUMBERFORMAT = ubs.NumberFormat;
                var retNumberFormat = retNUMBERFORMAT.Replace("0", "#");
                string retNumberDecimalFormat = retNumberFormat + "0." + new String('0', (int)ubs.ReturnDecimalFormat);
                #endregion

                #region number and decimal variable for NAV
                var navPaddding = new string('0', (int)ubs.NavDecimalFormat);
                var navDecimalFormat = "0." + navPaddding;
                string navNUMBERFORMAT = ubs.NumberFormat;
                var navNumberFormat = navNUMBERFORMAT.Replace("0", "#");
                string navNumberDecimalFormat = navNumberFormat + "0." + new String('0', (int)ubs.NavDecimalFormat);
                #endregion


                #region number and decimal variable for Other
                var othPaddding = new string('0', (int)ubs.OtherDecimal);
                var othDecimalFormat = "0." + othPaddding;
                string othNUMBERFORMAT = ubs.NumberFormat;
                var othNumberFormat = othNUMBERFORMAT.Replace("0", "#");
                string othNumberDecimalFormat = othNumberFormat + "0." + new String('0', (int)ubs.OtherDecimal);
                #endregion

                #region number and decimal variable for Ratio
                var ratioPaddding = new string('0', (int)ubs.RatioDecimalFormat);
                var ratioDecimalFormat = "0." + ratioPaddding;
                string ratioNUMBERFORMAT = ubs.NumberFormat;
                var ratioNumberFormat = ratioNUMBERFORMAT.Replace("0", "#");
                string ratioNumberDecimalFormat = ratioNumberFormat + "0." + new String('0', (int)ubs.RatioDecimalFormat);
                #endregion
                #region int Format with out Decimal
                var intNumberWithoutDecimalFormat = ubs.NumberFormat.Replace("0", "#");
                #endregion
                #endregion

                NPOI.XSSF.UserModel.XSSFWorkbook workbook = new NPOI.XSSF.UserModel.XSSFWorkbook();

                ISheet sheet = workbook.CreateSheet(SheetName);
                ISheet sheetTwo = workbook.CreateSheet("Disclaimer");

                #region Excel Sheet Gridlines Delete
                sheet.DisplayGridlines = false;
                sheetTwo.DisplayGridlines = false;
                #endregion

                #region Header Freeze
                sheet.CreateFreezePane(1, 6);
                #endregion

                #region Set Font For Header1,Header2 and Header3
                XSSFCellStyle HeaderStyle = (XSSFCellStyle)workbook.CreateCellStyle();
                IFont Headerfont = workbook.CreateFont();
                Headerfont.Boldweight = (short)FontBoldWeight.Bold;
                HeaderStyle.SetFont(Headerfont);
                #endregion

                #region Set Cell Value For Header1, Header2 and Header3
                var ICRArow = sheet.CreateRow(0);
                ICRArow.CreateCell(0);
                NPOIWrite.CellMerged(sheet, 0, 0, 1, 9);
                var ICRACell = ICRArow.CreateCell(1);

                ICRACell.SetCellValue(StrHeader1);
                ICRACell.CellStyle = HeaderStyle;
                ICRArow = sheet.CreateRow(1);
                ICRArow.CreateCell(0);
                NPOIWrite.CellMerged(sheet, 1, 1, 1, 9);
                ICRACell = ICRArow.CreateCell(1);
                ICRACell.SetCellValue(StrHeader2);
                ICRACell.CellStyle = HeaderStyle;
                ICRArow = sheet.CreateRow(2);
                NPOIWrite.CellMerged(sheet, 2, 2, 1, 9);
                ICRArow.CreateCell(0);
                ICRACell = ICRArow.CreateCell(1);
                ICRACell.SetCellValue(StrHeader3);
                ICRACell.CellStyle = HeaderStyle;
                ICRACell.CellStyle.Alignment = HorizontalAlignment.Center;
                ICRArow = sheet.CreateRow(3);
                ICRArow.CreateCell(0);
                ICRACell = ICRArow.CreateCell(1);
                ICRACell.CellStyle.Alignment = HorizontalAlignment.Center;
                NPOIWrite.AutoFitColumn(sheet, 1);
                ICRACell.CellStyle = HeaderStyle;
                #endregion

                #region Report Name
                ICRArow = sheet.CreateRow(4);
                ICRArow.CreateCell(0);
                ICRACell = ICRArow.CreateCell(0);
                ICRACell.SetCellValue(StrReportName);
                HeaderStyle.Alignment = HorizontalAlignment.Left;
                ICRACell.CellStyle = HeaderStyle;
                #endregion

                #region Header creation in the Excel
                var headerRow = sheet.CreateRow(5);
                sheet.GetRow(5).HeightInPoints = 30;
                var listHeaderFinal = listTableHeader.OrderBy(x => x.Position).ToList();
                for (int i = 0; i < listHeaderFinal.Count; i++)
                {
                    var cell = headerRow.CreateCell(i);
                    cell.SetCellValue(listHeaderFinal[i].ColumnName);
                    NPOIWrite.AutoFitColumn(sheet, i);

                    #region Commented by Subrata on 21 Feb 2018
                    //ICellStyle CellStyle = workbook.CreateCellStyle();
                    //CellStyle = workbook.CreateCellStyle();
                    //CellStyle.FillBackgroundColor = IndexedColors.Blue.Index;
                    #endregion

                    #region Added by Subrata on 21 Feb 2018
                    XSSFCellStyle style = (XSSFCellStyle)workbook.CreateCellStyle();
                    XSSFColor colorToFill = new XSSFColor(new byte[] { 68, 114, 196 });//{ 51, 204, 204 }//Color.Blue);
                    style.SetFillForegroundColor(colorToFill);
                    IFont font = workbook.CreateFont();
                    font.Color = IndexedColors.White.Index;
                    font.Boldweight = (short)FontBoldWeight.Bold;
                    style.SetFont(font);
                    style.FillPattern = FillPattern.SolidForeground;
                    style.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                    style.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                    style.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                    style.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                    if (i > 0)
                    {
                        style.Alignment = HorizontalAlignment.Center;
                        style.VerticalAlignment = VerticalAlignment.Center;
                    }
                    else
                    {
                        //style.Alignment = HorizontalAlignment.Left;
                        style.Alignment = (string.IsNullOrEmpty(listHeaderFinal[i].TextAlign) || listHeaderFinal[i].TextAlign == EnumTextAlign.left.ToString()) ? HorizontalAlignment.Left
                        : listHeaderFinal[i].TextAlign == EnumTextAlign.center.ToString() ? HorizontalAlignment.Center : HorizontalAlignment.Right;
                        style.VerticalAlignment = VerticalAlignment.Center;
                    }
                    #endregion

                    cell.CellStyle = style;

                }
                #endregion

                #region Cell Style For Even Row

                #region With DecimalFormat AUM
                XSSFCellStyle aumAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                aumAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                aumAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                aumAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                aumAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor aumcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
                aumAllCellStyleEvenDecFrmt.SetFillForegroundColor(aumcolorToFillEvenWtoutDec);
                aumAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
                IDataFormat aumformatEven = workbook.CreateDataFormat();
                aumAllCellStyleEvenDecFrmt.DataFormat = aumformatEven.GetFormat(aumDecimalFormat);
                aumAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
                aumAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

                /// Number Format ////
                XSSFCellStyle aumAllCellStyleEvenDecFrmtWNum = (XSSFCellStyle)workbook.CreateCellStyle();
                aumAllCellStyleEvenDecFrmtWNum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                aumAllCellStyleEvenDecFrmtWNum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                aumAllCellStyleEvenDecFrmtWNum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                aumAllCellStyleEvenDecFrmtWNum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor aumcolorToFillEvenWtoutDecWNum = new XSSFColor(new byte[] { 176, 196, 222 });
                aumAllCellStyleEvenDecFrmtWNum.SetFillForegroundColor(aumcolorToFillEvenWtoutDecWNum);
                aumAllCellStyleEvenDecFrmtWNum.FillPattern = FillPattern.SolidForeground;
                IDataFormat aumformatEvenWNum = workbook.CreateDataFormat();
                aumAllCellStyleEvenDecFrmtWNum.DataFormat = aumformatEvenWNum.GetFormat(aumNumberDecimalFormat);
                aumAllCellStyleEvenDecFrmtWNum.Alignment = HorizontalAlignment.Center;
                aumAllCellStyleEvenDecFrmtWNum.VerticalAlignment = VerticalAlignment.Center;
                #endregion

                #region With DecimalFormat Return
                XSSFCellStyle retAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                retAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                retAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                retAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                retAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor retcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
                retAllCellStyleEvenDecFrmt.SetFillForegroundColor(retcolorToFillEvenWtoutDec);
                retAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
                IDataFormat retformatEven = workbook.CreateDataFormat();
                retAllCellStyleEvenDecFrmt.DataFormat = retformatEven.GetFormat(retDecimalFormat);
                retAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
                retAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;


                ////Number Format ////
                XSSFCellStyle retAllCellStyleEvenDecFrmtWnum = (XSSFCellStyle)workbook.CreateCellStyle();
                retAllCellStyleEvenDecFrmtWnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                retAllCellStyleEvenDecFrmtWnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                retAllCellStyleEvenDecFrmtWnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                retAllCellStyleEvenDecFrmtWnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor retcolorToFillEvenWtoutDecWnum = new XSSFColor(new byte[] { 176, 196, 222 });
                retAllCellStyleEvenDecFrmtWnum.SetFillForegroundColor(retcolorToFillEvenWtoutDecWnum);
                retAllCellStyleEvenDecFrmtWnum.FillPattern = FillPattern.SolidForeground;
                IDataFormat retformatEvenWnum = workbook.CreateDataFormat();
                retAllCellStyleEvenDecFrmtWnum.DataFormat = retformatEvenWnum.GetFormat(retNumberDecimalFormat);
                retAllCellStyleEvenDecFrmtWnum.Alignment = HorizontalAlignment.Center;
                retAllCellStyleEvenDecFrmtWnum.VerticalAlignment = VerticalAlignment.Center;
                #endregion

                #region With DecimalFormat Nav
                XSSFCellStyle navAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                navAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                navAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                navAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                navAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor navcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
                navAllCellStyleEvenDecFrmt.SetFillForegroundColor(navcolorToFillEvenWtoutDec);
                navAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
                IDataFormat navformatEven = workbook.CreateDataFormat();
                navAllCellStyleEvenDecFrmt.DataFormat = navformatEven.GetFormat(navDecimalFormat);
                navAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
                navAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;


                /// Number Format ////
                XSSFCellStyle navAllCellStyleEvenDecFrmtWnnum = (XSSFCellStyle)workbook.CreateCellStyle();
                navAllCellStyleEvenDecFrmtWnnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                navAllCellStyleEvenDecFrmtWnnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                navAllCellStyleEvenDecFrmtWnnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                navAllCellStyleEvenDecFrmtWnnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor navcolorToFillEvenWtoutDecWnnum = new XSSFColor(new byte[] { 176, 196, 222 });
                navAllCellStyleEvenDecFrmtWnnum.SetFillForegroundColor(navcolorToFillEvenWtoutDecWnnum);
                navAllCellStyleEvenDecFrmtWnnum.FillPattern = FillPattern.SolidForeground;
                IDataFormat navformatEvenWnnum = workbook.CreateDataFormat();
                navAllCellStyleEvenDecFrmtWnnum.DataFormat = navformatEvenWnnum.GetFormat(navNumberDecimalFormat);
                navAllCellStyleEvenDecFrmtWnnum.Alignment = HorizontalAlignment.Center;
                navAllCellStyleEvenDecFrmtWnnum.VerticalAlignment = VerticalAlignment.Center;
                #endregion

                #region With DecimalFormat Other
                XSSFCellStyle otherAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                otherAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                otherAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                otherAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                otherAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor othercolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
                otherAllCellStyleEvenDecFrmt.SetFillForegroundColor(othercolorToFillEvenWtoutDec);
                otherAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
                IDataFormat otherformatEven = workbook.CreateDataFormat();
                otherAllCellStyleEvenDecFrmt.DataFormat = otherformatEven.GetFormat(othDecimalFormat);
                otherAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
                otherAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

                /// Number Format ///
                XSSFCellStyle otherAllCellStyleEvenDecFrmtWnum = (XSSFCellStyle)workbook.CreateCellStyle();
                otherAllCellStyleEvenDecFrmtWnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                otherAllCellStyleEvenDecFrmtWnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                otherAllCellStyleEvenDecFrmtWnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                otherAllCellStyleEvenDecFrmtWnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor othercolorToFillEvenWtoutDecWnum = new XSSFColor(new byte[] { 176, 196, 222 });
                otherAllCellStyleEvenDecFrmtWnum.SetFillForegroundColor(othercolorToFillEvenWtoutDecWnum);
                otherAllCellStyleEvenDecFrmtWnum.FillPattern = FillPattern.SolidForeground;
                IDataFormat otherformatEvenWnum = workbook.CreateDataFormat();
                otherAllCellStyleEvenDecFrmtWnum.DataFormat = otherformatEvenWnum.GetFormat(othNumberDecimalFormat);
                otherAllCellStyleEvenDecFrmtWnum.Alignment = HorizontalAlignment.Center;
                otherAllCellStyleEvenDecFrmtWnum.VerticalAlignment = VerticalAlignment.Center;
                #endregion

                #region With DecimalFormat Ratio
                XSSFCellStyle ratAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                ratAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                ratAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                ratAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                ratAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor ratcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
                ratAllCellStyleEvenDecFrmt.SetFillForegroundColor(ratcolorToFillEvenWtoutDec);
                ratAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
                IDataFormat ratformatEven = workbook.CreateDataFormat();
                ratAllCellStyleEvenDecFrmt.DataFormat = ratformatEven.GetFormat(ratioDecimalFormat);
                ratAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
                ratAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

                XSSFCellStyle ratAllCellStyleEvenDecFrmtWth = (XSSFCellStyle)workbook.CreateCellStyle();
                ratAllCellStyleEvenDecFrmtWth.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                ratAllCellStyleEvenDecFrmtWth.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                ratAllCellStyleEvenDecFrmtWth.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                ratAllCellStyleEvenDecFrmtWth.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor ratcolorToFillEvenWtoutDecwth = new XSSFColor(new byte[] { 176, 196, 222 });
                ratAllCellStyleEvenDecFrmtWth.SetFillForegroundColor(ratcolorToFillEvenWtoutDecwth);
                ratAllCellStyleEvenDecFrmtWth.FillPattern = FillPattern.SolidForeground;
                IDataFormat ratformatEvenWth = workbook.CreateDataFormat();
                ratAllCellStyleEvenDecFrmtWth.DataFormat = ratformatEvenWth.GetFormat(ratioNumberDecimalFormat);
                ratAllCellStyleEvenDecFrmtWth.Alignment = HorizontalAlignment.Center;
                ratAllCellStyleEvenDecFrmtWth.VerticalAlignment = VerticalAlignment.Center;
                #endregion


                #region No Format
                XSSFCellStyle AllCellStyleEven = (XSSFCellStyle)workbook.CreateCellStyle();
                AllCellStyleEven.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                AllCellStyleEven.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                AllCellStyleEven.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                AllCellStyleEven.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor colorToFillEven = new XSSFColor(new byte[] { 176, 196, 222 });
                AllCellStyleEven.SetFillForegroundColor(colorToFillEven);
                AllCellStyleEven.FillPattern = FillPattern.SolidForeground;
                AllCellStyleEven.Alignment = HorizontalAlignment.Center;
                AllCellStyleEven.VerticalAlignment = VerticalAlignment.Center;
                #endregion

                #endregion

                #region Cell Style For Odd Row

                #region With Decimal Format AUM
                XSSFCellStyle aumAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
                aumAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                aumAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                aumAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                aumAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor AUMcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
                aumAllCellStyleOddDec.SetFillForegroundColor(AUMcolorToFillOddDec);
                aumAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
                IDataFormat AUMformatOddDec = workbook.CreateDataFormat();
                aumAllCellStyleOddDec.DataFormat = AUMformatOddDec.GetFormat(aumDecimalFormat);
                aumAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
                aumAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

                XSSFCellStyle aumAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
                aumAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                aumAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                aumAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                aumAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor AUMcolorToFillOddDecWnf = new XSSFColor(new byte[] { 255, 255, 255 });
                aumAllCellStyleOddDecWnuf.SetFillForegroundColor(AUMcolorToFillOddDecWnf);
                aumAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
                IDataFormat AUMformatOddDecWnuf = workbook.CreateDataFormat();
                aumAllCellStyleOddDecWnuf.DataFormat = AUMformatOddDecWnuf.GetFormat(aumNumberDecimalFormat);
                aumAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
                aumAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
                #endregion

                #region With Decimal Format Return
                XSSFCellStyle retAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
                retAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                retAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                retAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                retAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor RETcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
                retAllCellStyleOddDec.SetFillForegroundColor(RETcolorToFillOddDec);
                retAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
                IDataFormat RETformatOddDec = workbook.CreateDataFormat();
                retAllCellStyleOddDec.DataFormat = RETformatOddDec.GetFormat(retDecimalFormat);
                retAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
                retAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

                XSSFCellStyle retAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
                retAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                retAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                retAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                retAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor RETcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
                retAllCellStyleOddDecWnuf.SetFillForegroundColor(RETcolorToFillOddDecWnuf);
                retAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
                IDataFormat RETformatOddDecWnuf = workbook.CreateDataFormat();
                retAllCellStyleOddDecWnuf.DataFormat = RETformatOddDecWnuf.GetFormat(retNumberDecimalFormat);
                retAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
                retAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
                #endregion

                #region With Decimal Format Nav
                XSSFCellStyle navAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
                navAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                navAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                navAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                navAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor naVcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
                navAllCellStyleOddDec.SetFillForegroundColor(naVcolorToFillOddDec);
                navAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
                IDataFormat naVformatOddDec = workbook.CreateDataFormat();
                navAllCellStyleOddDec.DataFormat = naVformatOddDec.GetFormat(navDecimalFormat);
                navAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
                navAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


                XSSFCellStyle navAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
                navAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                navAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                navAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                navAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor naVcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
                navAllCellStyleOddDecWnuf.SetFillForegroundColor(naVcolorToFillOddDecWnuf);
                navAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
                IDataFormat naVformatOddDecWnuf = workbook.CreateDataFormat();
                navAllCellStyleOddDecWnuf.DataFormat = naVformatOddDecWnuf.GetFormat(navNumberDecimalFormat);
                navAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
                navAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
                #endregion


                #region With Decimal Format Other
                XSSFCellStyle othAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
                othAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                othAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                othAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                othAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor othcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
                othAllCellStyleOddDec.SetFillForegroundColor(othcolorToFillOddDec);
                othAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
                IDataFormat othformatOddDec = workbook.CreateDataFormat();
                othAllCellStyleOddDec.DataFormat = othformatOddDec.GetFormat(othDecimalFormat);
                othAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
                othAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


                XSSFCellStyle othAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
                othAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                othAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                othAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                othAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor othcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
                othAllCellStyleOddDecWnuf.SetFillForegroundColor(othcolorToFillOddDecWnuf);
                othAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
                IDataFormat othformatOddDecWnuf = workbook.CreateDataFormat();
                othAllCellStyleOddDecWnuf.DataFormat = othformatOddDecWnuf.GetFormat(othNumberDecimalFormat);
                othAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
                othAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
                #endregion


                #region With Decimal Format ratio
                XSSFCellStyle ratAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
                ratAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                ratAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                ratAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                ratAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor retcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
                ratAllCellStyleOddDec.SetFillForegroundColor(retcolorToFillOddDec);
                ratAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
                IDataFormat retformatOddDec = workbook.CreateDataFormat();
                ratAllCellStyleOddDec.DataFormat = retformatOddDec.GetFormat(ratioDecimalFormat);
                ratAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
                ratAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


                XSSFCellStyle ratAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
                ratAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                ratAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                ratAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                ratAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor retcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
                ratAllCellStyleOddDecWnuf.SetFillForegroundColor(retcolorToFillOddDecWnuf);
                ratAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
                IDataFormat retformatOddDecWnuf = workbook.CreateDataFormat();
                ratAllCellStyleOddDecWnuf.DataFormat = retformatOddDecWnuf.GetFormat(ratioNumberDecimalFormat);
                ratAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
                ratAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
                #endregion

                #region No Format
                XSSFCellStyle AllCellStyleOdd = (XSSFCellStyle)workbook.CreateCellStyle();
                AllCellStyleOdd.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                AllCellStyleOdd.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                AllCellStyleOdd.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                AllCellStyleOdd.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor colorToFillOdd = new XSSFColor(new byte[] { 255, 255, 255 });
                AllCellStyleOdd.SetFillForegroundColor(colorToFillOdd);
                AllCellStyleOdd.FillPattern = FillPattern.SolidForeground;
                AllCellStyleOdd.Alignment = HorizontalAlignment.Center;
                AllCellStyleOdd.VerticalAlignment = VerticalAlignment.Center;
                #endregion

                #endregion

                #region Cell Style For First Column Even Row
                XSSFCellStyle AllCellStyleFstColmEven = (XSSFCellStyle)workbook.CreateCellStyle();
                AllCellStyleFstColmEven.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                AllCellStyleFstColmEven.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                AllCellStyleFstColmEven.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                AllCellStyleFstColmEven.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor colorToFillFstClmnEven = new XSSFColor(new byte[] { 176, 196, 222 });
                AllCellStyleFstColmEven.SetFillForegroundColor(colorToFillFstClmnEven);
                AllCellStyleFstColmEven.FillPattern = FillPattern.SolidForeground;
                AllCellStyleFstColmEven.Alignment = HorizontalAlignment.Left;
                AllCellStyleFstColmEven.VerticalAlignment = VerticalAlignment.Center;
                #endregion

                #region Cell Style For First Column Odd Row
                XSSFCellStyle AllCellStyleFstColmOdd = (XSSFCellStyle)workbook.CreateCellStyle();
                AllCellStyleFstColmOdd.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                AllCellStyleFstColmOdd.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                AllCellStyleFstColmOdd.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                AllCellStyleFstColmOdd.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor colorToFillFstClmnOdd = new XSSFColor(new byte[] { 255, 255, 255 });
                AllCellStyleFstColmOdd.SetFillForegroundColor(colorToFillFstClmnOdd);
                AllCellStyleFstColmOdd.FillPattern = FillPattern.SolidForeground;
                AllCellStyleFstColmOdd.Alignment = HorizontalAlignment.Left;
                AllCellStyleFstColmOdd.VerticalAlignment = VerticalAlignment.Center;
                #endregion
                #region Without Decimal Number Format Even Row
                XSSFCellStyle intAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                intAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                intAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                intAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                intAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor intcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
                intAllCellStyleEvenDecFrmt.SetFillForegroundColor(intcolorToFillEvenWtoutDec);
                intAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
                IDataFormat intformatEven = workbook.CreateDataFormat();
                intAllCellStyleEvenDecFrmt.DataFormat = intformatEven.GetFormat(intNumberWithoutDecimalFormat);
                intAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
                intAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;
                //========Rank & Quartile Style for Even

                XSSFCellStyle Rank1EvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                Rank1EvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                Rank1EvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                Rank1EvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                Rank1EvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                //Rank1EvenDecFrmt.SetFillForegroundColor(intcolorToFillEvenWtoutDec);
                Rank1EvenDecFrmt.SetFillForegroundColor(Rank1color.IsEmpty ? intcolorToFillEvenWtoutDec : new XSSFColor(Rank1color));
                Rank1EvenDecFrmt.FillPattern = FillPattern.SolidForeground;
                //var rank1font = workbook.CreateFont();
                //rank1font.Color = palRank1Index;
                //rank1font.Boldweight = (short)FontBoldWeight.Bold;
                //Rank1EvenDecFrmt.SetFont(rank1font);
                Rank1EvenDecFrmt.DataFormat = 0;
                Rank1EvenDecFrmt.Alignment = HorizontalAlignment.Center;
                Rank1EvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;
                XSSFCellStyle Rank2EvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                Rank2EvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                Rank2EvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                Rank2EvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                Rank2EvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                //Rank2EvenDecFrmt.SetFillForegroundColor(intcolorToFillEvenWtoutDec);
                Rank2EvenDecFrmt.SetFillForegroundColor(Rank2color.IsEmpty ? intcolorToFillEvenWtoutDec : new XSSFColor(Rank2color));
                Rank2EvenDecFrmt.FillPattern = FillPattern.SolidForeground;
                //var rank2font = workbook.CreateFont();
                //rank2font.Color = palRank2Index;
                //rank2font.Boldweight = (short)FontBoldWeight.Bold;
                //Rank2EvenDecFrmt.SetFont(rank2font);
                Rank2EvenDecFrmt.DataFormat = 0;
                Rank2EvenDecFrmt.Alignment = HorizontalAlignment.Center;
                Rank2EvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;
                XSSFCellStyle Rank3EvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                Rank3EvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                Rank3EvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                Rank3EvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                Rank3EvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                //Rank3EvenDecFrmt.SetFillForegroundColor(intcolorToFillEvenWtoutDec);
                Rank3EvenDecFrmt.SetFillForegroundColor(Rank3color.IsEmpty ? intcolorToFillEvenWtoutDec : new XSSFColor(Rank3color));
                Rank3EvenDecFrmt.FillPattern = FillPattern.SolidForeground;
                //var rank3font = workbook.CreateFont();
                //rank3font.Color = palRank3Index;
                //rank3font.Boldweight = (short)FontBoldWeight.Bold;
                //Rank3EvenDecFrmt.SetFont(rank3font);
                Rank3EvenDecFrmt.DataFormat = 0;
                Rank3EvenDecFrmt.Alignment = HorizontalAlignment.Center;
                Rank3EvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;
                XSSFCellStyle RankNocolorEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                RankNocolorEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                RankNocolorEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                RankNocolorEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                RankNocolorEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                RankNocolorEvenDecFrmt.SetFillForegroundColor(intcolorToFillEvenWtoutDec);
                RankNocolorEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
                //var rankNocolorfont = workbook.CreateFont();
                //rankNocolorfont.Color = (short)0;
                //rankNocolorfont.Boldweight = (short)FontBoldWeight.None;
                //RankNocolorEvenDecFrmt.SetFont(rankNocolorfont);
                RankNocolorEvenDecFrmt.DataFormat = 0;
                RankNocolorEvenDecFrmt.Alignment = HorizontalAlignment.Center;
                RankNocolorEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

                XSSFCellStyle Quartile1EvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                Quartile1EvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                Quartile1EvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                Quartile1EvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                Quartile1EvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                //Quartile1EvenDecFrmt.SetFillForegroundColor(intcolorToFillEvenWtoutDec);
                Quartile1EvenDecFrmt.SetFillForegroundColor(Quartile1color.IsEmpty ? intcolorToFillEvenWtoutDec : new XSSFColor(Quartile1color));
                Quartile1EvenDecFrmt.FillPattern = FillPattern.SolidForeground;
                //var Quartile1font = workbook.CreateFont();
                //Quartile1font.Color = palQuartile1Index;
                //Quartile1font.Boldweight = (short)FontBoldWeight.Bold;
                //Quartile1EvenDecFrmt.SetFont(Quartile1font);
                Quartile1EvenDecFrmt.DataFormat = 0;
                Quartile1EvenDecFrmt.Alignment = HorizontalAlignment.Center;
                Quartile1EvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;
                XSSFCellStyle Quartile2EvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                Quartile2EvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                Quartile2EvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                Quartile2EvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                Quartile2EvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                //Quartile2EvenDecFrmt.SetFillForegroundColor(intcolorToFillEvenWtoutDec);
                Quartile2EvenDecFrmt.SetFillForegroundColor(Quartile2color.IsEmpty ? intcolorToFillEvenWtoutDec : new XSSFColor(Quartile2color));
                Quartile2EvenDecFrmt.FillPattern = FillPattern.SolidForeground;
                //var Quartile2font = workbook.CreateFont();
                //Quartile2font.Color = palQuartile2Index;
                //Quartile2font.Boldweight = (short)FontBoldWeight.Bold;
                //Quartile2EvenDecFrmt.SetFont(Quartile2font);
                Quartile2EvenDecFrmt.DataFormat = 0;
                Quartile2EvenDecFrmt.Alignment = HorizontalAlignment.Center;
                Quartile2EvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;
                XSSFCellStyle Quartile3EvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                Quartile3EvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                Quartile3EvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                Quartile3EvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                Quartile3EvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                //Quartile3EvenDecFrmt.SetFillForegroundColor(intcolorToFillEvenWtoutDec);
                Quartile3EvenDecFrmt.SetFillForegroundColor(Quartile3color.IsEmpty ? intcolorToFillEvenWtoutDec : new XSSFColor(Quartile3color));
                Quartile3EvenDecFrmt.FillPattern = FillPattern.SolidForeground;
                //var Quartile3font = workbook.CreateFont();
                //Quartile3font.Color = palQuartile3Index;
                //Quartile3font.Boldweight = (short)FontBoldWeight.Bold;
                //Quartile3EvenDecFrmt.SetFont(Quartile3font);
                Quartile3EvenDecFrmt.DataFormat = 0;
                Quartile3EvenDecFrmt.Alignment = HorizontalAlignment.Center;
                Quartile3EvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;
                XSSFCellStyle Quartile4EvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                Quartile4EvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                Quartile4EvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                Quartile4EvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                Quartile4EvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                //Quartile4EvenDecFrmt.SetFillForegroundColor(intcolorToFillEvenWtoutDec);
                Quartile4EvenDecFrmt.SetFillForegroundColor(Quartile4color.IsEmpty ? intcolorToFillEvenWtoutDec : new XSSFColor(Quartile4color));
                Quartile4EvenDecFrmt.FillPattern = FillPattern.SolidForeground;
                //var Quartile4font = workbook.CreateFont();
                //Quartile4font.Color = palQuartile4Index;
                //Quartile4font.Boldweight = (short)FontBoldWeight.Bold;
                //Quartile4EvenDecFrmt.SetFont(Quartile4font);
                Quartile4EvenDecFrmt.DataFormat = 0;
                Quartile4EvenDecFrmt.Alignment = HorizontalAlignment.Center;
                Quartile4EvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;
                XSSFCellStyle QuartileNocolorEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                QuartileNocolorEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                QuartileNocolorEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                QuartileNocolorEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                QuartileNocolorEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                QuartileNocolorEvenDecFrmt.SetFillForegroundColor(intcolorToFillEvenWtoutDec);
                intAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
                //var QuartileNocolorfont = workbook.CreateFont();
                //QuartileNocolorfont.Color = (short)0;
                //QuartileNocolorfont.Boldweight = (short)FontBoldWeight.None;
                //QuartileNocolorEvenDecFrmt.SetFont(QuartileNocolorfont);
                QuartileNocolorEvenDecFrmt.DataFormat = 0;
                QuartileNocolorEvenDecFrmt.Alignment = HorizontalAlignment.Center;
                QuartileNocolorEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;
                //===============

                XSSFCellStyle intSimpleAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                intSimpleAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                intSimpleAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                intSimpleAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                intSimpleAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor intSimplecolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
                intSimpleAllCellStyleEvenDecFrmt.SetFillForegroundColor(intSimplecolorToFillEvenWtoutDec);
                intSimpleAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
                intSimpleAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
                intSimpleAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;
                #endregion
                #region Without Decimal Number Format Odd Row
                XSSFCellStyle intAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
                intAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                intAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                intAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                intAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor intcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
                intAllCellStyleOddDec.SetFillForegroundColor(intcolorToFillOddDec);
                intAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
                IDataFormat intformatOddDec = workbook.CreateDataFormat();
                intAllCellStyleOddDec.DataFormat = intformatOddDec.GetFormat(intNumberWithoutDecimalFormat);
                intAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
                intAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;
                //========Rank & Quartile Style for Odd
                XSSFCellStyle Rank1OddDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                Rank1OddDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                Rank1OddDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                Rank1OddDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                Rank1OddDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                //Rank1OddDecFrmt.SetFillForegroundColor(intcolorToFillOddDec);
                Rank1OddDecFrmt.SetFillForegroundColor(Rank1color.IsEmpty ? intcolorToFillOddDec : new XSSFColor(Rank1color));
                Rank1OddDecFrmt.FillPattern = FillPattern.SolidForeground;
                //var rank1Oddfont = workbook.CreateFont();
                //rank1Oddfont.Color = palRank1Index;
                //rank1Oddfont.Boldweight = (short)FontBoldWeight.Bold;
                //Rank1OddDecFrmt.SetFont(rank1Oddfont);
                Rank1OddDecFrmt.DataFormat = 0;
                Rank1OddDecFrmt.Alignment = HorizontalAlignment.Center;
                Rank1OddDecFrmt.VerticalAlignment = VerticalAlignment.Center;
                XSSFCellStyle Rank2OddDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                Rank2OddDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                Rank2OddDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                Rank2OddDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                Rank2OddDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                //Rank2OddDecFrmt.SetFillForegroundColor(intcolorToFillOddDec);
                Rank2OddDecFrmt.SetFillForegroundColor(Rank2color.IsEmpty ? intcolorToFillOddDec : new XSSFColor(Rank2color));
                Rank2OddDecFrmt.FillPattern = FillPattern.SolidForeground;
                //var rank2Oddfont = workbook.CreateFont();
                //rank2Oddfont.Color = palRank2Index;
                //rank2Oddfont.Boldweight = (short)FontBoldWeight.Bold;
                //Rank2OddDecFrmt.SetFont(rank2Oddfont);
                Rank2OddDecFrmt.DataFormat = 0;
                Rank2OddDecFrmt.Alignment = HorizontalAlignment.Center;
                Rank2OddDecFrmt.VerticalAlignment = VerticalAlignment.Center;
                XSSFCellStyle Rank3OddDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                Rank3OddDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                Rank3OddDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                Rank3OddDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                Rank3OddDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                //Rank3OddDecFrmt.SetFillForegroundColor(intcolorToFillOddDec);
                Rank3OddDecFrmt.SetFillForegroundColor(Rank3color.IsEmpty ? intcolorToFillOddDec : new XSSFColor(Rank3color));
                Rank3OddDecFrmt.FillPattern = FillPattern.SolidForeground;
                //var rank3Oddfont = workbook.CreateFont();
                //rank3Oddfont.Color = palRank3Index;
                //rank3Oddfont.Boldweight = (short)FontBoldWeight.Bold;
                //Rank3OddDecFrmt.SetFont(rank3Oddfont);
                Rank3OddDecFrmt.DataFormat = 0;
                Rank3OddDecFrmt.Alignment = HorizontalAlignment.Center;
                Rank3OddDecFrmt.VerticalAlignment = VerticalAlignment.Center;
                XSSFCellStyle RankNocolorOddDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                RankNocolorOddDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                RankNocolorOddDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                RankNocolorOddDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                RankNocolorOddDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                RankNocolorOddDecFrmt.SetFillForegroundColor(intcolorToFillOddDec);
                RankNocolorOddDecFrmt.FillPattern = FillPattern.SolidForeground;
                //var rankNocolorOddfont = workbook.CreateFont();
                //rankNocolorOddfont.Color = (short)0;
                //rankNocolorOddfont.Boldweight = (short)FontBoldWeight.None;
                //RankNocolorOddDecFrmt.SetFont(rankNocolorOddfont);
                RankNocolorOddDecFrmt.DataFormat = 0;
                RankNocolorOddDecFrmt.Alignment = HorizontalAlignment.Center;
                RankNocolorOddDecFrmt.VerticalAlignment = VerticalAlignment.Center;

                XSSFCellStyle Quartile1OddDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                Quartile1OddDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                Quartile1OddDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                Quartile1OddDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                Quartile1OddDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                //Quartile1OddDecFrmt.SetFillForegroundColor(intcolorToFillOddDec);
                Quartile1OddDecFrmt.SetFillForegroundColor(Quartile1color.IsEmpty ? intcolorToFillOddDec : new XSSFColor(Quartile1color));
                Quartile1OddDecFrmt.FillPattern = FillPattern.SolidForeground;
                //var Quartile1Oddfont = workbook.CreateFont();
                //Quartile1Oddfont.Color = palQuartile1Index;
                //Quartile1Oddfont.Boldweight = (short)FontBoldWeight.Bold;
                //Quartile1OddDecFrmt.SetFont(Quartile1Oddfont);
                Quartile1OddDecFrmt.DataFormat = 0;
                Quartile1OddDecFrmt.Alignment = HorizontalAlignment.Center;
                Quartile1OddDecFrmt.VerticalAlignment = VerticalAlignment.Center;
                XSSFCellStyle Quartile2OddDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                Quartile2OddDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                Quartile2OddDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                Quartile2OddDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                Quartile2OddDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                //Quartile2OddDecFrmt.SetFillForegroundColor(intcolorToFillOddDec);
                Quartile2OddDecFrmt.SetFillForegroundColor(Quartile2color.IsEmpty ? intcolorToFillOddDec : new XSSFColor(Quartile2color));
                Quartile2OddDecFrmt.FillPattern = FillPattern.SolidForeground;
                //var Quartile2Oddfont = workbook.CreateFont();
                //Quartile2Oddfont.Color = palQuartile2Index;
                //Quartile2Oddfont.Boldweight = (short)FontBoldWeight.Bold;
                //Quartile2OddDecFrmt.SetFont(Quartile2Oddfont);
                Quartile2OddDecFrmt.DataFormat = 0;
                Quartile2OddDecFrmt.Alignment = HorizontalAlignment.Center;
                Quartile2OddDecFrmt.VerticalAlignment = VerticalAlignment.Center;
                XSSFCellStyle Quartile3OddDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                Quartile3OddDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                Quartile3OddDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                Quartile3OddDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                Quartile3OddDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                //Quartile3OddDecFrmt.SetFillForegroundColor(intcolorToFillOddDec);
                Quartile3OddDecFrmt.SetFillForegroundColor(Quartile3color.IsEmpty ? intcolorToFillOddDec : new XSSFColor(Quartile3color));
                Quartile3OddDecFrmt.FillPattern = FillPattern.SolidForeground;
                //var Quartile3Oddfont = workbook.CreateFont();
                //Quartile3Oddfont.Color = palQuartile3Index;
                //Quartile3Oddfont.Boldweight = (short)FontBoldWeight.Bold;
                //Quartile3OddDecFrmt.SetFont(Quartile3Oddfont);
                Quartile3OddDecFrmt.DataFormat = 0;
                Quartile3OddDecFrmt.Alignment = HorizontalAlignment.Center;
                Quartile3OddDecFrmt.VerticalAlignment = VerticalAlignment.Center;
                XSSFCellStyle Quartile4OddDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                Quartile4OddDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                Quartile4OddDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                Quartile4OddDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                Quartile4OddDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                //Quartile4OddDecFrmt.SetFillForegroundColor(intcolorToFillOddDec);
                Quartile4OddDecFrmt.SetFillForegroundColor(Quartile4color.IsEmpty ? intcolorToFillOddDec : new XSSFColor(Quartile4color));
                Quartile4OddDecFrmt.FillPattern = FillPattern.SolidForeground;
                //var Quartile4Oddfont = workbook.CreateFont();
                //Quartile4Oddfont.Color = palQuartile4Index;
                //Quartile4Oddfont.Boldweight = (short)FontBoldWeight.Bold;
                //Quartile4OddDecFrmt.SetFont(Quartile4Oddfont);
                Quartile4OddDecFrmt.DataFormat = 0;
                Quartile4OddDecFrmt.Alignment = HorizontalAlignment.Center;
                Quartile4OddDecFrmt.VerticalAlignment = VerticalAlignment.Center;
                XSSFCellStyle QuartileNocolorOddDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                QuartileNocolorOddDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                QuartileNocolorOddDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                QuartileNocolorOddDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                QuartileNocolorOddDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                QuartileNocolorOddDecFrmt.SetFillForegroundColor(intcolorToFillOddDec);
                intAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
                //var QuartileNocolorOddfont = workbook.CreateFont();
                //QuartileNocolorOddfont.Color = (short)0;
                //QuartileNocolorOddfont.Boldweight = (short)FontBoldWeight.None;
                //QuartileNocolorOddDecFrmt.SetFont(QuartileNocolorOddfont);
                QuartileNocolorOddDecFrmt.DataFormat = 0;
                QuartileNocolorOddDecFrmt.Alignment = HorizontalAlignment.Center;
                QuartileNocolorOddDecFrmt.VerticalAlignment = VerticalAlignment.Center;
                //===============

                XSSFCellStyle intSimpleAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
                intSimpleAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                intSimpleAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                intSimpleAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                intSimpleAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor intSimplecolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
                intSimpleAllCellStyleOddDec.SetFillForegroundColor(intSimplecolorToFillOddDec);
                intSimpleAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
                intSimpleAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
                intSimpleAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;
                #endregion
                #region With DateTime format
                XSSFCellStyle DateTimeAllCellStyleEvenFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                DateTimeAllCellStyleEvenFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                DateTimeAllCellStyleEvenFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                DateTimeAllCellStyleEvenFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                DateTimeAllCellStyleEvenFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor DateTimecolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
                DateTimeAllCellStyleEvenFrmt.SetFillForegroundColor(DateTimecolorToFillEvenWtoutDec);
                DateTimeAllCellStyleEvenFrmt.FillPattern = FillPattern.SolidForeground;
                IDataFormat DateTimeformatEven = workbook.CreateDataFormat();
                DateTimeAllCellStyleEvenFrmt.DataFormat = DateTimeformatEven.GetFormat(DateTimeFormat);
                DateTimeAllCellStyleEvenFrmt.Alignment = HorizontalAlignment.Center;
                DateTimeAllCellStyleEvenFrmt.VerticalAlignment = VerticalAlignment.Center;

                XSSFCellStyle DateTimeAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
                DateTimeAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                DateTimeAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                DateTimeAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                DateTimeAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor DateTimecolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
                DateTimeAllCellStyleOddDec.SetFillForegroundColor(DateTimecolorToFillOddDec);
                DateTimeAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
                IDataFormat DateTimeformatOddDec = workbook.CreateDataFormat();
                DateTimeAllCellStyleOddDec.DataFormat = DateTimeformatOddDec.GetFormat(DateTimeFormat);
                DateTimeAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
                DateTimeAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


                #endregion
                #region With MonthYear format
                XSSFCellStyle MonthYearAllCellStyleEvenFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                MonthYearAllCellStyleEvenFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                MonthYearAllCellStyleEvenFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                MonthYearAllCellStyleEvenFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                MonthYearAllCellStyleEvenFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor MonthYearcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
                MonthYearAllCellStyleEvenFrmt.SetFillForegroundColor(MonthYearcolorToFillEvenWtoutDec);
                MonthYearAllCellStyleEvenFrmt.FillPattern = FillPattern.SolidForeground;
                IDataFormat MonthYearformatEven = workbook.CreateDataFormat();
                MonthYearAllCellStyleEvenFrmt.DataFormat = DateTimeformatEven.GetFormat(MonthYearFormat);
                MonthYearAllCellStyleEvenFrmt.Alignment = HorizontalAlignment.Center;
                MonthYearAllCellStyleEvenFrmt.VerticalAlignment = VerticalAlignment.Center;

                XSSFCellStyle MonthYearAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
                MonthYearAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                MonthYearAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                MonthYearAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                MonthYearAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor MonthYearcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
                MonthYearAllCellStyleOddDec.SetFillForegroundColor(MonthYearcolorToFillOddDec);
                MonthYearAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
                IDataFormat MonthYearformatOddDec = workbook.CreateDataFormat();
                MonthYearAllCellStyleOddDec.DataFormat = DateTimeformatOddDec.GetFormat(MonthYearFormat);
                MonthYearAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
                MonthYearAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


                #endregion
                #region Value added to the Excel

                #region Added by Subrata on 22 Feb 2018
                bool IsNumericKey = false;
                bool IsNumericValue = false;
                var AllListData = listData.SelectMany(x => x.LstKeyValuePair).ToArray();
                var AllDataKey = AllListData.Select(x => x.Key).Distinct().ToArray();
                int ValueRes;
                IsNumericKey = int.TryParse(AllDataKey[0], out ValueRes);
                #endregion

                int incr = 6;
                bool isNumeric = false;
                XSSFCellStyle ColorStyle = (XSSFCellStyle)workbook.CreateCellStyle();
                IFont rankfont = workbook.CreateFont();

                foreach (var item in listData)
                {
                    var dataRow = sheet.CreateRow(incr);
                    sheet.GetRow(incr).HeightInPoints = 20;
                    {
                        var cellValues = (from i in item.LstKeyValuePair
                                          from j in listTableHeader
                                          where i.Key == j.ColumnName
                                          orderby j.Position
                                          select new
                                          {
                                              IsNum = j.IsNumberFormatReq,
                                              DecType = j.DecFormatType,
                                              IsMixedType = j.IsMixedValueType,
                                              IsDateTimeStringMixedType = j.IsDateTimeStringMixedType,
                                              IsDateTimeType = j.IsDateTimeType,
                                              IsMonthYearType = j.IsMonthYearType,
                                              Value = i.Value
                                          }).ToArray();

                        for (int k = 0; k < cellValues.Length; k++)
                        {
                            var datacell = dataRow.CreateCell(k);
                            if (cellValues[k].DecType != DecimalFormatType.NoDecimalReq)
                            {
                                double OutVal;
                                if (string.IsNullOrEmpty(cellValues[k].Value) || cellValues[k].Value == BlankData || !double.TryParse(cellValues[k].Value, out OutVal))
                                {
                                    datacell.SetCellValue(cellValues[k].Value);
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleEven;
                                        else
                                            datacell.CellStyle = AllCellStyleOdd;
                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }

                                }
                                else
                                {
                                    datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                                    if (k > 0)
                                    {
                                        if (cellValues[k].DecType == DecimalFormatType.AUM)
                                        {
                                            if (incr % 2 == 0)
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {

                                                    datacell.CellStyle = aumAllCellStyleEvenDecFrmtWNum;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = aumAllCellStyleEvenDecFrmt;
                                                }
                                            }
                                            else
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    datacell.CellStyle = aumAllCellStyleOddDecWnuf;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = aumAllCellStyleOddDec;
                                                }
                                            }
                                        }
                                        else if (cellValues[k].DecType == DecimalFormatType.NAV)
                                        {
                                            if (incr % 2 == 0)
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    datacell.CellStyle = navAllCellStyleEvenDecFrmtWnnum;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = navAllCellStyleEvenDecFrmt;
                                                }
                                            }
                                            else
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    datacell.CellStyle = navAllCellStyleOddDecWnuf;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = navAllCellStyleOddDec;
                                                }

                                            }
                                        }
                                        else if (cellValues[k].DecType == DecimalFormatType.OTHER)
                                        {
                                            if (incr % 2 == 0)
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    datacell.CellStyle = otherAllCellStyleEvenDecFrmtWnum;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = otherAllCellStyleEvenDecFrmt;
                                                }
                                            }

                                            else
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    datacell.CellStyle = othAllCellStyleOddDecWnuf;
                                                }
                                                else
                                                {

                                                    datacell.CellStyle = othAllCellStyleOddDec;
                                                }

                                            }
                                        }
                                        else if (cellValues[k].DecType == DecimalFormatType.RATIO)
                                        {
                                            if (incr % 2 == 0)
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    datacell.CellStyle = ratAllCellStyleEvenDecFrmtWth;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = ratAllCellStyleEvenDecFrmt;
                                                }
                                            }
                                            else
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    datacell.CellStyle = ratAllCellStyleOddDecWnuf;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = ratAllCellStyleOddDec;
                                                }
                                            }
                                        }
                                        else if (cellValues[k].DecType == DecimalFormatType.RETURN)
                                        {
                                            if (incr % 2 == 0)
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    datacell.CellStyle = retAllCellStyleEvenDecFrmtWnum;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = retAllCellStyleEvenDecFrmt;
                                                }

                                            }
                                            else
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    datacell.CellStyle = retAllCellStyleOddDecWnuf;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = retAllCellStyleOddDec;
                                                }

                                            }
                                        }
                                        else if (cellValues[k].DecType == DecimalFormatType.IntegerWithOutDecimal)
                                        {
                                            if (incr % 2 == 0)
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    if (RankIndexes.Contains(k))
                                                    {
                                                        datacell.CellStyle = datacell.GetValue().ToString() == "1" ? Rank1EvenDecFrmt :
                                                        datacell.GetValue().ToString() == "2" ? Rank2EvenDecFrmt : datacell.GetValue().ToString() == "3" ? Rank3EvenDecFrmt : RankNocolorEvenDecFrmt;
                                                    }
                                                    else if (QuartileIndexes.Contains(k))
                                                    {
                                                        datacell.CellStyle = datacell.GetValue().ToString() == "1" ? Quartile1EvenDecFrmt :
                                                        datacell.GetValue().ToString() == "2" ? Quartile2EvenDecFrmt : datacell.GetValue().ToString() == "3" ? Quartile3EvenDecFrmt
                                                        : datacell.GetValue().ToString() == "4" ? Quartile4EvenDecFrmt : QuartileNocolorEvenDecFrmt;
                                                    }
                                                    else
                                                        datacell.CellStyle = intAllCellStyleEvenDecFrmt;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = intSimpleAllCellStyleEvenDecFrmt;
                                                }

                                            }
                                            else
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    if (RankIndexes.Contains(k))
                                                    {
                                                        datacell.CellStyle = datacell.GetValue().ToString() == "1" ? Rank1OddDecFrmt :
                                                        datacell.GetValue().ToString() == "2" ? Rank2OddDecFrmt : datacell.GetValue().ToString() == "3" ? Rank3OddDecFrmt : RankNocolorOddDecFrmt;
                                                    }
                                                    else if (QuartileIndexes.Contains(k))
                                                    {
                                                        datacell.CellStyle = datacell.GetValue().ToString() == "1" ? Quartile1OddDecFrmt :
                                                        datacell.GetValue().ToString() == "2" ? Quartile2OddDecFrmt : datacell.GetValue().ToString() == "3" ? Quartile3OddDecFrmt
                                                        : datacell.GetValue().ToString() == "4" ? Quartile4OddDecFrmt : QuartileNocolorOddDecFrmt;
                                                    }
                                                    else
                                                        datacell.CellStyle = intAllCellStyleOddDec;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = intSimpleAllCellStyleOddDec;
                                                }

                                            }
                                        }



                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }

                                }

                            }
                            else
                            {
                                double OutVal;
                                if (double.TryParse(cellValues[k].Value, out OutVal) && !cellValues[k].IsMixedType)
                                {
                                    datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleEven;
                                        else
                                            datacell.CellStyle = AllCellStyleOdd;

                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }
                                }
                                else if (cellValues[k].IsDateTimeType)
                                {
                                    DateTime OutValdt;
                                    if (DateTime.TryParse(cellValues[k].Value, out OutValdt))
                                    {
                                        datacell.SetCellValue(Convert.ToDateTime(cellValues[k].Value));
                                        if (k > 0)
                                        {
                                            if (incr % 2 == 0)
                                                datacell.CellStyle = DateTimeAllCellStyleEvenFrmt;
                                            else
                                                datacell.CellStyle = DateTimeAllCellStyleOddDec;

                                        }
                                        else
                                        {
                                            if (incr % 2 == 0)
                                                datacell.CellStyle = DateTimeAllCellStyleEvenFrmt;//AllCellStyleFstColmEven;
                                            else
                                                datacell.CellStyle = DateTimeAllCellStyleOddDec;//AllCellStyleFstColmOdd;
                                        }
                                    }
                                    else
                                    {
                                        datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                        if (k > 0)
                                        {
                                            if (incr % 2 == 0)
                                                datacell.CellStyle = AllCellStyleEven;
                                            else
                                                datacell.CellStyle = AllCellStyleOdd;

                                        }
                                        else
                                        {
                                            if (incr % 2 == 0)
                                                datacell.CellStyle = AllCellStyleFstColmEven;
                                            else
                                                datacell.CellStyle = AllCellStyleFstColmOdd;
                                        }
                                    }
                                }
                                else if (cellValues[k].IsDateTimeStringMixedType)
                                {
                                    DateTime OutValdt;
                                    if (DateTime.TryParse(cellValues[k].Value, out OutValdt))
                                    {
                                        datacell.SetCellValue(Convert.ToDateTime(cellValues[k].Value));
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = DateTimeAllCellStyleEvenFrmt;
                                        else
                                            datacell.CellStyle = DateTimeAllCellStyleOddDec;
                                        //if (k > 0)
                                        //{
                                        //	if (incr % 2 == 0)
                                        //		datacell.CellStyle = DateTimeAllCellStyleEvenFrmt;
                                        //	else
                                        //		datacell.CellStyle = DateTimeAllCellStyleOddDec;

                                        //}
                                        //else
                                        //{
                                        //	if (incr % 2 == 0)
                                        //		datacell.CellStyle = AllCellStyleFstColmEven;
                                        //	else
                                        //		datacell.CellStyle = AllCellStyleFstColmOdd;
                                        //}
                                    }
                                    else
                                    {
                                        datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                        if (k > 0)
                                        {
                                            if (incr % 2 == 0)
                                                datacell.CellStyle = AllCellStyleEven;
                                            else
                                                datacell.CellStyle = AllCellStyleOdd;

                                        }
                                        else
                                        {
                                            if (incr % 2 == 0)
                                                datacell.CellStyle = AllCellStyleFstColmEven;
                                            else
                                                datacell.CellStyle = AllCellStyleFstColmOdd;
                                        }
                                    }
                                }
                                else if (cellValues[k].IsMonthYearType)
                                {
                                    DateTime OutValdt;
                                    if (DateTime.TryParse(cellValues[k].Value, out OutValdt))
                                    {
                                        datacell.SetCellValue(Convert.ToDateTime(cellValues[k].Value));
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = MonthYearAllCellStyleEvenFrmt;
                                        else
                                            datacell.CellStyle = MonthYearAllCellStyleOddDec;
                                    }
                                    else
                                    {
                                        datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                        if (k > 0)
                                        {
                                            if (incr % 2 == 0)
                                                datacell.CellStyle = AllCellStyleEven;
                                            else
                                                datacell.CellStyle = AllCellStyleOdd;

                                        }
                                        else
                                        {
                                            if (incr % 2 == 0)
                                                datacell.CellStyle = AllCellStyleFstColmEven;
                                            else
                                                datacell.CellStyle = AllCellStyleFstColmOdd;
                                        }
                                    }
                                }
                                else
                                {
                                    datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleEven;
                                        else
                                            datacell.CellStyle = AllCellStyleOdd;

                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }
                                }
                            }
                        }
                        incr++;
                    }

                    //var Celltext = dataRow.GetCell(0).StringCellValue;
                    var Celltext = dataRow.GetCell(0).GetValue();
                    if (new[] { "MIN. INVESTMENT (IN RS.)" }.Contains(Celltext.ToString().ToUpper()))
                    {
                        for (int i = 1; i < listTableHeader.Count; i++)
                        {
                            var doublecell = dataRow.GetCell(i);
                            double parsevalue;
                            var isdouble = double.TryParse(doublecell.GetValue().ToString(), out parsevalue);
                            if (isdouble)
                                doublecell.SetCellValue(parsevalue.NumberFormatWithOutRoundUp(ubs.NumberFormat));
                        }
                    }
                }
                #endregion

                for (int i = 0; i < listTableHeader.Count; i++)
                    sheet.AutoSizeColumn(i);
                if (sheet.GetColumnWidth(0) < 11072)
                    sheet.SetColumnWidth(0, 11072);

                #region Logo
                try
                {
                    if (!string.IsNullOrEmpty(LogoPath))
                    {
                        XSSFDrawing patriarch = (XSSFDrawing)sheet.CreateDrawingPatriarch();
                        XSSFClientAnchor anchor;
                        anchor = new XSSFClientAnchor(0, 0, 0, 255, 0, 0, 0, 3);
                        anchor.AnchorType = AnchorType.DontMoveAndResize;
                        XSSFPicture picture = (XSSFPicture)patriarch.CreatePicture(anchor, LoadImage(LogoPath, workbook, PictureType.PNG));
                        double x1 = .25;
                        double y1 = .75;
                        picture.Resize(x1, y1);
                        picture.LineStyle = LineStyle.None;
                    }
                }
                catch (Exception ex)
                {
                }

                #endregion

                #region Source, Date As On and Report Generated On
                ICRArow = sheet.CreateRow(incr + 3);
                ICRArow.CreateCell(0);
                ICRACell = ICRArow.CreateCell(0);
                ICRACell.SetCellValue(StrSource);

                ICRArow = sheet.CreateRow(incr + 4);
                ICRArow.CreateCell(0);
                ICRACell = ICRArow.CreateCell(0);
                ICRACell.SetCellValue(StrDateAsOn);

                ICRArow = sheet.CreateRow(incr + 5);
                ICRArow.CreateCell(0);
                ICRACell = ICRArow.CreateCell(0);
                ICRACell.SetCellValue(StrReportGeneratedOn);

                ICRArow = sheet.CreateRow(incr + 6);
                ICRArow.CreateCell(0);
                ICRACell = ICRArow.CreateCell(0);
                ICRACell.SetCellValue(StrCalculationLogic);
                #endregion

                #region Sheet Two Logo
                try
                {
                    if (!string.IsNullOrEmpty(LogoPath))
                    {
                        XSSFDrawing patriarch = (XSSFDrawing)sheetTwo.CreateDrawingPatriarch();
                        XSSFClientAnchor anchor;
                        anchor = new XSSFClientAnchor(0, 0, 0, 255, 0, 0, 0, 3);
                        anchor.AnchorType = AnchorType.DontMoveAndResize;
                        XSSFPicture picture = (XSSFPicture)patriarch.CreatePicture(anchor, LoadImage(LogoPath, workbook, PictureType.PNG));
                        double x1 = 1.10;
                        double y1 = 1.10;
                        picture.Resize(x1, y1);
                        picture.LineStyle = LineStyle.None;
                    }
                }
                catch (Exception ex)
                {
                }
                #endregion

                #region Disclaimer Sheet
                var Row = sheetTwo.CreateRow(1);
                var cellSheetTwo = Row.CreateCell(7);
                cellSheetTwo.SetCellValue(StrHeader1);
                cellSheetTwo.CellStyle = HeaderStyle;

                Row = sheetTwo.CreateRow(4);
                ICell Cell;
                for (int i = 0; i < 17; i++)
                {
                    Cell = Row.CreateCell(i);

                    XSSFCellStyle declationstyle = (XSSFCellStyle)workbook.CreateCellStyle();

                    declationstyle.Alignment = HorizontalAlignment.Left;
                    declationstyle.VerticalAlignment = VerticalAlignment.Top;
                    declationstyle.WrapText = true;
                    IFont declarationfnt = (XSSFFont)workbook.CreateFont();
                    //declarationfnt.Boldweight = (short)FontBoldWeight.Bold;
                    declarationfnt.FontName = "Calibri";
                    declarationfnt.FontHeightInPoints = (short)11;
                    declationstyle.SetFont(declarationfnt);
                    Cell.SetCellValue(!string.IsNullOrEmpty(Footer) ? Footer : "All information contained herein is obtained by ICRA Analytics Limited from sources believed by it to be accurate and reliable. Because of the possibility of human or mechanical error as well as other factors, however, all information contained herein is provided 'AS IS' without warranty of any kind. ICRA Analytics adopts all necessary measures so that the information it uses is of sufficient quality and from sources ICRA Analytics considers to be reliable including, when appropriate, independent third-party sources. However, ICRA Analytics is not an auditor and cannot in every instance independently verify or validate information received in preparing this document." +
                        "All information contained herein must be construed solely as statements of opinion, and  ICRA Analytics Limited or its affiliates or group companies and its respective and any of its officers, directors, personnel and employees, disclaim liability to any loss, damage of any nature, including but not limited to direct, indirect, punitive, special, exemplary, consequential, as also any loss of profit in any way arising from the use of this document or its contents in any manner or for any contingency within or beyond the control of, ICRA Analytics or any of its directors, officers, employees, agents, representatives, licensors or suppliers, arising from or in connection with the information contained herein or the use of or inability to use any such information.Opinions expressed in the document are not the opinions of our holding company, ICRA Limited(ICRA), and should not be construed as any indication of credit rating or grading of ICRA for any instruments that have been issued or are to be issued by any entity.The recipient alone shall be fully responsible and / or are liable for any decision taken on the basis of this document and / or the information contained herein.");
                    Cell.CellStyle = declationstyle;

                }
                NPOIWrite.CellMerged(sheetTwo, 4, 4, 0, 17);
                sheetTwo.GetRow(4).HeightInPoints = 200;
                #endregion

                #region Disclaimer Sheet HyperLink
                XSSFCellStyle HyperLinkStyle = (XSSFCellStyle)workbook.CreateCellStyle();
                IFont HyperLinkFont = workbook.CreateFont();
                HyperLinkFont.Color = IndexedColors.Orange.Index;
                HyperLinkFont.Underline = FontUnderlineType.Single;
                HyperLinkStyle.SetFont(HyperLinkFont);

                Row = sheetTwo.CreateRow(5);
                Cell = Row.CreateCell(0);
                Cell.SetCellValue("Click here for third-party disclaimers");
                XSSFCreationHelper createHelper = (XSSFCreationHelper)workbook.GetCreationHelper();
                XSSFHyperlink link = (XSSFHyperlink)createHelper.CreateHyperlink(HyperlinkType.Url);
                link.Address = "https://www.icraanalytics.com/home/thirdpartydisclaimers";
                Cell.Hyperlink = link;
                Cell.CellStyle = HyperLinkStyle;
                #endregion

                sheet.ActiveCell = new CellAddress(0, 1);
                var stream = new MemoryStream();
                workbook.Write(stream);

                return workbook;
            }
            catch (Exception ex)
            {


            }
            return null;
        }



        /// Written by Sourav Rakshit ////
        /// Export to Excel for multiple sheet ////
        public static NPOI.XSSF.UserModel.XSSFWorkbook ExportToExcelWorkBookWithNumberDecimalFormat(UserBasicSettings ubs, List<TableHeaderEntity> listTableHeaderSheetOne, List<TableHeaderEntity> listTableHeaderSheetTwo, List<ExportEntity> listDataSheetOne, List<ExportEntity> listDataSheetTwo, string strSheetNameOne, string strSheetNameTwo, string LogoPath = "", string ReportName = "", string StrDateAsOn = "")
        {
            #region Variable
            string Header = ubs.Reporting_Format_Header;
            string Footer = ubs.Reporting_Format_Footer;
            string BlankData = ubs.BlankData.ToUpper() == "BLANK" ? "" : ubs.BlankData;
            string StrHeader1 = "ICRA Analytics Limited";
            string StrHeader2 = "3rd Floor, Electric Mansion,Appasaheb Marathe Marg, Prabhadevi,Mumbai - 400 025 Maharashtra, India";
            string StrHeader3 = Header; //"Mumbai, Maharashtra 400093, IN";
            string StrReportName = ReportName;
            string StrSource = "Source: " + (string.IsNullOrEmpty(UserStatisticsEntity.SourceName) ? "MFI 360" : UserStatisticsEntity.SourceName);
            StrDateAsOn = "Data as on " + StrDateAsOn;
            string StrReportGeneratedOn = "Report Generated on " + DateTime.Now.ToString("dd-MMM-yyyy HH:mm:ss");


            #region number and decimal variable for AUM
            var aumPaddding = new string('0', (int)ubs.AUMDecimalFormat);
            var aumDecimalFormat = "0." + aumPaddding;
            string aumNUMBERFORMAT = ubs.NumberFormat;
            var aumNumberFormat = aumNUMBERFORMAT.Replace("0", "#");
            string aumNumberDecimalFormat = aumNumberFormat + "0." + new String('0', (int)ubs.AUMDecimalFormat);
            #endregion

            #region number and decimal variable for return
            var retPaddding = new string('0', (int)ubs.ReturnDecimalFormat);
            var retDecimalFormat = "0." + retPaddding;
            string retNUMBERFORMAT = ubs.NumberFormat;
            var retNumberFormat = retNUMBERFORMAT.Replace("0", "#");
            string retNumberDecimalFormat = retNumberFormat + "0." + new String('0', (int)ubs.ReturnDecimalFormat);
            #endregion

            #region number and decimal variable for NAV
            var navPaddding = new string('0', (int)ubs.NavDecimalFormat);
            var navDecimalFormat = "0." + navPaddding;
            string navNUMBERFORMAT = ubs.NumberFormat;
            var navNumberFormat = navNUMBERFORMAT.Replace("0", "#");
            string navNumberDecimalFormat = navNumberFormat + "0." + new String('0', (int)ubs.NavDecimalFormat);
            #endregion

            #region number and decimal variable for Other
            var othPaddding = new string('0', (int)ubs.OtherDecimal);
            var othDecimalFormat = "0." + othPaddding;
            string othNUMBERFORMAT = ubs.NumberFormat;
            var othNumberFormat = othNUMBERFORMAT.Replace("0", "#");
            string othNumberDecimalFormat = othNumberFormat + "0." + new String('0', (int)ubs.OtherDecimal);
            #endregion

            #region number and decimal variable for Ratio
            var ratioPaddding = new string('0', (int)ubs.RatioDecimalFormat);
            var ratioDecimalFormat = "0." + ratioPaddding;
            string ratioNUMBERFORMAT = ubs.NumberFormat;
            var ratioNumberFormat = ratioNUMBERFORMAT.Replace("0", "#");
            string ratioNumberDecimalFormat = ratioNumberFormat + "0." + new String('0', (int)ubs.RatioDecimalFormat);
            #endregion
            #region int Format with out Decimal
            var intNumberWithoutDecimalFormat = ubs.NumberFormat.Replace("0", "#");
            #endregion

            #endregion

            NPOI.XSSF.UserModel.XSSFWorkbook workbook = new NPOI.XSSF.UserModel.XSSFWorkbook();
            ISheet sheet = workbook.CreateSheet(strSheetNameOne);
            ISheet sheetTwo = workbook.CreateSheet(strSheetNameTwo);
            ISheet sheetDisclaimer = workbook.CreateSheet("Disclaimer");

            #region Excel Sheet Gridlines Delete
            sheet.DisplayGridlines = false;
            sheetTwo.DisplayGridlines = false;
            sheetDisclaimer.DisplayGridlines = false;
            #endregion

            #region Header Freeze
            sheet.CreateFreezePane(1, 5);
            sheetTwo.CreateFreezePane(1, 5);
            #endregion

            #region Cell Border added by Subrata on 27 Feb 2018
            XSSFCellStyle AllCellStyle = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyle.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyle.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyle.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyle.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            #endregion

            #region Cell Border for first column added by Subrata on 27 Feb 2018
            XSSFCellStyle AllCellStyleFstColm = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleFstColm.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColm.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColm.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColm.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            #endregion

            #region Set Font For Header1,Header2 and Header3
            XSSFCellStyle HeaderStyle = (XSSFCellStyle)workbook.CreateCellStyle();
            IFont Headerfont = workbook.CreateFont();
            Headerfont.Boldweight = (short)FontBoldWeight.Bold;
            HeaderStyle.SetFont(Headerfont);
            #endregion

            #region  Sheet1 Set Cell Value For Header1, Header2 and Header3
            var ICRArow = sheet.CreateRow(0);
            ICRArow.CreateCell(0);
            NPOIWrite.CellMerged(sheet, 0, 0, 1, 9);
            var ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader1);
            ICRACell.CellStyle = HeaderStyle;
            ICRArow = sheet.CreateRow(1);
            ICRArow.CreateCell(0);
            NPOIWrite.CellMerged(sheet, 1, 1, 1, 9);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader2);
            ICRACell.CellStyle = HeaderStyle;
            ICRArow = sheet.CreateRow(2);
            ICRArow.CreateCell(0);
            NPOIWrite.CellMerged(sheet, 2, 2, 1, 9);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader3);
            ICRACell.CellStyle = HeaderStyle;
            ICRACell.CellStyle.Alignment = HorizontalAlignment.Center;
            ICRArow = sheet.CreateRow(3);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.CellStyle = HeaderStyle;
            ICRACell.CellStyle.Alignment = HorizontalAlignment.Center;
            NPOIWrite.AutoFitColumn(sheet, 1);
            ICRACell.CellStyle = HeaderStyle;
            #endregion

            #region Sheet2 Set Cell Value For Header1, Header2 and Header3
            ICRArow = sheetTwo.CreateRow(0);
            ICRArow.CreateCell(0);
            NPOIWrite.CellMerged(sheetTwo, 0, 0, 1, 9);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader1);
            ICRACell.CellStyle = HeaderStyle;
            ICRArow = sheetTwo.CreateRow(1);
            ICRArow.CreateCell(0);
            NPOIWrite.CellMerged(sheetTwo, 1, 1, 1, 9);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader2);
            ICRACell.CellStyle = HeaderStyle;
            ICRArow = sheetTwo.CreateRow(2);
            NPOIWrite.CellMerged(sheetTwo, 2, 2, 1, 9);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader3);
            ICRACell.CellStyle = HeaderStyle;
            ICRACell.CellStyle.Alignment = HorizontalAlignment.Center;
            ICRArow = sheetTwo.CreateRow(3);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.CellStyle = HeaderStyle;
            ICRACell.CellStyle.Alignment = HorizontalAlignment.Center;
            NPOIWrite.AutoFitColumn(sheetTwo, 1);
            ICRACell.CellStyle = HeaderStyle;
            #endregion

            #region Report Name Sheet One
            ICRArow = sheet.CreateRow(4);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrReportName);
            HeaderStyle.Alignment = HorizontalAlignment.Left;
            ICRACell.CellStyle = HeaderStyle;
            #endregion

            #region Report Name Sheet Two
            ICRArow = sheetTwo.CreateRow(4);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrReportName);
            HeaderStyle.Alignment = HorizontalAlignment.Left;
            ICRACell.CellStyle = HeaderStyle;
            #endregion

            #region Cell Style For Even Row

            #region Without DecimalFormat
            XSSFCellStyle AllCellStyleEven = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleEven.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillEven = new XSSFColor(new byte[] { 176, 196, 222 });
            AllCellStyleEven.SetFillForegroundColor(colorToFillEven);
            AllCellStyleEven.FillPattern = FillPattern.SolidForeground;
            AllCellStyleEven.Alignment = HorizontalAlignment.Center;
            AllCellStyleEven.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat AUM
            XSSFCellStyle aumAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor aumcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            aumAllCellStyleEvenDecFrmt.SetFillForegroundColor(aumcolorToFillEvenWtoutDec);
            aumAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat aumformatEven = workbook.CreateDataFormat();
            aumAllCellStyleEvenDecFrmt.DataFormat = aumformatEven.GetFormat(aumDecimalFormat);
            aumAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            /// Number Format ////
            XSSFCellStyle aumAllCellStyleEvenDecFrmtWNum = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleEvenDecFrmtWNum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmtWNum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmtWNum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmtWNum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor aumcolorToFillEvenWtoutDecWNum = new XSSFColor(new byte[] { 176, 196, 222 });
            aumAllCellStyleEvenDecFrmtWNum.SetFillForegroundColor(aumcolorToFillEvenWtoutDecWNum);
            aumAllCellStyleEvenDecFrmtWNum.FillPattern = FillPattern.SolidForeground;
            IDataFormat aumformatEvenWNum = workbook.CreateDataFormat();
            aumAllCellStyleEvenDecFrmtWNum.DataFormat = aumformatEvenWNum.GetFormat(aumNumberDecimalFormat);
            aumAllCellStyleEvenDecFrmtWNum.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleEvenDecFrmtWNum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Return
            XSSFCellStyle retAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            retAllCellStyleEvenDecFrmt.SetFillForegroundColor(retcolorToFillEvenWtoutDec);
            retAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatEven = workbook.CreateDataFormat();
            retAllCellStyleEvenDecFrmt.DataFormat = retformatEven.GetFormat(retDecimalFormat);
            retAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            retAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;


            ////Number Format ////
            XSSFCellStyle retAllCellStyleEvenDecFrmtWnum = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleEvenDecFrmtWnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmtWnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmtWnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmtWnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillEvenWtoutDecWnum = new XSSFColor(new byte[] { 176, 196, 222 });
            retAllCellStyleEvenDecFrmtWnum.SetFillForegroundColor(retcolorToFillEvenWtoutDecWnum);
            retAllCellStyleEvenDecFrmtWnum.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatEvenWnum = workbook.CreateDataFormat();
            retAllCellStyleEvenDecFrmtWnum.DataFormat = retformatEvenWnum.GetFormat(retNumberDecimalFormat);
            retAllCellStyleEvenDecFrmtWnum.Alignment = HorizontalAlignment.Center;
            retAllCellStyleEvenDecFrmtWnum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Nav
            XSSFCellStyle navAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor navcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            navAllCellStyleEvenDecFrmt.SetFillForegroundColor(navcolorToFillEvenWtoutDec);
            navAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat navformatEven = workbook.CreateDataFormat();
            navAllCellStyleEvenDecFrmt.DataFormat = navformatEven.GetFormat(navDecimalFormat);
            navAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            navAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;


            /// Number Format ////
            XSSFCellStyle navAllCellStyleEvenDecFrmtWnnum = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleEvenDecFrmtWnnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmtWnnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmtWnnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmtWnnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor navcolorToFillEvenWtoutDecWnnum = new XSSFColor(new byte[] { 176, 196, 222 });
            navAllCellStyleEvenDecFrmtWnnum.SetFillForegroundColor(navcolorToFillEvenWtoutDecWnnum);
            navAllCellStyleEvenDecFrmtWnnum.FillPattern = FillPattern.SolidForeground;
            IDataFormat navformatEvenWnnum = workbook.CreateDataFormat();
            navAllCellStyleEvenDecFrmtWnnum.DataFormat = navformatEvenWnnum.GetFormat(navNumberDecimalFormat);
            navAllCellStyleEvenDecFrmtWnnum.Alignment = HorizontalAlignment.Center;
            navAllCellStyleEvenDecFrmtWnnum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Other
            XSSFCellStyle otherAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            otherAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othercolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            otherAllCellStyleEvenDecFrmt.SetFillForegroundColor(othercolorToFillEvenWtoutDec);
            otherAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat otherformatEven = workbook.CreateDataFormat();
            otherAllCellStyleEvenDecFrmt.DataFormat = otherformatEven.GetFormat(othDecimalFormat);
            otherAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            otherAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            /// Number Format ///
            XSSFCellStyle otherAllCellStyleEvenDecFrmtWnum = (XSSFCellStyle)workbook.CreateCellStyle();
            otherAllCellStyleEvenDecFrmtWnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmtWnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmtWnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmtWnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othercolorToFillEvenWtoutDecWnum = new XSSFColor(new byte[] { 176, 196, 222 });
            otherAllCellStyleEvenDecFrmtWnum.SetFillForegroundColor(othercolorToFillEvenWtoutDecWnum);
            otherAllCellStyleEvenDecFrmtWnum.FillPattern = FillPattern.SolidForeground;
            IDataFormat otherformatEvenWnum = workbook.CreateDataFormat();
            otherAllCellStyleEvenDecFrmtWnum.DataFormat = otherformatEvenWnum.GetFormat(othNumberDecimalFormat);
            otherAllCellStyleEvenDecFrmtWnum.Alignment = HorizontalAlignment.Center;
            otherAllCellStyleEvenDecFrmtWnum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Ratio
            XSSFCellStyle ratAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor ratcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            ratAllCellStyleEvenDecFrmt.SetFillForegroundColor(ratcolorToFillEvenWtoutDec);
            ratAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat ratformatEven = workbook.CreateDataFormat();
            ratAllCellStyleEvenDecFrmt.DataFormat = ratformatEven.GetFormat(ratioDecimalFormat);
            ratAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle ratAllCellStyleEvenDecFrmtWth = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleEvenDecFrmtWth.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmtWth.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmtWth.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmtWth.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor ratcolorToFillEvenWtoutDecwth = new XSSFColor(new byte[] { 176, 196, 222 });
            ratAllCellStyleEvenDecFrmtWth.SetFillForegroundColor(ratcolorToFillEvenWtoutDecwth);
            ratAllCellStyleEvenDecFrmtWth.FillPattern = FillPattern.SolidForeground;
            IDataFormat ratformatEvenWth = workbook.CreateDataFormat();
            ratAllCellStyleEvenDecFrmtWth.DataFormat = ratformatEvenWth.GetFormat(ratioNumberDecimalFormat);
            ratAllCellStyleEvenDecFrmtWth.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleEvenDecFrmtWth.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #endregion

            #region Cell Style For Odd Row

            #region With Decimal Format AUM
            XSSFCellStyle aumAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor AUMcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            aumAllCellStyleOddDec.SetFillForegroundColor(AUMcolorToFillOddDec);
            aumAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat AUMformatOddDec = workbook.CreateDataFormat();
            aumAllCellStyleOddDec.DataFormat = AUMformatOddDec.GetFormat(aumDecimalFormat);
            aumAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle aumAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor AUMcolorToFillOddDecWnf = new XSSFColor(new byte[] { 255, 255, 255 });
            aumAllCellStyleOddDecWnuf.SetFillForegroundColor(AUMcolorToFillOddDecWnf);
            aumAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat AUMformatOddDecWnuf = workbook.CreateDataFormat();
            aumAllCellStyleOddDecWnuf.DataFormat = AUMformatOddDecWnuf.GetFormat(aumNumberDecimalFormat);
            aumAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With Decimal Format Return
            XSSFCellStyle retAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor RETcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            retAllCellStyleOddDec.SetFillForegroundColor(RETcolorToFillOddDec);
            retAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat RETformatOddDec = workbook.CreateDataFormat();
            retAllCellStyleOddDec.DataFormat = RETformatOddDec.GetFormat(retDecimalFormat);
            retAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            retAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle retAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor RETcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            retAllCellStyleOddDecWnuf.SetFillForegroundColor(RETcolorToFillOddDecWnuf);
            retAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat RETformatOddDecWnuf = workbook.CreateDataFormat();
            retAllCellStyleOddDecWnuf.DataFormat = RETformatOddDecWnuf.GetFormat(retNumberDecimalFormat);
            retAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            retAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With Decimal Format Nav
            XSSFCellStyle navAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor naVcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            navAllCellStyleOddDec.SetFillForegroundColor(naVcolorToFillOddDec);
            navAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat naVformatOddDec = workbook.CreateDataFormat();
            navAllCellStyleOddDec.DataFormat = naVformatOddDec.GetFormat(navDecimalFormat);
            navAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            navAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            XSSFCellStyle navAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor naVcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            navAllCellStyleOddDecWnuf.SetFillForegroundColor(naVcolorToFillOddDecWnuf);
            navAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat naVformatOddDecWnuf = workbook.CreateDataFormat();
            navAllCellStyleOddDecWnuf.DataFormat = naVformatOddDecWnuf.GetFormat(navNumberDecimalFormat);
            navAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            navAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion


            #region With Decimal Format Other
            XSSFCellStyle othAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            othAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            othAllCellStyleOddDec.SetFillForegroundColor(othcolorToFillOddDec);
            othAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat othformatOddDec = workbook.CreateDataFormat();
            othAllCellStyleOddDec.DataFormat = othformatOddDec.GetFormat(othDecimalFormat);
            othAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            othAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            XSSFCellStyle othAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            othAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            othAllCellStyleOddDecWnuf.SetFillForegroundColor(othcolorToFillOddDecWnuf);
            othAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat othformatOddDecWnuf = workbook.CreateDataFormat();
            othAllCellStyleOddDecWnuf.DataFormat = othformatOddDecWnuf.GetFormat(othNumberDecimalFormat);
            othAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            othAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion


            #region With Decimal Format ratio
            XSSFCellStyle ratAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            ratAllCellStyleOddDec.SetFillForegroundColor(retcolorToFillOddDec);
            ratAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatOddDec = workbook.CreateDataFormat();
            ratAllCellStyleOddDec.DataFormat = retformatOddDec.GetFormat(ratioDecimalFormat);
            ratAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            XSSFCellStyle ratAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            ratAllCellStyleOddDecWnuf.SetFillForegroundColor(retcolorToFillOddDecWnuf);
            ratAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatOddDecWnuf = workbook.CreateDataFormat();
            ratAllCellStyleOddDecWnuf.DataFormat = retformatOddDecWnuf.GetFormat(ratioNumberDecimalFormat);
            ratAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region Without Decimal Format
            XSSFCellStyle AllCellStyleOdd = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleOdd.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillOdd = new XSSFColor(new byte[] { 255, 255, 255 });
            AllCellStyleOdd.SetFillForegroundColor(colorToFillOdd);
            AllCellStyleOdd.FillPattern = FillPattern.SolidForeground;
            AllCellStyleOdd.Alignment = HorizontalAlignment.Center;
            AllCellStyleOdd.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #endregion

            #region Cell Style For First Column Even Row
            XSSFCellStyle AllCellStyleFstColmEven = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleFstColmEven.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillFstClmnEven = new XSSFColor(new byte[] { 176, 196, 222 });
            AllCellStyleFstColmEven.SetFillForegroundColor(colorToFillFstClmnEven);
            AllCellStyleFstColmEven.FillPattern = FillPattern.SolidForeground;
            AllCellStyleFstColmEven.Alignment = HorizontalAlignment.Left;
            AllCellStyleFstColmEven.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region Cell Style For First Column Odd Row
            XSSFCellStyle AllCellStyleFstColmOdd = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleFstColmOdd.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillFstClmnOdd = new XSSFColor(new byte[] { 255, 255, 255 });
            AllCellStyleFstColmOdd.SetFillForegroundColor(colorToFillFstClmnOdd);
            AllCellStyleFstColmOdd.FillPattern = FillPattern.SolidForeground;
            AllCellStyleFstColmOdd.Alignment = HorizontalAlignment.Left;
            AllCellStyleFstColmOdd.VerticalAlignment = VerticalAlignment.Center;
            #endregion
            #region Without Decimal Number Format Even Row
            XSSFCellStyle intAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            intAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            intAllCellStyleEvenDecFrmt.SetFillForegroundColor(intcolorToFillEvenWtoutDec);
            intAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat intformatEven = workbook.CreateDataFormat();
            intAllCellStyleEvenDecFrmt.DataFormat = intformatEven.GetFormat(intNumberWithoutDecimalFormat);
            intAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            intAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle intSimpleAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            intSimpleAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intSimplecolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            intSimpleAllCellStyleEvenDecFrmt.SetFillForegroundColor(intSimplecolorToFillEvenWtoutDec);
            intSimpleAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            intSimpleAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            intSimpleAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;
            #endregion
            #region Without Decimal Number Format Odd Row
            XSSFCellStyle intAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            intAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            intAllCellStyleOddDec.SetFillForegroundColor(intcolorToFillOddDec);
            intAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat intformatOddDec = workbook.CreateDataFormat();
            intAllCellStyleOddDec.DataFormat = intformatOddDec.GetFormat(intNumberWithoutDecimalFormat);
            intAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            intAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle intSimpleAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            intSimpleAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intSimplecolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            intSimpleAllCellStyleOddDec.SetFillForegroundColor(intSimplecolorToFillOddDec);
            intSimpleAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            intSimpleAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            intSimpleAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region Header creation in the Excel
            var headerRow = sheet.CreateRow(5);
            sheet.GetRow(5).HeightInPoints = 30;
            var listHeaderFinal = listTableHeaderSheetOne.OrderBy(x => x.Position).ToList();
            for (int i = 0; i < listHeaderFinal.Count; i++)
            {
                var cell = headerRow.CreateCell(i);
                cell.SetCellValue(listHeaderFinal[i].ColumnName);
                NPOIWrite.AutoFitColumn(sheet, i);

                XSSFCellStyle style = (XSSFCellStyle)workbook.CreateCellStyle();
                XSSFColor colorToFill = new XSSFColor(new byte[] { 68, 114, 196 });//Color.Blue);
                style.SetFillForegroundColor(colorToFill);
                IFont font = workbook.CreateFont();
                font.Color = IndexedColors.White.Index;
                font.Boldweight = (short)FontBoldWeight.Bold;
                style.SetFont(font);
                style.FillPattern = FillPattern.SolidForeground;
                style.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                style.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                style.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                style.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                if (i > 0)
                {
                    style.Alignment = HorizontalAlignment.Center;
                    style.VerticalAlignment = VerticalAlignment.Center;
                }
                else
                {
                    style.Alignment = HorizontalAlignment.Left;
                    style.VerticalAlignment = VerticalAlignment.Center;
                }
                cell.CellStyle = style;
            }
            #endregion

            #region Value added to the Excel

            #region Added by Subrata on 27 Feb 2018
            bool IsNumericKey = false;
            bool IsNumericValue = false;
            var AllListData = listDataSheetOne.SelectMany(x => x.LstKeyValuePair).ToArray();
            var AllDataKey = AllListData.Select(x => x.Key).Distinct().ToArray();
            int ValueRes;
            if (AllDataKey.Length > 0)
                IsNumericKey = int.TryParse(AllDataKey[0], out ValueRes);
            #endregion

            int incr = 6;
            foreach (var item in listDataSheetOne)
            {
                var dataRow = sheet.CreateRow(incr);
                sheet.GetRow(incr).HeightInPoints = 20;
                var cellValues = (from i in item.LstKeyValuePair
                                  from j in listTableHeaderSheetOne
                                  where i.Key == j.ColumnName
                                  orderby j.Position
                                  select new
                                  {
                                      IsNum = j.IsNumberFormatReq,
                                      DecType = j.DecFormatType,
                                      IsMixedType = j.IsMixedValueType,
                                      Value = i.Value
                                  }).ToArray();

                for (int k = 0; k < cellValues.Length; k++)
                {
                    var datacell = dataRow.CreateCell(k);
                    if (cellValues[k].DecType != DecimalFormatType.NoDecimalReq)
                    {
                        double OutVal;
                        if (cellValues[k].Value == "" || cellValues[k].Value == null || cellValues[k].Value == BlankData || !double.TryParse(cellValues[k].Value, out OutVal))
                        {
                            datacell.SetCellValue(cellValues[k].Value);
                            if (k > 0)
                            {
                                if (incr % 2 == 0)
                                    datacell.CellStyle = AllCellStyleEven;
                                else
                                    datacell.CellStyle = AllCellStyleOdd;
                            }
                            else
                            {
                                if (incr % 2 == 0)
                                    datacell.CellStyle = AllCellStyleFstColmEven;
                                else
                                    datacell.CellStyle = AllCellStyleFstColmOdd;
                            }

                        }
                        else
                        {
                            datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                            if (k > 0)
                            {
                                if (cellValues[k].DecType == DecimalFormatType.AUM)
                                {
                                    if (incr % 2 == 0)
                                    {
                                        if (cellValues[k].IsNum == true)
                                        {

                                            datacell.CellStyle = aumAllCellStyleEvenDecFrmtWNum;
                                        }
                                        else
                                        {
                                            datacell.CellStyle = aumAllCellStyleEvenDecFrmt;
                                        }
                                    }
                                    else
                                    {
                                        if (cellValues[k].IsNum == true)
                                        {
                                            datacell.CellStyle = aumAllCellStyleOddDecWnuf;
                                        }
                                        else
                                        {
                                            datacell.CellStyle = aumAllCellStyleOddDec;
                                        }
                                    }
                                }
                                if (cellValues[k].DecType == DecimalFormatType.NAV)
                                {
                                    if (incr % 2 == 0)
                                    {
                                        if (cellValues[k].IsNum == true)
                                        {
                                            datacell.CellStyle = navAllCellStyleEvenDecFrmtWnnum;
                                        }
                                        else
                                        {
                                            datacell.CellStyle = navAllCellStyleEvenDecFrmt;
                                        }
                                    }
                                    else
                                    {
                                        if (cellValues[k].IsNum == true)
                                        {
                                            datacell.CellStyle = navAllCellStyleOddDecWnuf;
                                        }
                                        else
                                        {
                                            datacell.CellStyle = navAllCellStyleOddDec;
                                        }

                                    }
                                }
                                if (cellValues[k].DecType == DecimalFormatType.OTHER)
                                {
                                    if (incr % 2 == 0)
                                    {
                                        if (cellValues[k].IsNum == true)
                                        {
                                            datacell.CellStyle = otherAllCellStyleEvenDecFrmtWnum;
                                        }
                                        else
                                        {
                                            datacell.CellStyle = otherAllCellStyleEvenDecFrmt;
                                        }
                                    }

                                    else
                                    {
                                        if (cellValues[k].IsNum == true)
                                        {
                                            datacell.CellStyle = othAllCellStyleOddDecWnuf;
                                        }
                                        else
                                        {

                                            datacell.CellStyle = othAllCellStyleOddDec;
                                        }

                                    }
                                }
                                if (cellValues[k].DecType == DecimalFormatType.RATIO)
                                {
                                    if (incr % 2 == 0)
                                    {
                                        if (cellValues[k].IsNum == true)
                                        {
                                            datacell.CellStyle = ratAllCellStyleEvenDecFrmtWth;
                                        }
                                        else
                                        {
                                            datacell.CellStyle = ratAllCellStyleEvenDecFrmt;
                                        }
                                    }
                                    else
                                    {
                                        if (cellValues[k].IsNum == true)
                                        {
                                            datacell.CellStyle = ratAllCellStyleOddDecWnuf;
                                        }
                                        else
                                        {
                                            datacell.CellStyle = ratAllCellStyleOddDec;
                                        }
                                    }
                                }
                                if (cellValues[k].DecType == DecimalFormatType.RETURN)
                                {
                                    if (incr % 2 == 0)
                                    {
                                        if (cellValues[k].IsNum == true)
                                        {
                                            datacell.CellStyle = retAllCellStyleEvenDecFrmtWnum;
                                        }
                                        else
                                        {
                                            datacell.CellStyle = retAllCellStyleEvenDecFrmt;
                                        }

                                    }
                                    else
                                    {
                                        if (cellValues[k].IsNum == true)
                                        {
                                            datacell.CellStyle = retAllCellStyleOddDecWnuf;
                                        }
                                        else
                                        {
                                            datacell.CellStyle = retAllCellStyleOddDec;
                                        }

                                    }
                                }
                                if (cellValues[k].DecType == DecimalFormatType.IntegerWithOutDecimal)
                                {
                                    if (incr % 2 == 0)
                                    {
                                        if (cellValues[k].IsNum == true)
                                        {
                                            datacell.CellStyle = intAllCellStyleEvenDecFrmt;
                                        }
                                        else
                                        {
                                            datacell.CellStyle = intSimpleAllCellStyleEvenDecFrmt;
                                        }

                                    }
                                    else
                                    {
                                        if (cellValues[k].IsNum == true)
                                        {
                                            datacell.CellStyle = intAllCellStyleOddDec;
                                        }
                                        else
                                        {
                                            datacell.CellStyle = intSimpleAllCellStyleOddDec;
                                        }

                                    }
                                }
                            }
                            else
                            {
                                if (incr % 2 == 0)
                                    datacell.CellStyle = AllCellStyleFstColmEven;
                                else
                                    datacell.CellStyle = AllCellStyleFstColmOdd;
                            }

                        }

                    }
                    else
                    {
                        double OutVal;
                        if (double.TryParse(cellValues[k].Value, out OutVal) && !cellValues[k].IsMixedType)
                        {
                            datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                            if (k > 0)
                            {
                                if (incr % 2 == 0)
                                    datacell.CellStyle = AllCellStyleEven;
                                else
                                    datacell.CellStyle = AllCellStyleOdd;

                            }
                            else
                            {
                                if (incr % 2 == 0)
                                    datacell.CellStyle = AllCellStyleFstColmEven;
                                else
                                    datacell.CellStyle = AllCellStyleFstColmOdd;
                            }
                        }
                        else
                        {
                            datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                            if (k > 0)
                            {
                                if (incr % 2 == 0)
                                    datacell.CellStyle = AllCellStyleEven;
                                else
                                    datacell.CellStyle = AllCellStyleOdd;

                            }
                            else
                            {
                                if (incr % 2 == 0)
                                    datacell.CellStyle = AllCellStyleFstColmEven;
                                else
                                    datacell.CellStyle = AllCellStyleFstColmOdd;
                            }
                        }



                    }
                }
                incr++;
            }
            #endregion

            #region Header creation in the Excel for sheet two
            var headerRowTwo = sheetTwo.CreateRow(5);
            sheetTwo.GetRow(5).HeightInPoints = 30;
            var listHeaderFinalSecond = listTableHeaderSheetTwo.OrderBy(x => x.Position).ToList();
            for (int i = 0; i < listHeaderFinalSecond.Count; i++)
            {
                var cell = headerRowTwo.CreateCell(i);
                cell.SetCellValue(listHeaderFinalSecond[i].ColumnName);
                NPOIWrite.AutoFitColumn(sheetTwo, i);

                XSSFCellStyle style = (XSSFCellStyle)workbook.CreateCellStyle();
                XSSFColor colorToFill = new XSSFColor(new byte[] { 68, 114, 196 });//Color.Blue);
                style.SetFillForegroundColor(colorToFill);
                IFont font = workbook.CreateFont();
                font.Color = IndexedColors.White.Index;
                font.Boldweight = (short)FontBoldWeight.Bold;
                style.SetFont(font);
                style.FillPattern = FillPattern.SolidForeground;
                style.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                style.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                style.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                style.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                if (i > 0)
                {
                    style.Alignment = HorizontalAlignment.Center;
                    style.VerticalAlignment = VerticalAlignment.Center;
                }
                else
                {
                    style.Alignment = HorizontalAlignment.Left;
                    style.VerticalAlignment = VerticalAlignment.Center;
                }
                cell.CellStyle = style;
            }
            #endregion

            #region Value added to the Excel for sheet two

            #region Added by Subrata on 27 Feb 2018
            bool IsNumericKeySheetTwo = false;
            bool IsNumericValueSheetTwo = false;
            var AllListDataSheetTwo = listDataSheetTwo.SelectMany(x => x.LstKeyValuePair).ToArray();
            var AllDataKeySheetTwo = AllListDataSheetTwo.Select(x => x.Key).Distinct().ToArray();
            int ValueResSheetTwo;
            if (AllDataKeySheetTwo.Length > 0)
                IsNumericKeySheetTwo = int.TryParse(AllDataKeySheetTwo[0], out ValueResSheetTwo);

            #endregion

            int incrsecond = 6;
            bool isNumeric = false;
            foreach (var item in listDataSheetTwo)
            {
                if (item.LstKeyValuePair.Count() > 0)
                {
                    int value;
                    isNumeric = int.TryParse(item.LstKeyValuePair[0].Key, out value);
                }
                var dataRow = sheetTwo.CreateRow(incrsecond);
                sheetTwo.GetRow(incrsecond).HeightInPoints = 20;
                if (isNumeric == true)
                {
                    var cellValues = (from i in item.LstKeyValuePair
                                      from j in listTableHeaderSheetTwo
                                      where i.Key.ToString() == j.Position.ToString()
                                      orderby j.Position
                                      select new
                                      {
                                          IsNum = j.IsNumberFormatReq,
                                          DecType = j.DecFormatType,
                                          IsMixedType = j.IsMixedValueType,
                                          Value = i.Value
                                      }).ToArray();

                    for (int k = 0; k < cellValues.Length; k++)
                    {
                        var datacell = dataRow.CreateCell(k);
                        if (cellValues[k].DecType != DecimalFormatType.NoDecimalReq)
                        {
                            double OutVal;
                            if (cellValues[k].Value == "" || cellValues[k].Value == null || cellValues[k].Value == BlankData || !double.TryParse(cellValues[k].Value, out OutVal))
                            {
                                datacell.SetCellValue(cellValues[k].Value);
                                if (k > 0)
                                {
                                    if (incrsecond % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;
                                }
                                else
                                {
                                    if (incrsecond % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }

                            }
                            else
                            {
                                datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                                if (k > 0)
                                {

                                    if (cellValues[k].DecType == DecimalFormatType.AUM)
                                    {
                                        if (incrsecond % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {

                                                datacell.CellStyle = aumAllCellStyleEvenDecFrmtWNum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = aumAllCellStyleEvenDecFrmt;
                                            }
                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = aumAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = aumAllCellStyleOddDec;
                                            }
                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.NAV)
                                    {
                                        if (incrsecond % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = navAllCellStyleEvenDecFrmtWnnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = navAllCellStyleEvenDecFrmt;
                                            }
                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = navAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = navAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.OTHER)
                                    {
                                        if (incrsecond % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = otherAllCellStyleEvenDecFrmtWnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = otherAllCellStyleEvenDecFrmt;
                                            }
                                        }

                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = othAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {

                                                datacell.CellStyle = othAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.RATIO)
                                    {
                                        if (incrsecond % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = ratAllCellStyleEvenDecFrmtWth;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = ratAllCellStyleEvenDecFrmt;
                                            }
                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = ratAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = ratAllCellStyleOddDec;
                                            }
                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.RETURN)
                                    {
                                        if (incrsecond % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = retAllCellStyleEvenDecFrmtWnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = retAllCellStyleEvenDecFrmt;
                                            }

                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = retAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = retAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.IntegerWithOutDecimal)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = intAllCellStyleEvenDecFrmt;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = intSimpleAllCellStyleEvenDecFrmt;
                                            }

                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = intAllCellStyleOddDec;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = intSimpleAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                }
                                else
                                {
                                    if (incrsecond % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }

                            }

                        }
                        else
                        {
                            double OutVal;
                            if (double.TryParse(cellValues[k].Value, out OutVal) && !cellValues[k].IsMixedType)
                            {
                                datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                                if (k > 0)
                                {
                                    if (incrsecond % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;

                                }
                                else
                                {
                                    if (incrsecond % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }
                            }
                            else
                            {
                                datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                if (k > 0)
                                {
                                    if (incrsecond % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;

                                }
                                else
                                {
                                    if (incrsecond % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }
                            }


                        }
                    }
                    incrsecond++;
                }
                else
                {
                    var cellValues = (from i in item.LstKeyValuePair
                                      from j in listTableHeaderSheetTwo
                                      where i.Key == j.ColumnName
                                      orderby j.Position
                                      select new
                                      {
                                          IsNum = j.IsNumberFormatReq,
                                          DecType = j.DecFormatType,
                                          Value = i.Value
                                      }).ToArray();



                    for (int k = 0; k < cellValues.Length; k++)
                    {
                        var datacell = dataRow.CreateCell(k);
                        if (cellValues[k].DecType != DecimalFormatType.NoDecimalReq)
                        {
                            if (cellValues[k].Value == "" || cellValues[k].Value == null || cellValues[k].Value == BlankData)
                            {
                                datacell.SetCellValue(cellValues[k].Value);
                                if (k > 0)
                                {
                                    if (incrsecond % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;
                                }
                                else
                                {
                                    if (incrsecond % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }

                            }
                            else
                            {
                                datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                                if (k > 0)
                                {
                                    if (cellValues[k].DecType == DecimalFormatType.AUM)
                                    {
                                        if (incrsecond % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {

                                                datacell.CellStyle = aumAllCellStyleEvenDecFrmtWNum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = aumAllCellStyleEvenDecFrmt;
                                            }
                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = aumAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = aumAllCellStyleOddDec;
                                            }
                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.NAV)
                                    {
                                        if (incrsecond % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = navAllCellStyleEvenDecFrmtWnnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = navAllCellStyleEvenDecFrmt;
                                            }
                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = navAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = navAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.OTHER)
                                    {
                                        if (incrsecond % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = otherAllCellStyleEvenDecFrmtWnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = otherAllCellStyleEvenDecFrmt;
                                            }
                                        }

                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = othAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {

                                                datacell.CellStyle = othAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.RATIO)
                                    {
                                        if (incrsecond % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = ratAllCellStyleEvenDecFrmtWth;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = ratAllCellStyleEvenDecFrmt;
                                            }
                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = ratAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = ratAllCellStyleOddDec;
                                            }
                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.RETURN)
                                    {
                                        if (incrsecond % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = retAllCellStyleEvenDecFrmtWnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = retAllCellStyleEvenDecFrmt;
                                            }

                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = retAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = retAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.IntegerWithOutDecimal)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = intAllCellStyleEvenDecFrmt;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = intSimpleAllCellStyleEvenDecFrmt;
                                            }

                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = intAllCellStyleOddDec;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = intSimpleAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                }
                                else
                                {
                                    if (incrsecond % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }

                            }

                        }
                        else
                        {


                            double OutVal;
                            if (double.TryParse(cellValues[k].Value, out OutVal))
                            {
                                datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                                if (k > 0)
                                {
                                    if (incrsecond % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;

                                }
                                else
                                {
                                    if (incrsecond % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }
                            }
                            else
                            {
                                datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                if (k > 0)
                                {
                                    if (incrsecond % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;

                                }
                                else
                                {
                                    if (incrsecond % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }
                            }

                        }
                    }
                    incrsecond++;
                }
            }
            #endregion

            for (int i = 0; i < listHeaderFinal.Count; i++)
                sheet.AutoSizeColumn(i);
            if (sheet.GetColumnWidth(0) < 11072)
                sheet.SetColumnWidth(0, 11072);

            #region Sheet1 Logo
            try
            {
                if (!string.IsNullOrEmpty(LogoPath))
                {
                    XSSFDrawing patriarch = (XSSFDrawing)sheet.CreateDrawingPatriarch();
                    XSSFClientAnchor anchor;
                    anchor = new XSSFClientAnchor(0, 0, 0, 255, 0, 0, 0, 3);
                    anchor.AnchorType = AnchorType.DontMoveAndResize;
                    XSSFPicture picture = (XSSFPicture)patriarch.CreatePicture(anchor, LoadImage(LogoPath, workbook, PictureType.PNG));
                    double x1 = .25;
                    double y1 = .75;
                    picture.Resize(x1, y1);
                    picture.LineStyle = LineStyle.None;
                }
            }
            catch (Exception Ex)
            {

            }
            #endregion

            for (int i = 0; i < listHeaderFinalSecond.Count; i++)
                sheetTwo.AutoSizeColumn(i);
            if (sheetTwo.GetColumnWidth(0) < 11072)
                sheetTwo.SetColumnWidth(0, 11072);

            #region Sheet2 Logo
            try
            {
                if (!string.IsNullOrEmpty(LogoPath))
                {
                    XSSFDrawing patriarch = (XSSFDrawing)sheetTwo.CreateDrawingPatriarch();
                    XSSFClientAnchor anchor;
                    anchor = new XSSFClientAnchor(0, 0, 0, 255, 0, 0, 0, 3);
                    anchor.AnchorType = AnchorType.DontMoveAndResize;
                    XSSFPicture picture = (XSSFPicture)patriarch.CreatePicture(anchor, LoadImage(LogoPath, workbook, PictureType.PNG));
                    double x1 = .25;
                    double y1 = .75;
                    picture.Resize(x1, y1);
                    picture.LineStyle = LineStyle.None;
                }
            }
            catch (Exception ex)
            {

            }

            #endregion

            #region Disclaimer Sheet Logo
            try
            {
                if (!string.IsNullOrEmpty(LogoPath))
                {
                    XSSFDrawing patriarch = (XSSFDrawing)sheetDisclaimer.CreateDrawingPatriarch();
                    XSSFClientAnchor anchor;
                    anchor = new XSSFClientAnchor(0, 0, 0, 255, 0, 0, 0, 3);
                    anchor.AnchorType = AnchorType.DontMoveAndResize;
                    XSSFPicture picture = (XSSFPicture)patriarch.CreatePicture(anchor, LoadImage(LogoPath, workbook, PictureType.PNG));
                    double x1 = 1.10;
                    double y1 = 1.10;
                    picture.Resize(x1, y1);
                    picture.LineStyle = LineStyle.None;
                }
            }
            catch (Exception ex)
            {

            }

            #endregion

            #region Sheet1 Source, Date As On and Report Generated On
            ICRArow = sheet.CreateRow(incr + 3);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrSource);

            ICRArow = sheet.CreateRow(incr + 4);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrDateAsOn);

            ICRArow = sheet.CreateRow(incr + 5);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrReportGeneratedOn);
            #endregion

            #region Sheet2 Source, Date As On and Report Generated On
            ICRArow = sheetTwo.CreateRow(incrsecond + 3);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrSource);

            ICRArow = sheetTwo.CreateRow(incrsecond + 4);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrDateAsOn);

            ICRArow = sheetTwo.CreateRow(incrsecond + 5);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrReportGeneratedOn);
            #endregion

            #region Disclaimer Sheet
            var Row = sheetDisclaimer.CreateRow(1);
            var cellSheetTwo = Row.CreateCell(7);
            cellSheetTwo.SetCellValue(StrHeader1);
            cellSheetTwo.CellStyle = HeaderStyle;

            Row = sheetDisclaimer.CreateRow(4);
            ICell Cell;
            for (int i = 0; i < listHeaderFinalSecond.Count; i++)
            {
                Cell = Row.CreateCell(i);

                XSSFCellStyle declationstyle = (XSSFCellStyle)workbook.CreateCellStyle();

                declationstyle.Alignment = HorizontalAlignment.Left;
                declationstyle.VerticalAlignment = VerticalAlignment.Top;
                declationstyle.WrapText = true;
                IFont declarationfnt = (XSSFFont)workbook.CreateFont();
                declarationfnt.FontName = "Calibri";
                declarationfnt.FontHeightInPoints = (short)11;
                declationstyle.SetFont(declarationfnt);
                // Cell.SetCellValue(Footer);
                Cell.SetCellValue(!string.IsNullOrEmpty(Footer) ? Footer : "All information contained herein is obtained by ICRA Analytics Limited from sources believed by it to be accurate and reliable. Because of the possibility of human or mechanical error as well as other factors, however, all information contained herein is provided 'AS IS' without warranty of any kind. ICRA Analytics adopts all necessary measures so that the information it uses is of sufficient quality and from sources ICRA Analytics considers to be reliable including, when appropriate, independent third-party sources. However, ICRA Analytics is not an auditor and cannot in every instance independently verify or validate information received in preparing this document." +
                     "All information contained herein must be construed solely as statements of opinion, and  ICRA Analytics Limited or its affiliates or group companies and its respective and any of its officers, directors, personnel and employees, disclaim liability to any loss, damage of any nature, including but not limited to direct, indirect, punitive, special, exemplary, consequential, as also any loss of profit in any way arising from the use of this document or its contents in any manner or for any contingency within or beyond the control of, ICRA Analytics or any of its directors, officers, employees, agents, representatives, licensors or suppliers, arising from or in connection with the information contained herein or the use of or inability to use any such information.Opinions expressed in the document are not the opinions of our holding company, ICRA Limited(ICRA), and should not be construed as any indication of credit rating or grading of ICRA for any instruments that have been issued or are to be issued by any entity.The recipient alone shall be fully responsible and / or are liable for any decision taken on the basis of this document and / or the information contained herein.");
                Cell.CellStyle = declationstyle;
            }
            //NPOIWrite.CellMerged(sheetTwo, 4, 4, 0, 17);
            //sheetTwo.GetRow(4).HeightInPoints = 200;
            #endregion

            #region Disclaimer Sheet HyperLink
            XSSFCellStyle HyperLinkStyle = (XSSFCellStyle)workbook.CreateCellStyle();
            IFont HyperLinkFont = workbook.CreateFont();
            HyperLinkFont.Color = IndexedColors.Orange.Index;
            HyperLinkFont.Underline = FontUnderlineType.Single;
            HyperLinkStyle.SetFont(HyperLinkFont);

            Row = sheetDisclaimer.CreateRow(5);
            Cell = Row.CreateCell(0);
            Cell.SetCellValue("Click here for third-party disclaimers");
            XSSFCreationHelper createHelper = (XSSFCreationHelper)workbook.GetCreationHelper();
            XSSFHyperlink link = (XSSFHyperlink)createHelper.CreateHyperlink(HyperlinkType.Url);
            link.Address = "https://www.icraanalytics.com/home/thirdpartydisclaimers";
            Cell.Hyperlink = link;
            Cell.CellStyle = HyperLinkStyle;
            #endregion

            NPOIWrite.CellMerged(sheetDisclaimer, 4, 4, 0, 17);
            sheetDisclaimer.GetRow(4).HeightInPoints = 200;
            sheetDisclaimer.ActiveCell = new CellAddress(0, 1);

            var stream = new MemoryStream();
            workbook.Write(stream);
            return workbook;
        }

        /// Written by Sourav Rakshit ////
        /// Export to Excel for header and sub-header ////
        public static NPOI.XSSF.UserModel.XSSFWorkbook ExportToExcelWorkBookWithNumberDecimalFormat(UserBasicSettings ubs, List<TableHeaderEntity> listTableHeader, List<TableSubHeaderEntity> listTableSubHeader, List<ExportEntity> listData, string LogoPath = "", string ReportName = "", string StrDateAsOn = "")
        {
            #region Variable
            string Header = ubs.Reporting_Format_Header;
            string Footer = ubs.Reporting_Format_Footer;
            string BlankData = ubs.BlankData.ToUpper() == "BLANK" ? "" : ubs.BlankData;
            string StrHeader1 = "ICRA Analytics Limited";
            string StrHeader2 = "3rd Floor, Electric Mansion,Appasaheb Marathe Marg, Prabhadevi,Mumbai - 400 025 Maharashtra, India";
            string StrHeader3 = Header; //"Mumbai, Maharashtra 400093, IN";
            string StrReportName = ReportName;
            string StrSource = "Source: " + (string.IsNullOrEmpty(UserStatisticsEntity.SourceName) ? "MFI 360" : UserStatisticsEntity.SourceName);
            StrDateAsOn = "Data as on " + StrDateAsOn;
            string StrReportGeneratedOn = "Report Generated on " + DateTime.Now.ToString("dd-MMM-yyyy HH:mm:ss");


            #region number and decimal variable for AUM
            var aumPaddding = new string('0', (int)ubs.AUMDecimalFormat);
            var aumDecimalFormat = "0." + aumPaddding;
            string aumNUMBERFORMAT = ubs.NumberFormat;
            var aumNumberFormat = aumNUMBERFORMAT.Replace("0", "#");
            string aumNumberDecimalFormat = aumNumberFormat + "0." + new String('0', (int)ubs.AUMDecimalFormat);
            #endregion

            #region number and decimal variable for return
            var retPaddding = new string('0', (int)ubs.ReturnDecimalFormat);
            var retDecimalFormat = "0." + retPaddding;
            string retNUMBERFORMAT = ubs.NumberFormat;
            var retNumberFormat = retNUMBERFORMAT.Replace("0", "#");
            string retNumberDecimalFormat = retNumberFormat + "0." + new String('0', (int)ubs.ReturnDecimalFormat);
            #endregion

            #region number and decimal variable for NAV
            var navPaddding = new string('0', (int)ubs.NavDecimalFormat);
            var navDecimalFormat = "0." + navPaddding;
            string navNUMBERFORMAT = ubs.NumberFormat;
            var navNumberFormat = navNUMBERFORMAT.Replace("0", "#");
            string navNumberDecimalFormat = navNumberFormat + "0." + new String('0', (int)ubs.NavDecimalFormat);
            #endregion

            #region number and decimal variable for Other
            var othPaddding = new string('0', (int)ubs.OtherDecimal);
            var othDecimalFormat = "0." + othPaddding;
            string othNUMBERFORMAT = ubs.NumberFormat;
            var othNumberFormat = othNUMBERFORMAT.Replace("0", "#");
            string othNumberDecimalFormat = othNumberFormat + "0." + new String('0', (int)ubs.OtherDecimal);
            #endregion

            #region number and decimal variable for Ratio
            var ratioPaddding = new string('0', (int)ubs.RatioDecimalFormat);
            var ratioDecimalFormat = "0." + ratioPaddding;
            string ratioNUMBERFORMAT = ubs.NumberFormat;
            var ratioNumberFormat = ratioNUMBERFORMAT.Replace("0", "#");
            string ratioNumberDecimalFormat = ratioNumberFormat + "0." + new String('0', (int)ubs.RatioDecimalFormat);
            #endregion
            #region int Format with out Decimal
            var intNumberWithoutDecimalFormat = ubs.NumberFormat.Replace("0", "#");
            #endregion

            #endregion

            NPOI.XSSF.UserModel.XSSFWorkbook workbook = new NPOI.XSSF.UserModel.XSSFWorkbook();
            ISheet sheet = workbook.CreateSheet("Output");
            ISheet sheetTwo = workbook.CreateSheet("Disclaimer");

            #region Excel Sheet Gridlines Delete
            sheet.DisplayGridlines = false;
            sheetTwo.DisplayGridlines = false;
            #endregion

            #region Header Freeze
            sheet.CreateFreezePane(1, 6);
            #endregion

            #region Set Font For Header1,Header2 and Header3
            XSSFCellStyle HeaderStyle = (XSSFCellStyle)workbook.CreateCellStyle();
            IFont Headerfont = workbook.CreateFont();
            Headerfont.Boldweight = (short)FontBoldWeight.Bold;
            HeaderStyle.SetFont(Headerfont);
            #endregion

            #region Set Cell Value For Header1, Header2 and Header3
            var ICRArow = sheet.CreateRow(0);
            ICRArow.CreateCell(0);
            NPOIWrite.CellMerged(sheet, 0, 0, 1, 9);
            var ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader1);
            ICRACell.CellStyle = HeaderStyle;
            ICRArow = sheet.CreateRow(1);
            ICRArow.CreateCell(0);
            NPOIWrite.CellMerged(sheet, 1, 1, 1, 9);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader2);
            ICRACell.CellStyle = HeaderStyle;
            ICRArow = sheet.CreateRow(2);
            ICRArow.CreateCell(0);
            NPOIWrite.CellMerged(sheet, 2, 2, 1, 9);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader3);
            ICRACell.CellStyle = HeaderStyle;
            ICRACell.CellStyle.Alignment = HorizontalAlignment.Center;
            ICRArow = sheet.CreateRow(3);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.CellStyle = HeaderStyle;
            ICRACell.CellStyle.Alignment = HorizontalAlignment.Center;
            NPOIWrite.AutoFitColumn(sheet, 1);
            ICRACell.CellStyle = HeaderStyle;
            #endregion

            #region Report Name
            ICRArow = sheet.CreateRow(3);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrReportName);
            HeaderStyle.Alignment = HorizontalAlignment.Left;
            ICRACell.CellStyle = HeaderStyle;
            #endregion

            #region Header creation in the Excel
            var headerRow = sheet.CreateRow(4);
            sheet.GetRow(4).HeightInPoints = 30;
            var headerlistFinal = listTableHeader.OrderBy(x => x.Position).ToList();
            var cellincr = 0;
            for (int i = 0; i < headerlistFinal.Count; i++)
            {
                int colspan = headerlistFinal[i].Colspan;
                if (colspan > 1)
                {
                    for (int k = 0; k < colspan; k++)
                    {
                        var cell = headerRow.CreateCell(cellincr + k);
                        cell.SetCellValue(headerlistFinal[i].ColumnName);
                        NPOIWrite.AutoFitColumn(sheet, cellincr);

                        #region Added by Subrata on 21 Feb 2018
                        XSSFCellStyle style = (XSSFCellStyle)workbook.CreateCellStyle();
                        XSSFColor colorToFill = new XSSFColor(new byte[] { 68, 114, 196 });// { 51, 204, 204 });//Color.Blue);
                        style.SetFillForegroundColor(colorToFill);
                        IFont font = workbook.CreateFont();
                        font.Color = IndexedColors.White.Index;
                        font.Boldweight = (short)FontBoldWeight.Bold;
                        style.SetFont(font);
                        style.WrapText = true;
                        style.FillPattern = FillPattern.SolidForeground;
                        style.Alignment = HorizontalAlignment.Center;
                        style.VerticalAlignment = VerticalAlignment.Center;
                        style.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                        style.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                        style.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                        style.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                        #endregion

                        cell.CellStyle = style;
                    }
                    NPOIWrite.CellMerged(sheet, 4, 4, cellincr, cellincr + colspan - 1);
                    cellincr = cellincr + colspan;
                }
                else
                {
                    var cell = headerRow.CreateCell(cellincr);
                    cell.SetCellValue(headerlistFinal[i].ColumnName);
                    NPOIWrite.AutoFitColumn(sheet, cellincr);
                    cellincr = cellincr + colspan;

                    #region Added by Subrata on 21 Feb 2018
                    XSSFCellStyle style = (XSSFCellStyle)workbook.CreateCellStyle();
                    XSSFColor colorToFill = new XSSFColor(new byte[] { 68, 114, 196 });// { 51, 204, 204 });// Color.Blue);
                    style.SetFillForegroundColor(colorToFill);
                    IFont font = workbook.CreateFont();
                    font.Color = IndexedColors.White.Index;
                    font.Boldweight = (short)FontBoldWeight.Bold;
                    style.WrapText = true;
                    style.SetFont(font);
                    style.FillPattern = FillPattern.SolidForeground;
                    if (i > 0)
                    {
                        style.Alignment = HorizontalAlignment.Center;
                        style.VerticalAlignment = VerticalAlignment.Center;
                    }
                    else
                    {
                        style.Alignment = HorizontalAlignment.Left;
                        style.VerticalAlignment = VerticalAlignment.Center;
                    }
                    style.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                    style.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                    style.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                    style.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                    #endregion

                    cell.CellStyle = style;
                }
            }
            #endregion

            #region Sub Header creation in the Excel
            var subHeaderRow = sheet.CreateRow(5);
            sheet.GetRow(5).HeightInPoints = 30;
            var subHeaderlistFinal = listTableSubHeader.OrderBy(x => x.Position).ToList();
            for (int i = 0; i < subHeaderlistFinal.Count; i++)
            {
                int index = headerlistFinal.FindIndex(x => x.ColumnName.Equals(subHeaderlistFinal[i].ColumnName));
                if (index >= 0)
                {
                    var cell = subHeaderRow.CreateCell(i);

                    #region Added by Subrata on 21 Feb 2018
                    XSSFCellStyle style = (XSSFCellStyle)workbook.CreateCellStyle();
                    XSSFColor colorToFill = new XSSFColor(new byte[] { 68, 114, 196 });// Color.Blue);
                    style.SetFillForegroundColor(colorToFill);
                    IFont font = workbook.CreateFont();
                    font.Color = IndexedColors.White.Index;
                    font.Boldweight = (short)FontBoldWeight.Bold;
                    style.SetFont(font);
                    style.FillPattern = FillPattern.SolidForeground;
                    style.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                    style.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                    style.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                    style.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                    if (i > 0)
                    {
                        style.Alignment = HorizontalAlignment.Center;
                        style.VerticalAlignment = VerticalAlignment.Center;
                    }
                    else
                    {
                        style.Alignment = HorizontalAlignment.Left;
                        style.VerticalAlignment = VerticalAlignment.Center;
                    }
                    #endregion

                    cell.CellStyle = style;
                }
                else
                {
                    var cell = subHeaderRow.CreateCell(i);
                    cell.SetCellValue(subHeaderlistFinal[i].ColumnName);
                    NPOIWrite.AutoFitColumn(sheet, i);

                    #region Added by Subrata on 21 Feb 2018
                    XSSFCellStyle style = (XSSFCellStyle)workbook.CreateCellStyle();
                    XSSFColor colorToFill = new XSSFColor(new byte[] { 68, 114, 196 });// Color.Blue);
                    style.SetFillForegroundColor(colorToFill);
                    IFont font = workbook.CreateFont();
                    font.Color = IndexedColors.White.Index;
                    font.Boldweight = (short)FontBoldWeight.Bold;
                    style.SetFont(font);
                    style.FillPattern = FillPattern.SolidForeground;
                    style.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                    style.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                    style.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                    style.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                    if (i > 0)
                    {
                        style.Alignment = HorizontalAlignment.Center;
                        style.VerticalAlignment = VerticalAlignment.Center;
                    }
                    else
                    {
                        style.Alignment = HorizontalAlignment.Left;
                        style.VerticalAlignment = VerticalAlignment.Center;
                    }
                    #endregion

                    cell.CellStyle = style;
                }
            }
            #endregion

            #region Cell Style For Even Row

            #region Without DecimalFormat
            XSSFCellStyle AllCellStyleEven = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleEven.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillEven = new XSSFColor(new byte[] { 176, 196, 222 });
            AllCellStyleEven.SetFillForegroundColor(colorToFillEven);
            AllCellStyleEven.FillPattern = FillPattern.SolidForeground;
            AllCellStyleEven.Alignment = HorizontalAlignment.Center;
            AllCellStyleEven.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat AUM
            XSSFCellStyle aumAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor aumcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            aumAllCellStyleEvenDecFrmt.SetFillForegroundColor(aumcolorToFillEvenWtoutDec);
            aumAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat aumformatEven = workbook.CreateDataFormat();
            aumAllCellStyleEvenDecFrmt.DataFormat = aumformatEven.GetFormat(aumDecimalFormat);
            aumAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            /// Number Format ////
            XSSFCellStyle aumAllCellStyleEvenDecFrmtWNum = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleEvenDecFrmtWNum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmtWNum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmtWNum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmtWNum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor aumcolorToFillEvenWtoutDecWNum = new XSSFColor(new byte[] { 176, 196, 222 });
            aumAllCellStyleEvenDecFrmtWNum.SetFillForegroundColor(aumcolorToFillEvenWtoutDecWNum);
            aumAllCellStyleEvenDecFrmtWNum.FillPattern = FillPattern.SolidForeground;
            IDataFormat aumformatEvenWNum = workbook.CreateDataFormat();
            aumAllCellStyleEvenDecFrmtWNum.DataFormat = aumformatEvenWNum.GetFormat(aumNumberDecimalFormat);
            aumAllCellStyleEvenDecFrmtWNum.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleEvenDecFrmtWNum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Return
            XSSFCellStyle retAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            retAllCellStyleEvenDecFrmt.SetFillForegroundColor(retcolorToFillEvenWtoutDec);
            retAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatEven = workbook.CreateDataFormat();
            retAllCellStyleEvenDecFrmt.DataFormat = retformatEven.GetFormat(retDecimalFormat);
            retAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            retAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;


            ////Number Format ////
            XSSFCellStyle retAllCellStyleEvenDecFrmtWnum = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleEvenDecFrmtWnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmtWnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmtWnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmtWnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillEvenWtoutDecWnum = new XSSFColor(new byte[] { 176, 196, 222 });
            retAllCellStyleEvenDecFrmtWnum.SetFillForegroundColor(retcolorToFillEvenWtoutDecWnum);
            retAllCellStyleEvenDecFrmtWnum.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatEvenWnum = workbook.CreateDataFormat();
            retAllCellStyleEvenDecFrmtWnum.DataFormat = retformatEvenWnum.GetFormat(retNumberDecimalFormat);
            retAllCellStyleEvenDecFrmtWnum.Alignment = HorizontalAlignment.Center;
            retAllCellStyleEvenDecFrmtWnum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Nav
            XSSFCellStyle navAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor navcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            navAllCellStyleEvenDecFrmt.SetFillForegroundColor(navcolorToFillEvenWtoutDec);
            navAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat navformatEven = workbook.CreateDataFormat();
            navAllCellStyleEvenDecFrmt.DataFormat = navformatEven.GetFormat(navDecimalFormat);
            navAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            navAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;


            /// Number Format ////
            XSSFCellStyle navAllCellStyleEvenDecFrmtWnnum = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleEvenDecFrmtWnnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmtWnnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmtWnnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmtWnnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor navcolorToFillEvenWtoutDecWnnum = new XSSFColor(new byte[] { 176, 196, 222 });
            navAllCellStyleEvenDecFrmtWnnum.SetFillForegroundColor(navcolorToFillEvenWtoutDecWnnum);
            navAllCellStyleEvenDecFrmtWnnum.FillPattern = FillPattern.SolidForeground;
            IDataFormat navformatEvenWnnum = workbook.CreateDataFormat();
            navAllCellStyleEvenDecFrmtWnnum.DataFormat = navformatEvenWnnum.GetFormat(navNumberDecimalFormat);
            navAllCellStyleEvenDecFrmtWnnum.Alignment = HorizontalAlignment.Center;
            navAllCellStyleEvenDecFrmtWnnum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Other
            XSSFCellStyle otherAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            otherAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othercolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            otherAllCellStyleEvenDecFrmt.SetFillForegroundColor(othercolorToFillEvenWtoutDec);
            otherAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat otherformatEven = workbook.CreateDataFormat();
            otherAllCellStyleEvenDecFrmt.DataFormat = otherformatEven.GetFormat(othDecimalFormat);
            otherAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            otherAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            /// Number Format ///
            XSSFCellStyle otherAllCellStyleEvenDecFrmtWnum = (XSSFCellStyle)workbook.CreateCellStyle();
            otherAllCellStyleEvenDecFrmtWnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmtWnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmtWnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmtWnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othercolorToFillEvenWtoutDecWnum = new XSSFColor(new byte[] { 176, 196, 222 });
            otherAllCellStyleEvenDecFrmtWnum.SetFillForegroundColor(othercolorToFillEvenWtoutDecWnum);
            otherAllCellStyleEvenDecFrmtWnum.FillPattern = FillPattern.SolidForeground;
            IDataFormat otherformatEvenWnum = workbook.CreateDataFormat();
            otherAllCellStyleEvenDecFrmtWnum.DataFormat = otherformatEvenWnum.GetFormat(othNumberDecimalFormat);
            otherAllCellStyleEvenDecFrmtWnum.Alignment = HorizontalAlignment.Center;
            otherAllCellStyleEvenDecFrmtWnum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Ratio
            XSSFCellStyle ratAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor ratcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            ratAllCellStyleEvenDecFrmt.SetFillForegroundColor(ratcolorToFillEvenWtoutDec);
            ratAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat ratformatEven = workbook.CreateDataFormat();
            ratAllCellStyleEvenDecFrmt.DataFormat = ratformatEven.GetFormat(ratioDecimalFormat);
            ratAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle ratAllCellStyleEvenDecFrmtWth = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleEvenDecFrmtWth.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmtWth.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmtWth.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmtWth.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor ratcolorToFillEvenWtoutDecwth = new XSSFColor(new byte[] { 176, 196, 222 });
            ratAllCellStyleEvenDecFrmtWth.SetFillForegroundColor(ratcolorToFillEvenWtoutDecwth);
            ratAllCellStyleEvenDecFrmtWth.FillPattern = FillPattern.SolidForeground;
            IDataFormat ratformatEvenWth = workbook.CreateDataFormat();
            ratAllCellStyleEvenDecFrmtWth.DataFormat = ratformatEvenWth.GetFormat(ratioNumberDecimalFormat);
            ratAllCellStyleEvenDecFrmtWth.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleEvenDecFrmtWth.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #endregion

            #region Cell Style For Odd Row

            #region With Decimal Format AUM
            XSSFCellStyle aumAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor AUMcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            aumAllCellStyleOddDec.SetFillForegroundColor(AUMcolorToFillOddDec);
            aumAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat AUMformatOddDec = workbook.CreateDataFormat();
            aumAllCellStyleOddDec.DataFormat = AUMformatOddDec.GetFormat(aumDecimalFormat);
            aumAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle aumAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor AUMcolorToFillOddDecWnf = new XSSFColor(new byte[] { 255, 255, 255 });
            aumAllCellStyleOddDecWnuf.SetFillForegroundColor(AUMcolorToFillOddDecWnf);
            aumAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat AUMformatOddDecWnuf = workbook.CreateDataFormat();
            aumAllCellStyleOddDecWnuf.DataFormat = AUMformatOddDecWnuf.GetFormat(aumNumberDecimalFormat);
            aumAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With Decimal Format Return
            XSSFCellStyle retAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor RETcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            retAllCellStyleOddDec.SetFillForegroundColor(RETcolorToFillOddDec);
            retAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat RETformatOddDec = workbook.CreateDataFormat();
            retAllCellStyleOddDec.DataFormat = RETformatOddDec.GetFormat(retDecimalFormat);
            retAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            retAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle retAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor RETcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            retAllCellStyleOddDecWnuf.SetFillForegroundColor(RETcolorToFillOddDecWnuf);
            retAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat RETformatOddDecWnuf = workbook.CreateDataFormat();
            retAllCellStyleOddDecWnuf.DataFormat = RETformatOddDecWnuf.GetFormat(retNumberDecimalFormat);
            retAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            retAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With Decimal Format Nav
            XSSFCellStyle navAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor naVcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            navAllCellStyleOddDec.SetFillForegroundColor(naVcolorToFillOddDec);
            navAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat naVformatOddDec = workbook.CreateDataFormat();
            navAllCellStyleOddDec.DataFormat = naVformatOddDec.GetFormat(navDecimalFormat);
            navAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            navAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            XSSFCellStyle navAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor naVcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            navAllCellStyleOddDecWnuf.SetFillForegroundColor(naVcolorToFillOddDecWnuf);
            navAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat naVformatOddDecWnuf = workbook.CreateDataFormat();
            navAllCellStyleOddDecWnuf.DataFormat = naVformatOddDecWnuf.GetFormat(navNumberDecimalFormat);
            navAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            navAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion


            #region With Decimal Format Other
            XSSFCellStyle othAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            othAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            othAllCellStyleOddDec.SetFillForegroundColor(othcolorToFillOddDec);
            othAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat othformatOddDec = workbook.CreateDataFormat();
            othAllCellStyleOddDec.DataFormat = othformatOddDec.GetFormat(othDecimalFormat);
            othAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            othAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            XSSFCellStyle othAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            othAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            othAllCellStyleOddDecWnuf.SetFillForegroundColor(othcolorToFillOddDecWnuf);
            othAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat othformatOddDecWnuf = workbook.CreateDataFormat();
            othAllCellStyleOddDecWnuf.DataFormat = othformatOddDecWnuf.GetFormat(othNumberDecimalFormat);
            othAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            othAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion


            #region With Decimal Format ratio
            XSSFCellStyle ratAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            ratAllCellStyleOddDec.SetFillForegroundColor(retcolorToFillOddDec);
            ratAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatOddDec = workbook.CreateDataFormat();
            ratAllCellStyleOddDec.DataFormat = retformatOddDec.GetFormat(ratioDecimalFormat);
            ratAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            XSSFCellStyle ratAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            ratAllCellStyleOddDecWnuf.SetFillForegroundColor(retcolorToFillOddDecWnuf);
            ratAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatOddDecWnuf = workbook.CreateDataFormat();
            ratAllCellStyleOddDecWnuf.DataFormat = retformatOddDecWnuf.GetFormat(ratioNumberDecimalFormat);
            ratAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion



            #region Without Decimal Format
            XSSFCellStyle AllCellStyleOdd = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleOdd.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillOdd = new XSSFColor(new byte[] { 255, 255, 255 });
            AllCellStyleOdd.SetFillForegroundColor(colorToFillOdd);
            AllCellStyleOdd.FillPattern = FillPattern.SolidForeground;
            AllCellStyleOdd.Alignment = HorizontalAlignment.Center;
            AllCellStyleOdd.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #endregion

            #region Cell Style For First Column Even Row
            XSSFCellStyle AllCellStyleFstColmEven = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleFstColmEven.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillFstClmnEven = new XSSFColor(new byte[] { 176, 196, 222 });
            AllCellStyleFstColmEven.SetFillForegroundColor(colorToFillFstClmnEven);
            AllCellStyleFstColmEven.FillPattern = FillPattern.SolidForeground;
            AllCellStyleFstColmEven.Alignment = HorizontalAlignment.Left;
            AllCellStyleFstColmEven.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region Cell Style For First Column Odd Row
            XSSFCellStyle AllCellStyleFstColmOdd = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleFstColmOdd.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillFstClmnOdd = new XSSFColor(new byte[] { 255, 255, 255 });
            AllCellStyleFstColmOdd.SetFillForegroundColor(colorToFillFstClmnOdd);
            AllCellStyleFstColmOdd.FillPattern = FillPattern.SolidForeground;
            AllCellStyleFstColmOdd.Alignment = HorizontalAlignment.Left;
            AllCellStyleFstColmOdd.VerticalAlignment = VerticalAlignment.Center;
            #endregion
            #region Without Decimal Number Format Even Row
            XSSFCellStyle intAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            intAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            intAllCellStyleEvenDecFrmt.SetFillForegroundColor(intcolorToFillEvenWtoutDec);
            intAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat intformatEven = workbook.CreateDataFormat();
            intAllCellStyleEvenDecFrmt.DataFormat = intformatEven.GetFormat(intNumberWithoutDecimalFormat);
            intAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            intAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle intSimpleAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            intSimpleAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intSimplecolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            intSimpleAllCellStyleEvenDecFrmt.SetFillForegroundColor(intSimplecolorToFillEvenWtoutDec);
            intSimpleAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            intSimpleAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            intSimpleAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;
            #endregion
            #region Without Decimal Number Format Odd Row
            XSSFCellStyle intAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            intAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            intAllCellStyleOddDec.SetFillForegroundColor(intcolorToFillOddDec);
            intAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat intformatOddDec = workbook.CreateDataFormat();
            intAllCellStyleOddDec.DataFormat = intformatOddDec.GetFormat(intNumberWithoutDecimalFormat);
            intAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            intAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle intSimpleAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            intSimpleAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intSimplecolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            intSimpleAllCellStyleOddDec.SetFillForegroundColor(intSimplecolorToFillOddDec);
            intSimpleAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            intSimpleAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            intSimpleAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;
            #endregion
            #region With DateTime format
            var DateTimeFormat = ubs.DateFormat;
            XSSFCellStyle DateTimeAllCellStyleEvenFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            DateTimeAllCellStyleEvenFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleEvenFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleEvenFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleEvenFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor DateTimecolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            DateTimeAllCellStyleEvenFrmt.SetFillForegroundColor(DateTimecolorToFillEvenWtoutDec);
            DateTimeAllCellStyleEvenFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat DateTimeformatEven = workbook.CreateDataFormat();
            DateTimeAllCellStyleEvenFrmt.DataFormat = DateTimeformatEven.GetFormat(DateTimeFormat);
            DateTimeAllCellStyleEvenFrmt.Alignment = HorizontalAlignment.Center;
            DateTimeAllCellStyleEvenFrmt.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle DateTimeAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            DateTimeAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor DateTimecolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            DateTimeAllCellStyleOddDec.SetFillForegroundColor(DateTimecolorToFillOddDec);
            DateTimeAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat DateTimeformatOddDec = workbook.CreateDataFormat();
            DateTimeAllCellStyleOddDec.DataFormat = DateTimeformatOddDec.GetFormat(DateTimeFormat);
            DateTimeAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            DateTimeAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            #endregion
            #region Value added to the Excel

            int incr = 6;
            bool isNumeric = false;

            #region Added by Subrata on 22 Feb 2018
            bool IsNumericKey = false;
            bool IsNumericValue = false;
            var AllListData = listData.SelectMany(x => x.LstKeyValuePair).ToArray();
            var AllDataKey = AllListData.Select(x => x.Key).Distinct().ToArray();
            int ValueRes;
            IsNumericKey = int.TryParse(AllDataKey[0], out ValueRes);

            #endregion

            foreach (var item in listData)
            {
                if (item.LstKeyValuePair.Count() > 0)
                {
                    int value;
                    isNumeric = int.TryParse(item.LstKeyValuePair[0].Key, out value);
                }


                var dataRow = sheet.CreateRow(incr);
                sheet.GetRow(incr).HeightInPoints = 20;
                if (isNumeric == true)
                {
                    var cellValues = (from i in item.LstKeyValuePair
                                      from j in listTableSubHeader
                                      where i.Key.ToString() == j.Position.ToString()
                                      orderby j.Position
                                      select new
                                      {
                                          IsNum = j.IsNumberFormatReq,
                                          DecType = j.DecFormatType,
                                          Value = i.Value,
                                          IsMixedType = j.IsMixedValueType,
                                          IsDateTimeStringMixedType = j.IsDateTimeStringMixedType,
                                          IsDateTimeType = j.IsDateTimeType,
                                      }).ToArray();

                    for (int k = 0; k < cellValues.Length; k++)
                    {
                        var datacell = dataRow.CreateCell(k);

                        if (cellValues[k].DecType != DecimalFormatType.NoDecimalReq)
                        {
                            double OutVal;
                            if (cellValues[k].Value == "" || cellValues[k].Value == null || cellValues[k].Value == BlankData || !double.TryParse(cellValues[k].Value, out OutVal))
                            {
                                if (k > 0)
                                {
                                    datacell.SetCellValue(cellValues[k].Value);
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;
                                }
                                else
                                {
                                    datacell.SetCellValue(cellValues[k].Value);
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }

                            }
                            else
                            {
                                if (k > 0)
                                {
                                    datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                                    //if (incr % 2 == 0)
                                    //    datacell.CellStyle = AllCellStyleEven;
                                    //else
                                    //    datacell.CellStyle = AllCellStyleOdd;
                                    if (cellValues[k].DecType == DecimalFormatType.AUM)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {

                                                datacell.CellStyle = aumAllCellStyleEvenDecFrmtWNum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = aumAllCellStyleEvenDecFrmt;
                                            }
                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = aumAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = aumAllCellStyleOddDec;
                                            }
                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.NAV)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = navAllCellStyleEvenDecFrmtWnnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = navAllCellStyleEvenDecFrmt;
                                            }
                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = navAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = navAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.OTHER)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = otherAllCellStyleEvenDecFrmtWnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = otherAllCellStyleEvenDecFrmt;
                                            }
                                        }

                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = othAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {

                                                datacell.CellStyle = othAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.RATIO)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = ratAllCellStyleEvenDecFrmtWth;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = ratAllCellStyleEvenDecFrmt;
                                            }
                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = ratAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = ratAllCellStyleOddDec;
                                            }
                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.RETURN)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = retAllCellStyleEvenDecFrmtWnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = retAllCellStyleEvenDecFrmt;
                                            }

                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = retAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = retAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.IntegerWithOutDecimal)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = intAllCellStyleEvenDecFrmt;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = intSimpleAllCellStyleEvenDecFrmt;
                                            }

                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = intAllCellStyleOddDec;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = intSimpleAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                }
                                else
                                {
                                    datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }

                            }

                        }
                        else
                        {
                            double OutVal;
                            if (double.TryParse(cellValues[k].Value, out OutVal) && !cellValues[k].IsMixedType)
                            {
                                datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                                if (k > 0)
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;

                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }
                            }
                            else if (cellValues[k].IsDateTimeType)
                            {
                                DateTime OutValdt;
                                if (DateTime.TryParse(cellValues[k].Value, out OutValdt))
                                {
                                    datacell.SetCellValue(Convert.ToDateTime(cellValues[k].Value));
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = DateTimeAllCellStyleEvenFrmt;
                                    else
                                        datacell.CellStyle = DateTimeAllCellStyleOddDec;
                                }
                                else
                                {
                                    datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleEven;
                                        else
                                            datacell.CellStyle = AllCellStyleOdd;

                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }
                                }
                            }
                            else if (cellValues[k].IsDateTimeStringMixedType)
                            {
                                DateTime OutValdt;
                                if (DateTime.TryParse(cellValues[k].Value, out OutValdt))
                                {
                                    datacell.SetCellValue(Convert.ToDateTime(cellValues[k].Value));
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = DateTimeAllCellStyleEvenFrmt;
                                    else
                                        datacell.CellStyle = DateTimeAllCellStyleOddDec;
                                }
                                else
                                {
                                    datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleEven;
                                        else
                                            datacell.CellStyle = AllCellStyleOdd;

                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }
                                }
                            }
                            else
                            {
                                datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                if (k > 0)
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;

                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }
                            }



                        }
                    }
                    incr++;
                }
                else
                {
                    var cellValues = (from i in item.LstKeyValuePair
                                      from j in listTableSubHeader
                                      where i.Key == j.ColumnName
                                      orderby j.Position
                                      select new
                                      {
                                          IsNum = j.IsNumberFormatReq,
                                          DecType = j.DecFormatType,
                                          Value = i.Value,
                                          IsMixedType = j.IsMixedValueType,
                                          IsDateTimeStringMixedType = j.IsDateTimeStringMixedType,
                                          IsDateTimeType = j.IsDateTimeType,
                                      }).ToArray();

                    for (int k = 0; k < cellValues.Length; k++)
                    {
                        var datacell = dataRow.CreateCell(k);
                        if (cellValues[k].DecType != DecimalFormatType.NoDecimalReq)
                        {
                            double OutVal;
                            if (cellValues[k].Value == "" || cellValues[k].Value == null || cellValues[k].Value == BlankData || !double.TryParse(cellValues[k].Value, out OutVal))
                            {
                                if (k > 0)
                                {
                                    datacell.SetCellValue(cellValues[k].Value);
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;
                                }
                                else
                                {
                                    datacell.SetCellValue(cellValues[k].Value);
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;

                                }

                            }
                            else
                            {
                                if (k > 0)
                                {
                                    datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                                    if (cellValues[k].DecType == DecimalFormatType.AUM)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {

                                                datacell.CellStyle = aumAllCellStyleEvenDecFrmtWNum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = aumAllCellStyleEvenDecFrmt;
                                            }
                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = aumAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = aumAllCellStyleOddDec;
                                            }
                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.NAV)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = navAllCellStyleEvenDecFrmtWnnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = navAllCellStyleEvenDecFrmt;
                                            }
                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = navAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = navAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.OTHER)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = otherAllCellStyleEvenDecFrmtWnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = otherAllCellStyleEvenDecFrmt;
                                            }
                                        }

                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = othAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {

                                                datacell.CellStyle = othAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.RATIO)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = ratAllCellStyleEvenDecFrmtWth;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = ratAllCellStyleEvenDecFrmt;
                                            }
                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = ratAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = ratAllCellStyleOddDec;
                                            }
                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.RETURN)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = retAllCellStyleEvenDecFrmtWnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = retAllCellStyleEvenDecFrmt;
                                            }

                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = retAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = retAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.IntegerWithOutDecimal)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = intAllCellStyleEvenDecFrmt;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = intSimpleAllCellStyleEvenDecFrmt;
                                            }

                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = intAllCellStyleOddDec;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = intSimpleAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                }
                                else
                                {
                                    datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }

                            }

                        }
                        else
                        {


                            double OutVal;
                            if (double.TryParse(cellValues[k].Value, out OutVal) && !cellValues[k].IsMixedType)
                            {
                                datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                                if (k > 0)
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;

                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }
                            }
                            else if (cellValues[k].IsDateTimeType)
                            {
                                DateTime OutValdt;
                                if (DateTime.TryParse(cellValues[k].Value, out OutValdt))
                                {
                                    datacell.SetCellValue(Convert.ToDateTime(cellValues[k].Value));
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = DateTimeAllCellStyleEvenFrmt;
                                    else
                                        datacell.CellStyle = DateTimeAllCellStyleOddDec;
                                }
                                else
                                {
                                    datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleEven;
                                        else
                                            datacell.CellStyle = AllCellStyleOdd;

                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }
                                }
                            }
                            else if (cellValues[k].IsDateTimeStringMixedType)
                            {
                                DateTime OutValdt;
                                if (DateTime.TryParse(cellValues[k].Value, out OutValdt))
                                {
                                    datacell.SetCellValue(Convert.ToDateTime(cellValues[k].Value));
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = DateTimeAllCellStyleEvenFrmt;
                                    else
                                        datacell.CellStyle = DateTimeAllCellStyleOddDec;
                                }
                                else
                                {
                                    datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleEven;
                                        else
                                            datacell.CellStyle = AllCellStyleOdd;

                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }
                                }
                            }
                            else
                            {
                                datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                if (k > 0)
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;

                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }
                            }

                        }
                    }
                    incr++;
                }
            }
            #endregion

            for (int i = 0; i < listTableSubHeader.Count; i++)
                sheet.AutoSizeColumn(i);
            if (sheet.GetColumnWidth(0) < 11072)
                sheet.SetColumnWidth(0, 11072);

            #region Logo
            try
            {
                if (!string.IsNullOrEmpty(LogoPath))
                {
                    XSSFDrawing patriarch = (XSSFDrawing)sheet.CreateDrawingPatriarch();
                    XSSFClientAnchor anchor;
                    anchor = new XSSFClientAnchor(0, 0, 0, 255, 0, 0, 0, 3);
                    anchor.AnchorType = AnchorType.DontMoveAndResize;
                    XSSFPicture picture = (XSSFPicture)patriarch.CreatePicture(anchor, LoadImage(LogoPath, workbook, PictureType.PNG));
                    double x1 = .25;
                    double y1 = .75;
                    picture.Resize(x1, y1);
                    picture.LineStyle = LineStyle.None;
                }
            }
            catch (Exception ex)
            {
            }

            #endregion

            #region Source, Date As On and Report Generated On
            ICRArow = sheet.CreateRow(incr + 3);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrSource);

            ICRArow = sheet.CreateRow(incr + 4);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrDateAsOn);

            ICRArow = sheet.CreateRow(incr + 5);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrReportGeneratedOn);
            #endregion

            #region Sheet Two Logo
            try
            {
                if (!string.IsNullOrEmpty(LogoPath))
                {
                    XSSFDrawing patriarch = (XSSFDrawing)sheetTwo.CreateDrawingPatriarch();
                    XSSFClientAnchor anchor;
                    anchor = new XSSFClientAnchor(0, 0, 0, 255, 0, 0, 0, 3);
                    anchor.AnchorType = AnchorType.DontMoveAndResize;
                    XSSFPicture picture = (XSSFPicture)patriarch.CreatePicture(anchor, LoadImage(LogoPath, workbook, PictureType.PNG));
                    double x1 = 1.10;
                    double y1 = 1.10;
                    picture.Resize(x1, y1);
                    picture.LineStyle = LineStyle.None;
                }
            }
            catch (Exception ex)
            {
            }
            #endregion

            #region Disclaimer Sheet
            var Row = sheetTwo.CreateRow(1);
            var cellSheetTwo = Row.CreateCell(7);
            cellSheetTwo.SetCellValue("ICRA Analytics Limited");
            cellSheetTwo.CellStyle = HeaderStyle;

            Row = sheetTwo.CreateRow(4);
            ICell Cell;
            for (int i = 0; i < listTableSubHeader.Count; i++)
            {
                Cell = Row.CreateCell(i);
                if (i == 0)
                {
                    XSSFCellStyle declationstyle = (XSSFCellStyle)workbook.CreateCellStyle();

                    declationstyle.Alignment = HorizontalAlignment.Left;
                    declationstyle.VerticalAlignment = VerticalAlignment.Top;
                    declationstyle.WrapText = true;
                    IFont declarationfnt = (XSSFFont)workbook.CreateFont();
                    declarationfnt.FontName = "Calibri";
                    declarationfnt.FontHeightInPoints = (short)11;
                    declationstyle.SetFont(declarationfnt);
                    Cell.SetCellValue(!string.IsNullOrEmpty(Footer) ? Footer : "All information contained herein is obtained by ICRA Analytics Limited from sources believed by it to be accurate and reliable. Because of the possibility of human or mechanical error as well as other factors, however, all information contained herein is provided 'AS IS' without warranty of any kind. ICRA Analytics adopts all necessary measures so that the information it uses is of sufficient quality and from sources ICRA Analytics considers to be reliable including, when appropriate, independent third-party sources. However, ICRA Analytics is not an auditor and cannot in every instance independently verify or validate information received in preparing this document." +
                        "All information contained herein must be construed solely as statements of opinion, and  ICRA Analytics Limited or its affiliates or group companies and its respective and any of its officers, directors, personnel and employees, disclaim liability to any loss, damage of any nature, including but not limited to direct, indirect, punitive, special, exemplary, consequential, as also any loss of profit in any way arising from the use of this document or its contents in any manner or for any contingency within or beyond the control of, ICRA Analytics or any of its directors, officers, employees, agents, representatives, licensors or suppliers, arising from or in connection with the information contained herein or the use of or inability to use any such information.Opinions expressed in the document are not the opinions of our holding company, ICRA Limited(ICRA), and should not be construed as any indication of credit rating or grading of ICRA for any instruments that have been issued or are to be issued by any entity.The recipient alone shall be fully responsible and / or are liable for any decision taken on the basis of this document and / or the information contained herein.");
                    Cell.CellStyle = declationstyle;
                }

            }
            NPOIWrite.CellMerged(sheetTwo, 4, 4, 0, 17);
            sheetTwo.GetRow(4).HeightInPoints = 200;
            #endregion

            #region Disclaimer Sheet HyperLink
            XSSFCellStyle HyperLinkStyle = (XSSFCellStyle)workbook.CreateCellStyle();
            IFont HyperLinkFont = workbook.CreateFont();
            HyperLinkFont.Color = IndexedColors.Orange.Index;
            HyperLinkFont.Underline = FontUnderlineType.Single;
            HyperLinkStyle.SetFont(HyperLinkFont);

            Row = sheetTwo.CreateRow(5);
            Cell = Row.CreateCell(0);
            Cell.SetCellValue("Click here for third-party disclaimers");
            XSSFCreationHelper createHelper = (XSSFCreationHelper)workbook.GetCreationHelper();
            XSSFHyperlink link = (XSSFHyperlink)createHelper.CreateHyperlink(HyperlinkType.Url);
            link.Address = "https://www.icraanalytics.com/home/thirdpartydisclaimers";
            Cell.Hyperlink = link;
            Cell.CellStyle = HyperLinkStyle;
            #endregion

            sheet.ActiveCell = new CellAddress(0, 1);

            var stream = new MemoryStream();
            workbook.Write(stream);
            return workbook;
        }

        public static NPOI.XSSF.UserModel.XSSFWorkbook ExportToExcelWorkBookSebiperformanceReport(UserBasicSettings ubs, List<TableHeaderEntity> listMainTableHeader, List<TableHeaderEntity> listTableheader, List<ExportEntity> listData, List<ExportEntity> listDataByFundManager, string FundManager, int Amount, string LogoPath = "", string ReportName = "", string StrDateAsOn = "", List<string>[] FundManagerNameList = null)
        {
            var TRIIndexDisclaimer = listMainTableHeader.Where(x => x.ColumnName.Contains(StrTRIIndexDisclaimer)).FirstOrDefault();
            var TriIndexDisclaimerColCount = TRIIndexDisclaimer != null ? TRIIndexDisclaimer.Colspan : 0;
            #region Variable
            string Header = ubs.Reporting_Format_Header;
            string Footer = ubs.Reporting_Format_Footer;
            string BlankData = ubs.BlankData.ToUpper() == "BLANK" ? "" : ubs.BlankData; ;

            string StrHeader1 = "ICRA Analytics Limited";
            string StrHeader2 = "3rd Floor, Electric Mansion,Appasaheb Marathe Marg, Prabhadevi,Mumbai - 400 025 Maharashtra, India";
            string StrHeader3 = Header;
            string StrReportName = ReportName;
            //string StrSource = "Source: MFI 360";
            string StrSource = "Source: " + (string.IsNullOrEmpty(UserStatisticsEntity.SourceName) ? "MFI 360" : UserStatisticsEntity.SourceName);
            StrDateAsOn = "Data as on " + StrDateAsOn;
            string StrReportGeneratedOn = "Report Generated on " + DateTime.Now.ToString("dd-MMM-yyyy HH:mm:ss");

            #region number and decimal variable for AUM
            var aumPaddding = new string('0', (int)ubs.AUMDecimalFormat);
            var aumDecimalFormat = "0." + aumPaddding;
            string aumNUMBERFORMAT = ubs.NumberFormat;
            var aumNumberFormat = aumNUMBERFORMAT.Replace("0", "#");
            string aumNumberDecimalFormat = aumNumberFormat + "0." + new String('0', (int)ubs.AUMDecimalFormat);
            #endregion

            #region number and decimal variable for return
            var retPaddding = new string('0', (int)ubs.ReturnDecimalFormat);
            var retDecimalFormat = "0." + retPaddding;
            string retNUMBERFORMAT = ubs.NumberFormat;
            var retNumberFormat = retNUMBERFORMAT.Replace("0", "#");
            string retNumberDecimalFormat = retNumberFormat + "0." + new String('0', (int)ubs.ReturnDecimalFormat);
            #endregion

            #region number and decimal variable for NAV
            var navPaddding = new string('0', (int)ubs.NavDecimalFormat);
            var navDecimalFormat = "0." + navPaddding;
            string navNUMBERFORMAT = ubs.NumberFormat;
            var navNumberFormat = navNUMBERFORMAT.Replace("0", "#");
            string navNumberDecimalFormat = navNumberFormat + "0." + new String('0', (int)ubs.NavDecimalFormat);
            #endregion


            #region number and decimal variable for Other
            var othPaddding = new string('0', (int)ubs.OtherDecimal);
            var othDecimalFormat = "0." + othPaddding;
            string othNUMBERFORMAT = ubs.NumberFormat;
            var othNumberFormat = othNUMBERFORMAT.Replace("0", "#");
            string othNumberDecimalFormat = othNumberFormat + "0." + new String('0', (int)ubs.OtherDecimal);
            #endregion

            #region number and decimal variable for Ratio
            var ratioPaddding = new string('0', (int)ubs.RatioDecimalFormat);
            var ratioDecimalFormat = "0." + ratioPaddding;
            string ratioNUMBERFORMAT = ubs.NumberFormat;
            var ratioNumberFormat = ratioNUMBERFORMAT.Replace("0", "#");
            string ratioNumberDecimalFormat = ratioNumberFormat + "0." + new String('0', (int)ubs.RatioDecimalFormat);
            #endregion
            #region int Format with out Decimal
            var intNumberWithoutDecimalFormat = ubs.NumberFormat.Replace("0", "#");
            #endregion
            #endregion

            NPOI.XSSF.UserModel.XSSFWorkbook workbook = new NPOI.XSSF.UserModel.XSSFWorkbook();

            ISheet sheet = workbook.CreateSheet("Output");
            ISheet sheetTwo = workbook.CreateSheet("Disclaimer");

            #region Excel Sheet Gridlines Delete
            sheet.DisplayGridlines = false;
            sheetTwo.DisplayGridlines = false;
            #endregion

            #region Header Freeze
            sheet.CreateFreezePane(1, 9);
            sheetTwo.CreateFreezePane(1, 6);
            #endregion

            #region Set Font For Header1,Header2 and Header3
            XSSFCellStyle HeaderStyle = (XSSFCellStyle)workbook.CreateCellStyle();
            IFont Headerfont = workbook.CreateFont();
            Headerfont.Boldweight = (short)FontBoldWeight.Bold;
            HeaderStyle.SetFont(Headerfont);
            #endregion

            #region Set Cell Value For Header1, Header2 and Header3
            var ICRArow = sheet.CreateRow(0);
            ICRArow.CreateCell(0);
            NPOIWrite.CellMerged(sheet, 0, 0, 1, 9);
            var ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader1);
            ICRACell.CellStyle = HeaderStyle;
            ICRArow = sheet.CreateRow(1);
            ICRArow.CreateCell(0);
            NPOIWrite.CellMerged(sheet, 1, 1, 1, 9);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader2);
            ICRACell.CellStyle = HeaderStyle;
            ICRArow = sheet.CreateRow(2);
            ICRArow.CreateCell(0);
            NPOIWrite.CellMerged(sheet, 2, 2, 1, 9);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue("");
            ICRACell.CellStyle = HeaderStyle;
            ICRACell.CellStyle.Alignment = HorizontalAlignment.Center;
            ICRArow = sheet.CreateRow(3);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.CellStyle.Alignment = HorizontalAlignment.Center;
            NPOIWrite.AutoFitColumn(sheet, 1);
            ICRACell.CellStyle = HeaderStyle;
            #endregion

            #region Report Name
            ICRArow = sheet.CreateRow(4);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrReportName);
            HeaderStyle.Alignment = HorizontalAlignment.Left;
            ICRACell.CellStyle = HeaderStyle;
            #endregion

            #region Header creation in the Excel


            #endregion

            #region Cell Style For Even Row



            #region With DecimalFormat Return
            XSSFCellStyle retAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            retAllCellStyleEvenDecFrmt.SetFillForegroundColor(retcolorToFillEvenWtoutDec);
            retAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatEven = workbook.CreateDataFormat();
            retAllCellStyleEvenDecFrmt.DataFormat = retformatEven.GetFormat(retDecimalFormat);
            retAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            retAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;


            ////Number Format ////
            XSSFCellStyle retAllCellStyleEvenDecFrmtWnum = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleEvenDecFrmtWnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmtWnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmtWnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmtWnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillEvenWtoutDecWnum = new XSSFColor(new byte[] { 176, 196, 222 });
            retAllCellStyleEvenDecFrmtWnum.SetFillForegroundColor(retcolorToFillEvenWtoutDecWnum);
            retAllCellStyleEvenDecFrmtWnum.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatEvenWnum = workbook.CreateDataFormat();
            retAllCellStyleEvenDecFrmtWnum.DataFormat = retformatEvenWnum.GetFormat(retNumberDecimalFormat);
            retAllCellStyleEvenDecFrmtWnum.Alignment = HorizontalAlignment.Center;
            retAllCellStyleEvenDecFrmtWnum.VerticalAlignment = VerticalAlignment.Center;
            #endregion


            #region No Format
            XSSFCellStyle AllCellStyleEven = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleEven.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillEven = new XSSFColor(new byte[] { 176, 196, 222 });
            AllCellStyleEven.SetFillForegroundColor(colorToFillEven);
            AllCellStyleEven.FillPattern = FillPattern.SolidForeground;
            AllCellStyleEven.Alignment = HorizontalAlignment.Center;
            AllCellStyleEven.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #endregion

            #region Cell Style For Odd Row



            #region With Decimal Format Return
            XSSFCellStyle retAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor RETcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            retAllCellStyleOddDec.SetFillForegroundColor(RETcolorToFillOddDec);
            retAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat RETformatOddDec = workbook.CreateDataFormat();
            retAllCellStyleOddDec.DataFormat = RETformatOddDec.GetFormat(retDecimalFormat);
            retAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            retAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle retAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor RETcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            retAllCellStyleOddDecWnuf.SetFillForegroundColor(RETcolorToFillOddDecWnuf);
            retAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat RETformatOddDecWnuf = workbook.CreateDataFormat();
            retAllCellStyleOddDecWnuf.DataFormat = RETformatOddDecWnuf.GetFormat(retNumberDecimalFormat);
            retAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            retAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region No Format
            XSSFCellStyle AllCellStyleOdd = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleOdd.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillOdd = new XSSFColor(new byte[] { 255, 255, 255 });
            AllCellStyleOdd.SetFillForegroundColor(colorToFillOdd);
            AllCellStyleOdd.FillPattern = FillPattern.SolidForeground;
            AllCellStyleOdd.Alignment = HorizontalAlignment.Center;
            AllCellStyleOdd.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #endregion

            #region Cell Style For First Column Even Row
            XSSFCellStyle AllCellStyleFstColmEven = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleFstColmEven.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillFstClmnEven = new XSSFColor(new byte[] { 176, 196, 222 });
            AllCellStyleFstColmEven.SetFillForegroundColor(colorToFillFstClmnEven);
            AllCellStyleFstColmEven.FillPattern = FillPattern.SolidForeground;
            AllCellStyleFstColmEven.Alignment = HorizontalAlignment.Left;
            AllCellStyleFstColmEven.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region Cell Style For First Column Odd Row
            XSSFCellStyle AllCellStyleFstColmOdd = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleFstColmOdd.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillFstClmnOdd = new XSSFColor(new byte[] { 255, 255, 255 });
            AllCellStyleFstColmOdd.SetFillForegroundColor(colorToFillFstClmnOdd);
            AllCellStyleFstColmOdd.FillPattern = FillPattern.SolidForeground;
            AllCellStyleFstColmOdd.Alignment = HorizontalAlignment.Left;
            AllCellStyleFstColmOdd.VerticalAlignment = VerticalAlignment.Center;
            #endregion
            #region Without Decimal Number Format Even Row
            XSSFCellStyle intAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            intAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            intAllCellStyleEvenDecFrmt.SetFillForegroundColor(intcolorToFillEvenWtoutDec);
            intAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat intformatEven = workbook.CreateDataFormat();
            intAllCellStyleEvenDecFrmt.DataFormat = intformatEven.GetFormat(intNumberWithoutDecimalFormat);
            intAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            intAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle intSimpleAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            intSimpleAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intSimplecolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            intSimpleAllCellStyleEvenDecFrmt.SetFillForegroundColor(intSimplecolorToFillEvenWtoutDec);
            intSimpleAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            intSimpleAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            intSimpleAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;
            #endregion
            #region Without Decimal Number Format Odd Row
            XSSFCellStyle intAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            intAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            intAllCellStyleOddDec.SetFillForegroundColor(intcolorToFillOddDec);
            intAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat intformatOddDec = workbook.CreateDataFormat();
            intAllCellStyleOddDec.DataFormat = intformatOddDec.GetFormat(intNumberWithoutDecimalFormat);
            intAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            intAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle intSimpleAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            intSimpleAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intSimplecolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            intSimpleAllCellStyleOddDec.SetFillForegroundColor(intSimplecolorToFillOddDec);
            intSimpleAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            intSimpleAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            intSimpleAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            //var celltxt = "Returns on investment of Rs. " + string.Format("{0,0:" + ubs.NumberFormat.Replace("0", "#") + "}", Amount) + " as on " + StrDateAsOn;
            var celltxt = "Returns on investment of Rs. " + string.Format("{0,0:" + ubs.NumberFormat.Replace("0", "#") + "}", Amount) + " as on " + StrDateAsOn.Substring(14, 3) + " " + StrDateAsOn.Substring(11, 2) + ", " + StrDateAsOn.Substring(18);
            IRow Row;
            ICell Cell;
            Row = sheet.CreateRow(5);

            for (int i = 0; i < 10; i++)
            {
                Cell = Row.CreateCell(i);
                if (i == 0)
                    Cell.SetCellValue("Comparative Performance of all schemes");

                Cell.CellStyle = HeaderStyle;
            }
            //NPOIWrite.CellMerged(sheet, 5, 5, 0, 9);
            sheet.GetRow(5).HeightInPoints = 30;
            Row = sheet.CreateRow(6);
            for (int i = 0; i < 10; i++)
            {
                Cell = Row.CreateCell(i);
                if (i == 0)
                    Cell.SetCellValue(celltxt);

                Cell.CellStyle = HeaderStyle;
            }
            //NPOIWrite.CellMerged(sheet, 6, 6, 0, 9);
            sheet.GetRow(6).HeightInPoints = 30;

            XSSFCellStyle style = (XSSFCellStyle)workbook.CreateCellStyle();
            XSSFColor colorToFill = new XSSFColor(new byte[] { 68, 114, 196 });//{ 51, 204, 204 }//Color.Blue);
            style.SetFillForegroundColor(colorToFill);
            IFont font = workbook.CreateFont();
            font.Color = IndexedColors.White.Index;
            font.Boldweight = (short)FontBoldWeight.Bold;
            style.SetFont(font);
            style.FillPattern = FillPattern.SolidForeground;
            style.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            style.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            style.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            style.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;

            //int incr = 6;
            //bool isNumeric = false;
            var rowcount = 7;
            Row = sheet.CreateRow(rowcount++);
            sheet.GetRow(7).HeightInPoints = 30;
            var cellincr = 0;
            for (int i = 0; i < listMainTableHeader.Count(); i++)
            {
                if (i > 0)
                {
                    style.Alignment = HorizontalAlignment.Center;
                    style.VerticalAlignment = VerticalAlignment.Center;
                }
                else
                {
                    style.Alignment = HorizontalAlignment.Left;
                    style.VerticalAlignment = VerticalAlignment.Center;
                }
                int colspan = listMainTableHeader[i].Colspan;
                if (colspan > 1)
                {
                    for (int k = 0; k < colspan; k++)
                    {
                        Cell = Row.CreateCell(cellincr + k);
                        if (k == 0)
                            Cell.SetCellValue(listMainTableHeader[i].ColumnName);
                        Cell.CellStyle = style;
                    }
                    NPOIWrite.CellMerged(sheet, rowcount - 1, rowcount - 1, cellincr, cellincr + colspan - 1);
                    cellincr = cellincr + colspan;
                }
                else
                {
                    Cell = Row.CreateCell(cellincr);
                    Cell.SetCellValue(listMainTableHeader[i].ColumnName);
                    Cell.CellStyle = style;
                    cellincr = cellincr + colspan;
                }
            }
            Row = sheet.CreateRow(rowcount++);
            Cell = Row.CreateCell(0);
            for (int i = 0; i < listTableheader.Count(); i++)
            {
                Cell = Row.CreateCell(i);
                Cell.CellStyle = style;
                if (i == 0 || i == listTableheader.Count() - 2 || i == listTableheader.Count() - 1)//instead of (i == 0 || i == listTableheader.Count() - 1)
                    continue;
                Cell.SetCellValue(listTableheader[i].ColumnName.Replace("Rs.", "₹"));
            }
            var incr = 0;
            XSSFCellStyle TriDisclaimerStyle = (XSSFCellStyle)workbook.CreateCellStyle();

            var FundManagerNameListCount = 0; //run through the index of FundManagerNameList
            foreach (var item in listData)
            {
                var copy_k = 0;
                var IsEven = incr % 2 == 0;
                Row = sheet.CreateRow(rowcount++);
                //if (item.LstKeyValuePair == null)//done to add extra row after each scheme. For a blank row the LstKeyValuePair is null.
                //    continue;
                var DataCount = item.LstKeyValuePair.Count(); // counts number of data in each row
                for (int k = 0; k < item.LstKeyValuePair.Count(); k++)
                {
                    copy_k = k;// copy value of k to store the last cell index where value is added.
                    Cell = Row.CreateCell(k);
                    Cell.CellStyle = IsEven ? AllCellStyleEven : AllCellStyleOdd;
                    if (k == 0)
                    {
                        Cell.SetCellValue(item.LstKeyValuePair[k].Value);
                        Cell.CellStyle = IsEven ? AllCellStyleFstColmEven : AllCellStyleFstColmOdd;
                    }

                    else if (k > 0 && TRIIndexDisclaimer != null && k <= TRIIndexDisclaimer.Colspan)
                    {
                        Cell.SetCellValue(item.LstKeyValuePair[k].Value);
                        Cell.CellStyle = IsEven ? AllCellStyleFstColmEven : AllCellStyleFstColmOdd;
                        TriDisclaimerStyle.CloneStyleFrom(Cell.CellStyle);
                        TriDisclaimerStyle.Alignment = HorizontalAlignment.Left;
                        TriDisclaimerStyle.VerticalAlignment = VerticalAlignment.Top;
                        TriDisclaimerStyle.WrapText = true;
                        Cell.CellStyle = TriDisclaimerStyle;
                    }
                    //else if (k == 9 + TriIndexDisclaimerColCount)
                    //{
                    //    Cell.SetCellValue(item.LstKeyValuePair[k].Value);
                    //}
                    //else if (k == 2 + TriIndexDisclaimerColCount || k == 4 + TriIndexDisclaimerColCount || k == 6 + TriIndexDisclaimerColCount || k == 8 + TriIndexDisclaimerColCount)
                    //{
                    //    double result;
                    //    var output = double.TryParse(item.LstKeyValuePair[k].Value, out result);
                    //    if (!output)
                    //        Cell.SetCellValue(item.LstKeyValuePair[k].Value);
                    //    else
                    //    {
                    //        Cell.SetCellValue(result);
                    //        Cell.CellStyle = IsEven ? intAllCellStyleEvenDecFrmt : intAllCellStyleOddDec;
                    //    }
                    //}
                    //else if (k == 1 + TriIndexDisclaimerColCount || k == 3 + TriIndexDisclaimerColCount || k == 5 + TriIndexDisclaimerColCount || k == 7 + TriIndexDisclaimerColCount)
                    //{
                    //    double result;
                    //    var output = double.TryParse(item.LstKeyValuePair[k].Value, out result);
                    //    if (!output)
                    //        Cell.SetCellValue(item.LstKeyValuePair[k].Value);
                    //    else
                    //    {
                    //        Cell.SetCellValue(Convert.ToDouble(item.LstKeyValuePair[k].Value));
                    //        Cell.CellStyle = IsEven ? retAllCellStyleEvenDecFrmt : retAllCellStyleOddDec;
                    //    }
                    //}

                    //Edited by Sudiptha and Samrat
                    else if (k == (TriIndexDisclaimerColCount != 1 ? (DataCount - 1) + TriIndexDisclaimerColCount : (DataCount - 2) + TriIndexDisclaimerColCount)) // k is at the last index
                    {
                        Cell.SetCellValue(item.LstKeyValuePair[k].Value);
                        //edited by Samrat for fund manager name
                    }
                    else if (k == (TriIndexDisclaimerColCount == 1 ? (k - 1) + TriIndexDisclaimerColCount : k + TriIndexDisclaimerColCount))
                    {
                        double result;
                        var output = double.TryParse(item.LstKeyValuePair[k].Value, out result);
                        if (!output)
                            Cell.SetCellValue(item.LstKeyValuePair[k].Value);
                        else
                        {
                            if (TriIndexDisclaimerColCount != 1)
                            {
                                if (k % 2 == 0)
                                {
                                    Cell.SetCellValue(Convert.ToDouble(item.LstKeyValuePair[k].Value));
                                    Cell.CellStyle = IsEven ? retAllCellStyleEvenDecFrmt : retAllCellStyleOddDec;
                                }
                                else
                                {
                                    Cell.SetCellValue(result);
                                    Cell.CellStyle = IsEven ? intAllCellStyleEvenDecFrmt : intAllCellStyleOddDec;
                                }
                            }
                            else
                            {
                                if (k % 2 == 0)
                                {
                                    Cell.SetCellValue(Convert.ToDouble(item.LstKeyValuePair[k].Value));
                                    Cell.CellStyle = IsEven ? intAllCellStyleEvenDecFrmt : intAllCellStyleOddDec;
                                }
                                else
                                {
                                    Cell.SetCellValue(result);
                                    Cell.CellStyle = IsEven ? retAllCellStyleEvenDecFrmt : retAllCellStyleOddDec;
                                }
                            }
                        }

                    }
                    //Edited Code ends here
                }
                #region Add Fund Manager Name
                //Adding Fund Manager Name starts
                if (FundManagerNameList != null) //That means atleast one scheme is there with a fund manager.
                {
                    Cell = Row.CreateCell(copy_k + 1); //Adding the Fund Manager Name in the Next Cell Index
                    string name = "";//Add consequetive name of Fund Manager Names for a particular scheme.
                    if (FundManagerNameList[FundManagerNameListCount].Count() > 0) //if Count() == 0 that means that row is not a new Row with Scheme Name.
                    {
                        for (int i = 0; i < FundManagerNameList[FundManagerNameListCount].Count(); i++)
                        {
                            if (i == FundManagerNameList[FundManagerNameListCount].Count() - 1) //Last Name among multiple manager name for a particular scheme. Implies that if the name is not the last name then add ',' after each name.
                                name = name + FundManagerNameList[FundManagerNameListCount][i].ToString();
                            else
                                name = name + FundManagerNameList[FundManagerNameListCount][i].ToString() + ",";
                        }
                        Cell.SetCellValue(name); //add cell value.
                        Cell.CellStyle = IsEven ? AllCellStyleEven : AllCellStyleOdd; //select style
                    }
                    else
                    {
                        Cell.SetCellValue(""); //add blank cell value
                        Cell.CellStyle = IsEven ? AllCellStyleEven : AllCellStyleOdd; //select style.
                    }
                }
                FundManagerNameListCount++; //Increase the index
                #endregion
                incr++;
            }
            incr = 0;
            if (listDataByFundManager != null && listDataByFundManager.Count() > 0)
            {
                Row = sheet.CreateRow(rowcount++);
                Cell = Row.CreateCell(0);
                Cell.SetCellValue("Scheme(s) Managed By Fund Manager " + FundManager);
                Cell.CellStyle = HeaderStyle;
                Cell = Row.CreateCell(1);
                Cell = Row.CreateCell(2);
                Cell = Row.CreateCell(3);
                NPOIWrite.CellMerged(sheet, rowcount - 1, rowcount - 1, 0, 3);
                NPOIWrite.CellMerged(sheet, rowcount, rowcount + 1, 0, 0);
                NPOIWrite.CellMerged(sheet, rowcount, rowcount + 1, listTableheader.Count() - 2, listTableheader.Count() - 2);
                Row = sheet.CreateRow(rowcount++);
                Row.HeightInPoints = 30;
                cellincr = 0;

                //Exceptional Case Where Multiple Schemes are selected out of which atleast one scheme has a TRI Disclaimer and the fund Manger detail is select who doesnt have an TRI Disclaimer
                var countSinceInception = listDataByFundManager[0].LstKeyValuePair[1].Key == "Since Inception  " ? false : true; //fund manager doesnt have a TRI Disclaimer
                if (countSinceInception == true)
                {
                    //if (TRIIndexDisclaimer != null)
                    //    TRIIndexDisclaimer = null;
                    //if(listMainTableHeader[1].ColumnName == "TRI Index Disclaimer" && listTableheader[1].ColumnName== "Since Inception  ")
                    //{
                    //    listMainTableHeader.RemoveAt(1);
                    //    listTableheader.RemoveAt(1);
                    //}
                    if (TRIIndexDisclaimer != null && listMainTableHeader[1].ColumnName == "TRI Index Disclaimer" && listTableheader[1].ColumnName == "Since Inception  ")// Checking if there exists the Exceptional Case. If the case exists then shift the Fund manager details by one column.
                    {
                        for (int i = 0; i < listDataByFundManager.Count(); i++)
                        {
                            listDataByFundManager[i].LstKeyValuePair.Insert(1, new DynamicKeyValuePair()//adding a value to shift the details of the fund manager.
                            {
                                Key = "Since Inception  ",
                                Value = "-"
                            });
                        }
                    }
                }
                //Exceptional Case ends.

                for (int i = 0; i < listMainTableHeader.Count() - 1; i++) //instead of (int i = 0; i < listMainTableHeader.Count(); i++) to not show the Fund Manager Column Name
                {
                    if (i > 0)
                    {
                        style.Alignment = HorizontalAlignment.Center;
                        style.VerticalAlignment = VerticalAlignment.Center;
                    }
                    else
                    {
                        style.Alignment = HorizontalAlignment.Left;
                        style.VerticalAlignment = VerticalAlignment.Center;
                    }
                    int colspan = listMainTableHeader[i].Colspan;
                    if (colspan > 1)
                    {
                        for (int k = 0; k < colspan; k++)
                        {
                            Cell = Row.CreateCell(cellincr + k);
                            if (k == 0)
                                Cell.SetCellValue(listMainTableHeader[i].ColumnName);
                            Cell.CellStyle = style;
                        }
                        NPOIWrite.CellMerged(sheet, rowcount - 1, rowcount - 1, cellincr, cellincr + colspan - 1);
                        cellincr = cellincr + colspan;
                    }
                    else
                    {
                        Cell = Row.CreateCell(cellincr);
                        Cell.SetCellValue(listMainTableHeader[i].ColumnName);
                        Cell.CellStyle = style;
                        cellincr = cellincr + colspan;
                    }
                }
                Row = sheet.CreateRow(rowcount++);
                Cell = Row.CreateCell(0);
                for (int i = 0; i < listTableheader.Count() - 1; i++) //instead of (int i = 0; i < listMainTableHeader.Count(); i++) to not show the Fund Manager Column Name
                {
                    Cell = Row.CreateCell(i);
                    Cell.CellStyle = style;
                    if (i == 0 || i == listTableheader.Count() - 2) //instead of (i == 0 || i == listTableheader.Count() - 1)
                        continue;
                    Cell.SetCellValue(listTableheader[i].ColumnName.Replace("Rs.", "₹"));
                }

                foreach (var item in listDataByFundManager)
                {
                    var IsEven = incr % 2 == 0;
                    Row = sheet.CreateRow(rowcount++);
                    var DataCount = item.LstKeyValuePair.Count(); // counts number of data in each row
                    for (int k = 0; k < item.LstKeyValuePair.Count(); k++)
                    {
                        Cell = Row.CreateCell(k);
                        Cell.CellStyle = IsEven ? AllCellStyleEven : AllCellStyleOdd;
                        if (k == 0)
                        {
                            Cell.SetCellValue(item.LstKeyValuePair[k].Value);
                            Cell.CellStyle = IsEven ? AllCellStyleFstColmEven : AllCellStyleFstColmOdd;
                        }
                        else if (k > 0 && TRIIndexDisclaimer != null && k <= TRIIndexDisclaimer.Colspan)
                        {
                            Cell.SetCellValue(item.LstKeyValuePair[k].Value);
                            Cell.CellStyle = IsEven ? AllCellStyleFstColmEven : AllCellStyleFstColmOdd;
                            TriDisclaimerStyle.CloneStyleFrom(Cell.CellStyle);
                            TriDisclaimerStyle.Alignment = HorizontalAlignment.Left;
                            TriDisclaimerStyle.VerticalAlignment = VerticalAlignment.Top;
                            TriDisclaimerStyle.WrapText = true;
                            Cell.CellStyle = TriDisclaimerStyle;
                        }
                        //else if (k == 9 + TriIndexDisclaimerColCount)
                        //{
                        //    Cell.SetCellValue(item.LstKeyValuePair[k].Value);
                        //}
                        //else if (k == 2 + TriIndexDisclaimerColCount || k == 4 + TriIndexDisclaimerColCount || k == 6 + TriIndexDisclaimerColCount || k == 8 + TriIndexDisclaimerColCount)
                        //{
                        //    double result;
                        //    var output = double.TryParse(item.LstKeyValuePair[k].Value, out result);
                        //    if (!output)
                        //        Cell.SetCellValue(item.LstKeyValuePair[k].Value);
                        //    else
                        //    {
                        //        Cell.SetCellValue(result);
                        //        Cell.CellStyle = IsEven ? intAllCellStyleEvenDecFrmt : intAllCellStyleOddDec;
                        //    }
                        //}
                        //else if (k == 1 + TriIndexDisclaimerColCount || k == 3 + TriIndexDisclaimerColCount || k == 5 + TriIndexDisclaimerColCount || k == 7 + TriIndexDisclaimerColCount)
                        //{
                        //    double result;
                        //    var output = double.TryParse(item.LstKeyValuePair[k].Value, out result);
                        //    if (!output)
                        //        Cell.SetCellValue(item.LstKeyValuePair[k].Value);
                        //    else
                        //    {
                        //        Cell.SetCellValue(Convert.ToDouble(item.LstKeyValuePair[k].Value));
                        //        Cell.CellStyle = IsEven ? retAllCellStyleEvenDecFrmt : retAllCellStyleOddDec;
                        //    }
                        //}

                        //Edited by Sudiptha and Samrat
                        else if (k == (TriIndexDisclaimerColCount != 1 ? (DataCount - 1) + TriIndexDisclaimerColCount : (DataCount - 2) + TriIndexDisclaimerColCount)) // k is at the last index
                        {
                            Cell.SetCellValue(item.LstKeyValuePair[k].Value);
                        }
                        else if (k == (TriIndexDisclaimerColCount == 1 ? (k - 1) + TriIndexDisclaimerColCount : k + TriIndexDisclaimerColCount))
                        {
                            double result;
                            var output = double.TryParse(item.LstKeyValuePair[k].Value, out result);
                            if (!output)
                                Cell.SetCellValue(item.LstKeyValuePair[k].Value);
                            else
                            {
                                if (TriIndexDisclaimerColCount != 1)
                                {
                                    if (k % 2 == 0)
                                    {
                                        Cell.SetCellValue(Convert.ToDouble(item.LstKeyValuePair[k].Value));
                                        Cell.CellStyle = IsEven ? retAllCellStyleEvenDecFrmt : retAllCellStyleOddDec;
                                    }
                                    else
                                    {
                                        Cell.SetCellValue(result);
                                        Cell.CellStyle = IsEven ? intAllCellStyleEvenDecFrmt : intAllCellStyleOddDec;
                                    }
                                }
                                else
                                {
                                    if (k % 2 == 0)
                                    {
                                        Cell.SetCellValue(Convert.ToDouble(item.LstKeyValuePair[k].Value));
                                        Cell.CellStyle = IsEven ? intAllCellStyleEvenDecFrmt : intAllCellStyleOddDec;
                                    }
                                    else
                                    {
                                        Cell.SetCellValue(result);
                                        Cell.CellStyle = IsEven ? retAllCellStyleEvenDecFrmt : retAllCellStyleOddDec;
                                    }
                                }
                            }

                        }
                        //Edited Code ends here
                    }
                    incr++;
                }
            }
            rowcount++;
            Row = sheet.CreateRow(rowcount++); //added
            var TempCell = Row.CreateCell(0); //added
            TempCell.CellStyle = HeaderStyle; //added
            TempCell.SetCellValue("Return Type"); //added
            Row = sheet.CreateRow(rowcount++);
            TempCell = Row.CreateCell(0);
            TempCell.SetCellValue("* 7 Days,15 Days,30 Days,1 Month,6 Months= Simple Annualized.");
            TempCell.CellStyle = HeaderStyle;
            Row = sheet.CreateRow(rowcount++);
            TempCell = Row.CreateCell(0);
            TempCell.CellStyle = HeaderStyle; //added
            TempCell.SetCellValue("* 1, 3 and 5 Years = CAGR");
            //TempCell.CellStyle = HeaderStyle;
            //Row = sheet.CreateRow(rowcount++);
            //TempCell = Row.CreateCell(0);
            //TempCell.CellStyle = HeaderStyle;
            //TempCell.SetCellValue("Since Inception (for < 1 Year). Equity,Hybrid,Solution Oriented and");
            //Row = sheet.CreateRow(rowcount++);
            //TempCell = Row.CreateCell(0);
            //TempCell.CellStyle = HeaderStyle;
            //TempCell.SetCellValue("Other Schemes= Absolute. Debt Schemes= Simple Annualized");
            Row = sheet.CreateRow(rowcount++);
            TempCell = Row.CreateCell(0);
            TempCell.CellStyle = HeaderStyle;
            TempCell.SetCellValue("* Since Inception (for >= 1 Year)= CAGR");
            Row = sheet.CreateRow(rowcount++);
            TempCell = Row.CreateCell(0);
            TempCell.CellStyle = HeaderStyle;
            TempCell.SetCellValue("NAV Type= Reinvest, Investor Type= Individual");
            Row = sheet.CreateRow(rowcount++);
            TempCell = Row.CreateCell(0);
            TempCell.CellStyle = HeaderStyle;
            TempCell.SetCellValue("NAV Picking Algorithm for Both Dates= -1,-2,-3,-4,-5,-6,-7");

            for (int i = 0; i < listTableheader.Count; i++)
                sheet.AutoSizeColumn(i);
            if (sheet.GetColumnWidth(0) < 11072)
                sheet.SetColumnWidth(0, 11072);
            #region Logo
            try
            {
                if (!string.IsNullOrEmpty(LogoPath))
                {
                    XSSFDrawing patriarch = (XSSFDrawing)sheet.CreateDrawingPatriarch();
                    XSSFClientAnchor anchor;
                    anchor = new XSSFClientAnchor(0, 0, 0, 255, 0, 0, 0, 3);
                    anchor.AnchorType = AnchorType.DontMoveAndResize;
                    XSSFPicture picture = (XSSFPicture)patriarch.CreatePicture(anchor, LoadImage(LogoPath, workbook, PictureType.PNG));
                    double x1 = .25;
                    double y1 = .75;
                    picture.Resize(x1, y1);
                    picture.LineStyle = LineStyle.None;
                }
            }
            catch (Exception ex)
            {
            }

            #endregion
            #region Source, Date As On and Report Generated On
            rowcount = rowcount + 3;
            ICRArow = sheet.CreateRow(rowcount++);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrSource);

            ICRArow = sheet.CreateRow(rowcount++);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrDateAsOn);

            ICRArow = sheet.CreateRow(rowcount++);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrReportGeneratedOn);
            #endregion
            #region Sheet Two Logo
            try
            {
                if (!string.IsNullOrEmpty(LogoPath))
                {
                    XSSFDrawing patriarch = (XSSFDrawing)sheetTwo.CreateDrawingPatriarch();
                    XSSFClientAnchor anchor;
                    anchor = new XSSFClientAnchor(0, 0, 0, 255, 0, 0, 0, 3);
                    anchor.AnchorType = AnchorType.DontMoveAndResize;
                    XSSFPicture picture = (XSSFPicture)patriarch.CreatePicture(anchor, LoadImage(LogoPath, workbook, PictureType.PNG));
                    double x1 = 1.10;
                    double y1 = 1.10;
                    picture.Resize(x1, y1);
                    picture.LineStyle = LineStyle.None;
                }
            }
            catch (Exception ex)
            {
            }
            #endregion

            #region Disclaimer Sheet
            Row = sheetTwo.CreateRow(1);
            var cellSheetTwo = Row.CreateCell(7);
            //cellSheetTwo.SetCellValue(StrHeader1);
            cellSheetTwo.SetCellValue("Disclaimer");
            cellSheetTwo.CellStyle = HeaderStyle;

            Row = sheetTwo.CreateRow(4);
            for (int i = 0; i < 17; i++)
            {
                Cell = Row.CreateCell(i);

                XSSFCellStyle declationstyle = (XSSFCellStyle)workbook.CreateCellStyle();

                declationstyle.Alignment = HorizontalAlignment.Center;
                declationstyle.VerticalAlignment = VerticalAlignment.Top;
                declationstyle.WrapText = true;
                IFont declarationfnt = (XSSFFont)workbook.CreateFont();
                //declarationfnt.Boldweight = (short)FontBoldWeight.Bold;
                declarationfnt.FontName = "Calibri";
                declarationfnt.FontHeightInPoints = (short)11;
                declationstyle.SetFont(declarationfnt);
                Cell.SetCellValue(!string.IsNullOrEmpty(Footer) ? Footer : "All information contained herein is obtained by ICRA Analytics Limited from sources believed by it to be accurate and reliable. Because of the possibility of human or mechanical error as well as other factors, however, all information contained herein is provided 'AS IS' without warranty of any kind. ICRA Analytics adopts all necessary measures so that the information it uses is of sufficient quality and from sources ICRA Analytics considers to be reliable including, when appropriate, independent third-party sources. However, ICRA Analytics is not an auditor and cannot in every instance independently verify or validate information received in preparing this document." +
                    "All information contained herein must be construed solely as statements of opinion, and  ICRA Analytics Limited or its affiliates or group companies and its respective and any of its officers, directors, personnel and employees, disclaim liability to any loss, damage of any nature, including but not limited to direct, indirect, punitive, special, exemplary, consequential, as also any loss of profit in any way arising from the use of this document or its contents in any manner or for any contingency within or beyond the control of, ICRA Analytics or any of its directors, officers, employees, agents, representatives, licensors or suppliers, arising from or in connection with the information contained herein or the use of or inability to use any such information.Opinions expressed in the document are not the opinions of our holding company, ICRA Limited(ICRA), and should not be construed as any indication of credit rating or grading of ICRA for any instruments that have been issued or are to be issued by any entity.The recipient alone shall be fully responsible and / or are liable for any decision taken on the basis of this document and / or the information contained herein.");
                Cell.CellStyle = declationstyle;

            }
            NPOIWrite.CellMerged(sheetTwo, 4, 4, 0, 17);
            sheetTwo.GetRow(4).HeightInPoints = 200;
            #endregion

            #region Disclaimer Sheet HyperLink
            XSSFCellStyle HyperLinkStyle = (XSSFCellStyle)workbook.CreateCellStyle();
            IFont HyperLinkFont = workbook.CreateFont();
            HyperLinkFont.Color = IndexedColors.Orange.Index;
            HyperLinkFont.Underline = FontUnderlineType.Single;
            HyperLinkStyle.SetFont(HyperLinkFont);

            Row = sheetTwo.CreateRow(5);
            Cell = Row.CreateCell(0);
            Cell.SetCellValue("Click here for third-party disclaimers");
            XSSFCreationHelper createHelper = (XSSFCreationHelper)workbook.GetCreationHelper();
            XSSFHyperlink link = (XSSFHyperlink)createHelper.CreateHyperlink(HyperlinkType.Url);
            link.Address = "https://www.icraanalytics.com/home/thirdpartydisclaimers";
            Cell.Hyperlink = link;
            Cell.CellStyle = HyperLinkStyle;
            #endregion

            sheet.ActiveCell = new CellAddress(0, 1);
            var stream = new MemoryStream();
            workbook.Write(stream);

            return workbook;
        }


        //// This is only For Template Download ////

        public static NPOI.XSSF.UserModel.XSSFWorkbook ExportToExcelWorkBookForTemplateOnly(UserBasicSettings ubs, List<TableHeaderEntity> listTableHeader, List<ExportEntity> listData)
        {

            #region Variable
            string Header = ubs.Reporting_Format_Header;
            string Footer = ubs.Reporting_Format_Footer;
            string BlankData = ubs.BlankData.ToUpper() == "BLANK" ? "" : ubs.BlankData;

            //string StrHeader1 = "ICRA Analytics Limited";
            //string StrHeader2 = "11th Floor, B Wing, Kanakia Wall Street, Chakala, Andheri East, Mumbai, Maharashtra 400093, IN";
            //string StrHeader3 = Header; //"Mumbai, Maharashtra 400093, IN";
            //string StrReportName = ReportName;
            //string StrSource = "Source: MFI 360";
            //StrDateAsOn = "Data as on " + StrDateAsOn;
            //string StrReportGeneratedOn = "Report Generated on " + DateTime.Now.ToString("dd-MMM-yyyy HH:mm:ss");

            #region number and decimal variable for AUM
            var aumPaddding = new string('0', (int)ubs.AUMDecimalFormat);
            var aumDecimalFormat = "0." + aumPaddding;
            string aumNUMBERFORMAT = ubs.NumberFormat;
            var aumNumberFormat = aumNUMBERFORMAT.Replace("0", "#");
            string aumNumberDecimalFormat = aumNumberFormat + "0." + new String('0', (int)ubs.AUMDecimalFormat);
            #endregion

            #region number and decimal variable for return
            var retPaddding = new string('0', (int)ubs.ReturnDecimalFormat);
            var retDecimalFormat = "0." + retPaddding;
            string retNUMBERFORMAT = ubs.NumberFormat;
            var retNumberFormat = retNUMBERFORMAT.Replace("0", "#");
            string retNumberDecimalFormat = retNumberFormat + "0." + new String('0', (int)ubs.ReturnDecimalFormat);
            #endregion

            #region number and decimal variable for NAV
            var navPaddding = new string('0', (int)ubs.NavDecimalFormat);
            var navDecimalFormat = "0." + navPaddding;
            string navNUMBERFORMAT = ubs.NumberFormat;
            var navNumberFormat = navNUMBERFORMAT.Replace("0", "#");
            string navNumberDecimalFormat = navNumberFormat + "0." + new String('0', (int)ubs.NavDecimalFormat);
            #endregion
            #region DateTime Format
            var DateTimeFormat = ubs.DateFormat;
            #endregion

            #region number and decimal variable for Other
            var othPaddding = new string('0', (int)ubs.OtherDecimal);
            var othDecimalFormat = "0." + othPaddding;
            string othNUMBERFORMAT = ubs.NumberFormat;
            var othNumberFormat = othNUMBERFORMAT.Replace("0", "#");
            string othNumberDecimalFormat = othNumberFormat + "0." + new String('0', (int)ubs.OtherDecimal);
            #endregion

            #region number and decimal variable for Ratio
            var ratioPaddding = new string('0', (int)ubs.RatioDecimalFormat);
            var ratioDecimalFormat = "0." + ratioPaddding;
            string ratioNUMBERFORMAT = ubs.NumberFormat;
            var ratioNumberFormat = ratioNUMBERFORMAT.Replace("0", "#");
            string ratioNumberDecimalFormat = ratioNumberFormat + "0." + new String('0', (int)ubs.RatioDecimalFormat);
            #endregion
            #region int Format with out Decimal
            var intNumberWithoutDecimalFormat = ubs.NumberFormat.Replace("0", "#");
            #endregion
            #endregion

            NPOI.XSSF.UserModel.XSSFWorkbook workbook = new NPOI.XSSF.UserModel.XSSFWorkbook();

            ISheet sheet = workbook.CreateSheet("Output");
            //ISheet sheetTwo = workbook.CreateSheet("Disclaimer");

            #region Excel Sheet Gridlines Delete
            sheet.DisplayGridlines = false;
            //sheetTwo.DisplayGridlines = false;
            #endregion

            #region Header Freeze
            //sheet.CreateFreezePane(1, 6);
            #endregion

            #region Set Font For Header1,Header2 and Header3
            XSSFCellStyle HeaderStyle = (XSSFCellStyle)workbook.CreateCellStyle();
            IFont Headerfont = workbook.CreateFont();
            Headerfont.Boldweight = (short)FontBoldWeight.Bold;
            HeaderStyle.SetFont(Headerfont);
            #endregion

            #region Set Cell Value For Header1, Header2 and Header3
            var ICRArow = sheet.CreateRow(0);
            ICRArow.CreateCell(0);
            //NPOIWrite.CellMerged(sheet, 0, 0, 1, 9);
            var ICRACell = ICRArow.CreateCell(1);
            //ICRACell.SetCellValue(StrHeader1);
            //ICRACell.CellStyle = HeaderStyle;
            //ICRArow = sheet.CreateRow(1);
            //ICRArow.CreateCell(0);
            //NPOIWrite.CellMerged(sheet, 1, 1, 1, 9);
            //ICRACell = ICRArow.CreateCell(1);
            //ICRACell.SetCellValue(StrHeader2);
            //ICRACell.CellStyle = HeaderStyle;
            //ICRArow = sheet.CreateRow(2);
            //ICRArow.CreateCell(0);
            //NPOIWrite.CellMerged(sheet, 2, 2, 1, 9);
            //ICRACell = ICRArow.CreateCell(1);
            //ICRACell.SetCellValue(StrHeader3);
            //ICRACell.CellStyle = HeaderStyle;
            //ICRACell.CellStyle.Alignment = HorizontalAlignment.Center;
            //ICRArow = sheet.CreateRow(3);
            //ICRArow.CreateCell(0);
            //ICRACell = ICRArow.CreateCell(1);
            //ICRACell.CellStyle.Alignment = HorizontalAlignment.Center;
            //NPOIWrite.AutoFitColumn(sheet, 1);
            //ICRACell.CellStyle = HeaderStyle;
            #endregion

            #region Report Name
            //ICRArow = sheet.CreateRow(4);
            //ICRArow.CreateCell(0);
            //ICRACell = ICRArow.CreateCell(0);
            //ICRACell.SetCellValue(StrReportName);
            //HeaderStyle.Alignment = HorizontalAlignment.Left;
            //ICRACell.CellStyle = HeaderStyle;
            #endregion

            #region Header creation in the Excel
            var headerRow = sheet.CreateRow(0);
            //sheet.GetRow(5).HeightInPoints = 30;
            var listHeaderFinal = listTableHeader.OrderBy(x => x.Position).ToList();
            for (int i = 0; i < listHeaderFinal.Count; i++)
            {
                var cell = headerRow.CreateCell(i);
                cell.SetCellValue(listHeaderFinal[i].ColumnName);
                NPOIWrite.AutoFitColumn(sheet, i);

                #region Commented by Subrata on 21 Feb 2018
                //ICellStyle CellStyle = workbook.CreateCellStyle();
                //CellStyle = workbook.CreateCellStyle();
                //CellStyle.FillBackgroundColor = IndexedColors.Blue.Index;
                #endregion

                #region Added by Subrata on 21 Feb 2018
                XSSFCellStyle style = (XSSFCellStyle)workbook.CreateCellStyle();
                XSSFColor colorToFill = new XSSFColor(new byte[] { 68, 114, 196 });//{ 51, 204, 204 }//Color.Blue);
                style.SetFillForegroundColor(colorToFill);
                IFont font = workbook.CreateFont();
                font.Color = IndexedColors.White.Index;
                font.Boldweight = (short)FontBoldWeight.Bold;
                style.SetFont(font);
                style.FillPattern = FillPattern.SolidForeground;
                style.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                style.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                style.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                style.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                if (i > 0)
                {
                    style.Alignment = HorizontalAlignment.Center;
                    style.VerticalAlignment = VerticalAlignment.Center;
                }
                else
                {
                    style.Alignment = HorizontalAlignment.Left;
                    style.VerticalAlignment = VerticalAlignment.Center;
                }
                #endregion

                cell.CellStyle = style;

            }
            #endregion

            #region Cell Style For Even Row

            #region With DecimalFormat AUM
            XSSFCellStyle aumAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor aumcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            aumAllCellStyleEvenDecFrmt.SetFillForegroundColor(aumcolorToFillEvenWtoutDec);
            aumAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat aumformatEven = workbook.CreateDataFormat();
            aumAllCellStyleEvenDecFrmt.DataFormat = aumformatEven.GetFormat(aumDecimalFormat);
            aumAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            /// Number Format ////
            XSSFCellStyle aumAllCellStyleEvenDecFrmtWNum = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleEvenDecFrmtWNum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmtWNum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmtWNum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmtWNum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor aumcolorToFillEvenWtoutDecWNum = new XSSFColor(new byte[] { 176, 196, 222 });
            aumAllCellStyleEvenDecFrmtWNum.SetFillForegroundColor(aumcolorToFillEvenWtoutDecWNum);
            aumAllCellStyleEvenDecFrmtWNum.FillPattern = FillPattern.SolidForeground;
            IDataFormat aumformatEvenWNum = workbook.CreateDataFormat();
            aumAllCellStyleEvenDecFrmtWNum.DataFormat = aumformatEvenWNum.GetFormat(aumNumberDecimalFormat);
            aumAllCellStyleEvenDecFrmtWNum.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleEvenDecFrmtWNum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Return
            XSSFCellStyle retAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            retAllCellStyleEvenDecFrmt.SetFillForegroundColor(retcolorToFillEvenWtoutDec);
            retAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatEven = workbook.CreateDataFormat();
            retAllCellStyleEvenDecFrmt.DataFormat = retformatEven.GetFormat(retDecimalFormat);
            retAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            retAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;


            ////Number Format ////
            XSSFCellStyle retAllCellStyleEvenDecFrmtWnum = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleEvenDecFrmtWnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmtWnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmtWnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmtWnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillEvenWtoutDecWnum = new XSSFColor(new byte[] { 176, 196, 222 });
            retAllCellStyleEvenDecFrmtWnum.SetFillForegroundColor(retcolorToFillEvenWtoutDecWnum);
            retAllCellStyleEvenDecFrmtWnum.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatEvenWnum = workbook.CreateDataFormat();
            retAllCellStyleEvenDecFrmtWnum.DataFormat = retformatEvenWnum.GetFormat(retNumberDecimalFormat);
            retAllCellStyleEvenDecFrmtWnum.Alignment = HorizontalAlignment.Center;
            retAllCellStyleEvenDecFrmtWnum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Nav
            XSSFCellStyle navAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor navcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            navAllCellStyleEvenDecFrmt.SetFillForegroundColor(navcolorToFillEvenWtoutDec);
            navAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat navformatEven = workbook.CreateDataFormat();
            navAllCellStyleEvenDecFrmt.DataFormat = navformatEven.GetFormat(navDecimalFormat);
            navAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            navAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;


            /// Number Format ////
            XSSFCellStyle navAllCellStyleEvenDecFrmtWnnum = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleEvenDecFrmtWnnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmtWnnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmtWnnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmtWnnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor navcolorToFillEvenWtoutDecWnnum = new XSSFColor(new byte[] { 176, 196, 222 });
            navAllCellStyleEvenDecFrmtWnnum.SetFillForegroundColor(navcolorToFillEvenWtoutDecWnnum);
            navAllCellStyleEvenDecFrmtWnnum.FillPattern = FillPattern.SolidForeground;
            IDataFormat navformatEvenWnnum = workbook.CreateDataFormat();
            navAllCellStyleEvenDecFrmtWnnum.DataFormat = navformatEvenWnnum.GetFormat(navNumberDecimalFormat);
            navAllCellStyleEvenDecFrmtWnnum.Alignment = HorizontalAlignment.Center;
            navAllCellStyleEvenDecFrmtWnnum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Other
            XSSFCellStyle otherAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            otherAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othercolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            otherAllCellStyleEvenDecFrmt.SetFillForegroundColor(othercolorToFillEvenWtoutDec);
            otherAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat otherformatEven = workbook.CreateDataFormat();
            otherAllCellStyleEvenDecFrmt.DataFormat = otherformatEven.GetFormat(othDecimalFormat);
            otherAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            otherAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            /// Number Format ///
            XSSFCellStyle otherAllCellStyleEvenDecFrmtWnum = (XSSFCellStyle)workbook.CreateCellStyle();
            otherAllCellStyleEvenDecFrmtWnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmtWnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmtWnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmtWnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othercolorToFillEvenWtoutDecWnum = new XSSFColor(new byte[] { 176, 196, 222 });
            otherAllCellStyleEvenDecFrmtWnum.SetFillForegroundColor(othercolorToFillEvenWtoutDecWnum);
            otherAllCellStyleEvenDecFrmtWnum.FillPattern = FillPattern.SolidForeground;
            IDataFormat otherformatEvenWnum = workbook.CreateDataFormat();
            otherAllCellStyleEvenDecFrmtWnum.DataFormat = otherformatEvenWnum.GetFormat(othNumberDecimalFormat);
            otherAllCellStyleEvenDecFrmtWnum.Alignment = HorizontalAlignment.Center;
            otherAllCellStyleEvenDecFrmtWnum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DateTime format
            XSSFCellStyle DateTimeAllCellStyleEvenFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            DateTimeAllCellStyleEvenFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleEvenFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleEvenFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleEvenFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor DateTimecolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            DateTimeAllCellStyleEvenFrmt.SetFillForegroundColor(DateTimecolorToFillEvenWtoutDec);
            DateTimeAllCellStyleEvenFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat DateTimeformatEven = workbook.CreateDataFormat();
            DateTimeAllCellStyleEvenFrmt.DataFormat = DateTimeformatEven.GetFormat(DateTimeFormat);
            DateTimeAllCellStyleEvenFrmt.Alignment = HorizontalAlignment.Center;
            DateTimeAllCellStyleEvenFrmt.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle DateTimeAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            DateTimeAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor DateTimecolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            DateTimeAllCellStyleOddDec.SetFillForegroundColor(DateTimecolorToFillOddDec);
            DateTimeAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat DateTimeformatOddDec = workbook.CreateDataFormat();
            DateTimeAllCellStyleOddDec.DataFormat = DateTimeformatOddDec.GetFormat(DateTimeFormat);
            DateTimeAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            DateTimeAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            #endregion

            #region With DecimalFormat Ratio
            XSSFCellStyle ratAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor ratcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            ratAllCellStyleEvenDecFrmt.SetFillForegroundColor(ratcolorToFillEvenWtoutDec);
            ratAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat ratformatEven = workbook.CreateDataFormat();
            ratAllCellStyleEvenDecFrmt.DataFormat = ratformatEven.GetFormat(ratioDecimalFormat);
            ratAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle ratAllCellStyleEvenDecFrmtWth = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleEvenDecFrmtWth.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmtWth.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmtWth.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmtWth.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor ratcolorToFillEvenWtoutDecwth = new XSSFColor(new byte[] { 176, 196, 222 });
            ratAllCellStyleEvenDecFrmtWth.SetFillForegroundColor(ratcolorToFillEvenWtoutDecwth);
            ratAllCellStyleEvenDecFrmtWth.FillPattern = FillPattern.SolidForeground;
            IDataFormat ratformatEvenWth = workbook.CreateDataFormat();
            ratAllCellStyleEvenDecFrmtWth.DataFormat = ratformatEvenWth.GetFormat(ratioNumberDecimalFormat);
            ratAllCellStyleEvenDecFrmtWth.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleEvenDecFrmtWth.VerticalAlignment = VerticalAlignment.Center;
            #endregion


            #region No Format
            XSSFCellStyle AllCellStyleEven = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleEven.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillEven = new XSSFColor(new byte[] { 176, 196, 222 });
            AllCellStyleEven.SetFillForegroundColor(colorToFillEven);
            AllCellStyleEven.FillPattern = FillPattern.SolidForeground;
            AllCellStyleEven.Alignment = HorizontalAlignment.Center;
            AllCellStyleEven.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #endregion

            #region Cell Style For Odd Row

            #region With Decimal Format AUM
            XSSFCellStyle aumAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor AUMcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            aumAllCellStyleOddDec.SetFillForegroundColor(AUMcolorToFillOddDec);
            aumAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat AUMformatOddDec = workbook.CreateDataFormat();
            aumAllCellStyleOddDec.DataFormat = AUMformatOddDec.GetFormat(aumDecimalFormat);
            aumAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle aumAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor AUMcolorToFillOddDecWnf = new XSSFColor(new byte[] { 255, 255, 255 });
            aumAllCellStyleOddDecWnuf.SetFillForegroundColor(AUMcolorToFillOddDecWnf);
            aumAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat AUMformatOddDecWnuf = workbook.CreateDataFormat();
            aumAllCellStyleOddDecWnuf.DataFormat = AUMformatOddDecWnuf.GetFormat(aumNumberDecimalFormat);
            aumAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With Decimal Format Return
            XSSFCellStyle retAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor RETcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            retAllCellStyleOddDec.SetFillForegroundColor(RETcolorToFillOddDec);
            retAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat RETformatOddDec = workbook.CreateDataFormat();
            retAllCellStyleOddDec.DataFormat = RETformatOddDec.GetFormat(retDecimalFormat);
            retAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            retAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle retAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor RETcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            retAllCellStyleOddDecWnuf.SetFillForegroundColor(RETcolorToFillOddDecWnuf);
            retAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat RETformatOddDecWnuf = workbook.CreateDataFormat();
            retAllCellStyleOddDecWnuf.DataFormat = RETformatOddDecWnuf.GetFormat(retNumberDecimalFormat);
            retAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            retAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With Decimal Format Nav
            XSSFCellStyle navAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor naVcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            navAllCellStyleOddDec.SetFillForegroundColor(naVcolorToFillOddDec);
            navAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat naVformatOddDec = workbook.CreateDataFormat();
            navAllCellStyleOddDec.DataFormat = naVformatOddDec.GetFormat(navDecimalFormat);
            navAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            navAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            XSSFCellStyle navAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor naVcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            navAllCellStyleOddDecWnuf.SetFillForegroundColor(naVcolorToFillOddDecWnuf);
            navAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat naVformatOddDecWnuf = workbook.CreateDataFormat();
            navAllCellStyleOddDecWnuf.DataFormat = naVformatOddDecWnuf.GetFormat(navNumberDecimalFormat);
            navAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            navAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion


            #region With Decimal Format Other
            XSSFCellStyle othAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            othAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            othAllCellStyleOddDec.SetFillForegroundColor(othcolorToFillOddDec);
            othAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat othformatOddDec = workbook.CreateDataFormat();
            othAllCellStyleOddDec.DataFormat = othformatOddDec.GetFormat(othDecimalFormat);
            othAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            othAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            XSSFCellStyle othAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            othAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            othAllCellStyleOddDecWnuf.SetFillForegroundColor(othcolorToFillOddDecWnuf);
            othAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat othformatOddDecWnuf = workbook.CreateDataFormat();
            othAllCellStyleOddDecWnuf.DataFormat = othformatOddDecWnuf.GetFormat(othNumberDecimalFormat);
            othAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            othAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion


            #region With Decimal Format ratio
            XSSFCellStyle ratAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            ratAllCellStyleOddDec.SetFillForegroundColor(retcolorToFillOddDec);
            ratAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatOddDec = workbook.CreateDataFormat();
            ratAllCellStyleOddDec.DataFormat = retformatOddDec.GetFormat(ratioDecimalFormat);
            ratAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            XSSFCellStyle ratAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            ratAllCellStyleOddDecWnuf.SetFillForegroundColor(retcolorToFillOddDecWnuf);
            ratAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatOddDecWnuf = workbook.CreateDataFormat();
            ratAllCellStyleOddDecWnuf.DataFormat = retformatOddDecWnuf.GetFormat(ratioNumberDecimalFormat);
            ratAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region No Format
            XSSFCellStyle AllCellStyleOdd = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleOdd.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillOdd = new XSSFColor(new byte[] { 255, 255, 255 });
            AllCellStyleOdd.SetFillForegroundColor(colorToFillOdd);
            AllCellStyleOdd.FillPattern = FillPattern.SolidForeground;
            AllCellStyleOdd.Alignment = HorizontalAlignment.Center;
            AllCellStyleOdd.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #endregion

            #region Cell Style For First Column Even Row
            XSSFCellStyle AllCellStyleFstColmEven = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleFstColmEven.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillFstClmnEven = new XSSFColor(new byte[] { 176, 196, 222 });
            AllCellStyleFstColmEven.SetFillForegroundColor(colorToFillFstClmnEven);
            AllCellStyleFstColmEven.FillPattern = FillPattern.SolidForeground;
            AllCellStyleFstColmEven.Alignment = HorizontalAlignment.Left;
            AllCellStyleFstColmEven.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region Cell Style For First Column Odd Row
            XSSFCellStyle AllCellStyleFstColmOdd = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleFstColmOdd.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillFstClmnOdd = new XSSFColor(new byte[] { 255, 255, 255 });
            AllCellStyleFstColmOdd.SetFillForegroundColor(colorToFillFstClmnOdd);
            AllCellStyleFstColmOdd.FillPattern = FillPattern.SolidForeground;
            AllCellStyleFstColmOdd.Alignment = HorizontalAlignment.Left;
            AllCellStyleFstColmOdd.VerticalAlignment = VerticalAlignment.Center;
            #endregion
            #region Without Decimal Number Format Even Row
            XSSFCellStyle intAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            intAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            intAllCellStyleEvenDecFrmt.SetFillForegroundColor(intcolorToFillEvenWtoutDec);
            intAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat intformatEven = workbook.CreateDataFormat();
            intAllCellStyleEvenDecFrmt.DataFormat = intformatEven.GetFormat(intNumberWithoutDecimalFormat);
            intAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            intAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle intSimpleAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            intSimpleAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intSimplecolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            intSimpleAllCellStyleEvenDecFrmt.SetFillForegroundColor(intSimplecolorToFillEvenWtoutDec);
            intSimpleAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            intSimpleAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            intSimpleAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;
            #endregion
            #region Without Decimal Number Format Odd Row
            XSSFCellStyle intAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            intAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            intAllCellStyleOddDec.SetFillForegroundColor(intcolorToFillOddDec);
            intAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat intformatOddDec = workbook.CreateDataFormat();
            intAllCellStyleOddDec.DataFormat = intformatOddDec.GetFormat(intNumberWithoutDecimalFormat);
            intAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            intAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle intSimpleAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            intSimpleAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intSimplecolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            intSimpleAllCellStyleOddDec.SetFillForegroundColor(intSimplecolorToFillOddDec);
            intSimpleAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            intSimpleAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            intSimpleAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region Value added to the Excel

            #region Added by Subrata on 22 Feb 2018
            bool IsNumericKey = false;
            bool IsNumericValue = false;
            var AllListData = listData.SelectMany(x => x.LstKeyValuePair).ToArray();
            var AllDataKey = AllListData.Select(x => x.Key).Distinct().ToArray();
            int ValueRes;
            IsNumericKey = int.TryParse(AllDataKey[0], out ValueRes);
            #endregion

            int incr = 1;
            foreach (var item in listData)
            {
                var dataRow = sheet.CreateRow(incr);
                sheet.GetRow(incr).HeightInPoints = 20;
                {
                    var cellValues = (from i in item.LstKeyValuePair
                                      from j in listTableHeader
                                      where i.Key == j.ColumnName
                                      orderby j.Position
                                      select new
                                      {
                                          IsNum = j.IsNumberFormatReq,
                                          DecType = j.DecFormatType,
                                          IsMixedType = j.IsMixedValueType,
                                          IsDateTimeStringMixedType = j.IsDateTimeStringMixedType,
                                          IsDateTimeType = j.IsDateTimeType,
                                          Value = i.Value
                                      }).ToArray();

                    for (int k = 0; k < cellValues.Length; k++)
                    {
                        var datacell = dataRow.CreateCell(k);
                        if (cellValues[k].DecType != DecimalFormatType.NoDecimalReq)
                        {
                            double OutVal;
                            if (string.IsNullOrEmpty(cellValues[k].Value) || cellValues[k].Value == BlankData || !double.TryParse(cellValues[k].Value, out OutVal))
                            {
                                datacell.SetCellValue(cellValues[k].Value);
                                if (k > 0)
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;
                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }

                            }
                            else
                            {
                                datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                                if (k > 0)
                                {
                                    if (cellValues[k].DecType == DecimalFormatType.OTHER)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = otherAllCellStyleEvenDecFrmtWnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = otherAllCellStyleEvenDecFrmt;
                                            }
                                        }

                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = othAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {

                                                datacell.CellStyle = othAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.IntegerWithOutDecimal)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = intAllCellStyleEvenDecFrmt;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = intSimpleAllCellStyleEvenDecFrmt;
                                            }

                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = intAllCellStyleOddDec;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = intSimpleAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = otherAllCellStyleEvenDecFrmtWnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = otherAllCellStyleEvenDecFrmt;
                                            }
                                        }

                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = othAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {

                                                datacell.CellStyle = othAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }

                            }

                        }
                        else
                        {
                            if (cellValues[k].IsMixedType)
                            {
                                double OutVal;
                                if (double.TryParse(cellValues[k].Value, out OutVal))
                                {
                                    datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = otherAllCellStyleEvenDecFrmtWnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = otherAllCellStyleEvenDecFrmt;
                                            }
                                        }

                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = othAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {

                                                datacell.CellStyle = othAllCellStyleOddDec;
                                            }

                                        }

                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }
                                }
                                else
                                {
                                    datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleEven;
                                        else
                                            datacell.CellStyle = AllCellStyleOdd;

                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }
                                }
                            }
                            else if (cellValues[k].IsDateTimeType)
                            {
                                DateTime OutVal;
                                if (DateTime.TryParse(cellValues[k].Value, out OutVal))
                                {
                                    datacell.SetCellValue(Convert.ToDateTime(cellValues[k].Value));
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = DateTimeAllCellStyleEvenFrmt;
                                        else
                                            datacell.CellStyle = DateTimeAllCellStyleOddDec;

                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }
                                }
                                else
                                {
                                    datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleEven;
                                        else
                                            datacell.CellStyle = AllCellStyleOdd;

                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }
                                }
                            }
                            else if (cellValues[k].IsDateTimeStringMixedType)
                            {
                                DateTime OutVal;
                                if (DateTime.TryParse(cellValues[k].Value, out OutVal))
                                {
                                    datacell.SetCellValue(Convert.ToDateTime(cellValues[k].Value));
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = DateTimeAllCellStyleEvenFrmt;
                                        else
                                            datacell.CellStyle = DateTimeAllCellStyleOddDec;

                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }
                                }
                                else
                                {
                                    datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleEven;
                                        else
                                            datacell.CellStyle = AllCellStyleOdd;

                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }
                                }
                            }
                            else
                            {
                                datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                if (k > 0)
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;

                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }
                            }
                        }


                    }
                    incr++;
                }

            }
            #endregion

            for (int i = 0; i < listTableHeader.Count; i++)
                sheet.AutoSizeColumn(i);
            if (sheet.GetColumnWidth(0) < 11072)
                sheet.SetColumnWidth(0, 11072);

            #region Logo
            //try
            //{
            //    if (!string.IsNullOrEmpty(LogoPath))
            //    {
            //        XSSFDrawing patriarch = (XSSFDrawing)sheet.CreateDrawingPatriarch();
            //        XSSFClientAnchor anchor;
            //        anchor = new XSSFClientAnchor(0, 0, 0, 255, 0, 0, 0, 3);
            //        anchor.AnchorType = AnchorType.DontMoveAndResize;
            //        XSSFPicture picture = (XSSFPicture)patriarch.CreatePicture(anchor, LoadImage(LogoPath, workbook, PictureType.PNG));
            //        double x1 = .25;
            //        double y1 = .75;
            //        picture.Resize(x1, y1);
            //        picture.LineStyle = LineStyle.None;
            //    }
            //}
            //catch (Exception ex)
            //{
            //}

            #endregion

            #region Source, Date As On and Report Generated On
            //ICRArow = sheet.CreateRow(incr + 3);
            //ICRArow.CreateCell(0);
            //ICRACell = ICRArow.CreateCell(0);
            //ICRACell.SetCellValue(StrSource);

            //ICRArow = sheet.CreateRow(incr + 4);
            //ICRArow.CreateCell(0);
            //ICRACell = ICRArow.CreateCell(0);
            //ICRACell.SetCellValue(StrDateAsOn);

            //ICRArow = sheet.CreateRow(incr + 5);
            //ICRArow.CreateCell(0);
            //ICRACell = ICRArow.CreateCell(0);
            //ICRACell.SetCellValue(StrReportGeneratedOn);
            #endregion

            #region Sheet Two Logo
            //try
            //{
            //    if (!string.IsNullOrEmpty(LogoPath))
            //    {
            //        XSSFDrawing patriarch = (XSSFDrawing)sheetTwo.CreateDrawingPatriarch();
            //        XSSFClientAnchor anchor;
            //        anchor = new XSSFClientAnchor(0, 0, 0, 255, 0, 0, 0, 3);
            //        anchor.AnchorType = AnchorType.DontMoveAndResize;
            //        XSSFPicture picture = (XSSFPicture)patriarch.CreatePicture(anchor, LoadImage(LogoPath, workbook, PictureType.PNG));
            //        double x1 = 1.10;
            //        double y1 = 1.10;
            //        picture.Resize(x1, y1);
            //        picture.LineStyle = LineStyle.None;
            //    }
            //}
            //catch (Exception ex)
            //{
            //}
            #endregion

            //#region Disclaimer Sheet
            //var Row = sheetTwo.CreateRow(1);
            //var cellSheetTwo = Row.CreateCell(7);
            //cellSheetTwo.SetCellValue(StrHeader1);
            //cellSheetTwo.CellStyle = HeaderStyle;

            //Row = sheetTwo.CreateRow(4);
            //ICell Cell;
            //for (int i = 0; i < 17; i++)
            //{
            //    Cell = Row.CreateCell(i);

            //    XSSFCellStyle declationstyle = (XSSFCellStyle)workbook.CreateCellStyle();

            //    declationstyle.Alignment = HorizontalAlignment.Left;
            //    declationstyle.VerticalAlignment = VerticalAlignment.Top;
            //    declationstyle.WrapText = true;
            //    IFont declarationfnt = (XSSFFont)workbook.CreateFont();
            //    //declarationfnt.Boldweight = (short)FontBoldWeight.Bold;
            //    declarationfnt.FontName = "Calibri";
            //    declarationfnt.FontHeightInPoints = (short)11;
            //    declationstyle.SetFont(declarationfnt);
            //    Cell.SetCellValue(!string.IsNullOrEmpty(Footer) ? Footer : "All information contained herein is obtained by ICRA Analytics Limited from sources believed by it to be accurate and reliable. Because of the possibility of human or mechanical error as well as other factors, however, all information contained herein is provided 'AS IS' without warranty of any kind. ICRA Analytics adopts all necessary measures so that the information it uses is of sufficient quality and from sources ICRA Analytics considers to be reliable including, when appropriate, independent third-party sources. However, ICRA Analytics is not an auditor and cannot in every instance independently verify or validate information received in preparing this document." +
            //        "All information contained herein must be construed solely as statements of opinion, and  ICRA Analytics Limited or its affiliates or group companies and its respective and any of its officers, directors, personnel and employees, disclaim liability to any loss, damage of any nature, including but not limited to direct, indirect, punitive, special, exemplary, consequential, as also any loss of profit in any way arising from the use of this document or its contents in any manner or for any contingency within or beyond the control of, ICRA Analytics or any of its directors, officers, employees, agents, representatives, licensors or suppliers, arising from or in connection with the information contained herein or the use of or inability to use any such information.Opinions expressed in the document are not the opinions of our holding company, ICRA Limited(ICRA), and should not be construed as any indication of credit rating or grading of ICRA for any instruments that have been issued or are to be issued by any entity.The recipient alone shall be fully responsible and / or are liable for any decision taken on the basis of this document and / or the information contained herein.");
            //    Cell.CellStyle = declationstyle;

            //}
            //NPOIWrite.CellMerged(sheetTwo, 4, 4, 0, 17);
            //sheetTwo.GetRow(4).HeightInPoints = 200;
            //#endregion

            //#region Disclaimer Sheet HyperLink
            //XSSFCellStyle HyperLinkStyle = (XSSFCellStyle)workbook.CreateCellStyle();
            //IFont HyperLinkFont = workbook.CreateFont();
            //HyperLinkFont.Color = IndexedColors.Orange.Index;
            //HyperLinkFont.Underline = FontUnderlineType.Single;
            //HyperLinkStyle.SetFont(HyperLinkFont);

            //Row = sheetTwo.CreateRow(5);
            //Cell = Row.CreateCell(0);
            //Cell.SetCellValue("Click here for third-party disclaimers");
            //XSSFCreationHelper createHelper = (XSSFCreationHelper)workbook.GetCreationHelper();
            //XSSFHyperlink link = (XSSFHyperlink)createHelper.CreateHyperlink(HyperlinkType.Url);
            //link.Address = "https://www.icraanalytics.com/home/thirdpartydisclaimers";
            //Cell.Hyperlink = link;
            //Cell.CellStyle = HyperLinkStyle;
            //#endregion

            sheet.ActiveCell = new CellAddress(0, 1);
            var stream = new MemoryStream();
            workbook.Write(stream);

            return workbook;
        }

        /// End ///
        public static IEnumerable<IDictionary<string, string>> ImportExcelToCollection(HttpPostedFile UploadFilePathId)
        {
            try
            {
                IDictionary<string, string> dic;
                List<IDictionary<string, string>> colDic = new List<IDictionary<string, string>>();
                IWorkbook workbook = (UploadFilePathId.FileName.ToLower().EndsWith(".xlsx") ?
                              (IWorkbook)new XSSFWorkbook(UploadFilePathId.InputStream) : new HSSFWorkbook(UploadFilePathId.InputStream));

                ISheet sheet = workbook.GetSheetAt(0);
                int i = 0;
                var col = sheet.GetRow(0);
                //for (int row = 1; row < sheet.LastRowNum; row++) // Commented by Subrata
                for (int row = 1; row <= sheet.LastRowNum; row++)
                {
                    i = 0;
                    dic = new Dictionary<string, string>();
                    if (sheet.GetRow(row) != null) //null is when the row only contains empty cells 
                    {
                        foreach (var c in col)
                        {
                            //dic.Add(c.ToString(), sheet.GetRow(row).GetCell(i).ToString()); // Commented by Subrata
                            dic.Add(c.ToString(), sheet.GetRow(row).GetCell(i) == null ? "" : sheet.GetRow(row).GetCell(i).ToString());
                            i++;
                        }
                    }
                    colDic.Add(dic);
                }
                return colDic;
                //IDictionary<string, string> dictionary = sheet.GetEnumerator().ToDictionary(pair => pair.Key, pair => pair.Value);
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public static bool HasImageExtension(string source)
        {
            return (source.EndsWith(".png") || source.EndsWith(".jpg"));
        }

        #region Excel Export General Functions
        //For Example please follow: AmcFinancial/ExportToExcel

        public static bool ExportToExcel(ref XSSFWorkbook Workbook, ref ISheet Sheet, ExportToExcelInput Input)
        {
            try
            {
                CreateHeader(Input.TableHeader, ref Workbook, ref Sheet, Input.Header1, Input.Header2, Input.Header3, Input.ReportName);
                AddDataToSheet(Input.UserSettings, Input.ExportData, Input.TableHeader, ref Workbook, ref Sheet, Input.RowStart);
                CreateLogo(Input.LogoPath, ref Workbook, ref Sheet, Input.ImgScaleX, Input.ImgScaleY);
                CreateFooter(ref Workbook, ref Sheet, Input.Source, Input.DateAsOn, Input.ReportGeneratedOn);
                return true;
            }
            catch
            {

            }
            return false;
        }

        /// <summary>
        /// create report/data header. added by sudheer on 11-jun-19
        /// </summary>
        /// <param name="TableHeader"></param>
        /// <param name="workbook"></param>
        /// <param name="Sheet"></param>
        /// <returns></returns>
        private static bool CreateHeader(IEnumerable<TableHeaderEntity> TableHeader, ref XSSFWorkbook workbook, ref ISheet Sheet, string Header1, string Header2, string Header3, string ReportName)
        {
            try
            {
                Sheet.DisplayGridlines = false;

                XSSFCellStyle HeaderStyle = (XSSFCellStyle)workbook.CreateCellStyle();
                IFont Headerfont = workbook.CreateFont();
                Headerfont.Boldweight = (short)FontBoldWeight.Bold;
                HeaderStyle.SetFont(Headerfont);

                var ICRArow = Sheet.CreateRow(0);
                ICRArow.CreateCell(0);
                var ICRACell = ICRArow.CreateCell(1);
                ICRACell.SetCellValue(Header1);
                ICRACell.CellStyle = HeaderStyle;

                ICRArow = Sheet.CreateRow(1);
                ICRArow.CreateCell(0);
                ICRACell = ICRArow.CreateCell(1);
                ICRACell.SetCellValue(Header2);
                ICRACell.CellStyle = HeaderStyle;

                ICRArow = Sheet.CreateRow(2);
                ICRArow.CreateCell(0);
                ICRACell = ICRArow.CreateCell(1);
                ICRACell.SetCellValue(Header3);
                ICRACell.CellStyle = HeaderStyle;
                ICRACell.CellStyle.Alignment = HorizontalAlignment.Center;

                ICRArow = Sheet.CreateRow(3);
                ICRArow.CreateCell(0);
                ICRACell = ICRArow.CreateCell(1);
                ICRACell.CellStyle = HeaderStyle;
                ICRACell.CellStyle.Alignment = HorizontalAlignment.Center;
                NPOIWrite.AutoFitColumn(Sheet, 1);
                ICRACell.CellStyle = HeaderStyle;

                ICRArow = Sheet.CreateRow(4);
                ICRArow.CreateCell(0);
                ICRACell = ICRArow.CreateCell(0);
                ICRACell.SetCellValue(ReportName);
                HeaderStyle.Alignment = HorizontalAlignment.Left;
                ICRACell.CellStyle = HeaderStyle;

                var headerRow = Sheet.CreateRow(5);
                Sheet.GetRow(5).HeightInPoints = 30;
                var listHeaderFinal = TableHeader.OrderBy(x => x.Position).ToList();
                for (int i = 0; i < listHeaderFinal.Count; i++)
                {
                    var cell = headerRow.CreateCell(i);
                    cell.SetCellValue(listHeaderFinal[i].ColumnName);
                    NPOIWrite.AutoFitColumn(Sheet, i);

                    XSSFCellStyle style = (XSSFCellStyle)workbook.CreateCellStyle();
                    XSSFColor colorToFill = new XSSFColor(new byte[] { 68, 114, 196 });//Color.Blue);
                    style.SetFillForegroundColor(colorToFill);
                    IFont font = workbook.CreateFont();
                    font.Color = IndexedColors.White.Index;
                    font.Boldweight = (short)FontBoldWeight.Bold;
                    style.SetFont(font);
                    style.FillPattern = FillPattern.SolidForeground;
                    style.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                    style.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                    style.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                    style.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                    if (i > 0)
                    {
                        style.Alignment = HorizontalAlignment.Center;
                        style.VerticalAlignment = VerticalAlignment.Center;
                    }
                    else
                    {
                        style.Alignment = HorizontalAlignment.Left;
                        style.VerticalAlignment = VerticalAlignment.Center;
                    }
                    cell.CellStyle = style;
                    Sheet.AutoSizeColumn(i);
                }
                if (Sheet.GetColumnWidth(0) < 11072)
                    Sheet.SetColumnWidth(0, 11072);

                return true;
            }
            catch
            {

            }
            return false;
        }

        /// <summary>
        /// added by sudheer on 11-jun-19
        /// </summary>
        /// <param name="ubs"></param>
        /// <param name="Data"></param>
        /// <param name="TableHeader"></param>
        /// <param name="RowStart"></param>
        /// <param name="BlankData"></param>
        /// <param name="workbook"></param>
        /// <param name="sheet"></param>
        /// <returns></returns>
        private static bool AddDataToSheet(UserBasicSettings ubs, IEnumerable<ExportEntity> Data, IEnumerable<TableHeaderEntity> TableHeader,
            ref XSSFWorkbook workbook, ref ISheet sheet, int RowStart)
        {
            try
            {
                var BlankData = ubs.BlankData.ToUpper() == "BLANK" ? "" : ubs.BlankData;
                int incr = RowStart;

                #region number and decimal variable for AUM
                var aumPaddding = new string('0', (int)ubs.AUMDecimalFormat);
                var aumDecimalFormat = "0." + aumPaddding;
                string aumNUMBERFORMAT = ubs.NumberFormat;
                var aumNumberFormat = aumNUMBERFORMAT.Replace("0", "#");
                string aumNumberDecimalFormat = aumNumberFormat + "0." + new String('0', (int)ubs.AUMDecimalFormat);
                #endregion

                #region number and decimal variable for return
                var retPaddding = new string('0', (int)ubs.ReturnDecimalFormat);
                var retDecimalFormat = "0." + retPaddding;
                string retNUMBERFORMAT = ubs.NumberFormat;
                var retNumberFormat = retNUMBERFORMAT.Replace("0", "#");
                string retNumberDecimalFormat = retNumberFormat + "0." + new String('0', (int)ubs.ReturnDecimalFormat);
                #endregion

                #region number and decimal variable for NAV
                var navPaddding = new string('0', (int)ubs.NavDecimalFormat);
                var navDecimalFormat = "0." + navPaddding;
                string navNUMBERFORMAT = ubs.NumberFormat;
                var navNumberFormat = navNUMBERFORMAT.Replace("0", "#");
                string navNumberDecimalFormat = navNumberFormat + "0." + new String('0', (int)ubs.NavDecimalFormat);
                #endregion

                #region number and decimal variable for Other
                var othPaddding = new string('0', (int)ubs.OtherDecimal);
                var othDecimalFormat = "0." + othPaddding;
                string othNUMBERFORMAT = ubs.NumberFormat;
                var othNumberFormat = othNUMBERFORMAT.Replace("0", "#");
                string othNumberDecimalFormat = othNumberFormat + "0." + new String('0', (int)ubs.OtherDecimal);
                #endregion

                #region number and decimal variable for Ratio
                var ratioPaddding = new string('0', (int)ubs.RatioDecimalFormat);
                var ratioDecimalFormat = "0." + ratioPaddding;
                string ratioNUMBERFORMAT = ubs.NumberFormat;
                var ratioNumberFormat = ratioNUMBERFORMAT.Replace("0", "#");
                string ratioNumberDecimalFormat = ratioNumberFormat + "0." + new String('0', (int)ubs.RatioDecimalFormat);
                #endregion

                #region int Format with out Decimal
                var intNumberWithoutDecimalFormat = ubs.NumberFormat.Replace("0", "#");
                #endregion

                #region Cell Style For Even Row

                #region Without DecimalFormat
                XSSFCellStyle AllCellStyleEven = (XSSFCellStyle)workbook.CreateCellStyle();
                AllCellStyleEven.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                AllCellStyleEven.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                AllCellStyleEven.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                AllCellStyleEven.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor colorToFillEven = new XSSFColor(new byte[] { 176, 196, 222 });
                AllCellStyleEven.SetFillForegroundColor(colorToFillEven);
                AllCellStyleEven.FillPattern = FillPattern.SolidForeground;
                AllCellStyleEven.Alignment = HorizontalAlignment.Center;
                AllCellStyleEven.VerticalAlignment = VerticalAlignment.Center;
                #endregion

                #region With DecimalFormat AUM
                XSSFCellStyle aumAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                aumAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                aumAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                aumAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                aumAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor aumcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
                aumAllCellStyleEvenDecFrmt.SetFillForegroundColor(aumcolorToFillEvenWtoutDec);
                aumAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
                IDataFormat aumformatEven = workbook.CreateDataFormat();
                aumAllCellStyleEvenDecFrmt.DataFormat = aumformatEven.GetFormat(aumDecimalFormat);
                aumAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
                aumAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

                /// Number Format ////
                XSSFCellStyle aumAllCellStyleEvenDecFrmtWNum = (XSSFCellStyle)workbook.CreateCellStyle();
                aumAllCellStyleEvenDecFrmtWNum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                aumAllCellStyleEvenDecFrmtWNum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                aumAllCellStyleEvenDecFrmtWNum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                aumAllCellStyleEvenDecFrmtWNum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor aumcolorToFillEvenWtoutDecWNum = new XSSFColor(new byte[] { 176, 196, 222 });
                aumAllCellStyleEvenDecFrmtWNum.SetFillForegroundColor(aumcolorToFillEvenWtoutDecWNum);
                aumAllCellStyleEvenDecFrmtWNum.FillPattern = FillPattern.SolidForeground;
                IDataFormat aumformatEvenWNum = workbook.CreateDataFormat();
                aumAllCellStyleEvenDecFrmtWNum.DataFormat = aumformatEvenWNum.GetFormat(aumNumberDecimalFormat);
                aumAllCellStyleEvenDecFrmtWNum.Alignment = HorizontalAlignment.Center;
                aumAllCellStyleEvenDecFrmtWNum.VerticalAlignment = VerticalAlignment.Center;
                #endregion

                #region With DecimalFormat Return
                XSSFCellStyle retAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                retAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                retAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                retAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                retAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor retcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
                retAllCellStyleEvenDecFrmt.SetFillForegroundColor(retcolorToFillEvenWtoutDec);
                retAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
                IDataFormat retformatEven = workbook.CreateDataFormat();
                retAllCellStyleEvenDecFrmt.DataFormat = retformatEven.GetFormat(retDecimalFormat);
                retAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
                retAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;


                ////Number Format ////
                XSSFCellStyle retAllCellStyleEvenDecFrmtWnum = (XSSFCellStyle)workbook.CreateCellStyle();
                retAllCellStyleEvenDecFrmtWnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                retAllCellStyleEvenDecFrmtWnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                retAllCellStyleEvenDecFrmtWnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                retAllCellStyleEvenDecFrmtWnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor retcolorToFillEvenWtoutDecWnum = new XSSFColor(new byte[] { 176, 196, 222 });
                retAllCellStyleEvenDecFrmtWnum.SetFillForegroundColor(retcolorToFillEvenWtoutDecWnum);
                retAllCellStyleEvenDecFrmtWnum.FillPattern = FillPattern.SolidForeground;
                IDataFormat retformatEvenWnum = workbook.CreateDataFormat();
                retAllCellStyleEvenDecFrmtWnum.DataFormat = retformatEvenWnum.GetFormat(retNumberDecimalFormat);
                retAllCellStyleEvenDecFrmtWnum.Alignment = HorizontalAlignment.Center;
                retAllCellStyleEvenDecFrmtWnum.VerticalAlignment = VerticalAlignment.Center;
                #endregion

                #region With DecimalFormat Nav
                XSSFCellStyle navAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                navAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                navAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                navAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                navAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor navcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
                navAllCellStyleEvenDecFrmt.SetFillForegroundColor(navcolorToFillEvenWtoutDec);
                navAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
                IDataFormat navformatEven = workbook.CreateDataFormat();
                navAllCellStyleEvenDecFrmt.DataFormat = navformatEven.GetFormat(navDecimalFormat);
                navAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
                navAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;


                /// Number Format ////
                XSSFCellStyle navAllCellStyleEvenDecFrmtWnnum = (XSSFCellStyle)workbook.CreateCellStyle();
                navAllCellStyleEvenDecFrmtWnnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                navAllCellStyleEvenDecFrmtWnnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                navAllCellStyleEvenDecFrmtWnnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                navAllCellStyleEvenDecFrmtWnnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor navcolorToFillEvenWtoutDecWnnum = new XSSFColor(new byte[] { 176, 196, 222 });
                navAllCellStyleEvenDecFrmtWnnum.SetFillForegroundColor(navcolorToFillEvenWtoutDecWnnum);
                navAllCellStyleEvenDecFrmtWnnum.FillPattern = FillPattern.SolidForeground;
                IDataFormat navformatEvenWnnum = workbook.CreateDataFormat();
                navAllCellStyleEvenDecFrmtWnnum.DataFormat = navformatEvenWnnum.GetFormat(navNumberDecimalFormat);
                navAllCellStyleEvenDecFrmtWnnum.Alignment = HorizontalAlignment.Center;
                navAllCellStyleEvenDecFrmtWnnum.VerticalAlignment = VerticalAlignment.Center;
                #endregion

                #region With DecimalFormat Other
                XSSFCellStyle otherAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                otherAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                otherAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                otherAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                otherAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor othercolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
                otherAllCellStyleEvenDecFrmt.SetFillForegroundColor(othercolorToFillEvenWtoutDec);
                otherAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
                IDataFormat otherformatEven = workbook.CreateDataFormat();
                otherAllCellStyleEvenDecFrmt.DataFormat = otherformatEven.GetFormat(othDecimalFormat);
                otherAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
                otherAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

                /// Number Format ///
                XSSFCellStyle otherAllCellStyleEvenDecFrmtWnum = (XSSFCellStyle)workbook.CreateCellStyle();
                otherAllCellStyleEvenDecFrmtWnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                otherAllCellStyleEvenDecFrmtWnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                otherAllCellStyleEvenDecFrmtWnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                otherAllCellStyleEvenDecFrmtWnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor othercolorToFillEvenWtoutDecWnum = new XSSFColor(new byte[] { 176, 196, 222 });
                otherAllCellStyleEvenDecFrmtWnum.SetFillForegroundColor(othercolorToFillEvenWtoutDecWnum);
                otherAllCellStyleEvenDecFrmtWnum.FillPattern = FillPattern.SolidForeground;
                IDataFormat otherformatEvenWnum = workbook.CreateDataFormat();
                otherAllCellStyleEvenDecFrmtWnum.DataFormat = otherformatEvenWnum.GetFormat(othNumberDecimalFormat);
                otherAllCellStyleEvenDecFrmtWnum.Alignment = HorizontalAlignment.Center;
                otherAllCellStyleEvenDecFrmtWnum.VerticalAlignment = VerticalAlignment.Center;
                #endregion

                #region With DecimalFormat Ratio
                XSSFCellStyle ratAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                ratAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                ratAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                ratAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                ratAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor ratcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
                ratAllCellStyleEvenDecFrmt.SetFillForegroundColor(ratcolorToFillEvenWtoutDec);
                ratAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
                IDataFormat ratformatEven = workbook.CreateDataFormat();
                ratAllCellStyleEvenDecFrmt.DataFormat = ratformatEven.GetFormat(ratioDecimalFormat);
                ratAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
                ratAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

                XSSFCellStyle ratAllCellStyleEvenDecFrmtWth = (XSSFCellStyle)workbook.CreateCellStyle();
                ratAllCellStyleEvenDecFrmtWth.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                ratAllCellStyleEvenDecFrmtWth.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                ratAllCellStyleEvenDecFrmtWth.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                ratAllCellStyleEvenDecFrmtWth.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor ratcolorToFillEvenWtoutDecwth = new XSSFColor(new byte[] { 176, 196, 222 });
                ratAllCellStyleEvenDecFrmtWth.SetFillForegroundColor(ratcolorToFillEvenWtoutDecwth);
                ratAllCellStyleEvenDecFrmtWth.FillPattern = FillPattern.SolidForeground;
                IDataFormat ratformatEvenWth = workbook.CreateDataFormat();
                ratAllCellStyleEvenDecFrmtWth.DataFormat = ratformatEvenWth.GetFormat(ratioNumberDecimalFormat);
                ratAllCellStyleEvenDecFrmtWth.Alignment = HorizontalAlignment.Center;
                ratAllCellStyleEvenDecFrmtWth.VerticalAlignment = VerticalAlignment.Center;
                #endregion

                #endregion

                #region Cell Style For Odd Row

                #region With Decimal Format AUM
                XSSFCellStyle aumAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
                aumAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                aumAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                aumAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                aumAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor AUMcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
                aumAllCellStyleOddDec.SetFillForegroundColor(AUMcolorToFillOddDec);
                aumAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
                IDataFormat AUMformatOddDec = workbook.CreateDataFormat();
                aumAllCellStyleOddDec.DataFormat = AUMformatOddDec.GetFormat(aumDecimalFormat);
                aumAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
                aumAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

                XSSFCellStyle aumAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
                aumAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                aumAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                aumAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                aumAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor AUMcolorToFillOddDecWnf = new XSSFColor(new byte[] { 255, 255, 255 });
                aumAllCellStyleOddDecWnuf.SetFillForegroundColor(AUMcolorToFillOddDecWnf);
                aumAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
                IDataFormat AUMformatOddDecWnuf = workbook.CreateDataFormat();
                aumAllCellStyleOddDecWnuf.DataFormat = AUMformatOddDecWnuf.GetFormat(aumNumberDecimalFormat);
                aumAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
                aumAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
                #endregion

                #region With Decimal Format Return
                XSSFCellStyle retAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
                retAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                retAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                retAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                retAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor RETcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
                retAllCellStyleOddDec.SetFillForegroundColor(RETcolorToFillOddDec);
                retAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
                IDataFormat RETformatOddDec = workbook.CreateDataFormat();
                retAllCellStyleOddDec.DataFormat = RETformatOddDec.GetFormat(retDecimalFormat);
                retAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
                retAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

                XSSFCellStyle retAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
                retAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                retAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                retAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                retAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor RETcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
                retAllCellStyleOddDecWnuf.SetFillForegroundColor(RETcolorToFillOddDecWnuf);
                retAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
                IDataFormat RETformatOddDecWnuf = workbook.CreateDataFormat();
                retAllCellStyleOddDecWnuf.DataFormat = RETformatOddDecWnuf.GetFormat(retNumberDecimalFormat);
                retAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
                retAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
                #endregion

                #region With Decimal Format Nav
                XSSFCellStyle navAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
                navAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                navAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                navAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                navAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor naVcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
                navAllCellStyleOddDec.SetFillForegroundColor(naVcolorToFillOddDec);
                navAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
                IDataFormat naVformatOddDec = workbook.CreateDataFormat();
                navAllCellStyleOddDec.DataFormat = naVformatOddDec.GetFormat(navDecimalFormat);
                navAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
                navAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


                XSSFCellStyle navAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
                navAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                navAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                navAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                navAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor naVcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
                navAllCellStyleOddDecWnuf.SetFillForegroundColor(naVcolorToFillOddDecWnuf);
                navAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
                IDataFormat naVformatOddDecWnuf = workbook.CreateDataFormat();
                navAllCellStyleOddDecWnuf.DataFormat = naVformatOddDecWnuf.GetFormat(navNumberDecimalFormat);
                navAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
                navAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
                #endregion


                #region With Decimal Format Other
                XSSFCellStyle othAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
                othAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                othAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                othAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                othAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor othcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
                othAllCellStyleOddDec.SetFillForegroundColor(othcolorToFillOddDec);
                othAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
                IDataFormat othformatOddDec = workbook.CreateDataFormat();
                othAllCellStyleOddDec.DataFormat = othformatOddDec.GetFormat(othDecimalFormat);
                othAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
                othAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


                XSSFCellStyle othAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
                othAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                othAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                othAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                othAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor othcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
                othAllCellStyleOddDecWnuf.SetFillForegroundColor(othcolorToFillOddDecWnuf);
                othAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
                IDataFormat othformatOddDecWnuf = workbook.CreateDataFormat();
                othAllCellStyleOddDecWnuf.DataFormat = othformatOddDecWnuf.GetFormat(othNumberDecimalFormat);
                othAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
                othAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
                #endregion


                #region With Decimal Format ratio
                XSSFCellStyle ratAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
                ratAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                ratAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                ratAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                ratAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor retcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
                ratAllCellStyleOddDec.SetFillForegroundColor(retcolorToFillOddDec);
                ratAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
                IDataFormat retformatOddDec = workbook.CreateDataFormat();
                ratAllCellStyleOddDec.DataFormat = retformatOddDec.GetFormat(ratioDecimalFormat);
                ratAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
                ratAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


                XSSFCellStyle ratAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
                ratAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                ratAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                ratAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                ratAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor retcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
                ratAllCellStyleOddDecWnuf.SetFillForegroundColor(retcolorToFillOddDecWnuf);
                ratAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
                IDataFormat retformatOddDecWnuf = workbook.CreateDataFormat();
                ratAllCellStyleOddDecWnuf.DataFormat = retformatOddDecWnuf.GetFormat(ratioNumberDecimalFormat);
                ratAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
                ratAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
                #endregion

                #region Without Decimal Format
                XSSFCellStyle AllCellStyleOdd = (XSSFCellStyle)workbook.CreateCellStyle();
                AllCellStyleOdd.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                AllCellStyleOdd.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                AllCellStyleOdd.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                AllCellStyleOdd.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor colorToFillOdd = new XSSFColor(new byte[] { 255, 255, 255 });
                AllCellStyleOdd.SetFillForegroundColor(colorToFillOdd);
                AllCellStyleOdd.FillPattern = FillPattern.SolidForeground;
                AllCellStyleOdd.Alignment = HorizontalAlignment.Center;
                AllCellStyleOdd.VerticalAlignment = VerticalAlignment.Center;
                #endregion

                #endregion

                #region Cell Style For First Column Even Row
                XSSFCellStyle AllCellStyleFstColmEven = (XSSFCellStyle)workbook.CreateCellStyle();
                AllCellStyleFstColmEven.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                AllCellStyleFstColmEven.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                AllCellStyleFstColmEven.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                AllCellStyleFstColmEven.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor colorToFillFstClmnEven = new XSSFColor(new byte[] { 176, 196, 222 });
                AllCellStyleFstColmEven.SetFillForegroundColor(colorToFillFstClmnEven);
                AllCellStyleFstColmEven.FillPattern = FillPattern.SolidForeground;
                AllCellStyleFstColmEven.Alignment = HorizontalAlignment.Left;
                AllCellStyleFstColmEven.VerticalAlignment = VerticalAlignment.Center;
                #endregion

                #region Cell Style For First Column Odd Row
                XSSFCellStyle AllCellStyleFstColmOdd = (XSSFCellStyle)workbook.CreateCellStyle();
                AllCellStyleFstColmOdd.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                AllCellStyleFstColmOdd.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                AllCellStyleFstColmOdd.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                AllCellStyleFstColmOdd.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor colorToFillFstClmnOdd = new XSSFColor(new byte[] { 255, 255, 255 });
                AllCellStyleFstColmOdd.SetFillForegroundColor(colorToFillFstClmnOdd);
                AllCellStyleFstColmOdd.FillPattern = FillPattern.SolidForeground;
                AllCellStyleFstColmOdd.Alignment = HorizontalAlignment.Left;
                AllCellStyleFstColmOdd.VerticalAlignment = VerticalAlignment.Center;
                #endregion

                #region Without Decimal Number Format Even Row
                XSSFCellStyle intAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                intAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                intAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                intAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                intAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor intcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
                intAllCellStyleEvenDecFrmt.SetFillForegroundColor(intcolorToFillEvenWtoutDec);
                intAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
                IDataFormat intformatEven = workbook.CreateDataFormat();
                intAllCellStyleEvenDecFrmt.DataFormat = intformatEven.GetFormat(intNumberWithoutDecimalFormat);
                intAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
                intAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

                XSSFCellStyle intSimpleAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                intSimpleAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                intSimpleAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                intSimpleAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                intSimpleAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor intSimplecolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
                intSimpleAllCellStyleEvenDecFrmt.SetFillForegroundColor(intSimplecolorToFillEvenWtoutDec);
                intSimpleAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
                intSimpleAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
                intSimpleAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;
                #endregion

                #region Without Decimal Number Format Odd Row
                XSSFCellStyle intAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
                intAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                intAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                intAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                intAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor intcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
                intAllCellStyleOddDec.SetFillForegroundColor(intcolorToFillOddDec);
                intAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
                IDataFormat intformatOddDec = workbook.CreateDataFormat();
                intAllCellStyleOddDec.DataFormat = intformatOddDec.GetFormat(intNumberWithoutDecimalFormat);
                intAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
                intAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

                XSSFCellStyle intSimpleAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
                intSimpleAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                intSimpleAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                intSimpleAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                intSimpleAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor intSimplecolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
                intSimpleAllCellStyleOddDec.SetFillForegroundColor(intSimplecolorToFillOddDec);
                intSimpleAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
                intSimpleAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
                intSimpleAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;
                #endregion

                foreach (var item in Data)
                {
                    var dataRow = sheet.CreateRow(incr);
                    sheet.GetRow(incr).HeightInPoints = 20;
                    var cellValues = (from i in item.LstKeyValuePair
                                      from j in TableHeader
                                      where i.Key == j.ColumnName
                                      orderby j.Position
                                      select new
                                      {
                                          IsNum = j.IsNumberFormatReq,
                                          DecType = j.DecFormatType,
                                          IsMixedType = j.IsMixedValueType,
                                          Value = i.Value
                                      }).ToArray();

                    for (int k = 0; k < cellValues.Length; k++)
                    {
                        var datacell = dataRow.CreateCell(k);
                        if (cellValues[k].DecType != DecimalFormatType.NoDecimalReq)
                        {
                            double OutVal;
                            if (cellValues[k].Value == "" || cellValues[k].Value == null || cellValues[k].Value == BlankData || !double.TryParse(cellValues[k].Value, out OutVal))
                            {
                                datacell.SetCellValue(cellValues[k].Value);
                                if (k > 0)
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;
                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }

                            }
                            else
                            {
                                datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                                if (k > 0)
                                {
                                    if (cellValues[k].DecType == DecimalFormatType.AUM)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {

                                                datacell.CellStyle = aumAllCellStyleEvenDecFrmtWNum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = aumAllCellStyleEvenDecFrmt;
                                            }
                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = aumAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = aumAllCellStyleOddDec;
                                            }
                                        }
                                    }
                                    if (cellValues[k].DecType == DecimalFormatType.NAV)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = navAllCellStyleEvenDecFrmtWnnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = navAllCellStyleEvenDecFrmt;
                                            }
                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = navAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = navAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                    if (cellValues[k].DecType == DecimalFormatType.OTHER)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = otherAllCellStyleEvenDecFrmtWnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = otherAllCellStyleEvenDecFrmt;
                                            }
                                        }

                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = othAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {

                                                datacell.CellStyle = othAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                    if (cellValues[k].DecType == DecimalFormatType.RATIO)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = ratAllCellStyleEvenDecFrmtWth;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = ratAllCellStyleEvenDecFrmt;
                                            }
                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = ratAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = ratAllCellStyleOddDec;
                                            }
                                        }
                                    }
                                    if (cellValues[k].DecType == DecimalFormatType.RETURN)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = retAllCellStyleEvenDecFrmtWnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = retAllCellStyleEvenDecFrmt;
                                            }

                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = retAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = retAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                    if (cellValues[k].DecType == DecimalFormatType.IntegerWithOutDecimal)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = intAllCellStyleEvenDecFrmt;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = intSimpleAllCellStyleEvenDecFrmt;
                                            }

                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = intAllCellStyleOddDec;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = intSimpleAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }

                            }

                        }
                        else
                        {
                            double OutVal;
                            if (double.TryParse(cellValues[k].Value, out OutVal) && !cellValues[k].IsMixedType)
                            {
                                datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                                if (k > 0)
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;

                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }
                            }
                            else
                            {
                                datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                if (k > 0)
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;

                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }
                            }
                        }
                    }
                    incr++;
                }

                sheet.CreateFreezePane(1, RowStart);
                return true;
            }
            catch
            {

            }
            return false;
        }

        /// <summary>
        /// create logo in sheet. added by sudheer on 11-jun-19
        /// </summary>
        /// <param name="LogoPath"></param>
        /// <param name="workbook"></param>
        /// <param name="Sheet"></param>
        /// <param name="x1"></param>
        /// <param name="y1"></param>
        /// <returns></returns>
        public static bool CreateLogo(string LogoPath, ref XSSFWorkbook workbook, ref ISheet Sheet, double x1, double y1)
        {
            try
            {
                if (!string.IsNullOrEmpty(LogoPath))
                {
                    XSSFDrawing patriarch = (XSSFDrawing)Sheet.CreateDrawingPatriarch();
                    XSSFClientAnchor anchor;
                    anchor = new XSSFClientAnchor(0, 0, 0, 255, 0, 0, 0, 3);
                    anchor.AnchorType = AnchorType.DontMoveAndResize;
                    XSSFPicture picture = (XSSFPicture)patriarch.CreatePicture(anchor, LoadImage(LogoPath, workbook, PictureType.PNG));
                    //double x1 = 1.10;
                    //double y1 = 1.10;
                    picture.Resize(x1, y1);
                    picture.LineStyle = LineStyle.None;
                }
                return true;
            }
            catch
            {

            }
            return false;
        }

        /// <summary>
        /// added by sudheer on 11-jun-19
        /// </summary>
        /// <param name="workbook"></param>
        /// <param name="Sheet"></param>
        /// <param name="Source"></param>
        /// <param name="DateAsOn"></param>
        /// <param name="ReportGeneratedOn"></param>
        /// <returns></returns>
        private static bool CreateFooter(ref XSSFWorkbook workbook, ref ISheet Sheet, string Source, string DateAsOn, string ReportGeneratedOn)
        {
            try
            {
                var RowStart = Sheet.LastRowNum;
                for (int row = 6; row <= Sheet.LastRowNum - 6; row++)
                {
                    var getRow = Sheet.GetRow(row);
                    if (getRow != null && getRow.Cells.Count > 0)
                    {
                        if (string.IsNullOrEmpty(getRow.Cells[0].StringCellValue))
                        {
                            RowStart = row;
                            break;
                        }
                    }
                    else
                    {
                        RowStart = row;
                        break;
                    }
                }

                var ICRArow = Sheet.CreateRow(RowStart + 3);
                ICRArow.CreateCell(0);
                var ICRACell = ICRArow.CreateCell(0);
                ICRACell.SetCellValue(Source);

                ICRArow = Sheet.CreateRow(RowStart + 4);
                ICRArow.CreateCell(0);
                ICRACell = ICRArow.CreateCell(0);
                ICRACell.SetCellValue(DateAsOn);

                ICRArow = Sheet.CreateRow(RowStart + 5);
                ICRArow.CreateCell(0);
                ICRACell = ICRArow.CreateCell(0);
                ICRACell.SetCellValue(ReportGeneratedOn);
                return true;
            }
            catch
            {

            }
            return false;
        }

        /// <summary>
        /// added by sudheer on 12-jun-19
        /// </summary>
        /// <param name="workbook"></param>
        /// <param name="Sheet"></param>
        /// <param name="Header1"></param>
        /// <returns></returns>
        public static bool CreateDisclaimer(ref XSSFWorkbook workbook, ref ISheet Sheet, string Header1)
        {
            try
            {
                Sheet.DisplayGridlines = false;

                XSSFCellStyle HeaderStyle = (XSSFCellStyle)workbook.CreateCellStyle();
                IFont Headerfont = workbook.CreateFont();
                Headerfont.Boldweight = (short)FontBoldWeight.Bold;
                HeaderStyle.SetFont(Headerfont);

                var Row = Sheet.CreateRow(1);
                var cellSheetTwo = Row.CreateCell(7);
                cellSheetTwo.SetCellValue(Header1);
                cellSheetTwo.CellStyle = HeaderStyle;

                Row = Sheet.CreateRow(4);
                ICell Cell;

                XSSFCellStyle HyperLinkStyle = (XSSFCellStyle)workbook.CreateCellStyle();
                IFont HyperLinkFont = workbook.CreateFont();
                HyperLinkFont.Color = IndexedColors.Orange.Index;
                HyperLinkFont.Underline = FontUnderlineType.Single;
                HyperLinkStyle.SetFont(HyperLinkFont);

                Row = Sheet.CreateRow(5);
                Cell = Row.CreateCell(0);
                Cell.SetCellValue("Click here for third-party disclaimers");
                XSSFCreationHelper createHelper = (XSSFCreationHelper)workbook.GetCreationHelper();
                XSSFHyperlink link = (XSSFHyperlink)createHelper.CreateHyperlink(HyperlinkType.Url);
                link.Address = "https://www.icraanalytics.com/home/thirdpartydisclaimers";
                Cell.Hyperlink = link;
                Cell.CellStyle = HyperLinkStyle;

                NPOIWrite.CellMerged(Sheet, 4, 4, 0, 17);
                Sheet.GetRow(4).HeightInPoints = 200;
                Sheet.ActiveCell = new CellAddress(0, 1);

                return true;
            }
            catch
            {

            }
            return false;
        }

        #endregion
        public static NPOI.XSSF.UserModel.XSSFWorkbook GetWorkbookFromSheetArray(Dictionary<string, ISheet> shtArr, string LogoPath = "")
        {
            try
            {
                NPOI.XSSF.UserModel.XSSFWorkbook workbook = new XSSFWorkbook();
                foreach (var sh in shtArr)
                {
                    XSSFSheet sheet = sh.Value as XSSFSheet;
                    sheet.CopyTo(workbook, $"{sh.Key}", true, true);
                }
                foreach (var sh in shtArr)
                {
                    var gtsheet = workbook.GetSheet($"{sh.Key}");
                    if (!string.IsNullOrEmpty(LogoPath))
                    {
                        XSSFDrawing patriarch = (XSSFDrawing)gtsheet.CreateDrawingPatriarch();
                        XSSFClientAnchor anchor;
                        anchor = new XSSFClientAnchor(0, 0, 0, 255, 0, 0, 0, 3);
                        anchor.AnchorType = AnchorType.DontMoveAndResize;
                        XSSFPicture picture = (XSSFPicture)patriarch.CreatePicture(anchor, LoadImage(LogoPath, workbook, PictureType.PNG));
                        double x1 = .25;
                        double y1 = .75;
                        if (sh.Key.ToUpper() == "DISCLAIMER")
                        {
                            x1 = 1.10;
                            y1 = 1.10;
                        }
                        picture.Resize(x1, y1);
                        picture.LineStyle = LineStyle.None;
                    }
                }
                var stream = new MemoryStream();
                workbook.Write(stream);

                return workbook;
            }
            catch (Exception ex)
            {



            }

            return null;
        }

        public static NPOI.XSSF.UserModel.XSSFWorkbook GetWorkbookFromSheetArray(Dictionary<ISheet, string> shtArr, string Logopath = "")
        {
            try
            {
                NPOI.XSSF.UserModel.XSSFWorkbook workbook = new XSSFWorkbook();
                //workbook.Equals(stream);
                IFont font2 = workbook.CreateFont();
                font2.Color = IndexedColors.White.Index;
                font2.IsBold = true;

                foreach (var sh in shtArr)
                {

                    XSSFSheet sheet = sh.Key as XSSFSheet;
                    //workbook.Add(sh.Key);
                    sheet.CopyTo(workbook, $"{sh.Value}", true, true);


                    ISheet shthange = workbook.GetSheet(sh.Value);
                    if (!string.IsNullOrEmpty(Logopath))
                    {
                        XSSFDrawing patriarch = (XSSFDrawing)shthange.CreateDrawingPatriarch();
                        XSSFClientAnchor anchor;
                        anchor = new XSSFClientAnchor(0, 0, 0, 255, 0, 0, 0, 3);
                        anchor.AnchorType = AnchorType.DontMoveAndResize;
                        XSSFPicture picture = (XSSFPicture)patriarch.CreatePicture(anchor, LoadImage(Logopath, workbook, PictureType.PNG));
                        double x1 = sh.Value == "Disclaimer" ? 1.10 : .25;
                        double y1 = sh.Value == "Disclaimer" ? 1.10 : .75;
                        picture.Resize(x1, y1);
                        picture.LineStyle = LineStyle.None;

                    }
                }
                var stream = new MemoryStream();
                workbook.Write(stream);

                return workbook;
            }
            catch (Exception ex)
            {



            }

            return null;
        }

        /// <summary>
        /// Added by Arijit on 05/10/2023
        /// </summary>
        /// <param name="ubs"></param>
        /// <param name="listTableHeader"></param>
        /// <param name="listData"></param>
        /// <param name="LogoPath"></param>
        /// <param name="ReportName"></param>
        /// <param name="StrDateAsOn"></param>
        /// <returns></returns>
        public static NPOI.XSSF.UserModel.XSSFWorkbook ExportToExcelWorkBookWithNumberDecimalFormatHeaderSubHeader(UserBasicSettings ubs, IEnumerable<IEnumerable<TableHeaderEntity>> listTableHeaderRows, List<ExportEntity> listData, string LogoPath = "", string ReportName = "", string StrDateAsOn = "")
        {

            #region Variable
            string Header = ubs.Reporting_Format_Header;
            string Footer = ubs.Reporting_Format_Footer;
            string BlankData = ubs.BlankData == null ? "BLANK" : ubs.BlankData.ToUpper() == "BLANK" ? "" : ubs.BlankData;

            string StrHeader1 = "ICRA Analytics Limited";
            string StrHeader2 = "3rd Floor, Electric Mansion,Appasaheb Marathe Marg, Prabhadevi,Mumbai - 400 025 Maharashtra, India";
            string StrHeader3 = Header; //"Mumbai, Maharashtra 400093, IN";
            string StrReportName = ReportName;
            string StrSource = "Source: " + (string.IsNullOrEmpty(UserStatisticsEntity.SourceName) ? "MFI 360" : UserStatisticsEntity.SourceName);
            StrDateAsOn = "Data as on " + StrDateAsOn;
            string StrReportGeneratedOn = "Report Generated on " + DateTime.Now.ToString("dd-MMM-yyyy HH:mm:ss");

            #region number and decimal variable for AUM
            var aumPaddding = new string('0', (int)ubs.AUMDecimalFormat);
            var aumDecimalFormat = "0." + aumPaddding;
            string aumNUMBERFORMAT = ubs.NumberFormat;
            var aumNumberFormat = aumNUMBERFORMAT.Replace("0", "#");
            string aumNumberDecimalFormat = aumNumberFormat + "0." + new String('0', (int)ubs.AUMDecimalFormat);
            #endregion

            #region number and decimal variable for return
            var retPaddding = new string('0', (int)ubs.ReturnDecimalFormat);
            var retDecimalFormat = "0." + retPaddding;
            string retNUMBERFORMAT = ubs.NumberFormat;
            var retNumberFormat = retNUMBERFORMAT.Replace("0", "#");
            string retNumberDecimalFormat = retNumberFormat + "0." + new String('0', (int)ubs.ReturnDecimalFormat);
            #endregion

            #region number and decimal variable for NAV
            var navPaddding = new string('0', (int)ubs.NavDecimalFormat);
            var navDecimalFormat = "0." + navPaddding;
            string navNUMBERFORMAT = ubs.NumberFormat;
            var navNumberFormat = navNUMBERFORMAT.Replace("0", "#");
            string navNumberDecimalFormat = navNumberFormat + "0." + new String('0', (int)ubs.NavDecimalFormat);
            #endregion


            #region number and decimal variable for Other
            var othPaddding = new string('0', (int)ubs.OtherDecimal);
            var othDecimalFormat = "0." + othPaddding;
            string othNUMBERFORMAT = ubs.NumberFormat;
            var othNumberFormat = othNUMBERFORMAT.Replace("0", "#");
            string othNumberDecimalFormat = othNumberFormat + "0." + new String('0', (int)ubs.OtherDecimal);
            #endregion

            #region number and decimal variable for Ratio
            var ratioPaddding = new string('0', (int)ubs.RatioDecimalFormat);
            var ratioDecimalFormat = "0." + ratioPaddding;
            string ratioNUMBERFORMAT = ubs.NumberFormat;
            var ratioNumberFormat = ratioNUMBERFORMAT.Replace("0", "#");
            string ratioNumberDecimalFormat = ratioNumberFormat + "0." + new String('0', (int)ubs.RatioDecimalFormat);
            #endregion
            #region int Format with out Decimal
            var intNumberWithoutDecimalFormat = ubs.NumberFormat.Replace("0", "#");
            #endregion
            #endregion

            NPOI.XSSF.UserModel.XSSFWorkbook workbook = new NPOI.XSSF.UserModel.XSSFWorkbook();

            ISheet sheet = workbook.CreateSheet("Output");
            ISheet sheetTwo = workbook.CreateSheet("Disclaimer");

            #region Excel Sheet Gridlines Delete
            sheet.DisplayGridlines = false;
            sheetTwo.DisplayGridlines = false;
            #endregion

            #region Header Freeze
            sheet.CreateFreezePane(1, 5 + listTableHeaderRows.Count());
            #endregion

            #region Set Font For Header1,Header2 and Header3
            XSSFCellStyle HeaderStyle = (XSSFCellStyle)workbook.CreateCellStyle();
            IFont Headerfont = workbook.CreateFont();
            Headerfont.IsBold = true;
            HeaderStyle.SetFont(Headerfont);
            #endregion

            #region Set Cell Value For Header1, Header2 and Header3
            var ICRArow = sheet.CreateRow(0);
            ICRArow.CreateCell(0);
            NPOIWrite.CellMerged(sheet, 0, 0, 1, 9);
            var ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader1);
            ICRACell.CellStyle = HeaderStyle;
            ICRArow = sheet.CreateRow(1);
            ICRArow.CreateCell(0);
            NPOIWrite.CellMerged(sheet, 1, 1, 1, 9);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader2);
            ICRACell.CellStyle = HeaderStyle;
            ICRArow = sheet.CreateRow(2);
            ICRArow.CreateCell(0);
            NPOIWrite.CellMerged(sheet, 2, 2, 1, 9);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader3);
            ICRACell.CellStyle = HeaderStyle;
            ICRACell.CellStyle.Alignment = HorizontalAlignment.Center;
            ICRArow = sheet.CreateRow(3);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.CellStyle.Alignment = HorizontalAlignment.Center;
            NPOIWrite.AutoFitColumn(sheet, 1);
            ICRACell.CellStyle = HeaderStyle;
            #endregion

            #region Report Name
            ICRArow = sheet.CreateRow(4);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrReportName);
            HeaderStyle.Alignment = HorizontalAlignment.Left;
            ICRACell.CellStyle = HeaderStyle;
            #endregion

            #region Header creation in the Excel

            XSSFCellStyle style = (XSSFCellStyle)workbook.CreateCellStyle();
            XSSFColor colorToFill = new XSSFColor(new byte[] { 68, 114, 196 });//{ 51, 204, 204 }//Color.Blue);
            style.SetFillForegroundColor(colorToFill);
            IFont font = workbook.CreateFont();
            font.Color = NPOI.SS.UserModel.IndexedColors.White.Index;
            font.IsBold = true;
            style.SetFont(font);
            style.FillPattern = NPOI.SS.UserModel.FillPattern.SolidForeground;
            style.VerticalAlignment = NPOI.SS.UserModel.VerticalAlignment.Center;
            style.Alignment = NPOI.SS.UserModel.HorizontalAlignment.Center;
            style.BorderBottom = style.BorderLeft = style.BorderTop = style.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            //Creating Table Header Coordinates --> THCoordinates { Dictionary<int, Dictionary<int, Tuple<int, int, int, int>>> }
            Dictionary<int, Dictionary<int, Tuple<int, int, int, int>>> THCoordinates = new Dictionary<int, Dictionary<int, Tuple<int, int, int, int>>>();
            IEnumerable<TableHeaderEntity>[] TableHeaders = new TableHeaderEntity[listTableHeaderRows.Count()][];
            int totalColloumns = listTableHeaderRows.ElementAt(0).Sum(x => x.Colspan);
            bool[][] booked = new bool[listTableHeaderRows.Count()][];
            for (int i = 0; i < booked.Count(); i++) { booked[i] = new bool[totalColloumns]; }
            TableHeaderEntity thEntity;
            for (int headerNo = 0; headerNo < listTableHeaderRows.Count(); headerNo++)
            {
                sheet.CreateRow(5 + headerNo);
                TableHeaders[headerNo] = listTableHeaderRows.ElementAt(headerNo).OrderBy(x => x.Position).ToArray();
                if (!THCoordinates.ContainsKey(headerNo))
                    THCoordinates.Add(headerNo, new Dictionary<int, Tuple<int, int, int, int>>());

                int avalaibleCell = 0;
                for (int collNo = 0; collNo < TableHeaders[headerNo].Count(); collNo++)
                {
                    thEntity = TableHeaders[headerNo].ElementAt(collNo);
                    for (int k = avalaibleCell; k < totalColloumns; k++)
                    {
                        if (!booked[headerNo][k]) break;
                        else avalaibleCell++;
                    }
                    if (!THCoordinates[headerNo].ContainsKey(collNo))
                        THCoordinates[headerNo].Add(collNo, new Tuple<int, int, int, int>(headerNo + 5, headerNo + 5 + (thEntity.Rowspan ?? 1) - 1, avalaibleCell, (avalaibleCell += thEntity.Colspan) - 1));
                    for (int L = headerNo; L < (thEntity.Rowspan ?? 1); L++)
                        for (int k = THCoordinates[headerNo][collNo].Item3; k <= THCoordinates[headerNo][collNo].Item4; k++)
                            booked[L][k] = true;
                }
            }
            //Adding Table Headers
            ICell cell; IRow headerRow; CellRangeAddress cellRangeAddress;
            //foreach (var headerNo in THCoordinates.Keys)
            //{
            //    sheet.CreateRow(5 + headerNo);
            //    foreach (var collNo in THCoordinates[headerNo].Keys)
            //    {
            //        for (int i = THCoordinates[headerNo][collNo].Item1; i <= THCoordinates[headerNo][collNo].Item2; i++)
            //        {
            //            for (int j = THCoordinates[headerNo][collNo].Item3 + 1; j <= THCoordinates[headerNo][collNo].Item4; j++)
            //            {
            //                headerRow = sheet.GetRow(5 + headerNo);
            //                cell = headerRow.CreateCell(j);
            //                cell.CellStyle = style;
            //            }
            //        }
            //    }
            //}
            for (int headerNo = 0; headerNo < listTableHeaderRows.Count(); headerNo++)
            {
                //sheet.CreateRow(5 + headerNo);
                headerRow = sheet.GetRow(5 + headerNo);
                headerRow.HeightInPoints = 30;
                var listHeaderFinal = listTableHeaderRows.ElementAt(headerNo).OrderBy(x => x.Position);
                string TextAlignFirstRow = listHeaderFinal.Count() > 0 ? listHeaderFinal.ElementAt(0).TextAlign : string.Empty;
                Tuple<int, int, int, int> coordinates;
                for (int collNo = 0; collNo < listHeaderFinal.Count(); collNo++)
                {
                    coordinates = THCoordinates[headerNo][collNo];
                    cellRangeAddress = new CellRangeAddress(coordinates.Item1, coordinates.Item2, coordinates.Item3, coordinates.Item4);
                    style.Alignment = collNo == 0 ? ((string.IsNullOrEmpty(TextAlignFirstRow) || TextAlignFirstRow == EnumTextAlign.left.ToString()) ? HorizontalAlignment.Left
                                  : TextAlignFirstRow == EnumTextAlign.center.ToString() ? HorizontalAlignment.Center : HorizontalAlignment.Right) : HorizontalAlignment.Center;
                    //cell.CellStyle = style;
                    for (int cellRow = cellRangeAddress.FirstRow; cellRow <= cellRangeAddress.LastRow; cellRow++)
                    {
                        for (int cellColl = cellRangeAddress.FirstColumn; cellColl <= cellRangeAddress.LastColumn; cellColl++)
                        {
                            headerRow = sheet.GetRow(cellRow);
                            cell = headerRow.CreateCell(cellColl);
                            cell.CellStyle = style;
                            //cell.SetCellValue(string.Empty);
                        }
                    }
                    headerRow = sheet.GetRow(5 + headerNo);

                    //cell = headerRow.CreateCell(coordinates.Item3);
                    cell = headerRow.GetCell(cellRangeAddress.FirstColumn);
                    cell.SetCellValue(listHeaderFinal.ElementAt(collNo).ColumnName);
                    NPOIWrite.AutoFitColumn(sheet, collNo);


                    RegionUtil.SetBorderLeft((int)BorderStyle.Thin, cellRangeAddress, sheet);
                    RegionUtil.SetBorderTop((int)BorderStyle.Thin, cellRangeAddress, sheet);
                    RegionUtil.SetBorderRight((int)BorderStyle.Thin, cellRangeAddress, sheet);
                    RegionUtil.SetBorderBottom((int)BorderStyle.Thin, cellRangeAddress, sheet);
                    NPOIWrite.CellMerged(sheet, coordinates.Item1, coordinates.Item2, coordinates.Item3, coordinates.Item4);

                }
            }

            List<TableHeaderEntity> FinalTableHeaders = new List<TableHeaderEntity>();
            for (int headerNo = 0; headerNo < TableHeaders.Count(); headerNo++)
            {
                for (int collNo = 0; collNo < TableHeaders[headerNo].Count(); collNo++)
                {
                    thEntity = TableHeaders[headerNo].ElementAt(collNo);
                    if (thEntity.Colspan == 1 && THCoordinates[headerNo][collNo].Item2 == 4 + TableHeaders.Count())
                    {
                        thEntity.Position = THCoordinates[headerNo][collNo].Item3;
                        FinalTableHeaders.Add(thEntity);
                    }
                }
            }
            #endregion

            #region Cell Style For Even Row

            #region With DecimalFormat AUM
            XSSFCellStyle aumAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor aumcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            aumAllCellStyleEvenDecFrmt.SetFillForegroundColor(aumcolorToFillEvenWtoutDec);
            aumAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat aumformatEven = workbook.CreateDataFormat();
            aumAllCellStyleEvenDecFrmt.DataFormat = aumformatEven.GetFormat(aumDecimalFormat);
            aumAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;
            //percentage format

            XSSFCellStyle cellStylePercentEven = (XSSFCellStyle)workbook.CreateCellStyle();
            cellStylePercentEven.DataFormat = HSSFDataFormat.GetBuiltinFormat("0.00%");
            cellStylePercentEven.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            cellStylePercentEven.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            cellStylePercentEven.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            cellStylePercentEven.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillFstClmnEvenpercent = new XSSFColor(new byte[] { 176, 196, 222 });
            cellStylePercentEven.SetFillForegroundColor(colorToFillFstClmnEvenpercent);
            cellStylePercentEven.FillPattern = FillPattern.SolidForeground;
            cellStylePercentEven.Alignment = HorizontalAlignment.Left;
            cellStylePercentEven.VerticalAlignment = VerticalAlignment.Center;
            cellStylePercentEven.SetDataFormat(workbook.CreateDataFormat().GetFormat("0.00%"));

            XSSFCellStyle cellStylePercentOdd = (XSSFCellStyle)workbook.CreateCellStyle();
            cellStylePercentOdd.DataFormat = HSSFDataFormat.GetBuiltinFormat("0.00%");
            cellStylePercentOdd.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            cellStylePercentOdd.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            cellStylePercentOdd.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            cellStylePercentOdd.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillFstClmnOddpercent = new XSSFColor(new byte[] { 255, 255, 255 });
            cellStylePercentOdd.SetFillForegroundColor(colorToFillFstClmnOddpercent);
            cellStylePercentOdd.FillPattern = FillPattern.SolidForeground;
            cellStylePercentOdd.Alignment = HorizontalAlignment.Left;
            cellStylePercentOdd.VerticalAlignment = VerticalAlignment.Center;
            cellStylePercentOdd.SetDataFormat(workbook.CreateDataFormat().GetFormat("0.00%"));

            /// Number Format ////
            XSSFCellStyle aumAllCellStyleEvenDecFrmtWNum = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleEvenDecFrmtWNum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmtWNum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmtWNum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmtWNum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor aumcolorToFillEvenWtoutDecWNum = new XSSFColor(new byte[] { 176, 196, 222 });
            aumAllCellStyleEvenDecFrmtWNum.SetFillForegroundColor(aumcolorToFillEvenWtoutDecWNum);
            aumAllCellStyleEvenDecFrmtWNum.FillPattern = FillPattern.SolidForeground;
            IDataFormat aumformatEvenWNum = workbook.CreateDataFormat();
            aumAllCellStyleEvenDecFrmtWNum.DataFormat = aumformatEvenWNum.GetFormat(aumNumberDecimalFormat);
            aumAllCellStyleEvenDecFrmtWNum.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleEvenDecFrmtWNum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Return
            XSSFCellStyle retAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            retAllCellStyleEvenDecFrmt.SetFillForegroundColor(retcolorToFillEvenWtoutDec);
            retAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatEven = workbook.CreateDataFormat();
            retAllCellStyleEvenDecFrmt.DataFormat = retformatEven.GetFormat(retDecimalFormat);
            retAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            retAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;


            ////Number Format ////
            XSSFCellStyle retAllCellStyleEvenDecFrmtWnum = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleEvenDecFrmtWnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmtWnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmtWnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmtWnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillEvenWtoutDecWnum = new XSSFColor(new byte[] { 176, 196, 222 });
            retAllCellStyleEvenDecFrmtWnum.SetFillForegroundColor(retcolorToFillEvenWtoutDecWnum);
            retAllCellStyleEvenDecFrmtWnum.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatEvenWnum = workbook.CreateDataFormat();
            retAllCellStyleEvenDecFrmtWnum.DataFormat = retformatEvenWnum.GetFormat(retNumberDecimalFormat);
            retAllCellStyleEvenDecFrmtWnum.Alignment = HorizontalAlignment.Center;
            retAllCellStyleEvenDecFrmtWnum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Nav
            XSSFCellStyle navAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor navcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            navAllCellStyleEvenDecFrmt.SetFillForegroundColor(navcolorToFillEvenWtoutDec);
            navAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat navformatEven = workbook.CreateDataFormat();
            navAllCellStyleEvenDecFrmt.DataFormat = navformatEven.GetFormat(navDecimalFormat);
            navAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            navAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;


            /// Number Format ////
            XSSFCellStyle navAllCellStyleEvenDecFrmtWnnum = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleEvenDecFrmtWnnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmtWnnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmtWnnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmtWnnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor navcolorToFillEvenWtoutDecWnnum = new XSSFColor(new byte[] { 176, 196, 222 });
            navAllCellStyleEvenDecFrmtWnnum.SetFillForegroundColor(navcolorToFillEvenWtoutDecWnnum);
            navAllCellStyleEvenDecFrmtWnnum.FillPattern = FillPattern.SolidForeground;
            IDataFormat navformatEvenWnnum = workbook.CreateDataFormat();
            navAllCellStyleEvenDecFrmtWnnum.DataFormat = navformatEvenWnnum.GetFormat(navNumberDecimalFormat);
            navAllCellStyleEvenDecFrmtWnnum.Alignment = HorizontalAlignment.Center;
            navAllCellStyleEvenDecFrmtWnnum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Other
            XSSFCellStyle otherAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            otherAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othercolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            otherAllCellStyleEvenDecFrmt.SetFillForegroundColor(othercolorToFillEvenWtoutDec);
            otherAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat otherformatEven = workbook.CreateDataFormat();
            otherAllCellStyleEvenDecFrmt.DataFormat = otherformatEven.GetFormat(othDecimalFormat);
            otherAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            otherAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            /// Number Format ///
            XSSFCellStyle otherAllCellStyleEvenDecFrmtWnum = (XSSFCellStyle)workbook.CreateCellStyle();
            otherAllCellStyleEvenDecFrmtWnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmtWnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmtWnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmtWnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othercolorToFillEvenWtoutDecWnum = new XSSFColor(new byte[] { 176, 196, 222 });
            otherAllCellStyleEvenDecFrmtWnum.SetFillForegroundColor(othercolorToFillEvenWtoutDecWnum);
            otherAllCellStyleEvenDecFrmtWnum.FillPattern = FillPattern.SolidForeground;
            IDataFormat otherformatEvenWnum = workbook.CreateDataFormat();
            otherAllCellStyleEvenDecFrmtWnum.DataFormat = otherformatEvenWnum.GetFormat(othNumberDecimalFormat);
            otherAllCellStyleEvenDecFrmtWnum.Alignment = HorizontalAlignment.Center;
            otherAllCellStyleEvenDecFrmtWnum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Ratio
            XSSFCellStyle ratAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor ratcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            ratAllCellStyleEvenDecFrmt.SetFillForegroundColor(ratcolorToFillEvenWtoutDec);
            ratAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat ratformatEven = workbook.CreateDataFormat();
            ratAllCellStyleEvenDecFrmt.DataFormat = ratformatEven.GetFormat(ratioDecimalFormat);
            ratAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle ratAllCellStyleEvenDecFrmtWth = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleEvenDecFrmtWth.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmtWth.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmtWth.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmtWth.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor ratcolorToFillEvenWtoutDecwth = new XSSFColor(new byte[] { 176, 196, 222 });
            ratAllCellStyleEvenDecFrmtWth.SetFillForegroundColor(ratcolorToFillEvenWtoutDecwth);
            ratAllCellStyleEvenDecFrmtWth.FillPattern = FillPattern.SolidForeground;
            IDataFormat ratformatEvenWth = workbook.CreateDataFormat();
            ratAllCellStyleEvenDecFrmtWth.DataFormat = ratformatEvenWth.GetFormat(ratioNumberDecimalFormat);
            ratAllCellStyleEvenDecFrmtWth.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleEvenDecFrmtWth.VerticalAlignment = VerticalAlignment.Center;
            #endregion


            #region No Format
            XSSFCellStyle AllCellStyleEven = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleEven.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillEven = new XSSFColor(new byte[] { 176, 196, 222 });
            AllCellStyleEven.SetFillForegroundColor(colorToFillEven);
            AllCellStyleEven.FillPattern = FillPattern.SolidForeground;
            AllCellStyleEven.Alignment = HorizontalAlignment.Center;
            AllCellStyleEven.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #endregion

            #region Cell Style For Odd Row

            #region With Decimal Format AUM
            XSSFCellStyle aumAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor AUMcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            aumAllCellStyleOddDec.SetFillForegroundColor(AUMcolorToFillOddDec);
            aumAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat AUMformatOddDec = workbook.CreateDataFormat();
            aumAllCellStyleOddDec.DataFormat = AUMformatOddDec.GetFormat(aumDecimalFormat);
            aumAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle aumAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor AUMcolorToFillOddDecWnf = new XSSFColor(new byte[] { 255, 255, 255 });
            aumAllCellStyleOddDecWnuf.SetFillForegroundColor(AUMcolorToFillOddDecWnf);
            aumAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat AUMformatOddDecWnuf = workbook.CreateDataFormat();
            aumAllCellStyleOddDecWnuf.DataFormat = AUMformatOddDecWnuf.GetFormat(aumNumberDecimalFormat);
            aumAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With Decimal Format Return
            XSSFCellStyle retAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor RETcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            retAllCellStyleOddDec.SetFillForegroundColor(RETcolorToFillOddDec);
            retAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat RETformatOddDec = workbook.CreateDataFormat();
            retAllCellStyleOddDec.DataFormat = RETformatOddDec.GetFormat(retDecimalFormat);
            retAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            retAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle retAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor RETcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            retAllCellStyleOddDecWnuf.SetFillForegroundColor(RETcolorToFillOddDecWnuf);
            retAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat RETformatOddDecWnuf = workbook.CreateDataFormat();
            retAllCellStyleOddDecWnuf.DataFormat = RETformatOddDecWnuf.GetFormat(retNumberDecimalFormat);
            retAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            retAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With Decimal Format Nav
            XSSFCellStyle navAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor naVcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            navAllCellStyleOddDec.SetFillForegroundColor(naVcolorToFillOddDec);
            navAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat naVformatOddDec = workbook.CreateDataFormat();
            navAllCellStyleOddDec.DataFormat = naVformatOddDec.GetFormat(navDecimalFormat);
            navAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            navAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            XSSFCellStyle navAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor naVcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            navAllCellStyleOddDecWnuf.SetFillForegroundColor(naVcolorToFillOddDecWnuf);
            navAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat naVformatOddDecWnuf = workbook.CreateDataFormat();
            navAllCellStyleOddDecWnuf.DataFormat = naVformatOddDecWnuf.GetFormat(navNumberDecimalFormat);
            navAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            navAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion


            #region With Decimal Format Other
            XSSFCellStyle othAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            othAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            othAllCellStyleOddDec.SetFillForegroundColor(othcolorToFillOddDec);
            othAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat othformatOddDec = workbook.CreateDataFormat();
            othAllCellStyleOddDec.DataFormat = othformatOddDec.GetFormat(othDecimalFormat);
            othAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            othAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            XSSFCellStyle othAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            othAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            othAllCellStyleOddDecWnuf.SetFillForegroundColor(othcolorToFillOddDecWnuf);
            othAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat othformatOddDecWnuf = workbook.CreateDataFormat();
            othAllCellStyleOddDecWnuf.DataFormat = othformatOddDecWnuf.GetFormat(othNumberDecimalFormat);
            othAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            othAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion


            #region With Decimal Format ratio
            XSSFCellStyle ratAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            ratAllCellStyleOddDec.SetFillForegroundColor(retcolorToFillOddDec);
            ratAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatOddDec = workbook.CreateDataFormat();
            ratAllCellStyleOddDec.DataFormat = retformatOddDec.GetFormat(ratioDecimalFormat);
            ratAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            XSSFCellStyle ratAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            ratAllCellStyleOddDecWnuf.SetFillForegroundColor(retcolorToFillOddDecWnuf);
            ratAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatOddDecWnuf = workbook.CreateDataFormat();
            ratAllCellStyleOddDecWnuf.DataFormat = retformatOddDecWnuf.GetFormat(ratioNumberDecimalFormat);
            ratAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region No Format
            XSSFCellStyle AllCellStyleOdd = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleOdd.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillOdd = new XSSFColor(new byte[] { 255, 255, 255 });
            AllCellStyleOdd.SetFillForegroundColor(colorToFillOdd);
            AllCellStyleOdd.FillPattern = FillPattern.SolidForeground;
            AllCellStyleOdd.Alignment = HorizontalAlignment.Center;
            AllCellStyleOdd.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #endregion

            #region Cell Style For First Column Even Row
            XSSFCellStyle AllCellStyleFstColmEven = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleFstColmEven.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillFstClmnEven = new XSSFColor(new byte[] { 176, 196, 222 });
            AllCellStyleFstColmEven.SetFillForegroundColor(colorToFillFstClmnEven);
            AllCellStyleFstColmEven.FillPattern = FillPattern.SolidForeground;
            AllCellStyleFstColmEven.Alignment = HorizontalAlignment.Left;
            AllCellStyleFstColmEven.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region Cell Style For First Column Odd Row
            XSSFCellStyle AllCellStyleFstColmOdd = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleFstColmOdd.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillFstClmnOdd = new XSSFColor(new byte[] { 255, 255, 255 });
            AllCellStyleFstColmOdd.SetFillForegroundColor(colorToFillFstClmnOdd);
            AllCellStyleFstColmOdd.FillPattern = FillPattern.SolidForeground;
            AllCellStyleFstColmOdd.Alignment = HorizontalAlignment.Left;
            AllCellStyleFstColmOdd.VerticalAlignment = VerticalAlignment.Center;
            #endregion
            #region Without Decimal Number Format Even Row
            XSSFCellStyle intAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            intAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            intAllCellStyleEvenDecFrmt.SetFillForegroundColor(intcolorToFillEvenWtoutDec);
            intAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat intformatEven = workbook.CreateDataFormat();
            intAllCellStyleEvenDecFrmt.DataFormat = intformatEven.GetFormat(intNumberWithoutDecimalFormat);
            intAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            intAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle intSimpleAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            intSimpleAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intSimplecolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            intSimpleAllCellStyleEvenDecFrmt.SetFillForegroundColor(intSimplecolorToFillEvenWtoutDec);
            intSimpleAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            intSimpleAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            intSimpleAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;
            #endregion
            #region Without Decimal Number Format Odd Row
            XSSFCellStyle intAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            intAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            intAllCellStyleOddDec.SetFillForegroundColor(intcolorToFillOddDec);
            intAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat intformatOddDec = workbook.CreateDataFormat();
            intAllCellStyleOddDec.DataFormat = intformatOddDec.GetFormat(intNumberWithoutDecimalFormat);
            intAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            intAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle intSimpleAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            intSimpleAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intSimplecolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            intSimpleAllCellStyleOddDec.SetFillForegroundColor(intSimplecolorToFillOddDec);
            intSimpleAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            intSimpleAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            intSimpleAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;
            #endregion
            #region With DateTime format
            var DateTimeFormat = ubs.DateFormat;
            XSSFCellStyle DateTimeAllCellStyleEvenFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            DateTimeAllCellStyleEvenFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleEvenFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleEvenFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleEvenFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor DateTimecolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            DateTimeAllCellStyleEvenFrmt.SetFillForegroundColor(DateTimecolorToFillEvenWtoutDec);
            DateTimeAllCellStyleEvenFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat DateTimeformatEven = workbook.CreateDataFormat();
            DateTimeAllCellStyleEvenFrmt.DataFormat = DateTimeformatEven.GetFormat(DateTimeFormat);
            DateTimeAllCellStyleEvenFrmt.Alignment = HorizontalAlignment.Center;
            DateTimeAllCellStyleEvenFrmt.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle DateTimeAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            DateTimeAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor DateTimecolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            DateTimeAllCellStyleOddDec.SetFillForegroundColor(DateTimecolorToFillOddDec);
            DateTimeAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat DateTimeformatOddDec = workbook.CreateDataFormat();
            DateTimeAllCellStyleOddDec.DataFormat = DateTimeformatOddDec.GetFormat(DateTimeFormat);
            DateTimeAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            DateTimeAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            #endregion
            #region Value added to the Excel

            #region Added by Subrata on 22 Feb 2018
            bool IsNumericKey = false;
            bool IsNumericValue = false;
            var AllListData = listData.SelectMany(x => x.LstKeyValuePair).ToArray();
            var AllDataKey = AllListData.Select(x => x.Key).Distinct().ToArray();
            int ValueRes;
            IsNumericKey = int.TryParse(AllDataKey[0], out ValueRes);
            #endregion

            int incr = 5 + listTableHeaderRows.Count();
            bool isNumeric = false;
            foreach (var item in listData)
            {
                if (item.LstKeyValuePair.Count() > 0)
                {
                    int value;
                    isNumeric = int.TryParse(item.LstKeyValuePair[0].Key, out value);
                }
                var dataRow = sheet.CreateRow(incr);
                sheet.GetRow(incr).HeightInPoints = 20;
                if (isNumeric == true)
                {
                    var cellValues = (from i in item.LstKeyValuePair
                                      from j in FinalTableHeaders
                                      where i.Key.ToString() == j.Position.ToString()
                                      orderby j.Position
                                      select new
                                      {
                                          IsNum = j.IsNumberFormatReq,
                                          DecType = j.DecFormatType,
                                          Value = i.Value,
                                          IsMixedType = j.IsMixedValueType,
                                          IsPercentageType = j.IsPercentageValueType,
                                          IsDateTimeStringMixedType = j.IsDateTimeStringMixedType,
                                          IsDateTimeType = j.IsDateTimeType,
                                      }).ToArray();

                    for (int k = 0; k < cellValues.Length; k++)
                    {
                        var datacell = dataRow.CreateCell(k);
                        if (cellValues[k].DecType != DecimalFormatType.NoDecimalReq)
                        {
                            double OutVal;
                            if (string.IsNullOrEmpty(cellValues[k].Value) || cellValues[k].Value == BlankData || !double.TryParse(cellValues[k].Value, out OutVal))
                            {
                                datacell.SetCellValue(cellValues[k].Value);
                                datacell.CellStyle = k > 0 ? (incr % 2 == 0 ? AllCellStyleEven : AllCellStyleOdd) : (incr % 2 == 0 ? AllCellStyleFstColmEven : AllCellStyleFstColmOdd);
                                //if (k > 0)
                                //{
                                //    if (incr % 2 == 0)
                                //        datacell.CellStyle = AllCellStyleEven;
                                //    else
                                //        datacell.CellStyle = AllCellStyleOdd;

                                //}
                                //else
                                //{
                                //    if (incr % 2 == 0)
                                //        datacell.CellStyle = AllCellStyleFstColmEven;
                                //    else
                                //        datacell.CellStyle = AllCellStyleFstColmOdd;
                                //}

                            }
                            else
                            {
                                datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));

                                if (k > 0)
                                {
                                    if (cellValues[k].DecType == DecimalFormatType.AUM)
                                    {
                                        datacell.CellStyle = (incr % 2 == 0) ? (cellValues[k].IsNum ? aumAllCellStyleEvenDecFrmtWNum : aumAllCellStyleEvenDecFrmt) : (cellValues[k].IsNum ? aumAllCellStyleOddDecWnuf : aumAllCellStyleOddDec);
                                        //if (incr % 2 == 0)
                                        //{
                                        //    if (cellValues[k].IsNum == true)
                                        //    {

                                        //        datacell.CellStyle = aumAllCellStyleEvenDecFrmtWNum;
                                        //    }
                                        //    else
                                        //    {
                                        //        datacell.CellStyle = aumAllCellStyleEvenDecFrmt;
                                        //    }
                                        //}
                                        //else
                                        //{
                                        //    if (cellValues[k].IsNum == true)
                                        //    {
                                        //        datacell.CellStyle = aumAllCellStyleOddDecWnuf;
                                        //    }
                                        //    else
                                        //    {
                                        //        datacell.CellStyle = aumAllCellStyleOddDec;
                                        //    }
                                        //}
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.NAV)
                                    {
                                        datacell.CellStyle = (incr % 2 == 0) ? (cellValues[k].IsNum ? navAllCellStyleEvenDecFrmtWnnum : navAllCellStyleEvenDecFrmt) : (cellValues[k].IsNum ? navAllCellStyleOddDecWnuf : navAllCellStyleOddDec);
                                        //if (incr % 2 == 0)
                                        //{
                                        //    if (cellValues[k].IsNum == true)
                                        //    {
                                        //        datacell.CellStyle = navAllCellStyleEvenDecFrmtWnnum;
                                        //    }
                                        //    else
                                        //    {
                                        //        datacell.CellStyle = navAllCellStyleEvenDecFrmt;
                                        //    }
                                        //}
                                        //else
                                        //{
                                        //    if (cellValues[k].IsNum == true)
                                        //    {
                                        //        datacell.CellStyle = navAllCellStyleOddDecWnuf;
                                        //    }
                                        //    else
                                        //    {
                                        //        datacell.CellStyle = navAllCellStyleOddDec;
                                        //    }

                                        //}
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.OTHER)
                                    {
                                        datacell.CellStyle = (incr % 2 == 0) ? (cellValues[k].IsNum ? otherAllCellStyleEvenDecFrmtWnum : otherAllCellStyleEvenDecFrmt) : (cellValues[k].IsNum ? othAllCellStyleOddDecWnuf : othAllCellStyleOddDec);

                                        //if (incr % 2 == 0)
                                        //{
                                        //    if (cellValues[k].IsNum == true)
                                        //    {
                                        //        datacell.CellStyle = otherAllCellStyleEvenDecFrmtWnum;
                                        //    }
                                        //    else
                                        //    {
                                        //        datacell.CellStyle = otherAllCellStyleEvenDecFrmt;
                                        //    }
                                        //}

                                        //else
                                        //{
                                        //    if (cellValues[k].IsNum == true)
                                        //    {
                                        //        datacell.CellStyle = othAllCellStyleOddDecWnuf;
                                        //    }
                                        //    else
                                        //    {

                                        //        datacell.CellStyle = othAllCellStyleOddDec;
                                        //    }

                                        //}
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.RATIO)
                                    {

                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = ratAllCellStyleEvenDecFrmtWth;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = ratAllCellStyleEvenDecFrmt;
                                            }
                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = ratAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = ratAllCellStyleOddDec;
                                            }
                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.RETURN)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = retAllCellStyleEvenDecFrmtWnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = retAllCellStyleEvenDecFrmt;
                                            }

                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = retAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = retAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.IntegerWithOutDecimal)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = intAllCellStyleEvenDecFrmt;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = intSimpleAllCellStyleEvenDecFrmt;
                                            }

                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = intAllCellStyleOddDec;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = intSimpleAllCellStyleOddDec;
                                            }

                                        }
                                    }

                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }

                            }

                        }
                        else
                        {
                            double OutVal;
                            if (double.TryParse(cellValues[k].Value, out OutVal) && !cellValues[k].IsMixedType && !cellValues[k].IsPercentageType)
                            {
                                datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                                if (k > 0)
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;

                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }
                            }
                            else if (cellValues[k].IsPercentageType)
                            {
                                if (double.TryParse(cellValues[k].Value, out OutVal))
                                {
                                    datacell.SetCellValue(OutVal / 100);
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = cellStylePercentEven;
                                    else
                                        datacell.CellStyle = cellStylePercentOdd;
                                }
                                else
                                {
                                    datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleEven;
                                        else
                                            datacell.CellStyle = AllCellStyleOdd;
                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }
                                }
                            }
                            else if (cellValues[k].IsDateTimeType)
                            {
                                DateTime OutValdt;
                                if (DateTime.TryParse(cellValues[k].Value, out OutValdt))
                                {
                                    datacell.SetCellValue(Convert.ToDateTime(cellValues[k].Value));
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = DateTimeAllCellStyleEvenFrmt;
                                    else
                                        datacell.CellStyle = DateTimeAllCellStyleOddDec;
                                }
                                else
                                {
                                    datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleEven;
                                        else
                                            datacell.CellStyle = AllCellStyleOdd;

                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }
                                }
                            }
                            else if (cellValues[k].IsDateTimeStringMixedType)
                            {
                                DateTime OutValdt;
                                if (DateTime.TryParse(cellValues[k].Value, out OutValdt))
                                {
                                    datacell.SetCellValue(Convert.ToDateTime(cellValues[k].Value));
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = DateTimeAllCellStyleEvenFrmt;
                                    else
                                        datacell.CellStyle = DateTimeAllCellStyleOddDec;
                                }
                                else
                                {
                                    datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleEven;
                                        else
                                            datacell.CellStyle = AllCellStyleOdd;

                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }
                                }
                            }
                            else
                            {
                                datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                if (k > 0)
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;

                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }
                            }
                        }


                    }
                    incr++;
                }
                else
                {
                    var cellValues = (from i in item.LstKeyValuePair
                                      from j in FinalTableHeaders
                                      where i.Key == j.ColumnName
                                      orderby j.Position
                                      select new
                                      {
                                          IsNum = j.IsNumberFormatReq,
                                          DecType = j.DecFormatType,
                                          IsMixedType = j.IsMixedValueType,
                                          IsPercentageType = j.IsPercentageValueType,
                                          IsDateTimeStringMixedType = j.IsDateTimeStringMixedType,
                                          IsDateTimeType = j.IsDateTimeType,
                                          Value = i.Value
                                      }).ToArray();

                    for (int k = 0; k < cellValues.Length; k++)
                    {
                        var datacell = dataRow.CreateCell(k);
                        if (cellValues[k].DecType != DecimalFormatType.NoDecimalReq)
                        {
                            double OutVal;
                            if (string.IsNullOrEmpty(cellValues[k].Value) || cellValues[k].Value == BlankData || !double.TryParse(cellValues[k].Value, out OutVal))
                            {
                                datacell.SetCellValue(cellValues[k].Value);
                                if (k > 0)
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;
                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }

                            }
                            else
                            {
                                datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                                if (k > 0)
                                {
                                    if (cellValues[k].DecType == DecimalFormatType.AUM)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {

                                                datacell.CellStyle = aumAllCellStyleEvenDecFrmtWNum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = aumAllCellStyleEvenDecFrmt;
                                            }
                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = aumAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = aumAllCellStyleOddDec;
                                            }
                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.NAV)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = navAllCellStyleEvenDecFrmtWnnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = navAllCellStyleEvenDecFrmt;
                                            }
                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = navAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = navAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.OTHER)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = otherAllCellStyleEvenDecFrmtWnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = otherAllCellStyleEvenDecFrmt;
                                            }
                                        }

                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = othAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {

                                                datacell.CellStyle = othAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.RATIO)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = ratAllCellStyleEvenDecFrmtWth;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = ratAllCellStyleEvenDecFrmt;
                                            }
                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = ratAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = ratAllCellStyleOddDec;
                                            }
                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.RETURN)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = retAllCellStyleEvenDecFrmtWnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = retAllCellStyleEvenDecFrmt;
                                            }

                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = retAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = retAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.IntegerWithOutDecimal)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = intAllCellStyleEvenDecFrmt;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = intSimpleAllCellStyleEvenDecFrmt;
                                            }

                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = intAllCellStyleOddDec;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = intSimpleAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }

                            }

                        }
                        else
                        {
                            double OutVal;
                            if (double.TryParse(cellValues[k].Value, out OutVal) && !cellValues[k].IsMixedType && !cellValues[k].IsPercentageType)
                            {
                                datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                                if (k > 0)
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;

                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }
                            }
                            else if (cellValues[k].IsPercentageType)
                            {
                                if (double.TryParse(cellValues[k].Value, out OutVal))
                                {
                                    datacell.SetCellValue(OutVal / 100);
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = cellStylePercentEven;
                                    else
                                        datacell.CellStyle = cellStylePercentOdd;
                                }
                                else
                                {
                                    datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleEven;
                                        else
                                            datacell.CellStyle = AllCellStyleOdd;
                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }
                                }
                            }
                            else if (cellValues[k].IsDateTimeType)
                            {
                                DateTime OutValdt;
                                if (DateTime.TryParse(cellValues[k].Value, out OutValdt))
                                {
                                    datacell.SetCellValue(Convert.ToDateTime(cellValues[k].Value));
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = DateTimeAllCellStyleEvenFrmt;
                                    else
                                        datacell.CellStyle = DateTimeAllCellStyleOddDec;
                                }
                                else
                                {
                                    datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleEven;
                                        else
                                            datacell.CellStyle = AllCellStyleOdd;

                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }
                                }
                            }
                            else if (cellValues[k].IsDateTimeStringMixedType)
                            {
                                DateTime OutValdt;
                                if (DateTime.TryParse(cellValues[k].Value, out OutValdt))
                                {
                                    datacell.SetCellValue(Convert.ToDateTime(cellValues[k].Value));
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = DateTimeAllCellStyleEvenFrmt;
                                    else
                                        datacell.CellStyle = DateTimeAllCellStyleOddDec;
                                }
                                else
                                {
                                    datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleEven;
                                        else
                                            datacell.CellStyle = AllCellStyleOdd;

                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }
                                }
                            }
                            else
                            {
                                datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                if (k > 0)
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;

                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }
                            }
                        }


                    }
                    incr++;
                }

            }
            #endregion

            for (int i = 0; i < totalColloumns; i++)
                sheet.AutoSizeColumn(i, true);
            if (sheet.GetColumnWidth(0) < 11072)
                sheet.SetColumnWidth(0, 11072);

            #region Logo
            try
            {
                if (!string.IsNullOrEmpty(LogoPath))
                {
                    XSSFDrawing patriarch = (XSSFDrawing)sheet.CreateDrawingPatriarch();
                    XSSFClientAnchor anchor;
                    anchor = new XSSFClientAnchor(0, 0, 0, 255, 0, 0, 0, 3);
                    anchor.AnchorType = AnchorType.DontMoveAndResize;
                    XSSFPicture picture = (XSSFPicture)patriarch.CreatePicture(anchor, LoadImage(LogoPath, workbook, PictureType.PNG));
                    double x1 = .25;
                    double y1 = .75;
                    picture.Resize(x1, y1);
                    picture.LineStyle = LineStyle.None;
                }
            }
            catch (Exception ex)
            {
            }

            #endregion

            //#region Source, Date As On and Report Generated On
            //ICRArow = sheet.CreateRow(incr + 3);
            //ICRArow.CreateCell(0);
            //ICRACell = ICRArow.CreateCell(0);
            //ICRACell.SetCellValue(StrSource);

            //ICRArow = sheet.CreateRow(incr + 4);
            //ICRArow.CreateCell(0);
            //ICRACell = ICRArow.CreateCell(0);
            //ICRACell.SetCellValue(StrDateAsOn);

            //ICRArow = sheet.CreateRow(incr + 5);
            //ICRArow.CreateCell(0);
            //ICRACell = ICRArow.CreateCell(0);
            //ICRACell.SetCellValue(StrReportGeneratedOn);
            //#endregion

            #region Sheet Two Logo
            try
            {
                if (!string.IsNullOrEmpty(LogoPath))
                {
                    XSSFDrawing patriarch = (XSSFDrawing)sheetTwo.CreateDrawingPatriarch();
                    XSSFClientAnchor anchor;
                    anchor = new XSSFClientAnchor(0, 0, 0, 255, 0, 0, 0, 3);
                    anchor.AnchorType = AnchorType.DontMoveAndResize;
                    XSSFPicture picture = (XSSFPicture)patriarch.CreatePicture(anchor, LoadImage(LogoPath, workbook, PictureType.PNG));
                    double x1 = 1.10;
                    double y1 = 1.10;
                    picture.Resize(x1, y1);
                    picture.LineStyle = LineStyle.None;
                }
            }
            catch (Exception ex)
            {
            }
            #endregion

            #region Disclaimer Sheet
            var Row = sheetTwo.CreateRow(1);
            var cellSheetTwo = Row.CreateCell(7);
            cellSheetTwo.SetCellValue(StrHeader1);
            cellSheetTwo.CellStyle = HeaderStyle;

            Row = sheetTwo.CreateRow(4);
            ICell Cell;
            for (int i = 0; i < 17; i++)
            {
                Cell = Row.CreateCell(i);

                XSSFCellStyle declationstyle = (XSSFCellStyle)workbook.CreateCellStyle();

                declationstyle.Alignment = HorizontalAlignment.Left;
                declationstyle.VerticalAlignment = VerticalAlignment.Top;
                declationstyle.WrapText = true;
                IFont declarationfnt = (XSSFFont)workbook.CreateFont();
                //declarationfnt.Boldweight = (short)FontBoldWeight.Bold;
                declarationfnt.FontName = "Calibri";
                declarationfnt.FontHeightInPoints = (short)11;
                declationstyle.SetFont(declarationfnt);
                Cell.SetCellValue(!string.IsNullOrEmpty(Footer) ? Footer : "All information contained herein is obtained by ICRA Analytics Limited from sources believed by it to be accurate and reliable. Because of the possibility of human or mechanical error as well as other factors, however, all information contained herein is provided 'AS IS' without warranty of any kind. ICRA Analytics adopts all necessary measures so that the information it uses is of sufficient quality and from sources ICRA Analytics considers to be reliable including, when appropriate, independent third-party sources. However, ICRA Analytics is not an auditor and cannot in every instance independently verify or validate information received in preparing this document." +
                    "All information contained herein must be construed solely as statements of opinion, and  ICRA Analytics Limited or its affiliates or group companies and its respective and any of its officers, directors, personnel and employees, disclaim liability to any loss, damage of any nature, including but not limited to direct, indirect, punitive, special, exemplary, consequential, as also any loss of profit in any way arising from the use of this document or its contents in any manner or for any contingency within or beyond the control of, ICRA Analytics or any of its directors, officers, employees, agents, representatives, licensors or suppliers, arising from or in connection with the information contained herein or the use of or inability to use any such information.Opinions expressed in the document are not the opinions of our holding company, ICRA Limited(ICRA), and should not be construed as any indication of credit rating or grading of ICRA for any instruments that have been issued or are to be issued by any entity.The recipient alone shall be fully responsible and / or are liable for any decision taken on the basis of this document and / or the information contained herein.");
                Cell.CellStyle = declationstyle;

            }
            NPOIWrite.CellMerged(sheetTwo, 4, 4, 0, 17);
            sheetTwo.GetRow(4).HeightInPoints = 200;
            #endregion

            #region Disclaimer Sheet HyperLink
            XSSFCellStyle HyperLinkStyle = (XSSFCellStyle)workbook.CreateCellStyle();
            IFont HyperLinkFont = workbook.CreateFont();
            HyperLinkFont.Color = IndexedColors.Orange.Index;
            HyperLinkFont.Underline = FontUnderlineType.Single;
            HyperLinkStyle.SetFont(HyperLinkFont);

            Row = sheetTwo.CreateRow(5);
            Cell = Row.CreateCell(0);
            Cell.SetCellValue("Click here for third-party disclaimers");
            XSSFCreationHelper createHelper = (XSSFCreationHelper)workbook.GetCreationHelper();
            XSSFHyperlink link = (XSSFHyperlink)createHelper.CreateHyperlink(HyperlinkType.Url);
            link.Address = "https://www.icraanalytics.com/home/thirdpartydisclaimers";
            Cell.Hyperlink = link;
            Cell.CellStyle = HyperLinkStyle;
            #endregion

            sheet.ActiveCell = new NPOI.SS.Util.CellAddress(0, 1);
            var stream = new MemoryStream();
            workbook.Write(stream);

            return workbook;
        }
        public static NPOI.XSSF.UserModel.XSSFWorkbook ExportToExcelWorkBookWithNumberDecimalFormat(UserBasicSettings ubs, IEnumerable<TableInputForExcelSheet> tableInputForExcelSheets, string LogoPath = "", string ReportName = "", string StrDateAsOn = "")
        {

            #region Variable
            string Header = ubs.Reporting_Format_Header;
            string Footer = ubs.Reporting_Format_Footer;
            string BlankData = ubs.BlankData == null ? "BLANK" : ubs.BlankData.ToUpper() == "BLANK" ? "" : ubs.BlankData;

            string StrHeader1 = "ICRA Analytics Limited";
            string StrHeader2 = "3rd Floor, Electric Mansion,Appasaheb Marathe Marg, Prabhadevi,Mumbai - 400 025 Maharashtra, India";
            string StrHeader3 = Header; //"Mumbai, Maharashtra 400093, IN";
            string StrReportName = ReportName;
            string StrSource = "Source: " + (string.IsNullOrEmpty(UserStatisticsEntity.SourceName) ? "MFI 360" : UserStatisticsEntity.SourceName);
            StrDateAsOn = "Data as on " + StrDateAsOn;
            string StrReportGeneratedOn = "Report Generated on " + DateTime.Now.ToString("dd-MMM-yyyy HH:mm:ss");

            #region number and decimal variable for AUM
            var aumPaddding = new string('0', (int)ubs.AUMDecimalFormat);
            var aumDecimalFormat = "0." + aumPaddding;
            string aumNUMBERFORMAT = ubs.NumberFormat;
            var aumNumberFormat = aumNUMBERFORMAT.Replace("0", "#");
            string aumNumberDecimalFormat = aumNumberFormat + "0." + new String('0', (int)ubs.AUMDecimalFormat);
            #endregion

            #region number and decimal variable for return
            var retPaddding = new string('0', (int)ubs.ReturnDecimalFormat);
            var retDecimalFormat = "0." + retPaddding;
            string retNUMBERFORMAT = ubs.NumberFormat;
            var retNumberFormat = retNUMBERFORMAT.Replace("0", "#");
            string retNumberDecimalFormat = retNumberFormat + "0." + new String('0', (int)ubs.ReturnDecimalFormat);
            #endregion

            #region number and decimal variable for NAV
            var navPaddding = new string('0', (int)ubs.NavDecimalFormat);
            var navDecimalFormat = "0." + navPaddding;
            string navNUMBERFORMAT = ubs.NumberFormat;
            var navNumberFormat = navNUMBERFORMAT.Replace("0", "#");
            string navNumberDecimalFormat = navNumberFormat + "0." + new String('0', (int)ubs.NavDecimalFormat);
            #endregion


            #region number and decimal variable for Other
            var othPaddding = new string('0', (int)ubs.OtherDecimal);
            var othDecimalFormat = "0." + othPaddding;
            string othNUMBERFORMAT = ubs.NumberFormat;
            var othNumberFormat = othNUMBERFORMAT.Replace("0", "#");
            string othNumberDecimalFormat = othNumberFormat + "0." + new String('0', (int)ubs.OtherDecimal);
            #endregion

            #region number and decimal variable for Ratio
            var ratioPaddding = new string('0', (int)ubs.RatioDecimalFormat);
            var ratioDecimalFormat = "0." + ratioPaddding;
            string ratioNUMBERFORMAT = ubs.NumberFormat;
            var ratioNumberFormat = ratioNUMBERFORMAT.Replace("0", "#");
            string ratioNumberDecimalFormat = ratioNumberFormat + "0." + new String('0', (int)ubs.RatioDecimalFormat);
            #endregion
            #region int Format with out Decimal
            var intNumberWithoutDecimalFormat = ubs.NumberFormat.Replace("0", "#");
            #endregion
            #endregion

            NPOI.XSSF.UserModel.XSSFWorkbook workbook = new NPOI.XSSF.UserModel.XSSFWorkbook();
            #region Set Font For Header1,Header2 and Header3
            XSSFCellStyle HeaderStyle = (XSSFCellStyle)workbook.CreateCellStyle();
            IFont Headerfont = workbook.CreateFont();
            Headerfont.Boldweight = (short)FontBoldWeight.Bold;
            HeaderStyle.SetFont(Headerfont);
            #endregion
            tableInputForExcelSheets.ForEach(xSheet =>
            {

                ISheet sheet = workbook.GetSheet(xSheet.SheetName) ?? workbook.CreateSheet(xSheet.SheetName);

                IEnumerable<IEnumerable<TableHeaderEntity>> listTableHeaders = xSheet.TableHeaders; IEnumerable<ExportEntity> listData = xSheet.DataRows;
                //ISheet sheet = workbook.CreateSheet("Output");
                //ISheet sheetTwo = workbook.CreateSheet("Disclaimer");
                //sheetTwo.DisplayGridlines = false;

                #region Excel Sheet Gridlines Delete
                sheet.DisplayGridlines = false;
                //sheetTwo.DisplayGridlines = false;
                #endregion

                #region Header Freeze
                sheet.CreateFreezePane(1, 6);
                #endregion



                #region Set Cell Value For Header1, Header2 and Header3
                var ICRArow = sheet.CreateRow(0);
                ICRArow.CreateCell(0);
                NPOIWrite.CellMerged(sheet, 0, 0, 1, 9);
                var ICRACell = ICRArow.CreateCell(1);
                ICRACell.SetCellValue(StrHeader1);
                ICRACell.CellStyle = HeaderStyle;
                ICRArow = sheet.CreateRow(1);
                ICRArow.CreateCell(0);
                NPOIWrite.CellMerged(sheet, 1, 1, 1, 9);
                ICRACell = ICRArow.CreateCell(1);
                ICRACell.SetCellValue(StrHeader2);
                ICRACell.CellStyle = HeaderStyle;
                ICRArow = sheet.CreateRow(2);
                ICRArow.CreateCell(0);
                NPOIWrite.CellMerged(sheet, 2, 2, 1, 9);
                ICRACell = ICRArow.CreateCell(1);
                ICRACell.SetCellValue(StrHeader3);
                ICRACell.CellStyle = HeaderStyle;
                ICRACell.CellStyle.Alignment = HorizontalAlignment.Center;
                ICRArow = sheet.CreateRow(3);
                ICRArow.CreateCell(0);
                ICRACell = ICRArow.CreateCell(1);
                ICRACell.CellStyle.Alignment = HorizontalAlignment.Center;
                NPOIWrite.AutoFitColumn(sheet, 1);
                ICRACell.CellStyle = HeaderStyle;
                #endregion

                #region Report Name
                ICRArow = sheet.CreateRow(4);
                ICRArow.CreateCell(0);
                ICRACell = ICRArow.CreateCell(0);
                ICRACell.SetCellValue(StrReportName);
                HeaderStyle.Alignment = HorizontalAlignment.Left;
                ICRACell.CellStyle = HeaderStyle;
                #endregion

                #region Header creation in the Excel
                var headerRow = sheet.CreateRow(5);
                sheet.GetRow(5).HeightInPoints = 30;
                listTableHeaders.ForEach((listTableHeader, rowIndex) =>
                {
                    var listHeaderFinal = listTableHeader.OrderBy(x => x.Position).ToList();
                    for (int i = 0; i < listHeaderFinal.Count; i++)
                    {
                        //var cell = headerRow.CreateCell(i);
                        //cell.SetCellValue(listHeaderFinal[i].ColumnName);
                        //NPOIWrite.AutoFitColumn(sheet, i);

                        #region Commented by Subrata on 21 Feb 2018
                        //ICellStyle CellStyle = workbook.CreateCellStyle();
                        //CellStyle = workbook.CreateCellStyle();
                        //CellStyle.FillBackgroundColor = IndexedColors.Blue.Index;
                        #endregion

                        #region Added by Subrata on 21 Feb 2018
                        XSSFCellStyle style = (XSSFCellStyle)workbook.CreateCellStyle();
                        XSSFColor colorToFill = new XSSFColor(new byte[] { 68, 114, 196 });//{ 51, 204, 204 }//Color.Blue);
                        style.SetFillForegroundColor(colorToFill);
                        IFont font = workbook.CreateFont();
                        font.Color = IndexedColors.White.Index;
                        font.Boldweight = (short)FontBoldWeight.Bold;
                        style.SetFont(font);
                        style.FillPattern = FillPattern.SolidForeground;
                        style.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                        style.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                        style.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                        style.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                        if (i > 0)
                        {
                            style.Alignment = HorizontalAlignment.Center;
                            style.VerticalAlignment = VerticalAlignment.Center;
                        }
                        else
                        {
                            //style.Alignment = HorizontalAlignment.Left;
                            style.Alignment = (string.IsNullOrEmpty(listHeaderFinal[i].TextAlign) || listHeaderFinal[i].TextAlign == EnumTextAlign.left.ToString()) ? HorizontalAlignment.Left
                                : listHeaderFinal[i].TextAlign == EnumTextAlign.center.ToString() ? HorizontalAlignment.Center : HorizontalAlignment.Right;
                            style.VerticalAlignment = VerticalAlignment.Center;
                        }
                        #endregion
                        NPOIWrite.WriteToCell(sheet, 4 + rowIndex + 1, i, listHeaderFinal[i].ColumnName, style, listHeaderFinal[i].Colspan, listHeaderFinal[i].Rowspan ?? 1);
                        //cell.CellStyle = style;
                        NPOIWrite.AutoFitColumn(sheet, i);

                    }
                });

                #endregion

                #region Cell Style For Even Row

                #region With DecimalFormat AUM
                XSSFCellStyle aumAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                aumAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                aumAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                aumAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                aumAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor aumcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
                aumAllCellStyleEvenDecFrmt.SetFillForegroundColor(aumcolorToFillEvenWtoutDec);
                aumAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
                IDataFormat aumformatEven = workbook.CreateDataFormat();
                aumAllCellStyleEvenDecFrmt.DataFormat = aumformatEven.GetFormat(aumDecimalFormat);
                aumAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
                aumAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;
                //percentage format

                XSSFCellStyle cellStylePercentEven = (XSSFCellStyle)workbook.CreateCellStyle();
                cellStylePercentEven.DataFormat = HSSFDataFormat.GetBuiltinFormat("0.00%");
                cellStylePercentEven.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                cellStylePercentEven.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                cellStylePercentEven.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                cellStylePercentEven.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor colorToFillFstClmnEvenpercent = new XSSFColor(new byte[] { 176, 196, 222 });
                cellStylePercentEven.SetFillForegroundColor(colorToFillFstClmnEvenpercent);
                cellStylePercentEven.FillPattern = FillPattern.SolidForeground;
                cellStylePercentEven.Alignment = HorizontalAlignment.Left;
                cellStylePercentEven.VerticalAlignment = VerticalAlignment.Center;
                cellStylePercentEven.SetDataFormat(workbook.CreateDataFormat().GetFormat("0.00%"));

                XSSFCellStyle cellStylePercentOdd = (XSSFCellStyle)workbook.CreateCellStyle();
                cellStylePercentOdd.DataFormat = HSSFDataFormat.GetBuiltinFormat("0.00%");
                cellStylePercentOdd.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                cellStylePercentOdd.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                cellStylePercentOdd.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                cellStylePercentOdd.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor colorToFillFstClmnOddpercent = new XSSFColor(new byte[] { 255, 255, 255 });
                cellStylePercentOdd.SetFillForegroundColor(colorToFillFstClmnOddpercent);
                cellStylePercentOdd.FillPattern = FillPattern.SolidForeground;
                cellStylePercentOdd.Alignment = HorizontalAlignment.Left;
                cellStylePercentOdd.VerticalAlignment = VerticalAlignment.Center;
                cellStylePercentOdd.SetDataFormat(workbook.CreateDataFormat().GetFormat("0.00%"));

                /// Number Format ////
                XSSFCellStyle aumAllCellStyleEvenDecFrmtWNum = (XSSFCellStyle)workbook.CreateCellStyle();
                aumAllCellStyleEvenDecFrmtWNum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                aumAllCellStyleEvenDecFrmtWNum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                aumAllCellStyleEvenDecFrmtWNum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                aumAllCellStyleEvenDecFrmtWNum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor aumcolorToFillEvenWtoutDecWNum = new XSSFColor(new byte[] { 176, 196, 222 });
                aumAllCellStyleEvenDecFrmtWNum.SetFillForegroundColor(aumcolorToFillEvenWtoutDecWNum);
                aumAllCellStyleEvenDecFrmtWNum.FillPattern = FillPattern.SolidForeground;
                IDataFormat aumformatEvenWNum = workbook.CreateDataFormat();
                aumAllCellStyleEvenDecFrmtWNum.DataFormat = aumformatEvenWNum.GetFormat(aumNumberDecimalFormat);
                aumAllCellStyleEvenDecFrmtWNum.Alignment = HorizontalAlignment.Center;
                aumAllCellStyleEvenDecFrmtWNum.VerticalAlignment = VerticalAlignment.Center;
                #endregion

                #region With DecimalFormat Return
                XSSFCellStyle retAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                retAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                retAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                retAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                retAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor retcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
                retAllCellStyleEvenDecFrmt.SetFillForegroundColor(retcolorToFillEvenWtoutDec);
                retAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
                IDataFormat retformatEven = workbook.CreateDataFormat();
                retAllCellStyleEvenDecFrmt.DataFormat = retformatEven.GetFormat(retDecimalFormat);
                retAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
                retAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;


                ////Number Format ////
                XSSFCellStyle retAllCellStyleEvenDecFrmtWnum = (XSSFCellStyle)workbook.CreateCellStyle();
                retAllCellStyleEvenDecFrmtWnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                retAllCellStyleEvenDecFrmtWnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                retAllCellStyleEvenDecFrmtWnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                retAllCellStyleEvenDecFrmtWnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor retcolorToFillEvenWtoutDecWnum = new XSSFColor(new byte[] { 176, 196, 222 });
                retAllCellStyleEvenDecFrmtWnum.SetFillForegroundColor(retcolorToFillEvenWtoutDecWnum);
                retAllCellStyleEvenDecFrmtWnum.FillPattern = FillPattern.SolidForeground;
                IDataFormat retformatEvenWnum = workbook.CreateDataFormat();
                retAllCellStyleEvenDecFrmtWnum.DataFormat = retformatEvenWnum.GetFormat(retNumberDecimalFormat);
                retAllCellStyleEvenDecFrmtWnum.Alignment = HorizontalAlignment.Center;
                retAllCellStyleEvenDecFrmtWnum.VerticalAlignment = VerticalAlignment.Center;
                #endregion

                #region With DecimalFormat Nav
                XSSFCellStyle navAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                navAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                navAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                navAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                navAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor navcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
                navAllCellStyleEvenDecFrmt.SetFillForegroundColor(navcolorToFillEvenWtoutDec);
                navAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
                IDataFormat navformatEven = workbook.CreateDataFormat();
                navAllCellStyleEvenDecFrmt.DataFormat = navformatEven.GetFormat(navDecimalFormat);
                navAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
                navAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;


                /// Number Format ////
                XSSFCellStyle navAllCellStyleEvenDecFrmtWnnum = (XSSFCellStyle)workbook.CreateCellStyle();
                navAllCellStyleEvenDecFrmtWnnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                navAllCellStyleEvenDecFrmtWnnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                navAllCellStyleEvenDecFrmtWnnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                navAllCellStyleEvenDecFrmtWnnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor navcolorToFillEvenWtoutDecWnnum = new XSSFColor(new byte[] { 176, 196, 222 });
                navAllCellStyleEvenDecFrmtWnnum.SetFillForegroundColor(navcolorToFillEvenWtoutDecWnnum);
                navAllCellStyleEvenDecFrmtWnnum.FillPattern = FillPattern.SolidForeground;
                IDataFormat navformatEvenWnnum = workbook.CreateDataFormat();
                navAllCellStyleEvenDecFrmtWnnum.DataFormat = navformatEvenWnnum.GetFormat(navNumberDecimalFormat);
                navAllCellStyleEvenDecFrmtWnnum.Alignment = HorizontalAlignment.Center;
                navAllCellStyleEvenDecFrmtWnnum.VerticalAlignment = VerticalAlignment.Center;
                #endregion

                #region With DecimalFormat Other
                XSSFCellStyle otherAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                otherAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                otherAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                otherAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                otherAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor othercolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
                otherAllCellStyleEvenDecFrmt.SetFillForegroundColor(othercolorToFillEvenWtoutDec);
                otherAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
                IDataFormat otherformatEven = workbook.CreateDataFormat();
                otherAllCellStyleEvenDecFrmt.DataFormat = otherformatEven.GetFormat(othDecimalFormat);
                otherAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
                otherAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

                /// Number Format ///
                XSSFCellStyle otherAllCellStyleEvenDecFrmtWnum = (XSSFCellStyle)workbook.CreateCellStyle();
                otherAllCellStyleEvenDecFrmtWnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                otherAllCellStyleEvenDecFrmtWnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                otherAllCellStyleEvenDecFrmtWnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                otherAllCellStyleEvenDecFrmtWnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor othercolorToFillEvenWtoutDecWnum = new XSSFColor(new byte[] { 176, 196, 222 });
                otherAllCellStyleEvenDecFrmtWnum.SetFillForegroundColor(othercolorToFillEvenWtoutDecWnum);
                otherAllCellStyleEvenDecFrmtWnum.FillPattern = FillPattern.SolidForeground;
                IDataFormat otherformatEvenWnum = workbook.CreateDataFormat();
                otherAllCellStyleEvenDecFrmtWnum.DataFormat = otherformatEvenWnum.GetFormat(othNumberDecimalFormat);
                otherAllCellStyleEvenDecFrmtWnum.Alignment = HorizontalAlignment.Center;
                otherAllCellStyleEvenDecFrmtWnum.VerticalAlignment = VerticalAlignment.Center;
                #endregion

                #region With DecimalFormat Ratio
                XSSFCellStyle ratAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                ratAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                ratAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                ratAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                ratAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor ratcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
                ratAllCellStyleEvenDecFrmt.SetFillForegroundColor(ratcolorToFillEvenWtoutDec);
                ratAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
                IDataFormat ratformatEven = workbook.CreateDataFormat();
                ratAllCellStyleEvenDecFrmt.DataFormat = ratformatEven.GetFormat(ratioDecimalFormat);
                ratAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
                ratAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

                XSSFCellStyle ratAllCellStyleEvenDecFrmtWth = (XSSFCellStyle)workbook.CreateCellStyle();
                ratAllCellStyleEvenDecFrmtWth.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                ratAllCellStyleEvenDecFrmtWth.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                ratAllCellStyleEvenDecFrmtWth.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                ratAllCellStyleEvenDecFrmtWth.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor ratcolorToFillEvenWtoutDecwth = new XSSFColor(new byte[] { 176, 196, 222 });
                ratAllCellStyleEvenDecFrmtWth.SetFillForegroundColor(ratcolorToFillEvenWtoutDecwth);
                ratAllCellStyleEvenDecFrmtWth.FillPattern = FillPattern.SolidForeground;
                IDataFormat ratformatEvenWth = workbook.CreateDataFormat();
                ratAllCellStyleEvenDecFrmtWth.DataFormat = ratformatEvenWth.GetFormat(ratioNumberDecimalFormat);
                ratAllCellStyleEvenDecFrmtWth.Alignment = HorizontalAlignment.Center;
                ratAllCellStyleEvenDecFrmtWth.VerticalAlignment = VerticalAlignment.Center;
                #endregion


                #region No Format
                XSSFCellStyle AllCellStyleEven = (XSSFCellStyle)workbook.CreateCellStyle();
                AllCellStyleEven.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                AllCellStyleEven.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                AllCellStyleEven.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                AllCellStyleEven.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor colorToFillEven = new XSSFColor(new byte[] { 176, 196, 222 });
                AllCellStyleEven.SetFillForegroundColor(colorToFillEven);
                AllCellStyleEven.FillPattern = FillPattern.SolidForeground;
                AllCellStyleEven.Alignment = HorizontalAlignment.Center;
                AllCellStyleEven.VerticalAlignment = VerticalAlignment.Center;
                #endregion

                #endregion

                #region Cell Style For Odd Row

                #region With Decimal Format AUM
                XSSFCellStyle aumAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
                aumAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                aumAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                aumAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                aumAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor AUMcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
                aumAllCellStyleOddDec.SetFillForegroundColor(AUMcolorToFillOddDec);
                aumAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
                IDataFormat AUMformatOddDec = workbook.CreateDataFormat();
                aumAllCellStyleOddDec.DataFormat = AUMformatOddDec.GetFormat(aumDecimalFormat);
                aumAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
                aumAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

                XSSFCellStyle aumAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
                aumAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                aumAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                aumAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                aumAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor AUMcolorToFillOddDecWnf = new XSSFColor(new byte[] { 255, 255, 255 });
                aumAllCellStyleOddDecWnuf.SetFillForegroundColor(AUMcolorToFillOddDecWnf);
                aumAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
                IDataFormat AUMformatOddDecWnuf = workbook.CreateDataFormat();
                aumAllCellStyleOddDecWnuf.DataFormat = AUMformatOddDecWnuf.GetFormat(aumNumberDecimalFormat);
                aumAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
                aumAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
                #endregion

                #region With Decimal Format Return
                XSSFCellStyle retAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
                retAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                retAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                retAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                retAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor RETcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
                retAllCellStyleOddDec.SetFillForegroundColor(RETcolorToFillOddDec);
                retAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
                IDataFormat RETformatOddDec = workbook.CreateDataFormat();
                retAllCellStyleOddDec.DataFormat = RETformatOddDec.GetFormat(retDecimalFormat);
                retAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
                retAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

                XSSFCellStyle retAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
                retAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                retAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                retAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                retAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor RETcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
                retAllCellStyleOddDecWnuf.SetFillForegroundColor(RETcolorToFillOddDecWnuf);
                retAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
                IDataFormat RETformatOddDecWnuf = workbook.CreateDataFormat();
                retAllCellStyleOddDecWnuf.DataFormat = RETformatOddDecWnuf.GetFormat(retNumberDecimalFormat);
                retAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
                retAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
                #endregion

                #region With Decimal Format Nav
                XSSFCellStyle navAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
                navAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                navAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                navAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                navAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor naVcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
                navAllCellStyleOddDec.SetFillForegroundColor(naVcolorToFillOddDec);
                navAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
                IDataFormat naVformatOddDec = workbook.CreateDataFormat();
                navAllCellStyleOddDec.DataFormat = naVformatOddDec.GetFormat(navDecimalFormat);
                navAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
                navAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


                XSSFCellStyle navAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
                navAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                navAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                navAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                navAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor naVcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
                navAllCellStyleOddDecWnuf.SetFillForegroundColor(naVcolorToFillOddDecWnuf);
                navAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
                IDataFormat naVformatOddDecWnuf = workbook.CreateDataFormat();
                navAllCellStyleOddDecWnuf.DataFormat = naVformatOddDecWnuf.GetFormat(navNumberDecimalFormat);
                navAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
                navAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
                #endregion


                #region With Decimal Format Other
                XSSFCellStyle othAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
                othAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                othAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                othAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                othAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor othcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
                othAllCellStyleOddDec.SetFillForegroundColor(othcolorToFillOddDec);
                othAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
                IDataFormat othformatOddDec = workbook.CreateDataFormat();
                othAllCellStyleOddDec.DataFormat = othformatOddDec.GetFormat(othDecimalFormat);
                othAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
                othAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


                XSSFCellStyle othAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
                othAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                othAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                othAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                othAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor othcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
                othAllCellStyleOddDecWnuf.SetFillForegroundColor(othcolorToFillOddDecWnuf);
                othAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
                IDataFormat othformatOddDecWnuf = workbook.CreateDataFormat();
                othAllCellStyleOddDecWnuf.DataFormat = othformatOddDecWnuf.GetFormat(othNumberDecimalFormat);
                othAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
                othAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
                #endregion


                #region With Decimal Format ratio
                XSSFCellStyle ratAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
                ratAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                ratAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                ratAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                ratAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor retcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
                ratAllCellStyleOddDec.SetFillForegroundColor(retcolorToFillOddDec);
                ratAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
                IDataFormat retformatOddDec = workbook.CreateDataFormat();
                ratAllCellStyleOddDec.DataFormat = retformatOddDec.GetFormat(ratioDecimalFormat);
                ratAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
                ratAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


                XSSFCellStyle ratAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
                ratAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                ratAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                ratAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                ratAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor retcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
                ratAllCellStyleOddDecWnuf.SetFillForegroundColor(retcolorToFillOddDecWnuf);
                ratAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
                IDataFormat retformatOddDecWnuf = workbook.CreateDataFormat();
                ratAllCellStyleOddDecWnuf.DataFormat = retformatOddDecWnuf.GetFormat(ratioNumberDecimalFormat);
                ratAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
                ratAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
                #endregion

                #region No Format
                XSSFCellStyle AllCellStyleOdd = (XSSFCellStyle)workbook.CreateCellStyle();
                AllCellStyleOdd.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                AllCellStyleOdd.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                AllCellStyleOdd.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                AllCellStyleOdd.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor colorToFillOdd = new XSSFColor(new byte[] { 255, 255, 255 });
                AllCellStyleOdd.SetFillForegroundColor(colorToFillOdd);
                AllCellStyleOdd.FillPattern = FillPattern.SolidForeground;
                AllCellStyleOdd.Alignment = HorizontalAlignment.Center;
                AllCellStyleOdd.VerticalAlignment = VerticalAlignment.Center;
                #endregion

                #endregion

                #region Cell Style For First Column Even Row
                XSSFCellStyle AllCellStyleFstColmEven = (XSSFCellStyle)workbook.CreateCellStyle();
                AllCellStyleFstColmEven.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                AllCellStyleFstColmEven.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                AllCellStyleFstColmEven.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                AllCellStyleFstColmEven.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor colorToFillFstClmnEven = new XSSFColor(new byte[] { 176, 196, 222 });
                AllCellStyleFstColmEven.SetFillForegroundColor(colorToFillFstClmnEven);
                AllCellStyleFstColmEven.FillPattern = FillPattern.SolidForeground;
                AllCellStyleFstColmEven.Alignment = HorizontalAlignment.Left;
                AllCellStyleFstColmEven.VerticalAlignment = VerticalAlignment.Center;
                #endregion

                #region Cell Style For First Column Odd Row
                XSSFCellStyle AllCellStyleFstColmOdd = (XSSFCellStyle)workbook.CreateCellStyle();
                AllCellStyleFstColmOdd.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                AllCellStyleFstColmOdd.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                AllCellStyleFstColmOdd.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                AllCellStyleFstColmOdd.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor colorToFillFstClmnOdd = new XSSFColor(new byte[] { 255, 255, 255 });
                AllCellStyleFstColmOdd.SetFillForegroundColor(colorToFillFstClmnOdd);
                AllCellStyleFstColmOdd.FillPattern = FillPattern.SolidForeground;
                AllCellStyleFstColmOdd.Alignment = HorizontalAlignment.Left;
                AllCellStyleFstColmOdd.VerticalAlignment = VerticalAlignment.Center;
                #endregion
                #region Without Decimal Number Format Even Row
                XSSFCellStyle intAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                intAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                intAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                intAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                intAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor intcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
                intAllCellStyleEvenDecFrmt.SetFillForegroundColor(intcolorToFillEvenWtoutDec);
                intAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
                IDataFormat intformatEven = workbook.CreateDataFormat();
                intAllCellStyleEvenDecFrmt.DataFormat = intformatEven.GetFormat(intNumberWithoutDecimalFormat);
                intAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
                intAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

                XSSFCellStyle intSimpleAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                intSimpleAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                intSimpleAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                intSimpleAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                intSimpleAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor intSimplecolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
                intSimpleAllCellStyleEvenDecFrmt.SetFillForegroundColor(intSimplecolorToFillEvenWtoutDec);
                intSimpleAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
                intSimpleAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
                intSimpleAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;
                #endregion
                #region Without Decimal Number Format Odd Row
                XSSFCellStyle intAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
                intAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                intAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                intAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                intAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor intcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
                intAllCellStyleOddDec.SetFillForegroundColor(intcolorToFillOddDec);
                intAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
                IDataFormat intformatOddDec = workbook.CreateDataFormat();
                intAllCellStyleOddDec.DataFormat = intformatOddDec.GetFormat(intNumberWithoutDecimalFormat);
                intAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
                intAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

                XSSFCellStyle intSimpleAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
                intSimpleAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                intSimpleAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                intSimpleAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                intSimpleAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor intSimplecolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
                intSimpleAllCellStyleOddDec.SetFillForegroundColor(intSimplecolorToFillOddDec);
                intSimpleAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
                intSimpleAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
                intSimpleAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;
                #endregion
                #region With DateTime format
                var DateTimeFormat = ubs.DateFormat;
                var MonthYearFormat = "MMM-yyyy";
                XSSFCellStyle DateTimeAllCellStyleEvenFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                DateTimeAllCellStyleEvenFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                DateTimeAllCellStyleEvenFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                DateTimeAllCellStyleEvenFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                DateTimeAllCellStyleEvenFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor DateTimecolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
                DateTimeAllCellStyleEvenFrmt.SetFillForegroundColor(DateTimecolorToFillEvenWtoutDec);
                DateTimeAllCellStyleEvenFrmt.FillPattern = FillPattern.SolidForeground;
                IDataFormat DateTimeformatEven = workbook.CreateDataFormat();
                DateTimeAllCellStyleEvenFrmt.DataFormat = DateTimeformatEven.GetFormat(DateTimeFormat);
                DateTimeAllCellStyleEvenFrmt.Alignment = HorizontalAlignment.Center;
                DateTimeAllCellStyleEvenFrmt.VerticalAlignment = VerticalAlignment.Center;

                XSSFCellStyle DateTimeAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
                DateTimeAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                DateTimeAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                DateTimeAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                DateTimeAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor DateTimecolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
                DateTimeAllCellStyleOddDec.SetFillForegroundColor(DateTimecolorToFillOddDec);
                DateTimeAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
                IDataFormat DateTimeformatOddDec = workbook.CreateDataFormat();
                DateTimeAllCellStyleOddDec.DataFormat = DateTimeformatOddDec.GetFormat(DateTimeFormat);
                DateTimeAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
                DateTimeAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


                #endregion
                #region With MonthYear format
                XSSFCellStyle MonthYearAllCellStyleEvenFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                MonthYearAllCellStyleEvenFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                MonthYearAllCellStyleEvenFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                MonthYearAllCellStyleEvenFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                MonthYearAllCellStyleEvenFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor MonthYearcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
                MonthYearAllCellStyleEvenFrmt.SetFillForegroundColor(MonthYearcolorToFillEvenWtoutDec);
                MonthYearAllCellStyleEvenFrmt.FillPattern = FillPattern.SolidForeground;
                IDataFormat MonthYearformatEven = workbook.CreateDataFormat();
                MonthYearAllCellStyleEvenFrmt.DataFormat = DateTimeformatEven.GetFormat(MonthYearFormat);
                MonthYearAllCellStyleEvenFrmt.Alignment = HorizontalAlignment.Center;
                MonthYearAllCellStyleEvenFrmt.VerticalAlignment = VerticalAlignment.Center;

                XSSFCellStyle MonthYearAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
                MonthYearAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                MonthYearAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                MonthYearAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                MonthYearAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor MonthYearcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
                MonthYearAllCellStyleOddDec.SetFillForegroundColor(MonthYearcolorToFillOddDec);
                MonthYearAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
                IDataFormat MonthYearformatOddDec = workbook.CreateDataFormat();
                MonthYearAllCellStyleOddDec.DataFormat = DateTimeformatOddDec.GetFormat(MonthYearFormat);
                MonthYearAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
                MonthYearAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


                #endregion
                #region Value added to the Excel

                #region Added by Subrata on 22 Feb 2018
                bool IsNumericKey = false;
                bool IsNumericValue = false;
                var AllListData = listData.SelectMany(x => x.LstKeyValuePair).ToArray();
                var AllDataKey = AllListData.Select(x => x.Key).Distinct().ToArray();
                int ValueRes;
                IsNumericKey = int.TryParse(AllDataKey[0], out ValueRes);
                #endregion

                int incr = 6;
                bool isNumeric = false;
                var listFinalTableHeader = xSheet.listFinalTableHeader;
                foreach (var item in listData)
                {
                    if (item.LstKeyValuePair.Count() > 0)
                    {
                        int value;
                        isNumeric = int.TryParse(item.LstKeyValuePair[0].Key, out value);
                    }
                    var dataRow = sheet.CreateRow(incr);
                    sheet.GetRow(incr).HeightInPoints = 20;
                    if (isNumeric == true)
                    {
                        var cellValues = (from i in item.LstKeyValuePair
                                          from j in listFinalTableHeader
                                          where i.Key.ToString() == j.Position.ToString()
                                          orderby j.Position
                                          select new
                                          {
                                              IsNum = j.IsNumberFormatReq,
                                              DecType = j.DecFormatType,
                                              Value = i.Value,
                                              IsMixedType = j.IsMixedValueType,
                                              IsPercentageType = j.IsPercentageValueType,
                                              IsDateTimeStringMixedType = j.IsDateTimeStringMixedType,
                                              IsDateTimeType = j.IsDateTimeType,
                                              IsMonthYearType = j.IsMonthYearType
                                          }).ToArray();

                        for (int k = 0; k < cellValues.Length; k++)
                        {
                            var datacell = dataRow.CreateCell(k);
                            if (cellValues[k].DecType != DecimalFormatType.NoDecimalReq)
                            {
                                double OutVal;
                                if (string.IsNullOrEmpty(cellValues[k].Value) || cellValues[k].Value == BlankData || !double.TryParse(cellValues[k].Value, out OutVal))
                                {
                                    datacell.SetCellValue(cellValues[k].Value);
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleEven;
                                        else
                                            datacell.CellStyle = AllCellStyleOdd;

                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }

                                }
                                else
                                {
                                    datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));

                                    if (k > 0)
                                    {
                                        if (cellValues[k].DecType == DecimalFormatType.AUM)
                                        {
                                            if (incr % 2 == 0)
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {

                                                    datacell.CellStyle = aumAllCellStyleEvenDecFrmtWNum;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = aumAllCellStyleEvenDecFrmt;
                                                }
                                            }
                                            else
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    datacell.CellStyle = aumAllCellStyleOddDecWnuf;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = aumAllCellStyleOddDec;
                                                }
                                            }
                                        }
                                        else if (cellValues[k].DecType == DecimalFormatType.NAV)
                                        {
                                            if (incr % 2 == 0)
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    datacell.CellStyle = navAllCellStyleEvenDecFrmtWnnum;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = navAllCellStyleEvenDecFrmt;
                                                }
                                            }
                                            else
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    datacell.CellStyle = navAllCellStyleOddDecWnuf;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = navAllCellStyleOddDec;
                                                }

                                            }
                                        }
                                        else if (cellValues[k].DecType == DecimalFormatType.OTHER)
                                        {
                                            if (incr % 2 == 0)
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    datacell.CellStyle = otherAllCellStyleEvenDecFrmtWnum;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = otherAllCellStyleEvenDecFrmt;
                                                }
                                            }

                                            else
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    datacell.CellStyle = othAllCellStyleOddDecWnuf;
                                                }
                                                else
                                                {

                                                    datacell.CellStyle = othAllCellStyleOddDec;
                                                }

                                            }
                                        }
                                        else if (cellValues[k].DecType == DecimalFormatType.RATIO)
                                        {
                                            if (incr % 2 == 0)
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    datacell.CellStyle = ratAllCellStyleEvenDecFrmtWth;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = ratAllCellStyleEvenDecFrmt;
                                                }
                                            }
                                            else
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    datacell.CellStyle = ratAllCellStyleOddDecWnuf;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = ratAllCellStyleOddDec;
                                                }
                                            }
                                        }
                                        else if (cellValues[k].DecType == DecimalFormatType.RETURN)
                                        {
                                            if (incr % 2 == 0)
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    datacell.CellStyle = retAllCellStyleEvenDecFrmtWnum;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = retAllCellStyleEvenDecFrmt;
                                                }

                                            }
                                            else
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    datacell.CellStyle = retAllCellStyleOddDecWnuf;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = retAllCellStyleOddDec;
                                                }

                                            }
                                        }
                                        else if (cellValues[k].DecType == DecimalFormatType.IntegerWithOutDecimal)
                                        {
                                            if (incr % 2 == 0)
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    datacell.CellStyle = intAllCellStyleEvenDecFrmt;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = intSimpleAllCellStyleEvenDecFrmt;
                                                }

                                            }
                                            else
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    datacell.CellStyle = intAllCellStyleOddDec;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = intSimpleAllCellStyleOddDec;
                                                }

                                            }
                                        }

                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }

                                }

                            }
                            else
                            {
                                double OutVal;
                                if (double.TryParse(cellValues[k].Value, out OutVal) && !cellValues[k].IsMixedType && !cellValues[k].IsPercentageType)
                                {
                                    datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleEven;
                                        else
                                            datacell.CellStyle = AllCellStyleOdd;

                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }
                                }
                                else if (cellValues[k].IsPercentageType)
                                {
                                    if (double.TryParse(cellValues[k].Value, out OutVal))
                                    {
                                        datacell.SetCellValue(OutVal / 100);
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = cellStylePercentEven;
                                        else
                                            datacell.CellStyle = cellStylePercentOdd;
                                    }
                                    else
                                    {
                                        datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                        if (k > 0)
                                        {
                                            if (incr % 2 == 0)
                                                datacell.CellStyle = AllCellStyleEven;
                                            else
                                                datacell.CellStyle = AllCellStyleOdd;
                                        }
                                        else
                                        {
                                            if (incr % 2 == 0)
                                                datacell.CellStyle = AllCellStyleFstColmEven;
                                            else
                                                datacell.CellStyle = AllCellStyleFstColmOdd;
                                        }
                                    }
                                }
                                else if (cellValues[k].IsDateTimeType)
                                {
                                    DateTime OutValdt;
                                    if (DateTime.TryParse(cellValues[k].Value, out OutValdt))
                                    {
                                        datacell.SetCellValue(Convert.ToDateTime(cellValues[k].Value));
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = DateTimeAllCellStyleEvenFrmt;
                                        else
                                            datacell.CellStyle = DateTimeAllCellStyleOddDec;
                                        if (k == 0)
                                        {
                                            datacell.CellStyle.Alignment = HorizontalAlignment.Left;
                                        }
                                    }
                                    else
                                    {
                                        datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                        if (k > 0)
                                        {
                                            if (incr % 2 == 0)
                                                datacell.CellStyle = AllCellStyleEven;
                                            else
                                                datacell.CellStyle = AllCellStyleOdd;

                                        }
                                        else
                                        {
                                            if (incr % 2 == 0)
                                                datacell.CellStyle = AllCellStyleFstColmEven;
                                            else
                                                datacell.CellStyle = AllCellStyleFstColmOdd;
                                        }
                                    }
                                }
                                else if (cellValues[k].IsDateTimeStringMixedType)
                                {
                                    DateTime OutValdt;
                                    if (DateTime.TryParse(cellValues[k].Value, out OutValdt))
                                    {
                                        datacell.SetCellValue(Convert.ToDateTime(cellValues[k].Value));
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = DateTimeAllCellStyleEvenFrmt;
                                        else
                                            datacell.CellStyle = DateTimeAllCellStyleOddDec;
                                        if (k == 0)
                                        {
                                            datacell.CellStyle.Alignment = HorizontalAlignment.Left;
                                        }
                                    }
                                    else
                                    {
                                        datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                        if (k > 0)
                                        {
                                            if (incr % 2 == 0)
                                                datacell.CellStyle = AllCellStyleEven;
                                            else
                                                datacell.CellStyle = AllCellStyleOdd;

                                        }
                                        else
                                        {
                                            if (incr % 2 == 0)
                                                datacell.CellStyle = AllCellStyleFstColmEven;
                                            else
                                                datacell.CellStyle = AllCellStyleFstColmOdd;
                                        }
                                    }
                                }
                                else if (cellValues[k].IsMonthYearType)
                                {
                                    DateTime OutValdt;
                                    if (DateTime.TryParse(cellValues[k].Value, out OutValdt))
                                    {
                                        datacell.SetCellValue(Convert.ToDateTime(cellValues[k].Value));
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = MonthYearAllCellStyleEvenFrmt;
                                        else
                                            datacell.CellStyle = MonthYearAllCellStyleOddDec;
                                        if (k == 0)
                                        {
                                            datacell.CellStyle.Alignment = HorizontalAlignment.Left;
                                        }
                                    }
                                    else
                                    {
                                        datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                        if (k > 0)
                                        {
                                            if (incr % 2 == 0)
                                                datacell.CellStyle = AllCellStyleEven;
                                            else
                                                datacell.CellStyle = AllCellStyleOdd;

                                        }
                                        else
                                        {
                                            if (incr % 2 == 0)
                                                datacell.CellStyle = AllCellStyleFstColmEven;
                                            else
                                                datacell.CellStyle = AllCellStyleFstColmOdd;
                                        }
                                    }
                                }
                                else
                                {
                                    datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleEven;
                                        else
                                            datacell.CellStyle = AllCellStyleOdd;

                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }
                                }
                            }


                        }
                        incr++;
                    }
                    else
                    {
                        var cellValues = (from i in item.LstKeyValuePair
                                          from j in listFinalTableHeader
                                          where i.Key == j.ColumnName
                                          orderby j.Position
                                          select new
                                          {
                                              IsNum = j.IsNumberFormatReq,
                                              DecType = j.DecFormatType,
                                              IsMixedType = j.IsMixedValueType,
                                              IsPercentageType = j.IsPercentageValueType,
                                              IsDateTimeStringMixedType = j.IsDateTimeStringMixedType,
                                              IsDateTimeType = j.IsDateTimeType,
                                              IsMonthYearType = j.IsMonthYearType,
                                              Value = i.Value
                                          }).ToArray();

                        for (int k = 0; k < cellValues.Length; k++)
                        {
                            var datacell = dataRow.CreateCell(k);
                            if (cellValues[k].DecType != DecimalFormatType.NoDecimalReq)
                            {
                                double OutVal;
                                if (string.IsNullOrEmpty(cellValues[k].Value) || cellValues[k].Value == BlankData || !double.TryParse(cellValues[k].Value, out OutVal))
                                {
                                    datacell.SetCellValue(cellValues[k].Value);
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleEven;
                                        else
                                            datacell.CellStyle = AllCellStyleOdd;
                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }

                                }
                                else
                                {
                                    datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                                    if (k > 0)
                                    {
                                        if (cellValues[k].DecType == DecimalFormatType.AUM)
                                        {
                                            if (incr % 2 == 0)
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {

                                                    datacell.CellStyle = aumAllCellStyleEvenDecFrmtWNum;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = aumAllCellStyleEvenDecFrmt;
                                                }
                                            }
                                            else
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    datacell.CellStyle = aumAllCellStyleOddDecWnuf;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = aumAllCellStyleOddDec;
                                                }
                                            }
                                        }
                                        else if (cellValues[k].DecType == DecimalFormatType.NAV)
                                        {
                                            if (incr % 2 == 0)
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    datacell.CellStyle = navAllCellStyleEvenDecFrmtWnnum;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = navAllCellStyleEvenDecFrmt;
                                                }
                                            }
                                            else
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    datacell.CellStyle = navAllCellStyleOddDecWnuf;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = navAllCellStyleOddDec;
                                                }

                                            }
                                        }
                                        else if (cellValues[k].DecType == DecimalFormatType.OTHER)
                                        {
                                            if (incr % 2 == 0)
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    datacell.CellStyle = otherAllCellStyleEvenDecFrmtWnum;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = otherAllCellStyleEvenDecFrmt;
                                                }
                                            }

                                            else
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    datacell.CellStyle = othAllCellStyleOddDecWnuf;
                                                }
                                                else
                                                {

                                                    datacell.CellStyle = othAllCellStyleOddDec;
                                                }

                                            }
                                        }
                                        else if (cellValues[k].DecType == DecimalFormatType.RATIO)
                                        {
                                            if (incr % 2 == 0)
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    datacell.CellStyle = ratAllCellStyleEvenDecFrmtWth;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = ratAllCellStyleEvenDecFrmt;
                                                }
                                            }
                                            else
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    datacell.CellStyle = ratAllCellStyleOddDecWnuf;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = ratAllCellStyleOddDec;
                                                }
                                            }
                                        }
                                        else if (cellValues[k].DecType == DecimalFormatType.RETURN)
                                        {
                                            if (incr % 2 == 0)
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    datacell.CellStyle = retAllCellStyleEvenDecFrmtWnum;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = retAllCellStyleEvenDecFrmt;
                                                }

                                            }
                                            else
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    datacell.CellStyle = retAllCellStyleOddDecWnuf;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = retAllCellStyleOddDec;
                                                }

                                            }
                                        }
                                        else if (cellValues[k].DecType == DecimalFormatType.IntegerWithOutDecimal)
                                        {
                                            if (incr % 2 == 0)
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    datacell.CellStyle = intAllCellStyleEvenDecFrmt;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = intSimpleAllCellStyleEvenDecFrmt;
                                                }

                                            }
                                            else
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    datacell.CellStyle = intAllCellStyleOddDec;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = intSimpleAllCellStyleOddDec;
                                                }

                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }

                                }

                            }
                            else
                            {
                                double OutVal;
                                if (double.TryParse(cellValues[k].Value, out OutVal) && !cellValues[k].IsMixedType && !cellValues[k].IsPercentageType)
                                {
                                    datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleEven;
                                        else
                                            datacell.CellStyle = AllCellStyleOdd;

                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }
                                }
                                else if (cellValues[k].IsPercentageType)
                                {
                                    if (double.TryParse(cellValues[k].Value, out OutVal))
                                    {
                                        datacell.SetCellValue(OutVal / 100);
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = cellStylePercentEven;
                                        else
                                            datacell.CellStyle = cellStylePercentOdd;
                                    }
                                    else
                                    {
                                        datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                        if (k > 0)
                                        {
                                            if (incr % 2 == 0)
                                                datacell.CellStyle = AllCellStyleEven;
                                            else
                                                datacell.CellStyle = AllCellStyleOdd;
                                        }
                                        else
                                        {
                                            if (incr % 2 == 0)
                                                datacell.CellStyle = AllCellStyleFstColmEven;
                                            else
                                                datacell.CellStyle = AllCellStyleFstColmOdd;
                                        }
                                    }
                                }
                                else if (cellValues[k].IsDateTimeType)
                                {
                                    DateTime OutValdt;
                                    if (DateTime.TryParse(cellValues[k].Value, out OutValdt))
                                    {
                                        datacell.SetCellValue(Convert.ToDateTime(cellValues[k].Value));
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = DateTimeAllCellStyleEvenFrmt;
                                        else
                                            datacell.CellStyle = DateTimeAllCellStyleOddDec;
                                        if (k == 0)
                                        {
                                            datacell.CellStyle.Alignment = HorizontalAlignment.Left;
                                        }
                                    }
                                    else
                                    {
                                        datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                        if (k > 0)
                                        {
                                            if (incr % 2 == 0)
                                                datacell.CellStyle = AllCellStyleEven;
                                            else
                                                datacell.CellStyle = AllCellStyleOdd;

                                        }
                                        else
                                        {
                                            if (incr % 2 == 0)
                                                datacell.CellStyle = AllCellStyleFstColmEven;
                                            else
                                                datacell.CellStyle = AllCellStyleFstColmOdd;
                                        }
                                    }
                                }
                                else if (cellValues[k].IsDateTimeStringMixedType)
                                {
                                    DateTime OutValdt;
                                    if (DateTime.TryParse(cellValues[k].Value, out OutValdt))
                                    {
                                        datacell.SetCellValue(Convert.ToDateTime(cellValues[k].Value));
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = DateTimeAllCellStyleEvenFrmt;
                                        else
                                            datacell.CellStyle = DateTimeAllCellStyleOddDec;
                                        if (k == 0)
                                        {
                                            datacell.CellStyle.Alignment = HorizontalAlignment.Left;
                                        }
                                    }
                                    else
                                    {
                                        datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                        if (k > 0)
                                        {
                                            if (incr % 2 == 0)
                                                datacell.CellStyle = AllCellStyleEven;
                                            else
                                                datacell.CellStyle = AllCellStyleOdd;

                                        }
                                        else
                                        {
                                            if (incr % 2 == 0)
                                                datacell.CellStyle = AllCellStyleFstColmEven;
                                            else
                                                datacell.CellStyle = AllCellStyleFstColmOdd;
                                        }
                                    }
                                }
                                else if (cellValues[k].IsMonthYearType)
                                {
                                    DateTime OutValdt;
                                    if (DateTime.TryParse(cellValues[k].Value, out OutValdt))
                                    {
                                        datacell.SetCellValue(Convert.ToDateTime(cellValues[k].Value));
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = MonthYearAllCellStyleEvenFrmt;
                                        else
                                            datacell.CellStyle = MonthYearAllCellStyleOddDec;
                                        if (k == 0)
                                        {
                                            datacell.CellStyle.Alignment = HorizontalAlignment.Left;
                                        }
                                    }
                                    else
                                    {
                                        datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                        if (k > 0)
                                        {
                                            if (incr % 2 == 0)
                                                datacell.CellStyle = AllCellStyleEven;
                                            else
                                                datacell.CellStyle = AllCellStyleOdd;

                                        }
                                        else
                                        {
                                            if (incr % 2 == 0)
                                                datacell.CellStyle = AllCellStyleFstColmEven;
                                            else
                                                datacell.CellStyle = AllCellStyleFstColmOdd;
                                        }
                                    }
                                }
                                else
                                {
                                    datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleEven;
                                        else
                                            datacell.CellStyle = AllCellStyleOdd;

                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }
                                }
                            }


                        }
                        incr++;
                    }

                }
                #endregion

                for (int i = 0; i < listFinalTableHeader.Count(); i++)
                    sheet.AutoSizeColumn(i);
                if (sheet.GetColumnWidth(0) < 11072)
                    sheet.SetColumnWidth(0, 11072);

                #region Logo
                try
                {
                    if (!string.IsNullOrEmpty(LogoPath))
                    {
                        XSSFDrawing patriarch = (XSSFDrawing)sheet.CreateDrawingPatriarch();
                        XSSFClientAnchor anchor;
                        anchor = new XSSFClientAnchor(0, 0, 0, 255, 0, 0, 0, 3);
                        anchor.AnchorType = AnchorType.DontMoveAndResize;
                        XSSFPicture picture = (XSSFPicture)patriarch.CreatePicture(anchor, LoadImage(LogoPath, workbook, PictureType.PNG));
                        double x1 = .25;
                        double y1 = .75;
                        picture.Resize(x1, y1);
                        picture.LineStyle = LineStyle.None;
                    }
                }
                catch (Exception ex)
                {
                }

                #endregion

                #region Source, Date As On and Report Generated On
                ICRArow = sheet.CreateRow(incr + 3);
                ICRArow.CreateCell(0);
                ICRACell = ICRArow.CreateCell(0);
                ICRACell.SetCellValue(StrSource);

                ICRArow = sheet.CreateRow(incr + 4);
                ICRArow.CreateCell(0);
                ICRACell = ICRArow.CreateCell(0);
                ICRACell.SetCellValue(StrDateAsOn);

                ICRArow = sheet.CreateRow(incr + 5);
                ICRArow.CreateCell(0);
                ICRACell = ICRArow.CreateCell(0);
                ICRACell.SetCellValue(StrReportGeneratedOn);
                #endregion
            });
            ISheet sheetTwo = workbook.CreateSheet("Disclaimer");
            #region Sheet Two Logo
            try
            {
                if (!string.IsNullOrEmpty(LogoPath))
                {
                    XSSFDrawing patriarch = (XSSFDrawing)sheetTwo.CreateDrawingPatriarch();
                    XSSFClientAnchor anchor;
                    anchor = new XSSFClientAnchor(0, 0, 0, 255, 0, 0, 0, 3);
                    anchor.AnchorType = AnchorType.DontMoveAndResize;
                    XSSFPicture picture = (XSSFPicture)patriarch.CreatePicture(anchor, LoadImage(LogoPath, workbook, PictureType.PNG));
                    double x1 = 1.10;
                    double y1 = 1.10;
                    picture.Resize(x1, y1);
                    picture.LineStyle = LineStyle.None;
                }
            }
            catch (Exception ex)
            {
            }
            #endregion

            #region Disclaimer Sheet
            var Row = sheetTwo.CreateRow(1);
            var cellSheetTwo = Row.CreateCell(7);
            cellSheetTwo.SetCellValue(StrHeader1);
            cellSheetTwo.CellStyle = HeaderStyle;

            Row = sheetTwo.CreateRow(4);
            ICell Cell;
            for (int i = 0; i < 17; i++)
            {
                Cell = Row.CreateCell(i);

                XSSFCellStyle declationstyle = (XSSFCellStyle)workbook.CreateCellStyle();

                declationstyle.Alignment = HorizontalAlignment.Left;
                declationstyle.VerticalAlignment = VerticalAlignment.Top;
                declationstyle.WrapText = true;
                IFont declarationfnt = (XSSFFont)workbook.CreateFont();
                //declarationfnt.Boldweight = (short)FontBoldWeight.Bold;
                declarationfnt.FontName = "Calibri";
                declarationfnt.FontHeightInPoints = (short)11;
                declationstyle.SetFont(declarationfnt);
                Cell.SetCellValue(!string.IsNullOrEmpty(Footer) ? Footer : "All information contained herein is obtained by ICRA Analytics Limited from sources believed by it to be accurate and reliable. Because of the possibility of human or mechanical error as well as other factors, however, all information contained herein is provided 'AS IS' without warranty of any kind. ICRA Analytics adopts all necessary measures so that the information it uses is of sufficient quality and from sources ICRA Analytics considers to be reliable including, when appropriate, independent third-party sources. However, ICRA Analytics is not an auditor and cannot in every instance independently verify or validate information received in preparing this document." +
                    "All information contained herein must be construed solely as statements of opinion, and  ICRA Analytics Limited or its affiliates or group companies and its respective and any of its officers, directors, personnel and employees, disclaim liability to any loss, damage of any nature, including but not limited to direct, indirect, punitive, special, exemplary, consequential, as also any loss of profit in any way arising from the use of this document or its contents in any manner or for any contingency within or beyond the control of, ICRA Analytics or any of its directors, officers, employees, agents, representatives, licensors or suppliers, arising from or in connection with the information contained herein or the use of or inability to use any such information.Opinions expressed in the document are not the opinions of our holding company, ICRA Limited(ICRA), and should not be construed as any indication of credit rating or grading of ICRA for any instruments that have been issued or are to be issued by any entity.The recipient alone shall be fully responsible and / or are liable for any decision taken on the basis of this document and / or the information contained herein.");
                Cell.CellStyle = declationstyle;

            }
            NPOIWrite.CellMerged(sheetTwo, 4, 4, 0, 17);
            sheetTwo.GetRow(4).HeightInPoints = 200;
            #endregion

            #region Disclaimer Sheet HyperLink
            XSSFCellStyle HyperLinkStyle = (XSSFCellStyle)workbook.CreateCellStyle();
            IFont HyperLinkFont = workbook.CreateFont();
            HyperLinkFont.Color = IndexedColors.Orange.Index;
            HyperLinkFont.Underline = FontUnderlineType.Single;
            HyperLinkStyle.SetFont(HyperLinkFont);

            Row = sheetTwo.CreateRow(5);
            Cell = Row.CreateCell(0);
            Cell.SetCellValue("Click here for third-party disclaimers");
            XSSFCreationHelper createHelper = (XSSFCreationHelper)workbook.GetCreationHelper();
            XSSFHyperlink link = (XSSFHyperlink)createHelper.CreateHyperlink(HyperlinkType.Url);
            link.Address = "https://www.icraanalytics.com/home/thirdpartydisclaimers";
            Cell.Hyperlink = link;
            Cell.CellStyle = HyperLinkStyle;
            #endregion

            workbook.GetSheetAt(0).ActiveCell = new CellAddress(0, 1);
            //var stream = new MemoryStream();
            //workbook.Write(stream);

            return workbook;
        }

        public static NPOI.XSSF.UserModel.XSSFWorkbook ExportToExcelWorkBookAssetWatch(UserBasicSettings ubs, List<TableHeaderEntity> listTableHeader, List<ExportEntity> listData, string LogoPath = "", string ReportName = "", string StrDateAsOn = "")
        {

            #region Variable
            string Header = ubs.Reporting_Format_Header;
            string Footer = ubs.Reporting_Format_Footer;
            string BlankData = ubs.BlankData == null ? "BLANK" : ubs.BlankData.ToUpper() == "BLANK" ? "" : ubs.BlankData;

            string StrHeader1 = "ICRA Analytics Limited";
            string StrHeader2 = "3rd Floor, Electric Mansion,Appasaheb Marathe Marg, Prabhadevi,Mumbai - 400 025 Maharashtra, India";
            string StrHeader3 = Header; //"Mumbai, Maharashtra 400093, IN";
            string StrReportName = ReportName;
            string StrSource = "Source: " + (string.IsNullOrEmpty(UserStatisticsEntity.SourceName) ? "MFI 360" : UserStatisticsEntity.SourceName);
            StrDateAsOn = "Data as on " + StrDateAsOn;
            string StrReportGeneratedOn = "Report Generated on " + DateTime.Now.ToString("dd-MMM-yyyy HH:mm:ss");

            #region number and decimal variable for AUM
            var aumPaddding = new string('0', (int)ubs.AUMDecimalFormat);
            var aumDecimalFormat = "0." + aumPaddding;
            string aumNUMBERFORMAT = ubs.NumberFormat;
            var aumNumberFormat = aumNUMBERFORMAT.Replace("0", "#");
            string aumNumberDecimalFormat = aumNumberFormat + "0." + new String('0', (int)ubs.AUMDecimalFormat);
            #endregion

            #region number and decimal variable for return
            var retPaddding = new string('0', (int)ubs.ReturnDecimalFormat);
            var retDecimalFormat = "0." + retPaddding;
            string retNUMBERFORMAT = ubs.NumberFormat;
            var retNumberFormat = retNUMBERFORMAT.Replace("0", "#");
            string retNumberDecimalFormat = retNumberFormat + "0." + new String('0', (int)ubs.ReturnDecimalFormat);
            #endregion

            #region number and decimal variable for NAV
            var navPaddding = new string('0', (int)ubs.NavDecimalFormat);
            var navDecimalFormat = "0." + navPaddding;
            string navNUMBERFORMAT = ubs.NumberFormat;
            var navNumberFormat = navNUMBERFORMAT.Replace("0", "#");
            string navNumberDecimalFormat = navNumberFormat + "0." + new String('0', (int)ubs.NavDecimalFormat);
            #endregion


            #region number and decimal variable for Other
            var othPaddding = new string('0', (int)ubs.OtherDecimal);
            var othDecimalFormat = "0." + othPaddding;
            string othNUMBERFORMAT = ubs.NumberFormat;
            var othNumberFormat = othNUMBERFORMAT.Replace("0", "#");
            string othNumberDecimalFormat = othNumberFormat + "0." + new String('0', (int)ubs.OtherDecimal);
            #endregion

            #region number and decimal variable for Ratio
            var ratioPaddding = new string('0', (int)ubs.RatioDecimalFormat);
            var ratioDecimalFormat = "0." + ratioPaddding;
            string ratioNUMBERFORMAT = ubs.NumberFormat;
            var ratioNumberFormat = ratioNUMBERFORMAT.Replace("0", "#");
            string ratioNumberDecimalFormat = ratioNumberFormat + "0." + new String('0', (int)ubs.RatioDecimalFormat);
            #endregion
            #region int Format with out Decimal
            var intNumberWithoutDecimalFormat = ubs.NumberFormat.Replace("0", "#");
            #endregion
            #endregion

            NPOI.XSSF.UserModel.XSSFWorkbook workbook = new NPOI.XSSF.UserModel.XSSFWorkbook();

            ISheet sheet = workbook.CreateSheet("Output");
            ISheet sheetTwo = workbook.CreateSheet("Disclaimer");

            #region Excel Sheet Gridlines Delete
            sheet.DisplayGridlines = false;
            sheetTwo.DisplayGridlines = false;
            #endregion

            #region Header Freeze
            sheet.CreateFreezePane(1, 6);
            #endregion

            #region Set Font For Header1,Header2 and Header3
            XSSFCellStyle HeaderStyle = (XSSFCellStyle)workbook.CreateCellStyle();
            IFont Headerfont = workbook.CreateFont();
            Headerfont.Boldweight = (short)FontBoldWeight.Bold;
            HeaderStyle.SetFont(Headerfont);
            #endregion

            #region Set Cell Value For Header1, Header2 and Header3
            var ICRArow = sheet.CreateRow(0);
            ICRArow.CreateCell(0);
            NPOIWrite.CellMerged(sheet, 0, 0, 1, 9);
            var ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader1);
            ICRACell.CellStyle = HeaderStyle;
            ICRArow = sheet.CreateRow(1);
            ICRArow.CreateCell(0);
            NPOIWrite.CellMerged(sheet, 1, 1, 1, 9);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader2);
            ICRACell.CellStyle = HeaderStyle;
            ICRArow = sheet.CreateRow(2);
            ICRArow.CreateCell(0);
            NPOIWrite.CellMerged(sheet, 2, 2, 1, 9);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader3);
            ICRACell.CellStyle = HeaderStyle;
            ICRACell.CellStyle.Alignment = HorizontalAlignment.Center;
            ICRArow = sheet.CreateRow(3);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.CellStyle.Alignment = HorizontalAlignment.Center;
            NPOIWrite.AutoFitColumn(sheet, 1);
            ICRACell.CellStyle = HeaderStyle;
            #endregion

            #region Report Name
            ICRArow = sheet.CreateRow(4);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrReportName);
            HeaderStyle.Alignment = HorizontalAlignment.Left;
            ICRACell.CellStyle = HeaderStyle;
            #endregion

            #region Header creation in the Excel
            var headerRow = sheet.CreateRow(5);
            sheet.GetRow(5).HeightInPoints = 30;
            var listHeaderFinal = listTableHeader.OrderBy(x => x.Position).ToList();
            for (int i = 0; i < listHeaderFinal.Count; i++)
            {
                var cell = headerRow.CreateCell(i);
                cell.SetCellValue(listHeaderFinal[i].ColumnName);
                NPOIWrite.AutoFitColumn(sheet, i);

                #region Commented by Subrata on 21 Feb 2018
                //ICellStyle CellStyle = workbook.CreateCellStyle();
                //CellStyle = workbook.CreateCellStyle();
                //CellStyle.FillBackgroundColor = IndexedColors.Blue.Index;
                #endregion

                #region Added by Subrata on 21 Feb 2018
                XSSFCellStyle style = (XSSFCellStyle)workbook.CreateCellStyle();
                XSSFColor colorToFill = new XSSFColor(new byte[] { 68, 114, 196 });//{ 51, 204, 204 }//Color.Blue);
                style.SetFillForegroundColor(colorToFill);
                IFont font = workbook.CreateFont();
                font.Color = IndexedColors.White.Index;
                font.Boldweight = (short)FontBoldWeight.Bold;
                style.SetFont(font);
                style.FillPattern = FillPattern.SolidForeground;
                style.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                style.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                style.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                style.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                if (i > 0)
                {
                    style.Alignment = HorizontalAlignment.Center;
                    style.VerticalAlignment = VerticalAlignment.Center;
                }
                else
                {
                    //style.Alignment = HorizontalAlignment.Left;
                    style.Alignment = (string.IsNullOrEmpty(listHeaderFinal[i].TextAlign) || listHeaderFinal[i].TextAlign == EnumTextAlign.left.ToString()) ? HorizontalAlignment.Left
                        : listHeaderFinal[i].TextAlign == EnumTextAlign.center.ToString() ? HorizontalAlignment.Center : HorizontalAlignment.Right;
                    style.VerticalAlignment = VerticalAlignment.Center;
                }
                #endregion

                cell.CellStyle = style;

            }
            #endregion

            #region Cell Style For Even Row

            #region With DecimalFormat AUM
            XSSFCellStyle aumAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor aumcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            aumAllCellStyleEvenDecFrmt.SetFillForegroundColor(aumcolorToFillEvenWtoutDec);
            aumAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat aumformatEven = workbook.CreateDataFormat();
            aumAllCellStyleEvenDecFrmt.DataFormat = aumformatEven.GetFormat(aumDecimalFormat);
            aumAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;
            //percentage format

            XSSFCellStyle cellStylePercentEven = (XSSFCellStyle)workbook.CreateCellStyle();
            cellStylePercentEven.DataFormat = HSSFDataFormat.GetBuiltinFormat("0.00%");
            cellStylePercentEven.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            cellStylePercentEven.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            cellStylePercentEven.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            cellStylePercentEven.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillFstClmnEvenpercent = new XSSFColor(new byte[] { 176, 196, 222 });
            cellStylePercentEven.SetFillForegroundColor(colorToFillFstClmnEvenpercent);
            cellStylePercentEven.FillPattern = FillPattern.SolidForeground;
            cellStylePercentEven.Alignment = HorizontalAlignment.Left;
            cellStylePercentEven.VerticalAlignment = VerticalAlignment.Center;
            cellStylePercentEven.SetDataFormat(workbook.CreateDataFormat().GetFormat("0.00%"));

            XSSFCellStyle cellStylePercentOdd = (XSSFCellStyle)workbook.CreateCellStyle();
            cellStylePercentOdd.DataFormat = HSSFDataFormat.GetBuiltinFormat("0.00%");
            cellStylePercentOdd.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            cellStylePercentOdd.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            cellStylePercentOdd.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            cellStylePercentOdd.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillFstClmnOddpercent = new XSSFColor(new byte[] { 255, 255, 255 });
            cellStylePercentOdd.SetFillForegroundColor(colorToFillFstClmnOddpercent);
            cellStylePercentOdd.FillPattern = FillPattern.SolidForeground;
            cellStylePercentOdd.Alignment = HorizontalAlignment.Left;
            cellStylePercentOdd.VerticalAlignment = VerticalAlignment.Center;
            cellStylePercentOdd.SetDataFormat(workbook.CreateDataFormat().GetFormat("0.00%"));

            /// Number Format ////
            XSSFCellStyle aumAllCellStyleEvenDecFrmtWNum = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleEvenDecFrmtWNum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmtWNum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmtWNum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmtWNum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor aumcolorToFillEvenWtoutDecWNum = new XSSFColor(new byte[] { 176, 196, 222 });
            aumAllCellStyleEvenDecFrmtWNum.SetFillForegroundColor(aumcolorToFillEvenWtoutDecWNum);
            aumAllCellStyleEvenDecFrmtWNum.FillPattern = FillPattern.SolidForeground;
            IDataFormat aumformatEvenWNum = workbook.CreateDataFormat();
            aumAllCellStyleEvenDecFrmtWNum.DataFormat = aumformatEvenWNum.GetFormat(aumNumberDecimalFormat);
            aumAllCellStyleEvenDecFrmtWNum.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleEvenDecFrmtWNum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Return
            XSSFCellStyle retAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            retAllCellStyleEvenDecFrmt.SetFillForegroundColor(retcolorToFillEvenWtoutDec);
            retAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatEven = workbook.CreateDataFormat();
            retAllCellStyleEvenDecFrmt.DataFormat = retformatEven.GetFormat(retDecimalFormat);
            retAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            retAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;


            ////Number Format ////
            XSSFCellStyle retAllCellStyleEvenDecFrmtWnum = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleEvenDecFrmtWnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmtWnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmtWnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmtWnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillEvenWtoutDecWnum = new XSSFColor(new byte[] { 176, 196, 222 });
            retAllCellStyleEvenDecFrmtWnum.SetFillForegroundColor(retcolorToFillEvenWtoutDecWnum);
            retAllCellStyleEvenDecFrmtWnum.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatEvenWnum = workbook.CreateDataFormat();
            retAllCellStyleEvenDecFrmtWnum.DataFormat = retformatEvenWnum.GetFormat(retNumberDecimalFormat);
            retAllCellStyleEvenDecFrmtWnum.Alignment = HorizontalAlignment.Center;
            retAllCellStyleEvenDecFrmtWnum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Nav
            XSSFCellStyle navAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor navcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            navAllCellStyleEvenDecFrmt.SetFillForegroundColor(navcolorToFillEvenWtoutDec);
            navAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat navformatEven = workbook.CreateDataFormat();
            navAllCellStyleEvenDecFrmt.DataFormat = navformatEven.GetFormat(navDecimalFormat);
            navAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            navAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;


            /// Number Format ////
            XSSFCellStyle navAllCellStyleEvenDecFrmtWnnum = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleEvenDecFrmtWnnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmtWnnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmtWnnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmtWnnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor navcolorToFillEvenWtoutDecWnnum = new XSSFColor(new byte[] { 176, 196, 222 });
            navAllCellStyleEvenDecFrmtWnnum.SetFillForegroundColor(navcolorToFillEvenWtoutDecWnnum);
            navAllCellStyleEvenDecFrmtWnnum.FillPattern = FillPattern.SolidForeground;
            IDataFormat navformatEvenWnnum = workbook.CreateDataFormat();
            navAllCellStyleEvenDecFrmtWnnum.DataFormat = navformatEvenWnnum.GetFormat(navNumberDecimalFormat);
            navAllCellStyleEvenDecFrmtWnnum.Alignment = HorizontalAlignment.Center;
            navAllCellStyleEvenDecFrmtWnnum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Other
            XSSFCellStyle otherAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            otherAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othercolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            otherAllCellStyleEvenDecFrmt.SetFillForegroundColor(othercolorToFillEvenWtoutDec);
            otherAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat otherformatEven = workbook.CreateDataFormat();
            otherAllCellStyleEvenDecFrmt.DataFormat = otherformatEven.GetFormat(othDecimalFormat);
            otherAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            otherAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            /// Number Format ///
            XSSFCellStyle otherAllCellStyleEvenDecFrmtWnum = (XSSFCellStyle)workbook.CreateCellStyle();
            otherAllCellStyleEvenDecFrmtWnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmtWnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmtWnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmtWnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othercolorToFillEvenWtoutDecWnum = new XSSFColor(new byte[] { 176, 196, 222 });
            otherAllCellStyleEvenDecFrmtWnum.SetFillForegroundColor(othercolorToFillEvenWtoutDecWnum);
            otherAllCellStyleEvenDecFrmtWnum.FillPattern = FillPattern.SolidForeground;
            IDataFormat otherformatEvenWnum = workbook.CreateDataFormat();
            otherAllCellStyleEvenDecFrmtWnum.DataFormat = otherformatEvenWnum.GetFormat(othNumberDecimalFormat);
            otherAllCellStyleEvenDecFrmtWnum.Alignment = HorizontalAlignment.Center;
            otherAllCellStyleEvenDecFrmtWnum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Ratio
            XSSFCellStyle ratAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor ratcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            ratAllCellStyleEvenDecFrmt.SetFillForegroundColor(ratcolorToFillEvenWtoutDec);
            ratAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat ratformatEven = workbook.CreateDataFormat();
            ratAllCellStyleEvenDecFrmt.DataFormat = ratformatEven.GetFormat(ratioDecimalFormat);
            ratAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle ratAllCellStyleEvenDecFrmtWth = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleEvenDecFrmtWth.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmtWth.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmtWth.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmtWth.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor ratcolorToFillEvenWtoutDecwth = new XSSFColor(new byte[] { 176, 196, 222 });
            ratAllCellStyleEvenDecFrmtWth.SetFillForegroundColor(ratcolorToFillEvenWtoutDecwth);
            ratAllCellStyleEvenDecFrmtWth.FillPattern = FillPattern.SolidForeground;
            IDataFormat ratformatEvenWth = workbook.CreateDataFormat();
            ratAllCellStyleEvenDecFrmtWth.DataFormat = ratformatEvenWth.GetFormat(ratioNumberDecimalFormat);
            ratAllCellStyleEvenDecFrmtWth.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleEvenDecFrmtWth.VerticalAlignment = VerticalAlignment.Center;
            #endregion


            #region No Format
            XSSFCellStyle AllCellStyleEven = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleEven.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillEven = new XSSFColor(new byte[] { 176, 196, 222 });
            AllCellStyleEven.SetFillForegroundColor(colorToFillEven);
            AllCellStyleEven.FillPattern = FillPattern.SolidForeground;
            AllCellStyleEven.Alignment = HorizontalAlignment.Center;
            AllCellStyleEven.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #endregion

            #region Cell Style For Odd Row

            #region With Decimal Format AUM
            XSSFCellStyle aumAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor AUMcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            aumAllCellStyleOddDec.SetFillForegroundColor(AUMcolorToFillOddDec);
            aumAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat AUMformatOddDec = workbook.CreateDataFormat();
            aumAllCellStyleOddDec.DataFormat = AUMformatOddDec.GetFormat(aumDecimalFormat);
            aumAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle aumAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor AUMcolorToFillOddDecWnf = new XSSFColor(new byte[] { 255, 255, 255 });
            aumAllCellStyleOddDecWnuf.SetFillForegroundColor(AUMcolorToFillOddDecWnf);
            aumAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat AUMformatOddDecWnuf = workbook.CreateDataFormat();
            aumAllCellStyleOddDecWnuf.DataFormat = AUMformatOddDecWnuf.GetFormat(aumNumberDecimalFormat);
            aumAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With Decimal Format Return
            XSSFCellStyle retAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor RETcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            retAllCellStyleOddDec.SetFillForegroundColor(RETcolorToFillOddDec);
            retAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat RETformatOddDec = workbook.CreateDataFormat();
            retAllCellStyleOddDec.DataFormat = RETformatOddDec.GetFormat(retDecimalFormat);
            retAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            retAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle retAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor RETcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            retAllCellStyleOddDecWnuf.SetFillForegroundColor(RETcolorToFillOddDecWnuf);
            retAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat RETformatOddDecWnuf = workbook.CreateDataFormat();
            retAllCellStyleOddDecWnuf.DataFormat = RETformatOddDecWnuf.GetFormat(retNumberDecimalFormat);
            retAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            retAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With Decimal Format Nav
            XSSFCellStyle navAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor naVcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            navAllCellStyleOddDec.SetFillForegroundColor(naVcolorToFillOddDec);
            navAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat naVformatOddDec = workbook.CreateDataFormat();
            navAllCellStyleOddDec.DataFormat = naVformatOddDec.GetFormat(navDecimalFormat);
            navAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            navAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            XSSFCellStyle navAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor naVcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            navAllCellStyleOddDecWnuf.SetFillForegroundColor(naVcolorToFillOddDecWnuf);
            navAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat naVformatOddDecWnuf = workbook.CreateDataFormat();
            navAllCellStyleOddDecWnuf.DataFormat = naVformatOddDecWnuf.GetFormat(navNumberDecimalFormat);
            navAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            navAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion


            #region With Decimal Format Other
            XSSFCellStyle othAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            othAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            othAllCellStyleOddDec.SetFillForegroundColor(othcolorToFillOddDec);
            othAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat othformatOddDec = workbook.CreateDataFormat();
            othAllCellStyleOddDec.DataFormat = othformatOddDec.GetFormat(othDecimalFormat);
            othAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            othAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            XSSFCellStyle othAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            othAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            othAllCellStyleOddDecWnuf.SetFillForegroundColor(othcolorToFillOddDecWnuf);
            othAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat othformatOddDecWnuf = workbook.CreateDataFormat();
            othAllCellStyleOddDecWnuf.DataFormat = othformatOddDecWnuf.GetFormat(othNumberDecimalFormat);
            othAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            othAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion


            #region With Decimal Format ratio
            XSSFCellStyle ratAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            ratAllCellStyleOddDec.SetFillForegroundColor(retcolorToFillOddDec);
            ratAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatOddDec = workbook.CreateDataFormat();
            ratAllCellStyleOddDec.DataFormat = retformatOddDec.GetFormat(ratioDecimalFormat);
            ratAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            XSSFCellStyle ratAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            ratAllCellStyleOddDecWnuf.SetFillForegroundColor(retcolorToFillOddDecWnuf);
            ratAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatOddDecWnuf = workbook.CreateDataFormat();
            ratAllCellStyleOddDecWnuf.DataFormat = retformatOddDecWnuf.GetFormat(ratioNumberDecimalFormat);
            ratAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region No Format
            XSSFCellStyle AllCellStyleOdd = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleOdd.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillOdd = new XSSFColor(new byte[] { 255, 255, 255 });
            AllCellStyleOdd.SetFillForegroundColor(colorToFillOdd);
            AllCellStyleOdd.FillPattern = FillPattern.SolidForeground;
            AllCellStyleOdd.Alignment = HorizontalAlignment.Center;
            AllCellStyleOdd.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #endregion

            #region Cell Style For First Column Even Row
            XSSFCellStyle AllCellStyleFstColmEven = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleFstColmEven.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillFstClmnEven = new XSSFColor(new byte[] { 176, 196, 222 });
            AllCellStyleFstColmEven.SetFillForegroundColor(colorToFillFstClmnEven);
            AllCellStyleFstColmEven.FillPattern = FillPattern.SolidForeground;
            AllCellStyleFstColmEven.Alignment = HorizontalAlignment.Left;
            AllCellStyleFstColmEven.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region Cell Style For First Column Odd Row
            XSSFCellStyle AllCellStyleFstColmOdd = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleFstColmOdd.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillFstClmnOdd = new XSSFColor(new byte[] { 255, 255, 255 });
            AllCellStyleFstColmOdd.SetFillForegroundColor(colorToFillFstClmnOdd);
            AllCellStyleFstColmOdd.FillPattern = FillPattern.SolidForeground;
            AllCellStyleFstColmOdd.Alignment = HorizontalAlignment.Left;
            AllCellStyleFstColmOdd.VerticalAlignment = VerticalAlignment.Center;
            #endregion
            #region Without Decimal Number Format Even Row
            XSSFCellStyle intAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            intAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            intAllCellStyleEvenDecFrmt.SetFillForegroundColor(intcolorToFillEvenWtoutDec);
            intAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat intformatEven = workbook.CreateDataFormat();
            intAllCellStyleEvenDecFrmt.DataFormat = intformatEven.GetFormat(intNumberWithoutDecimalFormat);
            intAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            intAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle intSimpleAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            intSimpleAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intSimplecolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            intSimpleAllCellStyleEvenDecFrmt.SetFillForegroundColor(intSimplecolorToFillEvenWtoutDec);
            intSimpleAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            intSimpleAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            intSimpleAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;
            #endregion
            #region Without Decimal Number Format Odd Row
            XSSFCellStyle intAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            intAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            intAllCellStyleOddDec.SetFillForegroundColor(intcolorToFillOddDec);
            intAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat intformatOddDec = workbook.CreateDataFormat();
            intAllCellStyleOddDec.DataFormat = intformatOddDec.GetFormat(intNumberWithoutDecimalFormat);
            intAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            intAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle intSimpleAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            intSimpleAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intSimplecolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            intSimpleAllCellStyleOddDec.SetFillForegroundColor(intSimplecolorToFillOddDec);
            intSimpleAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            intSimpleAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            intSimpleAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;
            #endregion
            #region With DateTime format
            var DateTimeFormat = ubs.DateFormat;
            var MonthYearFormat = "MMM-yyyy";
            XSSFCellStyle DateTimeAllCellStyleEvenFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            DateTimeAllCellStyleEvenFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleEvenFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleEvenFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleEvenFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor DateTimecolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            DateTimeAllCellStyleEvenFrmt.SetFillForegroundColor(DateTimecolorToFillEvenWtoutDec);
            DateTimeAllCellStyleEvenFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat DateTimeformatEven = workbook.CreateDataFormat();
            DateTimeAllCellStyleEvenFrmt.DataFormat = DateTimeformatEven.GetFormat(DateTimeFormat);
            DateTimeAllCellStyleEvenFrmt.Alignment = HorizontalAlignment.Center;
            DateTimeAllCellStyleEvenFrmt.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle DateTimeAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            DateTimeAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor DateTimecolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            DateTimeAllCellStyleOddDec.SetFillForegroundColor(DateTimecolorToFillOddDec);
            DateTimeAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat DateTimeformatOddDec = workbook.CreateDataFormat();
            DateTimeAllCellStyleOddDec.DataFormat = DateTimeformatOddDec.GetFormat(DateTimeFormat);
            DateTimeAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            DateTimeAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            #endregion
            #region With MonthYear format
            XSSFCellStyle MonthYearAllCellStyleEvenFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            MonthYearAllCellStyleEvenFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            MonthYearAllCellStyleEvenFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            MonthYearAllCellStyleEvenFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            MonthYearAllCellStyleEvenFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor MonthYearcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            MonthYearAllCellStyleEvenFrmt.SetFillForegroundColor(MonthYearcolorToFillEvenWtoutDec);
            MonthYearAllCellStyleEvenFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat MonthYearformatEven = workbook.CreateDataFormat();
            MonthYearAllCellStyleEvenFrmt.DataFormat = DateTimeformatEven.GetFormat(MonthYearFormat);
            MonthYearAllCellStyleEvenFrmt.Alignment = HorizontalAlignment.Center;
            MonthYearAllCellStyleEvenFrmt.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle MonthYearAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            MonthYearAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            MonthYearAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            MonthYearAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            MonthYearAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor MonthYearcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            MonthYearAllCellStyleOddDec.SetFillForegroundColor(MonthYearcolorToFillOddDec);
            MonthYearAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat MonthYearformatOddDec = workbook.CreateDataFormat();
            MonthYearAllCellStyleOddDec.DataFormat = DateTimeformatOddDec.GetFormat(MonthYearFormat);
            MonthYearAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            MonthYearAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            #endregion
            #region Value added to the Excel

            #region Added by Subrata on 22 Feb 2018
            bool IsNumericKey = false;
            bool IsNumericValue = false;
            var AllListData = listData.SelectMany(x => x.LstKeyValuePair).ToArray();
            var AllDataKey = AllListData.Select(x => x.Key).Distinct().ToArray();
            int ValueRes;
            IsNumericKey = int.TryParse(AllDataKey[0], out ValueRes);
            #endregion

            int incr = 6;
            bool isNumeric = false;
            foreach (var item in listData)
            {
                if (item.LstKeyValuePair.Count() > 0)
                {
                    int value;
                    isNumeric = int.TryParse(item.LstKeyValuePair[0].Key, out value);
                }
                var dataRow = sheet.CreateRow(incr);
                sheet.GetRow(incr).HeightInPoints = 20;
                if (isNumeric == true)
                {
                    var cellValues = (from i in item.LstKeyValuePair
                                      join h in listTableHeader
                                      on i.Key.ToString() equals h.Position.ToString()
                                      orderby h.Position
                                      let j = item.HeaderEntity ?? h
                                      select new
                                      {
                                          IsNum = j.IsNumberFormatReq,
                                          DecType = j.DecFormatType,
                                          Value = i.Value,
                                          IsMixedType = j.IsMixedValueType,
                                          IsPercentageType = j.IsPercentageValueType,
                                          IsDateTimeStringMixedType = j.IsDateTimeStringMixedType,
                                          IsDateTimeType = j.IsDateTimeType,
                                          IsMonthYearType = j.IsMonthYearType,
                                          IsMerge = i.IsRowMerged,
                                          RowCount = i.CountRow
                                      }).ToArray();

                    for (int k = 0; k < cellValues.Length; k++)
                    {
                        var datacell = dataRow.CreateCell(k);
                        if (cellValues[k].IsMerge)
                        {
                            CellMerged(sheet, incr, incr + cellValues[k].RowCount - 1, k, k);
                        }
                        if (cellValues[k].DecType != DecimalFormatType.NoDecimalReq)
                        {
                            double OutVal;
                            if (string.IsNullOrEmpty(cellValues[k].Value) || cellValues[k].Value == BlankData || !double.TryParse(cellValues[k].Value, out OutVal))
                            {
                                datacell.SetCellValue(cellValues[k].Value);
                                if (k > 0)
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;

                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }

                            }
                            else
                            {
                                datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));

                                if (k > 0)
                                {
                                    if (cellValues[k].DecType == DecimalFormatType.AUM)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {

                                                datacell.CellStyle = aumAllCellStyleEvenDecFrmtWNum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = aumAllCellStyleEvenDecFrmt;
                                            }
                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = aumAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = aumAllCellStyleOddDec;
                                            }
                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.NAV)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = navAllCellStyleEvenDecFrmtWnnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = navAllCellStyleEvenDecFrmt;
                                            }
                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = navAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = navAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.OTHER)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = otherAllCellStyleEvenDecFrmtWnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = otherAllCellStyleEvenDecFrmt;
                                            }
                                        }

                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = othAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {

                                                datacell.CellStyle = othAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.RATIO)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = ratAllCellStyleEvenDecFrmtWth;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = ratAllCellStyleEvenDecFrmt;
                                            }
                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = ratAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = ratAllCellStyleOddDec;
                                            }
                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.RETURN)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = retAllCellStyleEvenDecFrmtWnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = retAllCellStyleEvenDecFrmt;
                                            }

                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = retAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = retAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.IntegerWithOutDecimal)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = intAllCellStyleEvenDecFrmt;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = intSimpleAllCellStyleEvenDecFrmt;
                                            }

                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = intAllCellStyleOddDec;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = intSimpleAllCellStyleOddDec;
                                            }

                                        }
                                    }

                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }

                            }

                        }
                        else
                        {
                            double OutVal;
                            if (double.TryParse(cellValues[k].Value, out OutVal) && !cellValues[k].IsMixedType && !cellValues[k].IsPercentageType)
                            {
                                datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                                if (k > 0)
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;

                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }
                            }
                            else if (cellValues[k].IsPercentageType)
                            {
                                if (double.TryParse(cellValues[k].Value, out OutVal))
                                {
                                    datacell.SetCellValue(OutVal / 100);
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = cellStylePercentEven;
                                    else
                                        datacell.CellStyle = cellStylePercentOdd;
                                }
                                else
                                {
                                    datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleEven;
                                        else
                                            datacell.CellStyle = AllCellStyleOdd;
                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }
                                }
                            }
                            else if (cellValues[k].IsDateTimeType)
                            {
                                DateTime OutValdt;
                                if (DateTime.TryParse(cellValues[k].Value, out OutValdt))
                                {
                                    datacell.SetCellValue(Convert.ToDateTime(cellValues[k].Value));
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = DateTimeAllCellStyleEvenFrmt;
                                    else
                                        datacell.CellStyle = DateTimeAllCellStyleOddDec;
                                    if (k == 0)
                                    {
                                        datacell.CellStyle.Alignment = HorizontalAlignment.Left;
                                    }
                                }
                                else
                                {
                                    datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleEven;
                                        else
                                            datacell.CellStyle = AllCellStyleOdd;

                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }
                                }
                            }
                            else if (cellValues[k].IsDateTimeStringMixedType)
                            {
                                DateTime OutValdt;
                                if (DateTime.TryParse(cellValues[k].Value, out OutValdt))
                                {
                                    datacell.SetCellValue(Convert.ToDateTime(cellValues[k].Value));
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = DateTimeAllCellStyleEvenFrmt;
                                    else
                                        datacell.CellStyle = DateTimeAllCellStyleOddDec;
                                    if (k == 0)
                                    {
                                        datacell.CellStyle.Alignment = HorizontalAlignment.Left;
                                    }
                                }
                                else
                                {
                                    datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleEven;
                                        else
                                            datacell.CellStyle = AllCellStyleOdd;

                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }
                                }
                            }
                            else if (cellValues[k].IsMonthYearType)
                            {
                                DateTime OutValdt;
                                if (DateTime.TryParse(cellValues[k].Value, out OutValdt))
                                {
                                    datacell.SetCellValue(Convert.ToDateTime(cellValues[k].Value));
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = MonthYearAllCellStyleEvenFrmt;
                                    else
                                        datacell.CellStyle = MonthYearAllCellStyleOddDec;
                                    if (k == 0)
                                    {
                                        datacell.CellStyle.Alignment = HorizontalAlignment.Left;
                                    }
                                }
                                else
                                {
                                    datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleEven;
                                        else
                                            datacell.CellStyle = AllCellStyleOdd;

                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }
                                }
                            }
                            else
                            {
                                datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                if (k > 0)
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;

                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }
                            }
                        }


                    }
                    incr++;
                }
                else
                {
                    var cellValues = (from i in item.LstKeyValuePair
                                      join h in listTableHeader
                                      on i.Key equals h.ColumnName
                                      orderby h.Position
                                      let j = item.HeaderEntity ?? h
                                      select new
                                      {
                                          IsNum = j.IsNumberFormatReq,
                                          DecType = j.DecFormatType,
                                          IsMixedType = j.IsMixedValueType,
                                          IsPercentageType = j.IsPercentageValueType,
                                          IsDateTimeStringMixedType = j.IsDateTimeStringMixedType,
                                          IsDateTimeType = j.IsDateTimeType,
                                          IsMonthYearType = j.IsMonthYearType,
                                          Value = i.Value,
                                          IsMerge = i.IsRowMerged,
                                          RowCount = i.CountRow
                                      }).ToArray();

                    for (int k = 0; k < cellValues.Length; k++)
                    {
                        var datacell = dataRow.CreateCell(k);

                        if (cellValues[k].IsMerge)
                        {
                            CellMerged(sheet, incr, incr + cellValues[k].RowCount - 1, k, k);
                        }
                        if (cellValues[k].DecType != DecimalFormatType.NoDecimalReq)
                        {
                            double OutVal;
                            if (string.IsNullOrEmpty(cellValues[k].Value) || cellValues[k].Value == BlankData || !double.TryParse(cellValues[k].Value, out OutVal))
                            {
                                datacell.SetCellValue(cellValues[k].Value);
                                if (k > 0)
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;
                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }

                            }
                            else
                            {
                                datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                                if (k > 0)
                                {
                                    if (cellValues[k].DecType == DecimalFormatType.AUM)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {

                                                datacell.CellStyle = aumAllCellStyleEvenDecFrmtWNum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = aumAllCellStyleEvenDecFrmt;
                                            }
                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = aumAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = aumAllCellStyleOddDec;
                                            }
                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.NAV)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = navAllCellStyleEvenDecFrmtWnnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = navAllCellStyleEvenDecFrmt;
                                            }
                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = navAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = navAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.OTHER)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = otherAllCellStyleEvenDecFrmtWnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = otherAllCellStyleEvenDecFrmt;
                                            }
                                        }

                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = othAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {

                                                datacell.CellStyle = othAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.RATIO)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = ratAllCellStyleEvenDecFrmtWth;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = ratAllCellStyleEvenDecFrmt;
                                            }
                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = ratAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = ratAllCellStyleOddDec;
                                            }
                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.RETURN)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = retAllCellStyleEvenDecFrmtWnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = retAllCellStyleEvenDecFrmt;
                                            }

                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = retAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = retAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.IntegerWithOutDecimal)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = intAllCellStyleEvenDecFrmt;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = intSimpleAllCellStyleEvenDecFrmt;
                                            }

                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = intAllCellStyleOddDec;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = intSimpleAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }

                            }

                        }
                        else
                        {
                            double OutVal;
                            if (double.TryParse(cellValues[k].Value, out OutVal) && !cellValues[k].IsMixedType && !cellValues[k].IsPercentageType)
                            {
                                datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                                if (k > 0)
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;

                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }
                            }
                            else if (cellValues[k].IsPercentageType)
                            {
                                if (double.TryParse(cellValues[k].Value, out OutVal))
                                {
                                    datacell.SetCellValue(OutVal / 100);
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = cellStylePercentEven;
                                    else
                                        datacell.CellStyle = cellStylePercentOdd;
                                }
                                else
                                {
                                    datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleEven;
                                        else
                                            datacell.CellStyle = AllCellStyleOdd;
                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }
                                }
                            }
                            else if (cellValues[k].IsDateTimeType)
                            {
                                DateTime OutValdt;
                                if (DateTime.TryParse(cellValues[k].Value, out OutValdt))
                                {
                                    datacell.SetCellValue(Convert.ToDateTime(cellValues[k].Value));
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = DateTimeAllCellStyleEvenFrmt;
                                    else
                                        datacell.CellStyle = DateTimeAllCellStyleOddDec;
                                    if (k == 0)
                                    {
                                        datacell.CellStyle.Alignment = HorizontalAlignment.Left;
                                    }
                                }
                                else
                                {
                                    datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleEven;
                                        else
                                            datacell.CellStyle = AllCellStyleOdd;

                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }
                                }
                            }
                            else if (cellValues[k].IsDateTimeStringMixedType)
                            {
                                DateTime OutValdt;
                                if (DateTime.TryParse(cellValues[k].Value, out OutValdt))
                                {
                                    datacell.SetCellValue(Convert.ToDateTime(cellValues[k].Value));
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = DateTimeAllCellStyleEvenFrmt;
                                    else
                                        datacell.CellStyle = DateTimeAllCellStyleOddDec;
                                    if (k == 0)
                                    {
                                        datacell.CellStyle.Alignment = HorizontalAlignment.Left;
                                    }
                                }
                                else
                                {
                                    datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleEven;
                                        else
                                            datacell.CellStyle = AllCellStyleOdd;

                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }
                                }
                            }
                            else if (cellValues[k].IsMonthYearType)
                            {
                                DateTime OutValdt;
                                if (DateTime.TryParse(cellValues[k].Value, out OutValdt))
                                {
                                    datacell.SetCellValue(Convert.ToDateTime(cellValues[k].Value));
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = MonthYearAllCellStyleEvenFrmt;
                                    else
                                        datacell.CellStyle = MonthYearAllCellStyleOddDec;
                                    if (k == 0)
                                    {
                                        datacell.CellStyle.Alignment = HorizontalAlignment.Left;
                                    }
                                }
                                else
                                {
                                    datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleEven;
                                        else
                                            datacell.CellStyle = AllCellStyleOdd;

                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }
                                }
                            }
                            else
                            {
                                datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                if (k > 0)
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;

                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }
                            }
                        }


                    }
                    incr++;
                }

            }
            #endregion

            for (int i = 0; i < listTableHeader.Count; i++)
                sheet.AutoSizeColumn(i);
            if (sheet.GetColumnWidth(0) < 11072)
                sheet.SetColumnWidth(0, 11072);

            #region Logo
            try
            {
                if (!string.IsNullOrEmpty(LogoPath))
                {
                    XSSFDrawing patriarch = (XSSFDrawing)sheet.CreateDrawingPatriarch();
                    XSSFClientAnchor anchor;
                    anchor = new XSSFClientAnchor(0, 0, 0, 255, 0, 0, 0, 3);
                    anchor.AnchorType = AnchorType.DontMoveAndResize;
                    XSSFPicture picture = (XSSFPicture)patriarch.CreatePicture(anchor, LoadImage(LogoPath, workbook, PictureType.PNG));
                    double x1 = .25;
                    double y1 = .75;
                    picture.Resize(x1, y1);
                    picture.LineStyle = LineStyle.None;
                }
            }
            catch (Exception ex)
            {
            }

            #endregion

            #region Source, Date As On and Report Generated On
            ICRArow = sheet.CreateRow(incr + 3);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrSource);

            ICRArow = sheet.CreateRow(incr + 4);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrDateAsOn);

            ICRArow = sheet.CreateRow(incr + 5);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrReportGeneratedOn);
            #endregion

            #region Sheet Two Logo
            try
            {
                if (!string.IsNullOrEmpty(LogoPath))
                {
                    XSSFDrawing patriarch = (XSSFDrawing)sheetTwo.CreateDrawingPatriarch();
                    XSSFClientAnchor anchor;
                    anchor = new XSSFClientAnchor(0, 0, 0, 255, 0, 0, 0, 3);
                    anchor.AnchorType = AnchorType.DontMoveAndResize;
                    XSSFPicture picture = (XSSFPicture)patriarch.CreatePicture(anchor, LoadImage(LogoPath, workbook, PictureType.PNG));
                    double x1 = 1.10;
                    double y1 = 1.10;
                    picture.Resize(x1, y1);
                    picture.LineStyle = LineStyle.None;
                }
            }
            catch (Exception ex)
            {
            }
            #endregion

            #region Disclaimer Sheet
            var Row = sheetTwo.CreateRow(1);
            var cellSheetTwo = Row.CreateCell(7);
            cellSheetTwo.SetCellValue(StrHeader1);
            cellSheetTwo.CellStyle = HeaderStyle;

            Row = sheetTwo.CreateRow(4);
            ICell Cell;
            for (int i = 0; i < 17; i++)
            {
                Cell = Row.CreateCell(i);

                XSSFCellStyle declationstyle = (XSSFCellStyle)workbook.CreateCellStyle();

                declationstyle.Alignment = HorizontalAlignment.Left;
                declationstyle.VerticalAlignment = VerticalAlignment.Top;
                declationstyle.WrapText = true;
                IFont declarationfnt = (XSSFFont)workbook.CreateFont();
                //declarationfnt.Boldweight = (short)FontBoldWeight.Bold;
                declarationfnt.FontName = "Calibri";
                declarationfnt.FontHeightInPoints = (short)11;
                declationstyle.SetFont(declarationfnt);
                Cell.SetCellValue(!string.IsNullOrEmpty(Footer) ? Footer : "All information contained herein is obtained by ICRA Analytics Limited from sources believed by it to be accurate and reliable. Because of the possibility of human or mechanical error as well as other factors, however, all information contained herein is provided 'AS IS' without warranty of any kind. ICRA Analytics adopts all necessary measures so that the information it uses is of sufficient quality and from sources ICRA Analytics considers to be reliable including, when appropriate, independent third-party sources. However, ICRA Analytics is not an auditor and cannot in every instance independently verify or validate information received in preparing this document." +
                    "All information contained herein must be construed solely as statements of opinion, and  ICRA Analytics Limited or its affiliates or group companies and its respective and any of its officers, directors, personnel and employees, disclaim liability to any loss, damage of any nature, including but not limited to direct, indirect, punitive, special, exemplary, consequential, as also any loss of profit in any way arising from the use of this document or its contents in any manner or for any contingency within or beyond the control of, ICRA Analytics or any of its directors, officers, employees, agents, representatives, licensors or suppliers, arising from or in connection with the information contained herein or the use of or inability to use any such information.Opinions expressed in the document are not the opinions of our holding company, ICRA Limited(ICRA), and should not be construed as any indication of credit rating or grading of ICRA for any instruments that have been issued or are to be issued by any entity.The recipient alone shall be fully responsible and / or are liable for any decision taken on the basis of this document and / or the information contained herein.");
                Cell.CellStyle = declationstyle;

            }
            NPOIWrite.CellMerged(sheetTwo, 4, 4, 0, 17);
            sheetTwo.GetRow(4).HeightInPoints = 200;
            #endregion

            #region Disclaimer Sheet HyperLink
            XSSFCellStyle HyperLinkStyle = (XSSFCellStyle)workbook.CreateCellStyle();
            IFont HyperLinkFont = workbook.CreateFont();
            HyperLinkFont.Color = IndexedColors.Orange.Index;
            HyperLinkFont.Underline = FontUnderlineType.Single;
            HyperLinkStyle.SetFont(HyperLinkFont);

            Row = sheetTwo.CreateRow(5);
            Cell = Row.CreateCell(0);
            Cell.SetCellValue("Click here for third-party disclaimers");
            XSSFCreationHelper createHelper = (XSSFCreationHelper)workbook.GetCreationHelper();
            XSSFHyperlink link = (XSSFHyperlink)createHelper.CreateHyperlink(HyperlinkType.Url);
            link.Address = "https://www.icraanalytics.com/home/thirdpartydisclaimers";
            Cell.Hyperlink = link;
            Cell.CellStyle = HyperLinkStyle;
            #endregion

            sheet.ActiveCell = new CellAddress(0, 1);
            var stream = new MemoryStream();
            workbook.Write(stream);

            return workbook;
        }
        public static NPOI.XSSF.UserModel.XSSFWorkbook ExportToExcelWorkEntryExitLoad(UserBasicSettings ubs, IEnumerable<IEnumerable<TableHeaderEntity>> listTableHeaderRows, List<ExportEntity> listData, string LogoPath = "", string ReportName = "", string StrDateAsOn = "")
        {

            #region Variable
            string Header = ubs.Reporting_Format_Header;
            string Footer = ubs.Reporting_Format_Footer;
            string BlankData = ubs.BlankData == null ? "BLANK" : ubs.BlankData.ToUpper() == "BLANK" ? "" : ubs.BlankData;

            string StrHeader1 = "ICRA Analytics Limited";
            string StrHeader2 = "3rd Floor, Electric Mansion,Appasaheb Marathe Marg, Prabhadevi,Mumbai - 400 025 Maharashtra, India";
            string StrHeader3 = Header; //"Mumbai, Maharashtra 400093, IN";
            string StrReportName = ReportName;
            string StrSource = "Source: " + (string.IsNullOrEmpty(UserStatisticsEntity.SourceName) ? "MFI 360" : UserStatisticsEntity.SourceName);
            StrDateAsOn = "Data as on " + StrDateAsOn;
            string StrReportGeneratedOn = "Report Generated on " + DateTime.Now.ToString("dd-MMM-yyyy HH:mm:ss");

            #region number and decimal variable for AUM
            var aumPaddding = new string('0', (int)ubs.AUMDecimalFormat);
            var aumDecimalFormat = "0." + aumPaddding;
            string aumNUMBERFORMAT = ubs.NumberFormat;
            var aumNumberFormat = aumNUMBERFORMAT.Replace("0", "#");
            string aumNumberDecimalFormat = aumNumberFormat + "0." + new String('0', (int)ubs.AUMDecimalFormat);
            #endregion

            #region number and decimal variable for return
            var retPaddding = new string('0', (int)ubs.ReturnDecimalFormat);
            var retDecimalFormat = "0." + retPaddding;
            string retNUMBERFORMAT = ubs.NumberFormat;
            var retNumberFormat = retNUMBERFORMAT.Replace("0", "#");
            string retNumberDecimalFormat = retNumberFormat + "0." + new String('0', (int)ubs.ReturnDecimalFormat);
            #endregion

            #region number and decimal variable for NAV
            var navPaddding = new string('0', (int)ubs.NavDecimalFormat);
            var navDecimalFormat = "0." + navPaddding;
            string navNUMBERFORMAT = ubs.NumberFormat;
            var navNumberFormat = navNUMBERFORMAT.Replace("0", "#");
            string navNumberDecimalFormat = navNumberFormat + "0." + new String('0', (int)ubs.NavDecimalFormat);
            #endregion


            #region number and decimal variable for Other
            var othPaddding = new string('0', (int)ubs.OtherDecimal);
            var othDecimalFormat = "0." + othPaddding;
            string othNUMBERFORMAT = ubs.NumberFormat;
            var othNumberFormat = othNUMBERFORMAT.Replace("0", "#");
            string othNumberDecimalFormat = othNumberFormat + "0." + new String('0', (int)ubs.OtherDecimal);
            #endregion

            #region number and decimal variable for Ratio
            var ratioPaddding = new string('0', (int)ubs.RatioDecimalFormat);
            var ratioDecimalFormat = "0." + ratioPaddding;
            string ratioNUMBERFORMAT = ubs.NumberFormat;
            var ratioNumberFormat = ratioNUMBERFORMAT.Replace("0", "#");
            string ratioNumberDecimalFormat = ratioNumberFormat + "0." + new String('0', (int)ubs.RatioDecimalFormat);
            #endregion
            #region int Format with out Decimal
            var intNumberWithoutDecimalFormat = ubs.NumberFormat.Replace("0", "#");
            #endregion
            #endregion

            NPOI.XSSF.UserModel.XSSFWorkbook workbook = new NPOI.XSSF.UserModel.XSSFWorkbook();

            ISheet sheet = workbook.CreateSheet("Output");
            ISheet sheetTwo = workbook.CreateSheet("Disclaimer");

            #region Excel Sheet Gridlines Delete
            sheet.DisplayGridlines = false;
            sheetTwo.DisplayGridlines = false;
            #endregion

            #region Header Freeze
            sheet.CreateFreezePane(1, 5 + listTableHeaderRows.Count());
            #endregion

            #region Set Font For Header1,Header2 and Header3
            XSSFCellStyle HeaderStyle = (XSSFCellStyle)workbook.CreateCellStyle();
            IFont Headerfont = workbook.CreateFont();
            Headerfont.IsBold = true;
            HeaderStyle.SetFont(Headerfont);
            #endregion

            #region Set Cell Value For Header1, Header2 and Header3
            var ICRArow = sheet.CreateRow(0);
            ICRArow.CreateCell(0);
            NPOIWrite.CellMerged(sheet, 0, 0, 1, 9);
            var ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader1);
            ICRACell.CellStyle = HeaderStyle;
            ICRArow = sheet.CreateRow(1);
            ICRArow.CreateCell(0);
            NPOIWrite.CellMerged(sheet, 1, 1, 1, 9);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader2);
            ICRACell.CellStyle = HeaderStyle;
            ICRArow = sheet.CreateRow(2);
            ICRArow.CreateCell(0);
            NPOIWrite.CellMerged(sheet, 2, 2, 1, 9);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader3);
            ICRACell.CellStyle = HeaderStyle;
            ICRACell.CellStyle.Alignment = HorizontalAlignment.Center;
            ICRArow = sheet.CreateRow(3);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.CellStyle.Alignment = HorizontalAlignment.Center;
            NPOIWrite.AutoFitColumn(sheet, 1);
            ICRACell.CellStyle = HeaderStyle;
            #endregion

            #region Report Name
            ICRArow = sheet.CreateRow(4);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrReportName);
            HeaderStyle.Alignment = HorizontalAlignment.Left;
            ICRACell.CellStyle = HeaderStyle;
            #endregion

            #region Header creation in the Excel

            XSSFCellStyle style = (XSSFCellStyle)workbook.CreateCellStyle();
            XSSFColor colorToFill = new XSSFColor(new byte[] { 68, 114, 196 });//{ 51, 204, 204 }//Color.Blue);
            style.SetFillForegroundColor(colorToFill);
            IFont font = workbook.CreateFont();
            font.Color = NPOI.SS.UserModel.IndexedColors.White.Index;
            font.IsBold = true;
            style.SetFont(font);
            style.FillPattern = NPOI.SS.UserModel.FillPattern.SolidForeground;
            style.VerticalAlignment = NPOI.SS.UserModel.VerticalAlignment.Center;
            style.Alignment = NPOI.SS.UserModel.HorizontalAlignment.Center;
            style.BorderBottom = style.BorderLeft = style.BorderTop = style.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            //Creating Table Header Coordinates --> THCoordinates { Dictionary<int, Dictionary<int, Tuple<int, int, int, int>>> }
            Dictionary<int, Dictionary<int, Tuple<int, int, int, int>>> THCoordinates = new Dictionary<int, Dictionary<int, Tuple<int, int, int, int>>>();
            IEnumerable<TableHeaderEntity>[] TableHeaders = new TableHeaderEntity[listTableHeaderRows.Count()][];
            int totalColloumns = listTableHeaderRows.ElementAt(0).Sum(x => x.Colspan);
            bool[][] booked = new bool[listTableHeaderRows.Count()][];
            for (int i = 0; i < booked.Count(); i++) { booked[i] = new bool[totalColloumns]; }
            TableHeaderEntity thEntity;
            for (int headerNo = 0; headerNo < listTableHeaderRows.Count(); headerNo++)
            {
                sheet.CreateRow(5 + headerNo);
                TableHeaders[headerNo] = listTableHeaderRows.ElementAt(headerNo).OrderBy(x => x.Position).ToArray();
                if (!THCoordinates.ContainsKey(headerNo))
                    THCoordinates.Add(headerNo, new Dictionary<int, Tuple<int, int, int, int>>());

                int avalaibleCell = 0;
                for (int collNo = 0; collNo < TableHeaders[headerNo].Count(); collNo++)
                {
                    thEntity = TableHeaders[headerNo].ElementAt(collNo);
                    for (int k = avalaibleCell; k < totalColloumns; k++)
                    {
                        if (!booked[headerNo][k]) break;
                        else avalaibleCell++;
                    }
                    if (!THCoordinates[headerNo].ContainsKey(collNo))
                        THCoordinates[headerNo].Add(collNo, new Tuple<int, int, int, int>(headerNo + 5, headerNo + 5 + (thEntity.Rowspan ?? 1) - 1, avalaibleCell, (avalaibleCell += thEntity.Colspan) - 1));
                    for (int L = headerNo; L < (thEntity.Rowspan ?? 1); L++)
                        for (int k = THCoordinates[headerNo][collNo].Item3; k <= THCoordinates[headerNo][collNo].Item4; k++)
                            booked[L][k] = true;
                }
            }
            //Adding Table Headers
            ICell cell; IRow headerRow; CellRangeAddress cellRangeAddress;
            //foreach (var headerNo in THCoordinates.Keys)
            //{
            //    sheet.CreateRow(5 + headerNo);
            //    foreach (var collNo in THCoordinates[headerNo].Keys)
            //    {
            //        for (int i = THCoordinates[headerNo][collNo].Item1; i <= THCoordinates[headerNo][collNo].Item2; i++)
            //        {
            //            for (int j = THCoordinates[headerNo][collNo].Item3 + 1; j <= THCoordinates[headerNo][collNo].Item4; j++)
            //            {
            //                headerRow = sheet.GetRow(5 + headerNo);
            //                cell = headerRow.CreateCell(j);
            //                cell.CellStyle = style;
            //            }
            //        }
            //    }
            //}
            for (int headerNo = 0; headerNo < listTableHeaderRows.Count(); headerNo++)
            {
                //sheet.CreateRow(5 + headerNo);
                headerRow = sheet.GetRow(5 + headerNo);
                headerRow.HeightInPoints = 30;
                var listHeaderFinal = listTableHeaderRows.ElementAt(headerNo).OrderBy(x => x.Position);
                string TextAlignFirstRow = listHeaderFinal.Count() > 0 ? listHeaderFinal.ElementAt(0).TextAlign : string.Empty;
                Tuple<int, int, int, int> coordinates;
                for (int collNo = 0; collNo < listHeaderFinal.Count(); collNo++)
                {
                    coordinates = THCoordinates[headerNo][collNo];
                    cellRangeAddress = new CellRangeAddress(coordinates.Item1, coordinates.Item2, coordinates.Item3, coordinates.Item4);
                    style.Alignment = collNo == 0 ? ((string.IsNullOrEmpty(TextAlignFirstRow) || TextAlignFirstRow == EnumTextAlign.left.ToString()) ? HorizontalAlignment.Left
                                  : TextAlignFirstRow == EnumTextAlign.center.ToString() ? HorizontalAlignment.Center : HorizontalAlignment.Right) : HorizontalAlignment.Center;
                    //cell.CellStyle = style;
                    for (int cellRow = cellRangeAddress.FirstRow; cellRow <= cellRangeAddress.LastRow; cellRow++)
                    {
                        for (int cellColl = cellRangeAddress.FirstColumn; cellColl <= cellRangeAddress.LastColumn; cellColl++)
                        {
                            headerRow = sheet.GetRow(cellRow);
                            cell = headerRow.CreateCell(cellColl);
                            cell.CellStyle = style;
                            //cell.SetCellValue(string.Empty);
                        }
                    }
                    headerRow = sheet.GetRow(5 + headerNo);

                    //cell = headerRow.CreateCell(coordinates.Item3);
                    cell = headerRow.GetCell(cellRangeAddress.FirstColumn);
                    cell.SetCellValue(listHeaderFinal.ElementAt(collNo).ColumnName);
                    NPOIWrite.AutoFitColumn(sheet, collNo);


                    RegionUtil.SetBorderLeft((int)BorderStyle.Thin, cellRangeAddress, sheet);
                    RegionUtil.SetBorderTop((int)BorderStyle.Thin, cellRangeAddress, sheet);
                    RegionUtil.SetBorderRight((int)BorderStyle.Thin, cellRangeAddress, sheet);
                    RegionUtil.SetBorderBottom((int)BorderStyle.Thin, cellRangeAddress, sheet);
                    NPOIWrite.CellMerged(sheet, coordinates.Item1, coordinates.Item2, coordinates.Item3, coordinates.Item4);

                }
            }

            List<TableHeaderEntity> FinalTableHeaders = new List<TableHeaderEntity>();
            for (int headerNo = 0; headerNo < TableHeaders.Count(); headerNo++)
            {
                for (int collNo = 0; collNo < TableHeaders[headerNo].Count(); collNo++)
                {
                    thEntity = TableHeaders[headerNo].ElementAt(collNo);
                    if (thEntity.Colspan == 1 && THCoordinates[headerNo][collNo].Item2 == 4 + TableHeaders.Count())
                    {
                        thEntity.Position = THCoordinates[headerNo][collNo].Item3;
                        FinalTableHeaders.Add(thEntity);
                    }
                }
            }
            #endregion

            #region Cell Style For Even Row

            #region With DecimalFormat AUM
            XSSFCellStyle aumAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmt.WrapText = true;
            XSSFColor aumcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            aumAllCellStyleEvenDecFrmt.SetFillForegroundColor(aumcolorToFillEvenWtoutDec);
            aumAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat aumformatEven = workbook.CreateDataFormat();
            aumAllCellStyleEvenDecFrmt.DataFormat = aumformatEven.GetFormat(aumDecimalFormat);
            aumAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;
            //percentage format

            XSSFCellStyle cellStylePercentEven = (XSSFCellStyle)workbook.CreateCellStyle();
            cellStylePercentEven.DataFormat = HSSFDataFormat.GetBuiltinFormat("0.00%");
            cellStylePercentEven.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            cellStylePercentEven.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            cellStylePercentEven.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            cellStylePercentEven.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            cellStylePercentEven.WrapText = true;
            XSSFColor colorToFillFstClmnEvenpercent = new XSSFColor(new byte[] { 176, 196, 222 });
            cellStylePercentEven.SetFillForegroundColor(colorToFillFstClmnEvenpercent);
            cellStylePercentEven.FillPattern = FillPattern.SolidForeground;
            cellStylePercentEven.Alignment = HorizontalAlignment.Left;
            cellStylePercentEven.VerticalAlignment = VerticalAlignment.Center;
            cellStylePercentEven.SetDataFormat(workbook.CreateDataFormat().GetFormat("0.00%"));

            XSSFCellStyle cellStylePercentOdd = (XSSFCellStyle)workbook.CreateCellStyle();
            cellStylePercentOdd.DataFormat = HSSFDataFormat.GetBuiltinFormat("0.00%");
            cellStylePercentOdd.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            cellStylePercentOdd.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            cellStylePercentOdd.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            cellStylePercentOdd.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            cellStylePercentOdd.WrapText = true;
            XSSFColor colorToFillFstClmnOddpercent = new XSSFColor(new byte[] { 255, 255, 255 });
            cellStylePercentOdd.SetFillForegroundColor(colorToFillFstClmnOddpercent);
            cellStylePercentOdd.FillPattern = FillPattern.SolidForeground;
            cellStylePercentOdd.Alignment = HorizontalAlignment.Left;
            cellStylePercentOdd.VerticalAlignment = VerticalAlignment.Center;
            cellStylePercentOdd.SetDataFormat(workbook.CreateDataFormat().GetFormat("0.00%"));

            /// Number Format ////
            XSSFCellStyle aumAllCellStyleEvenDecFrmtWNum = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleEvenDecFrmtWNum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmtWNum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmtWNum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmtWNum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmtWNum.WrapText = true;
            XSSFColor aumcolorToFillEvenWtoutDecWNum = new XSSFColor(new byte[] { 176, 196, 222 });
            aumAllCellStyleEvenDecFrmtWNum.SetFillForegroundColor(aumcolorToFillEvenWtoutDecWNum);
            aumAllCellStyleEvenDecFrmtWNum.FillPattern = FillPattern.SolidForeground;
            IDataFormat aumformatEvenWNum = workbook.CreateDataFormat();
            aumAllCellStyleEvenDecFrmtWNum.DataFormat = aumformatEvenWNum.GetFormat(aumNumberDecimalFormat);
            aumAllCellStyleEvenDecFrmtWNum.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleEvenDecFrmtWNum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Return
            XSSFCellStyle retAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmt.WrapText = true;
            XSSFColor retcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            retAllCellStyleEvenDecFrmt.SetFillForegroundColor(retcolorToFillEvenWtoutDec);
            retAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatEven = workbook.CreateDataFormat();
            retAllCellStyleEvenDecFrmt.DataFormat = retformatEven.GetFormat(retDecimalFormat);
            retAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            retAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;


            ////Number Format ////
            XSSFCellStyle retAllCellStyleEvenDecFrmtWnum = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleEvenDecFrmtWnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmtWnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmtWnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmtWnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmtWnum.WrapText = true;
            XSSFColor retcolorToFillEvenWtoutDecWnum = new XSSFColor(new byte[] { 176, 196, 222 });
            retAllCellStyleEvenDecFrmtWnum.SetFillForegroundColor(retcolorToFillEvenWtoutDecWnum);
            retAllCellStyleEvenDecFrmtWnum.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatEvenWnum = workbook.CreateDataFormat();
            retAllCellStyleEvenDecFrmtWnum.DataFormat = retformatEvenWnum.GetFormat(retNumberDecimalFormat);
            retAllCellStyleEvenDecFrmtWnum.Alignment = HorizontalAlignment.Center;
            retAllCellStyleEvenDecFrmtWnum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Nav
            XSSFCellStyle navAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmt.WrapText = true;
            XSSFColor navcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            navAllCellStyleEvenDecFrmt.SetFillForegroundColor(navcolorToFillEvenWtoutDec);
            navAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat navformatEven = workbook.CreateDataFormat();
            navAllCellStyleEvenDecFrmt.DataFormat = navformatEven.GetFormat(navDecimalFormat);
            navAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            navAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;


            /// Number Format ////
            XSSFCellStyle navAllCellStyleEvenDecFrmtWnnum = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleEvenDecFrmtWnnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmtWnnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmtWnnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmtWnnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmtWnnum.WrapText = true;
            XSSFColor navcolorToFillEvenWtoutDecWnnum = new XSSFColor(new byte[] { 176, 196, 222 });
            navAllCellStyleEvenDecFrmtWnnum.SetFillForegroundColor(navcolorToFillEvenWtoutDecWnnum);
            navAllCellStyleEvenDecFrmtWnnum.FillPattern = FillPattern.SolidForeground;
            IDataFormat navformatEvenWnnum = workbook.CreateDataFormat();
            navAllCellStyleEvenDecFrmtWnnum.DataFormat = navformatEvenWnnum.GetFormat(navNumberDecimalFormat);
            navAllCellStyleEvenDecFrmtWnnum.Alignment = HorizontalAlignment.Center;
            navAllCellStyleEvenDecFrmtWnnum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Other
            XSSFCellStyle otherAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            otherAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmt.WrapText = true;
            XSSFColor othercolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            otherAllCellStyleEvenDecFrmt.SetFillForegroundColor(othercolorToFillEvenWtoutDec);
            otherAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat otherformatEven = workbook.CreateDataFormat();
            otherAllCellStyleEvenDecFrmt.DataFormat = otherformatEven.GetFormat(othDecimalFormat);
            otherAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            otherAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            /// Number Format ///
            XSSFCellStyle otherAllCellStyleEvenDecFrmtWnum = (XSSFCellStyle)workbook.CreateCellStyle();
            otherAllCellStyleEvenDecFrmtWnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmtWnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmtWnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmtWnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmtWnum.WrapText = true;
            XSSFColor othercolorToFillEvenWtoutDecWnum = new XSSFColor(new byte[] { 176, 196, 222 });
            otherAllCellStyleEvenDecFrmtWnum.SetFillForegroundColor(othercolorToFillEvenWtoutDecWnum);
            otherAllCellStyleEvenDecFrmtWnum.FillPattern = FillPattern.SolidForeground;
            IDataFormat otherformatEvenWnum = workbook.CreateDataFormat();
            otherAllCellStyleEvenDecFrmtWnum.DataFormat = otherformatEvenWnum.GetFormat(othNumberDecimalFormat);
            otherAllCellStyleEvenDecFrmtWnum.Alignment = HorizontalAlignment.Center;
            otherAllCellStyleEvenDecFrmtWnum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Ratio
            XSSFCellStyle ratAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor ratcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            ratAllCellStyleEvenDecFrmt.SetFillForegroundColor(ratcolorToFillEvenWtoutDec);
            ratAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            ratAllCellStyleEvenDecFrmt.WrapText = true;
            IDataFormat ratformatEven = workbook.CreateDataFormat();
            ratAllCellStyleEvenDecFrmt.DataFormat = ratformatEven.GetFormat(ratioDecimalFormat);
            ratAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle ratAllCellStyleEvenDecFrmtWth = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleEvenDecFrmtWth.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmtWth.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmtWth.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmtWth.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmtWth.WrapText = true;
            XSSFColor ratcolorToFillEvenWtoutDecwth = new XSSFColor(new byte[] { 176, 196, 222 });
            ratAllCellStyleEvenDecFrmtWth.SetFillForegroundColor(ratcolorToFillEvenWtoutDecwth);
            ratAllCellStyleEvenDecFrmtWth.FillPattern = FillPattern.SolidForeground;
            IDataFormat ratformatEvenWth = workbook.CreateDataFormat();
            ratAllCellStyleEvenDecFrmtWth.DataFormat = ratformatEvenWth.GetFormat(ratioNumberDecimalFormat);
            ratAllCellStyleEvenDecFrmtWth.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleEvenDecFrmtWth.VerticalAlignment = VerticalAlignment.Center;
            #endregion


            #region No Format
            XSSFCellStyle AllCellStyleEven = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleEven.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.WrapText = true;
            XSSFColor colorToFillEven = new XSSFColor(new byte[] { 176, 196, 222 });
            AllCellStyleEven.SetFillForegroundColor(colorToFillEven);
            AllCellStyleEven.FillPattern = FillPattern.SolidForeground;
            AllCellStyleEven.Alignment = HorizontalAlignment.Center;
            AllCellStyleEven.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #endregion

            #region Cell Style For Odd Row

            #region With Decimal Format AUM
            XSSFCellStyle aumAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDec.WrapText = true;
            XSSFColor AUMcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            aumAllCellStyleOddDec.SetFillForegroundColor(AUMcolorToFillOddDec);
            aumAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat AUMformatOddDec = workbook.CreateDataFormat();
            aumAllCellStyleOddDec.DataFormat = AUMformatOddDec.GetFormat(aumDecimalFormat);
            aumAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle aumAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDecWnuf.WrapText = true;
            XSSFColor AUMcolorToFillOddDecWnf = new XSSFColor(new byte[] { 255, 255, 255 });
            aumAllCellStyleOddDecWnuf.SetFillForegroundColor(AUMcolorToFillOddDecWnf);
            aumAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat AUMformatOddDecWnuf = workbook.CreateDataFormat();
            aumAllCellStyleOddDecWnuf.DataFormat = AUMformatOddDecWnuf.GetFormat(aumNumberDecimalFormat);
            aumAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With Decimal Format Return
            XSSFCellStyle retAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor RETcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            retAllCellStyleOddDec.SetFillForegroundColor(RETcolorToFillOddDec);
            retAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat RETformatOddDec = workbook.CreateDataFormat();
            retAllCellStyleOddDec.DataFormat = RETformatOddDec.GetFormat(retDecimalFormat);
            retAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            retAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle retAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDecWnuf.WrapText = true;
            XSSFColor RETcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            retAllCellStyleOddDecWnuf.SetFillForegroundColor(RETcolorToFillOddDecWnuf);
            retAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat RETformatOddDecWnuf = workbook.CreateDataFormat();
            retAllCellStyleOddDecWnuf.DataFormat = RETformatOddDecWnuf.GetFormat(retNumberDecimalFormat);
            retAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            retAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With Decimal Format Nav
            XSSFCellStyle navAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDec.WrapText = true;
            XSSFColor naVcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            navAllCellStyleOddDec.SetFillForegroundColor(naVcolorToFillOddDec);
            navAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat naVformatOddDec = workbook.CreateDataFormat();
            navAllCellStyleOddDec.DataFormat = naVformatOddDec.GetFormat(navDecimalFormat);
            navAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            navAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            XSSFCellStyle navAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDecWnuf.WrapText = true;
            XSSFColor naVcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            navAllCellStyleOddDecWnuf.SetFillForegroundColor(naVcolorToFillOddDecWnuf);
            navAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat naVformatOddDecWnuf = workbook.CreateDataFormat();
            navAllCellStyleOddDecWnuf.DataFormat = naVformatOddDecWnuf.GetFormat(navNumberDecimalFormat);
            navAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            navAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion


            #region With Decimal Format Other
            XSSFCellStyle othAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            othAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDec.WrapText = true;
            XSSFColor othcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            othAllCellStyleOddDec.SetFillForegroundColor(othcolorToFillOddDec);
            othAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat othformatOddDec = workbook.CreateDataFormat();
            othAllCellStyleOddDec.DataFormat = othformatOddDec.GetFormat(othDecimalFormat);
            othAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            othAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            XSSFCellStyle othAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            othAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDecWnuf.WrapText = true;
            XSSFColor othcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            othAllCellStyleOddDecWnuf.SetFillForegroundColor(othcolorToFillOddDecWnuf);
            othAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat othformatOddDecWnuf = workbook.CreateDataFormat();
            othAllCellStyleOddDecWnuf.DataFormat = othformatOddDecWnuf.GetFormat(othNumberDecimalFormat);
            othAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            othAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion


            #region With Decimal Format ratio
            XSSFCellStyle ratAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDec.WrapText = true;
            XSSFColor retcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            ratAllCellStyleOddDec.SetFillForegroundColor(retcolorToFillOddDec);
            ratAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatOddDec = workbook.CreateDataFormat();
            ratAllCellStyleOddDec.DataFormat = retformatOddDec.GetFormat(ratioDecimalFormat);
            ratAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            XSSFCellStyle ratAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDecWnuf.WrapText = true;
            XSSFColor retcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            ratAllCellStyleOddDecWnuf.SetFillForegroundColor(retcolorToFillOddDecWnuf);
            ratAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatOddDecWnuf = workbook.CreateDataFormat();
            ratAllCellStyleOddDecWnuf.DataFormat = retformatOddDecWnuf.GetFormat(ratioNumberDecimalFormat);
            ratAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region No Format
            XSSFCellStyle AllCellStyleOdd = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleOdd.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.WrapText = true;
            XSSFColor colorToFillOdd = new XSSFColor(new byte[] { 255, 255, 255 });
            AllCellStyleOdd.SetFillForegroundColor(colorToFillOdd);
            AllCellStyleOdd.FillPattern = FillPattern.SolidForeground;
            AllCellStyleOdd.Alignment = HorizontalAlignment.Center;
            AllCellStyleOdd.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #endregion

            #region Cell Style For First Column Even Row
            XSSFCellStyle AllCellStyleFstColmEven = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleFstColmEven.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.WrapText = true;
            XSSFColor colorToFillFstClmnEven = new XSSFColor(new byte[] { 176, 196, 222 });
            AllCellStyleFstColmEven.SetFillForegroundColor(colorToFillFstClmnEven);
            AllCellStyleFstColmEven.FillPattern = FillPattern.SolidForeground;
            AllCellStyleFstColmEven.Alignment = HorizontalAlignment.Left;
            AllCellStyleFstColmEven.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region Cell Style For First Column Odd Row
            XSSFCellStyle AllCellStyleFstColmOdd = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleFstColmOdd.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.WrapText = true;
            XSSFColor colorToFillFstClmnOdd = new XSSFColor(new byte[] { 255, 255, 255 });
            AllCellStyleFstColmOdd.SetFillForegroundColor(colorToFillFstClmnOdd);
            AllCellStyleFstColmOdd.FillPattern = FillPattern.SolidForeground;
            AllCellStyleFstColmOdd.Alignment = HorizontalAlignment.Left;
            AllCellStyleFstColmOdd.VerticalAlignment = VerticalAlignment.Center;
            #endregion
            #region Without Decimal Number Format Even Row
            XSSFCellStyle intAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            intAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleEvenDecFrmt.WrapText = true;
            XSSFColor intcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            intAllCellStyleEvenDecFrmt.SetFillForegroundColor(intcolorToFillEvenWtoutDec);
            intAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat intformatEven = workbook.CreateDataFormat();
            intAllCellStyleEvenDecFrmt.DataFormat = intformatEven.GetFormat(intNumberWithoutDecimalFormat);
            intAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            intAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle intSimpleAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            intSimpleAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleEvenDecFrmt.WrapText = true;
            XSSFColor intSimplecolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            intSimpleAllCellStyleEvenDecFrmt.SetFillForegroundColor(intSimplecolorToFillEvenWtoutDec);
            intSimpleAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            intSimpleAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            intSimpleAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;
            #endregion
            #region Without Decimal Number Format Odd Row
            XSSFCellStyle intAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            intAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleOddDec.WrapText = true;
            XSSFColor intcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            intAllCellStyleOddDec.SetFillForegroundColor(intcolorToFillOddDec);
            intAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat intformatOddDec = workbook.CreateDataFormat();
            intAllCellStyleOddDec.DataFormat = intformatOddDec.GetFormat(intNumberWithoutDecimalFormat);
            intAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            intAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle intSimpleAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            intSimpleAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleOddDec.WrapText = true;
            XSSFColor intSimplecolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            intSimpleAllCellStyleOddDec.SetFillForegroundColor(intSimplecolorToFillOddDec);
            intSimpleAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            intSimpleAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            intSimpleAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;
            #endregion
            #region With DateTime format
            var DateTimeFormat = ubs.DateFormat;
            XSSFCellStyle DateTimeAllCellStyleEvenFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            DateTimeAllCellStyleEvenFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleEvenFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleEvenFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleEvenFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleEvenFrmt.WrapText = true;
            XSSFColor DateTimecolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            DateTimeAllCellStyleEvenFrmt.SetFillForegroundColor(DateTimecolorToFillEvenWtoutDec);
            DateTimeAllCellStyleEvenFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat DateTimeformatEven = workbook.CreateDataFormat();
            DateTimeAllCellStyleEvenFrmt.DataFormat = DateTimeformatEven.GetFormat(DateTimeFormat);
            DateTimeAllCellStyleEvenFrmt.Alignment = HorizontalAlignment.Center;
            DateTimeAllCellStyleEvenFrmt.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle DateTimeAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            DateTimeAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleOddDec.WrapText = true;
            XSSFColor DateTimecolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            DateTimeAllCellStyleOddDec.SetFillForegroundColor(DateTimecolorToFillOddDec);
            DateTimeAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat DateTimeformatOddDec = workbook.CreateDataFormat();
            DateTimeAllCellStyleOddDec.DataFormat = DateTimeformatOddDec.GetFormat(DateTimeFormat);
            DateTimeAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            DateTimeAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            #endregion
            #region Value added to the Excel

            #region Added by Subrata on 22 Feb 2018
            bool IsNumericKey = false;
            bool IsNumericValue = false;
            var AllListData = listData.SelectMany(x => x.LstKeyValuePair).ToArray();
            var AllDataKey = AllListData.Select(x => x.Key).Distinct().ToArray();
            int ValueRes;
            IsNumericKey = int.TryParse(AllDataKey[0], out ValueRes);
            #endregion

            int incr = 5 + listTableHeaderRows.Count();
            bool isNumeric = false;
            foreach (var item in listData)
            {
                if (item.LstKeyValuePair.Count() > 0)
                {
                    int value;
                    isNumeric = int.TryParse(item.LstKeyValuePair[0].Key, out value);
                }
                var dataRow = sheet.CreateRow(incr);
                sheet.GetRow(incr).HeightInPoints = 20;
                if (isNumeric == true)
                {
                    var cellValues = (from i in item.LstKeyValuePair
                                      from j in FinalTableHeaders
                                      where i.Key.ToString() == j.Position.ToString()
                                      orderby j.Position
                                      select new
                                      {
                                          IsNum = j.IsNumberFormatReq,
                                          DecType = j.DecFormatType,
                                          Value = i.Value,
                                          IsMixedType = j.IsMixedValueType,
                                          IsPercentageType = j.IsPercentageValueType,
                                          IsDateTimeStringMixedType = j.IsDateTimeStringMixedType,
                                          IsDateTimeType = j.IsDateTimeType,
                                      }).ToArray();

                    for (int k = 0; k < cellValues.Length; k++)
                    {
                        var datacell = dataRow.CreateCell(k);
                        if (cellValues[k].DecType != DecimalFormatType.NoDecimalReq)
                        {
                            double OutVal;
                            if (string.IsNullOrEmpty(cellValues[k].Value) || cellValues[k].Value == BlankData || !double.TryParse(cellValues[k].Value, out OutVal))
                            {
                                datacell.SetCellValue(cellValues[k].Value);
                                datacell.CellStyle = k > 0 ? (incr % 2 == 0 ? AllCellStyleEven : AllCellStyleOdd) : (incr % 2 == 0 ? AllCellStyleFstColmEven : AllCellStyleFstColmOdd);
                                //if (k > 0)
                                //{
                                //    if (incr % 2 == 0)
                                //        datacell.CellStyle = AllCellStyleEven;
                                //    else
                                //        datacell.CellStyle = AllCellStyleOdd;

                                //}
                                //else
                                //{
                                //    if (incr % 2 == 0)
                                //        datacell.CellStyle = AllCellStyleFstColmEven;
                                //    else
                                //        datacell.CellStyle = AllCellStyleFstColmOdd;
                                //}

                            }
                            else
                            {
                                datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));

                                if (k > 0)
                                {
                                    if (cellValues[k].DecType == DecimalFormatType.AUM)
                                    {
                                        datacell.CellStyle = (incr % 2 == 0) ? (cellValues[k].IsNum ? aumAllCellStyleEvenDecFrmtWNum : aumAllCellStyleEvenDecFrmt) : (cellValues[k].IsNum ? aumAllCellStyleOddDecWnuf : aumAllCellStyleOddDec);
                                        //if (incr % 2 == 0)
                                        //{
                                        //    if (cellValues[k].IsNum == true)
                                        //    {

                                        //        datacell.CellStyle = aumAllCellStyleEvenDecFrmtWNum;
                                        //    }
                                        //    else
                                        //    {
                                        //        datacell.CellStyle = aumAllCellStyleEvenDecFrmt;
                                        //    }
                                        //}
                                        //else
                                        //{
                                        //    if (cellValues[k].IsNum == true)
                                        //    {
                                        //        datacell.CellStyle = aumAllCellStyleOddDecWnuf;
                                        //    }
                                        //    else
                                        //    {
                                        //        datacell.CellStyle = aumAllCellStyleOddDec;
                                        //    }
                                        //}
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.NAV)
                                    {
                                        datacell.CellStyle = (incr % 2 == 0) ? (cellValues[k].IsNum ? navAllCellStyleEvenDecFrmtWnnum : navAllCellStyleEvenDecFrmt) : (cellValues[k].IsNum ? navAllCellStyleOddDecWnuf : navAllCellStyleOddDec);
                                        //if (incr % 2 == 0)
                                        //{
                                        //    if (cellValues[k].IsNum == true)
                                        //    {
                                        //        datacell.CellStyle = navAllCellStyleEvenDecFrmtWnnum;
                                        //    }
                                        //    else
                                        //    {
                                        //        datacell.CellStyle = navAllCellStyleEvenDecFrmt;
                                        //    }
                                        //}
                                        //else
                                        //{
                                        //    if (cellValues[k].IsNum == true)
                                        //    {
                                        //        datacell.CellStyle = navAllCellStyleOddDecWnuf;
                                        //    }
                                        //    else
                                        //    {
                                        //        datacell.CellStyle = navAllCellStyleOddDec;
                                        //    }

                                        //}
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.OTHER)
                                    {
                                        datacell.CellStyle = (incr % 2 == 0) ? (cellValues[k].IsNum ? otherAllCellStyleEvenDecFrmtWnum : otherAllCellStyleEvenDecFrmt) : (cellValues[k].IsNum ? othAllCellStyleOddDecWnuf : othAllCellStyleOddDec);

                                        //if (incr % 2 == 0)
                                        //{
                                        //    if (cellValues[k].IsNum == true)
                                        //    {
                                        //        datacell.CellStyle = otherAllCellStyleEvenDecFrmtWnum;
                                        //    }
                                        //    else
                                        //    {
                                        //        datacell.CellStyle = otherAllCellStyleEvenDecFrmt;
                                        //    }
                                        //}

                                        //else
                                        //{
                                        //    if (cellValues[k].IsNum == true)
                                        //    {
                                        //        datacell.CellStyle = othAllCellStyleOddDecWnuf;
                                        //    }
                                        //    else
                                        //    {

                                        //        datacell.CellStyle = othAllCellStyleOddDec;
                                        //    }

                                        //}
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.RATIO)
                                    {

                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = ratAllCellStyleEvenDecFrmtWth;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = ratAllCellStyleEvenDecFrmt;
                                            }
                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = ratAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = ratAllCellStyleOddDec;
                                            }
                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.RETURN)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = retAllCellStyleEvenDecFrmtWnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = retAllCellStyleEvenDecFrmt;
                                            }

                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = retAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = retAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.IntegerWithOutDecimal)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = intAllCellStyleEvenDecFrmt;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = intSimpleAllCellStyleEvenDecFrmt;
                                            }

                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = intAllCellStyleOddDec;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = intSimpleAllCellStyleOddDec;
                                            }

                                        }
                                    }

                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }

                            }

                        }
                        else
                        {
                            double OutVal;
                            if (double.TryParse(cellValues[k].Value, out OutVal) && !cellValues[k].IsMixedType && !cellValues[k].IsPercentageType)
                            {
                                datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                                if (k > 0)
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;

                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }
                            }
                            else if (cellValues[k].IsPercentageType)
                            {
                                if (double.TryParse(cellValues[k].Value, out OutVal))
                                {
                                    datacell.SetCellValue(OutVal / 100);
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = cellStylePercentEven;
                                    else
                                        datacell.CellStyle = cellStylePercentOdd;
                                }
                                else
                                {
                                    datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleEven;
                                        else
                                            datacell.CellStyle = AllCellStyleOdd;
                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }
                                }
                            }
                            else if (cellValues[k].IsDateTimeType)
                            {
                                DateTime OutValdt;
                                if (DateTime.TryParse(cellValues[k].Value, out OutValdt))
                                {
                                    datacell.SetCellValue(Convert.ToDateTime(cellValues[k].Value));
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = DateTimeAllCellStyleEvenFrmt;
                                    else
                                        datacell.CellStyle = DateTimeAllCellStyleOddDec;
                                }
                                else
                                {
                                    datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleEven;
                                        else
                                            datacell.CellStyle = AllCellStyleOdd;

                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }
                                }
                            }
                            else if (cellValues[k].IsDateTimeStringMixedType)
                            {
                                DateTime OutValdt;
                                if (DateTime.TryParse(cellValues[k].Value, out OutValdt))
                                {
                                    datacell.SetCellValue(Convert.ToDateTime(cellValues[k].Value));
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = DateTimeAllCellStyleEvenFrmt;
                                    else
                                        datacell.CellStyle = DateTimeAllCellStyleOddDec;
                                }
                                else
                                {
                                    datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleEven;
                                        else
                                            datacell.CellStyle = AllCellStyleOdd;

                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }
                                }
                            }
                            else
                            {
                                datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                if (k > 0)
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;

                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }
                            }
                        }


                    }
                    incr++;
                }
                else
                {
                    var cellValues = (from i in item.LstKeyValuePair
                                      from j in FinalTableHeaders
                                      where i.Key == j.PropertyName
                                      orderby j.Position
                                      select new
                                      {
                                          IsNum = j.IsNumberFormatReq,
                                          DecType = j.DecFormatType,
                                          IsMixedType = j.IsMixedValueType,
                                          IsPercentageType = j.IsPercentageValueType,
                                          IsDateTimeStringMixedType = j.IsDateTimeStringMixedType,
                                          IsDateTimeType = j.IsDateTimeType,
                                          Value = i.Value
                                      }).ToArray();

                    for (int k = 0; k < cellValues.Length; k++)
                    {
                        var datacell = dataRow.CreateCell(k);
                        if (cellValues[k].DecType != DecimalFormatType.NoDecimalReq)
                        {
                            double OutVal;
                            if (string.IsNullOrEmpty(cellValues[k].Value) || cellValues[k].Value == BlankData || !double.TryParse(cellValues[k].Value, out OutVal))
                            {
                                datacell.SetCellValue(cellValues[k].Value);
                                if (k > 0)
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;
                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }

                            }
                            else
                            {
                                datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                                if (k > 0)
                                {
                                    if (cellValues[k].DecType == DecimalFormatType.AUM)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {

                                                datacell.CellStyle = aumAllCellStyleEvenDecFrmtWNum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = aumAllCellStyleEvenDecFrmt;
                                            }
                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = aumAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = aumAllCellStyleOddDec;
                                            }
                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.NAV)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = navAllCellStyleEvenDecFrmtWnnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = navAllCellStyleEvenDecFrmt;
                                            }
                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = navAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = navAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.OTHER)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = otherAllCellStyleEvenDecFrmtWnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = otherAllCellStyleEvenDecFrmt;
                                            }
                                        }

                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = othAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {

                                                datacell.CellStyle = othAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.RATIO)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = ratAllCellStyleEvenDecFrmtWth;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = ratAllCellStyleEvenDecFrmt;
                                            }
                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = ratAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = ratAllCellStyleOddDec;
                                            }
                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.RETURN)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = retAllCellStyleEvenDecFrmtWnum;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = retAllCellStyleEvenDecFrmt;
                                            }

                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = retAllCellStyleOddDecWnuf;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = retAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                    else if (cellValues[k].DecType == DecimalFormatType.IntegerWithOutDecimal)
                                    {
                                        if (incr % 2 == 0)
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = intAllCellStyleEvenDecFrmt;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = intSimpleAllCellStyleEvenDecFrmt;
                                            }

                                        }
                                        else
                                        {
                                            if (cellValues[k].IsNum == true)
                                            {
                                                datacell.CellStyle = intAllCellStyleOddDec;
                                            }
                                            else
                                            {
                                                datacell.CellStyle = intSimpleAllCellStyleOddDec;
                                            }

                                        }
                                    }
                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }

                            }

                        }
                        else
                        {
                            double OutVal;
                            if (double.TryParse(cellValues[k].Value, out OutVal) && !cellValues[k].IsMixedType && !cellValues[k].IsPercentageType)
                            {
                                datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                                if (k > 0)
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;

                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }
                            }
                            else if (cellValues[k].IsPercentageType)
                            {
                                if (double.TryParse(cellValues[k].Value, out OutVal))
                                {
                                    datacell.SetCellValue(OutVal / 100);
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = cellStylePercentEven;
                                    else
                                        datacell.CellStyle = cellStylePercentOdd;
                                }
                                else
                                {
                                    datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleEven;
                                        else
                                            datacell.CellStyle = AllCellStyleOdd;
                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }
                                }
                            }
                            else if (cellValues[k].IsDateTimeType)
                            {
                                DateTime OutValdt;
                                if (DateTime.TryParse(cellValues[k].Value, out OutValdt))
                                {
                                    datacell.SetCellValue(Convert.ToDateTime(cellValues[k].Value));
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = DateTimeAllCellStyleEvenFrmt;
                                    else
                                        datacell.CellStyle = DateTimeAllCellStyleOddDec;
                                }
                                else
                                {
                                    datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleEven;
                                        else
                                            datacell.CellStyle = AllCellStyleOdd;

                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }
                                }
                            }
                            else if (cellValues[k].IsDateTimeStringMixedType)
                            {
                                DateTime OutValdt;
                                if (DateTime.TryParse(cellValues[k].Value, out OutValdt))
                                {
                                    datacell.SetCellValue(Convert.ToDateTime(cellValues[k].Value));
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = DateTimeAllCellStyleEvenFrmt;
                                    else
                                        datacell.CellStyle = DateTimeAllCellStyleOddDec;
                                }
                                else
                                {
                                    datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleEven;
                                        else
                                            datacell.CellStyle = AllCellStyleOdd;

                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }
                                }
                            }
                            else
                            {
                                datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                if (k > 0)
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleEven;
                                    else
                                        datacell.CellStyle = AllCellStyleOdd;

                                }
                                else
                                {
                                    if (incr % 2 == 0)
                                        datacell.CellStyle = AllCellStyleFstColmEven;
                                    else
                                        datacell.CellStyle = AllCellStyleFstColmOdd;
                                }
                            }
                        }


                    }
                    incr++;
                }

            }
            #endregion

            for (int i = 0; i < totalColloumns; i++)
                sheet.AutoSizeColumn(i, true);
            if (sheet.GetColumnWidth(0) < 11072)
                sheet.SetColumnWidth(0, 11072);

            #region Logo
            try
            {
                if (!string.IsNullOrEmpty(LogoPath))
                {
                    XSSFDrawing patriarch = (XSSFDrawing)sheet.CreateDrawingPatriarch();
                    XSSFClientAnchor anchor;
                    anchor = new XSSFClientAnchor(0, 0, 0, 255, 0, 0, 0, 3);
                    anchor.AnchorType = AnchorType.DontMoveAndResize;
                    XSSFPicture picture = (XSSFPicture)patriarch.CreatePicture(anchor, LoadImage(LogoPath, workbook, PictureType.PNG));
                    double x1 = .25;
                    double y1 = .75;
                    picture.Resize(x1, y1);
                    picture.LineStyle = LineStyle.None;
                }
            }
            catch (Exception ex)
            {
            }

            #endregion

            #region Source, Date As On and Report Generated On
            ICRArow = sheet.CreateRow(incr + 3);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrSource);

            ICRArow = sheet.CreateRow(incr + 4);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrDateAsOn);

            ICRArow = sheet.CreateRow(incr + 5);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrReportGeneratedOn);
            #endregion

            #region Sheet Two Logo
            try
            {
                if (!string.IsNullOrEmpty(LogoPath))
                {
                    XSSFDrawing patriarch = (XSSFDrawing)sheetTwo.CreateDrawingPatriarch();
                    XSSFClientAnchor anchor;
                    anchor = new XSSFClientAnchor(0, 0, 0, 255, 0, 0, 0, 3);
                    anchor.AnchorType = AnchorType.DontMoveAndResize;
                    XSSFPicture picture = (XSSFPicture)patriarch.CreatePicture(anchor, LoadImage(LogoPath, workbook, PictureType.PNG));
                    double x1 = 1.10;
                    double y1 = 1.10;
                    picture.Resize(x1, y1);
                    picture.LineStyle = LineStyle.None;
                }
            }
            catch (Exception ex)
            {
            }
            #endregion

            #region Disclaimer Sheet
            var Row = sheetTwo.CreateRow(1);
            var cellSheetTwo = Row.CreateCell(7);
            cellSheetTwo.SetCellValue(StrHeader1);
            cellSheetTwo.CellStyle = HeaderStyle;

            Row = sheetTwo.CreateRow(4);
            ICell Cell;
            for (int i = 0; i < 17; i++)
            {
                Cell = Row.CreateCell(i);

                XSSFCellStyle declationstyle = (XSSFCellStyle)workbook.CreateCellStyle();

                declationstyle.Alignment = HorizontalAlignment.Left;
                declationstyle.VerticalAlignment = VerticalAlignment.Top;
                declationstyle.WrapText = true;
                IFont declarationfnt = (XSSFFont)workbook.CreateFont();
                //declarationfnt.Boldweight = (short)FontBoldWeight.Bold;
                declarationfnt.FontName = "Calibri";
                declarationfnt.FontHeightInPoints = (short)11;
                declationstyle.SetFont(declarationfnt);
                Cell.SetCellValue(!string.IsNullOrEmpty(Footer) ? Footer : "All information contained herein is obtained by ICRA Analytics Limited from sources believed by it to be accurate and reliable. Because of the possibility of human or mechanical error as well as other factors, however, all information contained herein is provided 'AS IS' without warranty of any kind. ICRA Analytics adopts all necessary measures so that the information it uses is of sufficient quality and from sources ICRA Analytics considers to be reliable including, when appropriate, independent third-party sources. However, ICRA Analytics is not an auditor and cannot in every instance independently verify or validate information received in preparing this document." +
                    "All information contained herein must be construed solely as statements of opinion, and  ICRA Analytics Limited or its affiliates or group companies and its respective and any of its officers, directors, personnel and employees, disclaim liability to any loss, damage of any nature, including but not limited to direct, indirect, punitive, special, exemplary, consequential, as also any loss of profit in any way arising from the use of this document or its contents in any manner or for any contingency within or beyond the control of, ICRA Analytics or any of its directors, officers, employees, agents, representatives, licensors or suppliers, arising from or in connection with the information contained herein or the use of or inability to use any such information.Opinions expressed in the document are not the opinions of our holding company, ICRA Limited(ICRA), and should not be construed as any indication of credit rating or grading of ICRA for any instruments that have been issued or are to be issued by any entity.The recipient alone shall be fully responsible and / or are liable for any decision taken on the basis of this document and / or the information contained herein.");
                Cell.CellStyle = declationstyle;

            }
            NPOIWrite.CellMerged(sheetTwo, 4, 4, 0, 17);
            sheetTwo.GetRow(4).HeightInPoints = 200;
            #endregion

            #region Disclaimer Sheet HyperLink
            XSSFCellStyle HyperLinkStyle = (XSSFCellStyle)workbook.CreateCellStyle();
            IFont HyperLinkFont = workbook.CreateFont();
            HyperLinkFont.Color = IndexedColors.Orange.Index;
            HyperLinkFont.Underline = FontUnderlineType.Single;
            HyperLinkStyle.SetFont(HyperLinkFont);

            Row = sheetTwo.CreateRow(5);
            Cell = Row.CreateCell(0);
            Cell.SetCellValue("Click here for third-party disclaimers");
            XSSFCreationHelper createHelper = (XSSFCreationHelper)workbook.GetCreationHelper();
            XSSFHyperlink link = (XSSFHyperlink)createHelper.CreateHyperlink(HyperlinkType.Url);
            link.Address = "https://www.icraanalytics.com/home/thirdpartydisclaimers";
            Cell.Hyperlink = link;
            Cell.CellStyle = HyperLinkStyle;
            #endregion

            sheet.ActiveCell = new NPOI.SS.Util.CellAddress(0, 1);
            var stream = new MemoryStream();
            workbook.Write(stream);

            return workbook;
        }


        public static NPOI.XSSF.UserModel.XSSFWorkbook ExportToExcelWorkBookWithNumberDecimalFormatReportBuilder(UserBasicSettings ubs, List<TableHeaderEntity> listTableHeader,
            List<ExportEntity> listData, RankColor ObjRankColors, QuartileColor ObjQuartileColors, bool IsRankColor = false, bool IsQuartileColor = false, string LogoPath = "", string ReportName = "", string StrDateAsOn = "", string SheetName = "Output")
        {
            try
            {


                var RankIndexes = listTableHeader.Where(x => x.ColumnName.Contains("Rank")).Select(x => x.Position).ToArray();
                var QuartileIndexes = listTableHeader.Where(x => x.ColumnName.Contains("Quartile")).Select(x => x.Position).ToArray();

                HSSFPalette palette = new HSSFWorkbook().GetCustomPalette();
                short palRank1Index = 0;
                short palRank2Index = 0;
                short palRank3Index = 0;
                short palQuartile1Index = 0;
                short palQuartile2Index = 0;
                short palQuartile3Index = 0;
                short palQuartile4Index = 0;
                var DateTimeFormat = ubs.DateFormat;
                var MonthYearFormat = "MMM-yyyy";
                Color color = new Color();
                Color Rank1color = new Color(); Color Rank2color = new Color(); Color Rank3color = new Color();
                Color Quartile1color = new Color(); Color Quartile2color = new Color(); Color Quartile3color = new Color();
                Color Quartile4color = new Color();
                if (IsRankColor)
                {
                    color = !string.IsNullOrEmpty(ObjRankColors.Rank1Color) ? ColorTranslator.FromHtml(ObjRankColors.Rank1Color) : Color.Empty;
                    palRank1Index = !color.IsEmpty ? palette.FindSimilarColor(color.R, color.G, color.B).Indexed : (short)0;
                    Rank1color = !string.IsNullOrEmpty(ObjRankColors.Rank1Color) ? ColorTranslator.FromHtml(ObjRankColors.Rank1Color) : Color.Empty;

                    color = !string.IsNullOrEmpty(ObjRankColors.Rank2Color) ? ColorTranslator.FromHtml(ObjRankColors.Rank2Color) : Color.Empty;
                    palRank2Index = !color.IsEmpty ? palette.FindSimilarColor(color.R, color.G, color.B).Indexed : (short)0;
                    Rank2color = !string.IsNullOrEmpty(ObjRankColors.Rank2Color) ? ColorTranslator.FromHtml(ObjRankColors.Rank2Color) : Color.Empty;

                    color = !string.IsNullOrEmpty(ObjRankColors.Rank3Color) ? ColorTranslator.FromHtml(ObjRankColors.Rank3Color) : Color.Empty;
                    palRank3Index = !color.IsEmpty ? palette.FindSimilarColor(color.R, color.G, color.B).Indexed : (short)0;
                    Rank3color = !string.IsNullOrEmpty(ObjRankColors.Rank3Color) ? ColorTranslator.FromHtml(ObjRankColors.Rank3Color) : Color.Empty;
                }
                if (IsQuartileColor)
                {
                    color = !string.IsNullOrEmpty(ObjQuartileColors.Quartile1Color) ? ColorTranslator.FromHtml(ObjQuartileColors.Quartile1Color) : Color.Empty;
                    palQuartile1Index = !color.IsEmpty ? palette.FindSimilarColor(color.R, color.G, color.B).Indexed : (short)0;
                    Quartile1color = !string.IsNullOrEmpty(ObjQuartileColors.Quartile1Color) ? ColorTranslator.FromHtml(ObjQuartileColors.Quartile1Color) : Color.Empty;

                    color = !string.IsNullOrEmpty(ObjQuartileColors.Quartile2Color) ? ColorTranslator.FromHtml(ObjQuartileColors.Quartile2Color) : Color.Empty;
                    palQuartile2Index = !color.IsEmpty ? palette.FindSimilarColor(color.R, color.G, color.B).Indexed : (short)0;
                    Quartile2color = !string.IsNullOrEmpty(ObjQuartileColors.Quartile2Color) ? ColorTranslator.FromHtml(ObjQuartileColors.Quartile2Color) : Color.Empty;

                    color = !string.IsNullOrEmpty(ObjQuartileColors.Quartile3Color) ? ColorTranslator.FromHtml(ObjQuartileColors.Quartile3Color) : Color.Empty;
                    palQuartile3Index = !color.IsEmpty ? palette.FindSimilarColor(color.R, color.G, color.B).Indexed : (short)0;
                    Quartile3color = !string.IsNullOrEmpty(ObjQuartileColors.Quartile3Color) ? ColorTranslator.FromHtml(ObjQuartileColors.Quartile3Color) : Color.Empty;

                    color = !string.IsNullOrEmpty(ObjQuartileColors.Quartile4Color) ? ColorTranslator.FromHtml(ObjQuartileColors.Quartile4Color) : Color.Empty;
                    palQuartile4Index = !color.IsEmpty ? palette.FindSimilarColor(color.R, color.G, color.B).Indexed : (short)0;
                    Quartile4color = !string.IsNullOrEmpty(ObjQuartileColors.Quartile4Color) ? ColorTranslator.FromHtml(ObjQuartileColors.Quartile4Color) : Color.Empty;
                }

                #region Variable
                string Header = ubs.Reporting_Format_Header;
                string Footer = ubs.Reporting_Format_Footer;
                string BlankData = ubs.BlankData.ToUpper() == "BLANK" ? "" : ubs.BlankData;

                string StrHeader1 = "ICRA Analytics Limited";
                string StrHeader2 = "3rd Floor, Electric Mansion,Appasaheb Marathe Marg, Prabhadevi,Mumbai - 400 025 Maharashtra, India";
                string StrHeader3 = Header;//"Mumbai, Maharashtra 400093, IN";
                string StrReportName = ReportName;
                //string StrSource = "Source: MFI 360";
                string StrSource = "Source: " + (string.IsNullOrEmpty(UserStatisticsEntity.SourceName) ? "MFI 360" : UserStatisticsEntity.SourceName);
                StrDateAsOn = "Data as on " + StrDateAsOn;
                string StrReportGeneratedOn = "Report Generated on " + DateTime.Now.ToString("dd-MMM-yyyy HH:mm:ss");

                #region number and decimal variable for AUM
                var aumPaddding = new string('0', (int)ubs.AUMDecimalFormat);
                var aumDecimalFormat = "0." + aumPaddding;
                string aumNUMBERFORMAT = ubs.NumberFormat;
                var aumNumberFormat = aumNUMBERFORMAT.Replace("0", "#");
                string aumNumberDecimalFormat = aumNumberFormat + "0." + new String('0', (int)ubs.AUMDecimalFormat);
                #endregion

                #region number and decimal variable for return
                var retPaddding = new string('0', (int)ubs.ReturnDecimalFormat);
                var retDecimalFormat = "0." + retPaddding;
                string retNUMBERFORMAT = ubs.NumberFormat;
                var retNumberFormat = retNUMBERFORMAT.Replace("0", "#");
                string retNumberDecimalFormat = retNumberFormat + "0." + new String('0', (int)ubs.ReturnDecimalFormat);
                #endregion

                #region number and decimal variable for NAV
                var navPaddding = new string('0', (int)ubs.NavDecimalFormat);
                var navDecimalFormat = "0." + navPaddding;
                string navNUMBERFORMAT = ubs.NumberFormat;
                var navNumberFormat = navNUMBERFORMAT.Replace("0", "#");
                string navNumberDecimalFormat = navNumberFormat + "0." + new String('0', (int)ubs.NavDecimalFormat);
                #endregion


                #region number and decimal variable for Other
                var othPaddding = new string('0', (int)ubs.OtherDecimal);
                var othDecimalFormat = "0." + othPaddding;
                string othNUMBERFORMAT = ubs.NumberFormat;
                var othNumberFormat = othNUMBERFORMAT.Replace("0", "#");
                string othNumberDecimalFormat = othNumberFormat + "0." + new String('0', (int)ubs.OtherDecimal);
                #endregion

                #region number and decimal variable for Ratio
                var ratioPaddding = new string('0', (int)ubs.RatioDecimalFormat);
                var ratioDecimalFormat = "0." + ratioPaddding;
                string ratioNUMBERFORMAT = ubs.NumberFormat;
                var ratioNumberFormat = ratioNUMBERFORMAT.Replace("0", "#");
                string ratioNumberDecimalFormat = ratioNumberFormat + "0." + new String('0', (int)ubs.RatioDecimalFormat);
                #endregion
                #region int Format with out Decimal
                var intNumberWithoutDecimalFormat = ubs.NumberFormat.Replace("0", "#");
                #endregion
                #endregion

                NPOI.XSSF.UserModel.XSSFWorkbook workbook = new NPOI.XSSF.UserModel.XSSFWorkbook();

                ISheet sheet = workbook.CreateSheet(SheetName);
                ISheet sheetTwo = workbook.CreateSheet("Disclaimer");

                #region Excel Sheet Gridlines Delete
                sheet.DisplayGridlines = false;
                sheetTwo.DisplayGridlines = false;
                #endregion

                #region Header Freeze
                sheet.CreateFreezePane(1, 6);
                #endregion

                #region Set Font For Header1,Header2 and Header3
                XSSFCellStyle HeaderStyle = (XSSFCellStyle)workbook.CreateCellStyle();
                IFont Headerfont = workbook.CreateFont();
                Headerfont.Boldweight = (short)FontBoldWeight.Bold;
                HeaderStyle.SetFont(Headerfont);
                #endregion

                #region Set Cell Value For Header1, Header2 and Header3
                var ICRArow = sheet.CreateRow(0);
                ICRArow.CreateCell(0);
                NPOIWrite.CellMerged(sheet, 0, 0, 1, 9);
                var ICRACell = ICRArow.CreateCell(1);

                ICRACell.SetCellValue(StrHeader1);
                ICRACell.CellStyle = HeaderStyle;
                ICRArow = sheet.CreateRow(1);
                ICRArow.CreateCell(0);
                NPOIWrite.CellMerged(sheet, 1, 1, 1, 9);
                ICRACell = ICRArow.CreateCell(1);
                ICRACell.SetCellValue(StrHeader2);
                ICRACell.CellStyle = HeaderStyle;
                ICRArow = sheet.CreateRow(2);
                NPOIWrite.CellMerged(sheet, 2, 2, 1, 9);
                ICRArow.CreateCell(0);
                ICRACell = ICRArow.CreateCell(1);
                ICRACell.SetCellValue(StrHeader3);
                ICRACell.CellStyle = HeaderStyle;
                ICRACell.CellStyle.Alignment = HorizontalAlignment.Center;
                ICRArow = sheet.CreateRow(3);
                ICRArow.CreateCell(0);
                ICRACell = ICRArow.CreateCell(1);
                ICRACell.CellStyle.Alignment = HorizontalAlignment.Center;
                NPOIWrite.AutoFitColumn(sheet, 1);
                ICRACell.CellStyle = HeaderStyle;
                #endregion

                #region Report Name
                ICRArow = sheet.CreateRow(4);
                ICRArow.CreateCell(0);
                ICRACell = ICRArow.CreateCell(0);
                ICRACell.SetCellValue(StrReportName);
                HeaderStyle.Alignment = HorizontalAlignment.Left;
                ICRACell.CellStyle = HeaderStyle;
                #endregion

                #region Header creation in the Excel
                var headerRow = sheet.CreateRow(5);
                sheet.GetRow(5).HeightInPoints = 30;
                var listHeaderFinal = listTableHeader.OrderBy(x => x.Position).ToList();
                for (int i = 0; i < listHeaderFinal.Count; i++)
                {
                    var cell = headerRow.CreateCell(i);
                    cell.SetCellValue(listHeaderFinal[i].ColumnName);
                    NPOIWrite.AutoFitColumn(sheet, i);

                    #region Commented by Subrata on 21 Feb 2018
                    //ICellStyle CellStyle = workbook.CreateCellStyle();
                    //CellStyle = workbook.CreateCellStyle();
                    //CellStyle.FillBackgroundColor = IndexedColors.Blue.Index;
                    #endregion

                    #region Added by Subrata on 21 Feb 2018
                    XSSFCellStyle style = (XSSFCellStyle)workbook.CreateCellStyle();
                    XSSFColor colorToFill = new XSSFColor(new byte[] { 68, 114, 196 });//{ 51, 204, 204 }//Color.Blue);
                    style.SetFillForegroundColor(colorToFill);
                    IFont font = workbook.CreateFont();
                    font.Color = IndexedColors.White.Index;
                    font.Boldweight = (short)FontBoldWeight.Bold;
                    style.SetFont(font);
                    style.FillPattern = FillPattern.SolidForeground;
                    style.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                    style.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                    style.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                    style.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                    if (i > 0)
                    {
                        style.Alignment = HorizontalAlignment.Center;
                        style.VerticalAlignment = VerticalAlignment.Center;
                    }
                    else
                    {
                        //style.Alignment = HorizontalAlignment.Left;
                        style.Alignment = (string.IsNullOrEmpty(listHeaderFinal[i].TextAlign) || listHeaderFinal[i].TextAlign == EnumTextAlign.left.ToString()) ? HorizontalAlignment.Left
                        : listHeaderFinal[i].TextAlign == EnumTextAlign.center.ToString() ? HorizontalAlignment.Center : HorizontalAlignment.Right;
                        style.VerticalAlignment = VerticalAlignment.Center;
                    }
                    #endregion

                    cell.CellStyle = style;

                }
                #endregion

                #region Cell Style For Even Row

                #region With DecimalFormat AUM
                XSSFCellStyle aumAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                aumAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                aumAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                aumAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                aumAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor aumcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
                aumAllCellStyleEvenDecFrmt.SetFillForegroundColor(aumcolorToFillEvenWtoutDec);
                aumAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
                IDataFormat aumformatEven = workbook.CreateDataFormat();
                aumAllCellStyleEvenDecFrmt.DataFormat = aumformatEven.GetFormat(aumDecimalFormat);
                aumAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
                aumAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

                /// Number Format ////
                XSSFCellStyle aumAllCellStyleEvenDecFrmtWNum = (XSSFCellStyle)workbook.CreateCellStyle();
                aumAllCellStyleEvenDecFrmtWNum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                aumAllCellStyleEvenDecFrmtWNum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                aumAllCellStyleEvenDecFrmtWNum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                aumAllCellStyleEvenDecFrmtWNum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor aumcolorToFillEvenWtoutDecWNum = new XSSFColor(new byte[] { 176, 196, 222 });
                aumAllCellStyleEvenDecFrmtWNum.SetFillForegroundColor(aumcolorToFillEvenWtoutDecWNum);
                aumAllCellStyleEvenDecFrmtWNum.FillPattern = FillPattern.SolidForeground;
                IDataFormat aumformatEvenWNum = workbook.CreateDataFormat();
                aumAllCellStyleEvenDecFrmtWNum.DataFormat = aumformatEvenWNum.GetFormat(aumNumberDecimalFormat);
                aumAllCellStyleEvenDecFrmtWNum.Alignment = HorizontalAlignment.Center;
                aumAllCellStyleEvenDecFrmtWNum.VerticalAlignment = VerticalAlignment.Center;
                #endregion

                #region With DecimalFormat Return
                XSSFCellStyle retAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                retAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                retAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                retAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                retAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor retcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
                retAllCellStyleEvenDecFrmt.SetFillForegroundColor(retcolorToFillEvenWtoutDec);
                retAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
                IDataFormat retformatEven = workbook.CreateDataFormat();
                retAllCellStyleEvenDecFrmt.DataFormat = retformatEven.GetFormat(retDecimalFormat);
                retAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
                retAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;


                ////Number Format ////
                XSSFCellStyle retAllCellStyleEvenDecFrmtWnum = (XSSFCellStyle)workbook.CreateCellStyle();
                retAllCellStyleEvenDecFrmtWnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                retAllCellStyleEvenDecFrmtWnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                retAllCellStyleEvenDecFrmtWnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                retAllCellStyleEvenDecFrmtWnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor retcolorToFillEvenWtoutDecWnum = new XSSFColor(new byte[] { 176, 196, 222 });
                retAllCellStyleEvenDecFrmtWnum.SetFillForegroundColor(retcolorToFillEvenWtoutDecWnum);
                retAllCellStyleEvenDecFrmtWnum.FillPattern = FillPattern.SolidForeground;
                IDataFormat retformatEvenWnum = workbook.CreateDataFormat();
                retAllCellStyleEvenDecFrmtWnum.DataFormat = retformatEvenWnum.GetFormat(retNumberDecimalFormat);
                retAllCellStyleEvenDecFrmtWnum.Alignment = HorizontalAlignment.Center;
                retAllCellStyleEvenDecFrmtWnum.VerticalAlignment = VerticalAlignment.Center;
                #endregion

                #region With DecimalFormat Nav
                XSSFCellStyle navAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                navAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                navAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                navAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                navAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor navcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
                navAllCellStyleEvenDecFrmt.SetFillForegroundColor(navcolorToFillEvenWtoutDec);
                navAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
                IDataFormat navformatEven = workbook.CreateDataFormat();
                navAllCellStyleEvenDecFrmt.DataFormat = navformatEven.GetFormat(navDecimalFormat);
                navAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
                navAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;


                /// Number Format ////
                XSSFCellStyle navAllCellStyleEvenDecFrmtWnnum = (XSSFCellStyle)workbook.CreateCellStyle();
                navAllCellStyleEvenDecFrmtWnnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                navAllCellStyleEvenDecFrmtWnnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                navAllCellStyleEvenDecFrmtWnnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                navAllCellStyleEvenDecFrmtWnnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor navcolorToFillEvenWtoutDecWnnum = new XSSFColor(new byte[] { 176, 196, 222 });
                navAllCellStyleEvenDecFrmtWnnum.SetFillForegroundColor(navcolorToFillEvenWtoutDecWnnum);
                navAllCellStyleEvenDecFrmtWnnum.FillPattern = FillPattern.SolidForeground;
                IDataFormat navformatEvenWnnum = workbook.CreateDataFormat();
                navAllCellStyleEvenDecFrmtWnnum.DataFormat = navformatEvenWnnum.GetFormat(navNumberDecimalFormat);
                navAllCellStyleEvenDecFrmtWnnum.Alignment = HorizontalAlignment.Center;
                navAllCellStyleEvenDecFrmtWnnum.VerticalAlignment = VerticalAlignment.Center;
                #endregion

                #region With DecimalFormat Other
                XSSFCellStyle otherAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                otherAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                otherAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                otherAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                otherAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor othercolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
                otherAllCellStyleEvenDecFrmt.SetFillForegroundColor(othercolorToFillEvenWtoutDec);
                otherAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
                IDataFormat otherformatEven = workbook.CreateDataFormat();
                otherAllCellStyleEvenDecFrmt.DataFormat = otherformatEven.GetFormat(othDecimalFormat);
                otherAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
                otherAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

                /// Number Format ///
                XSSFCellStyle otherAllCellStyleEvenDecFrmtWnum = (XSSFCellStyle)workbook.CreateCellStyle();
                otherAllCellStyleEvenDecFrmtWnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                otherAllCellStyleEvenDecFrmtWnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                otherAllCellStyleEvenDecFrmtWnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                otherAllCellStyleEvenDecFrmtWnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor othercolorToFillEvenWtoutDecWnum = new XSSFColor(new byte[] { 176, 196, 222 });
                otherAllCellStyleEvenDecFrmtWnum.SetFillForegroundColor(othercolorToFillEvenWtoutDecWnum);
                otherAllCellStyleEvenDecFrmtWnum.FillPattern = FillPattern.SolidForeground;
                IDataFormat otherformatEvenWnum = workbook.CreateDataFormat();
                otherAllCellStyleEvenDecFrmtWnum.DataFormat = otherformatEvenWnum.GetFormat(othNumberDecimalFormat);
                otherAllCellStyleEvenDecFrmtWnum.Alignment = HorizontalAlignment.Center;
                otherAllCellStyleEvenDecFrmtWnum.VerticalAlignment = VerticalAlignment.Center;
                #endregion

                #region With DecimalFormat Ratio
                XSSFCellStyle ratAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                ratAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                ratAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                ratAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                ratAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor ratcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
                ratAllCellStyleEvenDecFrmt.SetFillForegroundColor(ratcolorToFillEvenWtoutDec);
                ratAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
                IDataFormat ratformatEven = workbook.CreateDataFormat();
                ratAllCellStyleEvenDecFrmt.DataFormat = ratformatEven.GetFormat(ratioDecimalFormat);
                ratAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
                ratAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

                XSSFCellStyle ratAllCellStyleEvenDecFrmtWth = (XSSFCellStyle)workbook.CreateCellStyle();
                ratAllCellStyleEvenDecFrmtWth.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                ratAllCellStyleEvenDecFrmtWth.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                ratAllCellStyleEvenDecFrmtWth.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                ratAllCellStyleEvenDecFrmtWth.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor ratcolorToFillEvenWtoutDecwth = new XSSFColor(new byte[] { 176, 196, 222 });
                ratAllCellStyleEvenDecFrmtWth.SetFillForegroundColor(ratcolorToFillEvenWtoutDecwth);
                ratAllCellStyleEvenDecFrmtWth.FillPattern = FillPattern.SolidForeground;
                IDataFormat ratformatEvenWth = workbook.CreateDataFormat();
                ratAllCellStyleEvenDecFrmtWth.DataFormat = ratformatEvenWth.GetFormat(ratioNumberDecimalFormat);
                ratAllCellStyleEvenDecFrmtWth.Alignment = HorizontalAlignment.Center;
                ratAllCellStyleEvenDecFrmtWth.VerticalAlignment = VerticalAlignment.Center;
                #endregion


                #region No Format
                XSSFCellStyle AllCellStyleEven = (XSSFCellStyle)workbook.CreateCellStyle();
                AllCellStyleEven.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                AllCellStyleEven.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                AllCellStyleEven.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                AllCellStyleEven.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor colorToFillEven = new XSSFColor(new byte[] { 176, 196, 222 });
                AllCellStyleEven.SetFillForegroundColor(colorToFillEven);
                AllCellStyleEven.FillPattern = FillPattern.SolidForeground;
                AllCellStyleEven.Alignment = HorizontalAlignment.Center;
                AllCellStyleEven.VerticalAlignment = VerticalAlignment.Center;
                #endregion

                #endregion

                #region Cell Style For Odd Row

                #region With Decimal Format AUM
                XSSFCellStyle aumAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
                aumAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                aumAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                aumAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                aumAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor AUMcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
                aumAllCellStyleOddDec.SetFillForegroundColor(AUMcolorToFillOddDec);
                aumAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
                IDataFormat AUMformatOddDec = workbook.CreateDataFormat();
                aumAllCellStyleOddDec.DataFormat = AUMformatOddDec.GetFormat(aumDecimalFormat);
                aumAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
                aumAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

                XSSFCellStyle aumAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
                aumAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                aumAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                aumAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                aumAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor AUMcolorToFillOddDecWnf = new XSSFColor(new byte[] { 255, 255, 255 });
                aumAllCellStyleOddDecWnuf.SetFillForegroundColor(AUMcolorToFillOddDecWnf);
                aumAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
                IDataFormat AUMformatOddDecWnuf = workbook.CreateDataFormat();
                aumAllCellStyleOddDecWnuf.DataFormat = AUMformatOddDecWnuf.GetFormat(aumNumberDecimalFormat);
                aumAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
                aumAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
                #endregion

                #region With Decimal Format Return
                XSSFCellStyle retAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
                retAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                retAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                retAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                retAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor RETcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
                retAllCellStyleOddDec.SetFillForegroundColor(RETcolorToFillOddDec);
                retAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
                IDataFormat RETformatOddDec = workbook.CreateDataFormat();
                retAllCellStyleOddDec.DataFormat = RETformatOddDec.GetFormat(retDecimalFormat);
                retAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
                retAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

                XSSFCellStyle retAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
                retAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                retAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                retAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                retAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor RETcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
                retAllCellStyleOddDecWnuf.SetFillForegroundColor(RETcolorToFillOddDecWnuf);
                retAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
                IDataFormat RETformatOddDecWnuf = workbook.CreateDataFormat();
                retAllCellStyleOddDecWnuf.DataFormat = RETformatOddDecWnuf.GetFormat(retNumberDecimalFormat);
                retAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
                retAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
                #endregion

                #region With Decimal Format Nav
                XSSFCellStyle navAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
                navAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                navAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                navAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                navAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor naVcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
                navAllCellStyleOddDec.SetFillForegroundColor(naVcolorToFillOddDec);
                navAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
                IDataFormat naVformatOddDec = workbook.CreateDataFormat();
                navAllCellStyleOddDec.DataFormat = naVformatOddDec.GetFormat(navDecimalFormat);
                navAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
                navAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


                XSSFCellStyle navAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
                navAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                navAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                navAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                navAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor naVcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
                navAllCellStyleOddDecWnuf.SetFillForegroundColor(naVcolorToFillOddDecWnuf);
                navAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
                IDataFormat naVformatOddDecWnuf = workbook.CreateDataFormat();
                navAllCellStyleOddDecWnuf.DataFormat = naVformatOddDecWnuf.GetFormat(navNumberDecimalFormat);
                navAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
                navAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
                #endregion


                #region With Decimal Format Other
                XSSFCellStyle othAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
                othAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                othAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                othAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                othAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor othcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
                othAllCellStyleOddDec.SetFillForegroundColor(othcolorToFillOddDec);
                othAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
                IDataFormat othformatOddDec = workbook.CreateDataFormat();
                othAllCellStyleOddDec.DataFormat = othformatOddDec.GetFormat(othDecimalFormat);
                othAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
                othAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


                XSSFCellStyle othAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
                othAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                othAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                othAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                othAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor othcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
                othAllCellStyleOddDecWnuf.SetFillForegroundColor(othcolorToFillOddDecWnuf);
                othAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
                IDataFormat othformatOddDecWnuf = workbook.CreateDataFormat();
                othAllCellStyleOddDecWnuf.DataFormat = othformatOddDecWnuf.GetFormat(othNumberDecimalFormat);
                othAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
                othAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
                #endregion


                #region With Decimal Format ratio
                XSSFCellStyle ratAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
                ratAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                ratAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                ratAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                ratAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor retcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
                ratAllCellStyleOddDec.SetFillForegroundColor(retcolorToFillOddDec);
                ratAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
                IDataFormat retformatOddDec = workbook.CreateDataFormat();
                ratAllCellStyleOddDec.DataFormat = retformatOddDec.GetFormat(ratioDecimalFormat);
                ratAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
                ratAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


                XSSFCellStyle ratAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
                ratAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                ratAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                ratAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                ratAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor retcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
                ratAllCellStyleOddDecWnuf.SetFillForegroundColor(retcolorToFillOddDecWnuf);
                ratAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
                IDataFormat retformatOddDecWnuf = workbook.CreateDataFormat();
                ratAllCellStyleOddDecWnuf.DataFormat = retformatOddDecWnuf.GetFormat(ratioNumberDecimalFormat);
                ratAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
                ratAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
                #endregion

                #region No Format
                XSSFCellStyle AllCellStyleOdd = (XSSFCellStyle)workbook.CreateCellStyle();
                AllCellStyleOdd.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                AllCellStyleOdd.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                AllCellStyleOdd.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                AllCellStyleOdd.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor colorToFillOdd = new XSSFColor(new byte[] { 255, 255, 255 });
                AllCellStyleOdd.SetFillForegroundColor(colorToFillOdd);
                AllCellStyleOdd.FillPattern = FillPattern.SolidForeground;
                AllCellStyleOdd.Alignment = HorizontalAlignment.Center;
                AllCellStyleOdd.VerticalAlignment = VerticalAlignment.Center;
                #endregion

                #endregion

                #region Cell Style For First Column Even Row
                XSSFCellStyle AllCellStyleFstColmEven = (XSSFCellStyle)workbook.CreateCellStyle();
                AllCellStyleFstColmEven.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                AllCellStyleFstColmEven.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                AllCellStyleFstColmEven.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                AllCellStyleFstColmEven.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor colorToFillFstClmnEven = new XSSFColor(new byte[] { 176, 196, 222 });
                AllCellStyleFstColmEven.SetFillForegroundColor(colorToFillFstClmnEven);
                AllCellStyleFstColmEven.FillPattern = FillPattern.SolidForeground;
                AllCellStyleFstColmEven.Alignment = HorizontalAlignment.Left;
                AllCellStyleFstColmEven.VerticalAlignment = VerticalAlignment.Center;
                #endregion

                #region Cell Style For First Column Odd Row
                XSSFCellStyle AllCellStyleFstColmOdd = (XSSFCellStyle)workbook.CreateCellStyle();
                AllCellStyleFstColmOdd.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                AllCellStyleFstColmOdd.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                AllCellStyleFstColmOdd.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                AllCellStyleFstColmOdd.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor colorToFillFstClmnOdd = new XSSFColor(new byte[] { 255, 255, 255 });
                AllCellStyleFstColmOdd.SetFillForegroundColor(colorToFillFstClmnOdd);
                AllCellStyleFstColmOdd.FillPattern = FillPattern.SolidForeground;
                AllCellStyleFstColmOdd.Alignment = HorizontalAlignment.Left;
                AllCellStyleFstColmOdd.VerticalAlignment = VerticalAlignment.Center;
                #endregion
                #region Without Decimal Number Format Even Row
                XSSFCellStyle intAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                intAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                intAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                intAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                intAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor intcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
                intAllCellStyleEvenDecFrmt.SetFillForegroundColor(intcolorToFillEvenWtoutDec);
                intAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
                IDataFormat intformatEven = workbook.CreateDataFormat();
                intAllCellStyleEvenDecFrmt.DataFormat = intformatEven.GetFormat(intNumberWithoutDecimalFormat);
                intAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
                intAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;
                //========Rank & Quartile Style for Even

                XSSFCellStyle Rank1EvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                Rank1EvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                Rank1EvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                Rank1EvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                Rank1EvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                //Rank1EvenDecFrmt.SetFillForegroundColor(intcolorToFillEvenWtoutDec);
                Rank1EvenDecFrmt.SetFillForegroundColor(Rank1color.IsEmpty ? intcolorToFillEvenWtoutDec : new XSSFColor(Rank1color));
                Rank1EvenDecFrmt.FillPattern = FillPattern.SolidForeground;
                //var rank1font = workbook.CreateFont();
                //rank1font.Color = palRank1Index;
                //rank1font.Boldweight = (short)FontBoldWeight.Bold;
                //Rank1EvenDecFrmt.SetFont(rank1font);
                Rank1EvenDecFrmt.DataFormat = 0;
                Rank1EvenDecFrmt.Alignment = HorizontalAlignment.Center;
                Rank1EvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;
                XSSFCellStyle Rank2EvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                Rank2EvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                Rank2EvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                Rank2EvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                Rank2EvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                //Rank2EvenDecFrmt.SetFillForegroundColor(intcolorToFillEvenWtoutDec);
                Rank2EvenDecFrmt.SetFillForegroundColor(Rank2color.IsEmpty ? intcolorToFillEvenWtoutDec : new XSSFColor(Rank2color));
                Rank2EvenDecFrmt.FillPattern = FillPattern.SolidForeground;
                //var rank2font = workbook.CreateFont();
                //rank2font.Color = palRank2Index;
                //rank2font.Boldweight = (short)FontBoldWeight.Bold;
                //Rank2EvenDecFrmt.SetFont(rank2font);
                Rank2EvenDecFrmt.DataFormat = 0;
                Rank2EvenDecFrmt.Alignment = HorizontalAlignment.Center;
                Rank2EvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;
                XSSFCellStyle Rank3EvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                Rank3EvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                Rank3EvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                Rank3EvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                Rank3EvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                //Rank3EvenDecFrmt.SetFillForegroundColor(intcolorToFillEvenWtoutDec);
                Rank3EvenDecFrmt.SetFillForegroundColor(Rank3color.IsEmpty ? intcolorToFillEvenWtoutDec : new XSSFColor(Rank3color));
                Rank3EvenDecFrmt.FillPattern = FillPattern.SolidForeground;
                //var rank3font = workbook.CreateFont();
                //rank3font.Color = palRank3Index;
                //rank3font.Boldweight = (short)FontBoldWeight.Bold;
                //Rank3EvenDecFrmt.SetFont(rank3font);
                Rank3EvenDecFrmt.DataFormat = 0;
                Rank3EvenDecFrmt.Alignment = HorizontalAlignment.Center;
                Rank3EvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;
                XSSFCellStyle RankNocolorEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                RankNocolorEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                RankNocolorEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                RankNocolorEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                RankNocolorEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                RankNocolorEvenDecFrmt.SetFillForegroundColor(intcolorToFillEvenWtoutDec);
                RankNocolorEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
                //var rankNocolorfont = workbook.CreateFont();
                //rankNocolorfont.Color = (short)0;
                //rankNocolorfont.Boldweight = (short)FontBoldWeight.None;
                //RankNocolorEvenDecFrmt.SetFont(rankNocolorfont);
                RankNocolorEvenDecFrmt.DataFormat = 0;
                RankNocolorEvenDecFrmt.Alignment = HorizontalAlignment.Center;
                RankNocolorEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

                XSSFCellStyle Quartile1EvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                Quartile1EvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                Quartile1EvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                Quartile1EvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                Quartile1EvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                //Quartile1EvenDecFrmt.SetFillForegroundColor(intcolorToFillEvenWtoutDec);
                Quartile1EvenDecFrmt.SetFillForegroundColor(Quartile1color.IsEmpty ? intcolorToFillEvenWtoutDec : new XSSFColor(Quartile1color));
                Quartile1EvenDecFrmt.FillPattern = FillPattern.SolidForeground;
                //var Quartile1font = workbook.CreateFont();
                //Quartile1font.Color = palQuartile1Index;
                //Quartile1font.Boldweight = (short)FontBoldWeight.Bold;
                //Quartile1EvenDecFrmt.SetFont(Quartile1font);
                Quartile1EvenDecFrmt.DataFormat = 0;
                Quartile1EvenDecFrmt.Alignment = HorizontalAlignment.Center;
                Quartile1EvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;
                XSSFCellStyle Quartile2EvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                Quartile2EvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                Quartile2EvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                Quartile2EvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                Quartile2EvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                //Quartile2EvenDecFrmt.SetFillForegroundColor(intcolorToFillEvenWtoutDec);
                Quartile2EvenDecFrmt.SetFillForegroundColor(Quartile2color.IsEmpty ? intcolorToFillEvenWtoutDec : new XSSFColor(Quartile2color));
                Quartile2EvenDecFrmt.FillPattern = FillPattern.SolidForeground;
                //var Quartile2font = workbook.CreateFont();
                //Quartile2font.Color = palQuartile2Index;
                //Quartile2font.Boldweight = (short)FontBoldWeight.Bold;
                //Quartile2EvenDecFrmt.SetFont(Quartile2font);
                Quartile2EvenDecFrmt.DataFormat = 0;
                Quartile2EvenDecFrmt.Alignment = HorizontalAlignment.Center;
                Quartile2EvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;
                XSSFCellStyle Quartile3EvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                Quartile3EvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                Quartile3EvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                Quartile3EvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                Quartile3EvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                //Quartile3EvenDecFrmt.SetFillForegroundColor(intcolorToFillEvenWtoutDec);
                Quartile3EvenDecFrmt.SetFillForegroundColor(Quartile3color.IsEmpty ? intcolorToFillEvenWtoutDec : new XSSFColor(Quartile3color));
                Quartile3EvenDecFrmt.FillPattern = FillPattern.SolidForeground;
                //var Quartile3font = workbook.CreateFont();
                //Quartile3font.Color = palQuartile3Index;
                //Quartile3font.Boldweight = (short)FontBoldWeight.Bold;
                //Quartile3EvenDecFrmt.SetFont(Quartile3font);
                Quartile3EvenDecFrmt.DataFormat = 0;
                Quartile3EvenDecFrmt.Alignment = HorizontalAlignment.Center;
                Quartile3EvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;
                XSSFCellStyle Quartile4EvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                Quartile4EvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                Quartile4EvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                Quartile4EvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                Quartile4EvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                //Quartile4EvenDecFrmt.SetFillForegroundColor(intcolorToFillEvenWtoutDec);
                Quartile4EvenDecFrmt.SetFillForegroundColor(Quartile4color.IsEmpty ? intcolorToFillEvenWtoutDec : new XSSFColor(Quartile4color));
                Quartile4EvenDecFrmt.FillPattern = FillPattern.SolidForeground;
                //var Quartile4font = workbook.CreateFont();
                //Quartile4font.Color = palQuartile4Index;
                //Quartile4font.Boldweight = (short)FontBoldWeight.Bold;
                //Quartile4EvenDecFrmt.SetFont(Quartile4font);
                Quartile4EvenDecFrmt.DataFormat = 0;
                Quartile4EvenDecFrmt.Alignment = HorizontalAlignment.Center;
                Quartile4EvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;
                XSSFCellStyle QuartileNocolorEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                QuartileNocolorEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                QuartileNocolorEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                QuartileNocolorEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                QuartileNocolorEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                QuartileNocolorEvenDecFrmt.SetFillForegroundColor(intcolorToFillEvenWtoutDec);
                intAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
                //var QuartileNocolorfont = workbook.CreateFont();
                //QuartileNocolorfont.Color = (short)0;
                //QuartileNocolorfont.Boldweight = (short)FontBoldWeight.None;
                //QuartileNocolorEvenDecFrmt.SetFont(QuartileNocolorfont);
                QuartileNocolorEvenDecFrmt.DataFormat = 0;
                QuartileNocolorEvenDecFrmt.Alignment = HorizontalAlignment.Center;
                QuartileNocolorEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;
                //===============

                XSSFCellStyle intSimpleAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                intSimpleAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                intSimpleAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                intSimpleAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                intSimpleAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor intSimplecolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
                intSimpleAllCellStyleEvenDecFrmt.SetFillForegroundColor(intSimplecolorToFillEvenWtoutDec);
                intSimpleAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
                intSimpleAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
                intSimpleAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;
                #endregion
                #region Without Decimal Number Format Odd Row
                XSSFCellStyle intAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
                intAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                intAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                intAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                intAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor intcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
                intAllCellStyleOddDec.SetFillForegroundColor(intcolorToFillOddDec);
                intAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
                IDataFormat intformatOddDec = workbook.CreateDataFormat();
                intAllCellStyleOddDec.DataFormat = intformatOddDec.GetFormat(intNumberWithoutDecimalFormat);
                intAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
                intAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;
                //========Rank & Quartile Style for Odd
                XSSFCellStyle Rank1OddDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                Rank1OddDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                Rank1OddDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                Rank1OddDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                Rank1OddDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                //Rank1OddDecFrmt.SetFillForegroundColor(intcolorToFillOddDec);
                Rank1OddDecFrmt.SetFillForegroundColor(Rank1color.IsEmpty ? intcolorToFillOddDec : new XSSFColor(Rank1color));
                Rank1OddDecFrmt.FillPattern = FillPattern.SolidForeground;
                //var rank1Oddfont = workbook.CreateFont();
                //rank1Oddfont.Color = palRank1Index;
                //rank1Oddfont.Boldweight = (short)FontBoldWeight.Bold;
                //Rank1OddDecFrmt.SetFont(rank1Oddfont);
                Rank1OddDecFrmt.DataFormat = 0;
                Rank1OddDecFrmt.Alignment = HorizontalAlignment.Center;
                Rank1OddDecFrmt.VerticalAlignment = VerticalAlignment.Center;
                XSSFCellStyle Rank2OddDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                Rank2OddDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                Rank2OddDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                Rank2OddDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                Rank2OddDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                //Rank2OddDecFrmt.SetFillForegroundColor(intcolorToFillOddDec);
                Rank2OddDecFrmt.SetFillForegroundColor(Rank2color.IsEmpty ? intcolorToFillOddDec : new XSSFColor(Rank2color));
                Rank2OddDecFrmt.FillPattern = FillPattern.SolidForeground;
                //var rank2Oddfont = workbook.CreateFont();
                //rank2Oddfont.Color = palRank2Index;
                //rank2Oddfont.Boldweight = (short)FontBoldWeight.Bold;
                //Rank2OddDecFrmt.SetFont(rank2Oddfont);
                Rank2OddDecFrmt.DataFormat = 0;
                Rank2OddDecFrmt.Alignment = HorizontalAlignment.Center;
                Rank2OddDecFrmt.VerticalAlignment = VerticalAlignment.Center;
                XSSFCellStyle Rank3OddDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                Rank3OddDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                Rank3OddDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                Rank3OddDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                Rank3OddDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                //Rank3OddDecFrmt.SetFillForegroundColor(intcolorToFillOddDec);
                Rank3OddDecFrmt.SetFillForegroundColor(Rank3color.IsEmpty ? intcolorToFillOddDec : new XSSFColor(Rank3color));
                Rank3OddDecFrmt.FillPattern = FillPattern.SolidForeground;
                //var rank3Oddfont = workbook.CreateFont();
                //rank3Oddfont.Color = palRank3Index;
                //rank3Oddfont.Boldweight = (short)FontBoldWeight.Bold;
                //Rank3OddDecFrmt.SetFont(rank3Oddfont);
                Rank3OddDecFrmt.DataFormat = 0;
                Rank3OddDecFrmt.Alignment = HorizontalAlignment.Center;
                Rank3OddDecFrmt.VerticalAlignment = VerticalAlignment.Center;
                XSSFCellStyle RankNocolorOddDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                RankNocolorOddDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                RankNocolorOddDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                RankNocolorOddDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                RankNocolorOddDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                RankNocolorOddDecFrmt.SetFillForegroundColor(intcolorToFillOddDec);
                RankNocolorOddDecFrmt.FillPattern = FillPattern.SolidForeground;
                //var rankNocolorOddfont = workbook.CreateFont();
                //rankNocolorOddfont.Color = (short)0;
                //rankNocolorOddfont.Boldweight = (short)FontBoldWeight.None;
                //RankNocolorOddDecFrmt.SetFont(rankNocolorOddfont);
                RankNocolorOddDecFrmt.DataFormat = 0;
                RankNocolorOddDecFrmt.Alignment = HorizontalAlignment.Center;
                RankNocolorOddDecFrmt.VerticalAlignment = VerticalAlignment.Center;

                XSSFCellStyle Quartile1OddDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                Quartile1OddDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                Quartile1OddDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                Quartile1OddDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                Quartile1OddDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                //Quartile1OddDecFrmt.SetFillForegroundColor(intcolorToFillOddDec);
                Quartile1OddDecFrmt.SetFillForegroundColor(Quartile1color.IsEmpty ? intcolorToFillOddDec : new XSSFColor(Quartile1color));
                Quartile1OddDecFrmt.FillPattern = FillPattern.SolidForeground;
                //var Quartile1Oddfont = workbook.CreateFont();
                //Quartile1Oddfont.Color = palQuartile1Index;
                //Quartile1Oddfont.Boldweight = (short)FontBoldWeight.Bold;
                //Quartile1OddDecFrmt.SetFont(Quartile1Oddfont);
                Quartile1OddDecFrmt.DataFormat = 0;
                Quartile1OddDecFrmt.Alignment = HorizontalAlignment.Center;
                Quartile1OddDecFrmt.VerticalAlignment = VerticalAlignment.Center;
                XSSFCellStyle Quartile2OddDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                Quartile2OddDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                Quartile2OddDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                Quartile2OddDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                Quartile2OddDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                //Quartile2OddDecFrmt.SetFillForegroundColor(intcolorToFillOddDec);
                Quartile2OddDecFrmt.SetFillForegroundColor(Quartile2color.IsEmpty ? intcolorToFillOddDec : new XSSFColor(Quartile2color));
                Quartile2OddDecFrmt.FillPattern = FillPattern.SolidForeground;
                //var Quartile2Oddfont = workbook.CreateFont();
                //Quartile2Oddfont.Color = palQuartile2Index;
                //Quartile2Oddfont.Boldweight = (short)FontBoldWeight.Bold;
                //Quartile2OddDecFrmt.SetFont(Quartile2Oddfont);
                Quartile2OddDecFrmt.DataFormat = 0;
                Quartile2OddDecFrmt.Alignment = HorizontalAlignment.Center;
                Quartile2OddDecFrmt.VerticalAlignment = VerticalAlignment.Center;
                XSSFCellStyle Quartile3OddDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                Quartile3OddDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                Quartile3OddDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                Quartile3OddDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                Quartile3OddDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                //Quartile3OddDecFrmt.SetFillForegroundColor(intcolorToFillOddDec);
                Quartile3OddDecFrmt.SetFillForegroundColor(Quartile3color.IsEmpty ? intcolorToFillOddDec : new XSSFColor(Quartile3color));
                Quartile3OddDecFrmt.FillPattern = FillPattern.SolidForeground;
                //var Quartile3Oddfont = workbook.CreateFont();
                //Quartile3Oddfont.Color = palQuartile3Index;
                //Quartile3Oddfont.Boldweight = (short)FontBoldWeight.Bold;
                //Quartile3OddDecFrmt.SetFont(Quartile3Oddfont);
                Quartile3OddDecFrmt.DataFormat = 0;
                Quartile3OddDecFrmt.Alignment = HorizontalAlignment.Center;
                Quartile3OddDecFrmt.VerticalAlignment = VerticalAlignment.Center;
                XSSFCellStyle Quartile4OddDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                Quartile4OddDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                Quartile4OddDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                Quartile4OddDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                Quartile4OddDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                //Quartile4OddDecFrmt.SetFillForegroundColor(intcolorToFillOddDec);
                Quartile4OddDecFrmt.SetFillForegroundColor(Quartile4color.IsEmpty ? intcolorToFillOddDec : new XSSFColor(Quartile4color));
                Quartile4OddDecFrmt.FillPattern = FillPattern.SolidForeground;
                //var Quartile4Oddfont = workbook.CreateFont();
                //Quartile4Oddfont.Color = palQuartile4Index;
                //Quartile4Oddfont.Boldweight = (short)FontBoldWeight.Bold;
                //Quartile4OddDecFrmt.SetFont(Quartile4Oddfont);
                Quartile4OddDecFrmt.DataFormat = 0;
                Quartile4OddDecFrmt.Alignment = HorizontalAlignment.Center;
                Quartile4OddDecFrmt.VerticalAlignment = VerticalAlignment.Center;
                XSSFCellStyle QuartileNocolorOddDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                QuartileNocolorOddDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                QuartileNocolorOddDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                QuartileNocolorOddDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                QuartileNocolorOddDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                QuartileNocolorOddDecFrmt.SetFillForegroundColor(intcolorToFillOddDec);
                intAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
                //var QuartileNocolorOddfont = workbook.CreateFont();
                //QuartileNocolorOddfont.Color = (short)0;
                //QuartileNocolorOddfont.Boldweight = (short)FontBoldWeight.None;
                //QuartileNocolorOddDecFrmt.SetFont(QuartileNocolorOddfont);
                QuartileNocolorOddDecFrmt.DataFormat = 0;
                QuartileNocolorOddDecFrmt.Alignment = HorizontalAlignment.Center;
                QuartileNocolorOddDecFrmt.VerticalAlignment = VerticalAlignment.Center;
                //===============

                XSSFCellStyle intSimpleAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
                intSimpleAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                intSimpleAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                intSimpleAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                intSimpleAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor intSimplecolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
                intSimpleAllCellStyleOddDec.SetFillForegroundColor(intSimplecolorToFillOddDec);
                intSimpleAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
                intSimpleAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
                intSimpleAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;
                #endregion
                #region With DateTime format
                XSSFCellStyle DateTimeAllCellStyleEvenFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                DateTimeAllCellStyleEvenFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                DateTimeAllCellStyleEvenFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                DateTimeAllCellStyleEvenFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                DateTimeAllCellStyleEvenFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor DateTimecolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
                DateTimeAllCellStyleEvenFrmt.SetFillForegroundColor(DateTimecolorToFillEvenWtoutDec);
                DateTimeAllCellStyleEvenFrmt.FillPattern = FillPattern.SolidForeground;
                IDataFormat DateTimeformatEven = workbook.CreateDataFormat();
                DateTimeAllCellStyleEvenFrmt.DataFormat = DateTimeformatEven.GetFormat(DateTimeFormat);
                DateTimeAllCellStyleEvenFrmt.Alignment = HorizontalAlignment.Center;
                DateTimeAllCellStyleEvenFrmt.VerticalAlignment = VerticalAlignment.Center;

                XSSFCellStyle DateTimeAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
                DateTimeAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                DateTimeAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                DateTimeAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                DateTimeAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor DateTimecolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
                DateTimeAllCellStyleOddDec.SetFillForegroundColor(DateTimecolorToFillOddDec);
                DateTimeAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
                IDataFormat DateTimeformatOddDec = workbook.CreateDataFormat();
                DateTimeAllCellStyleOddDec.DataFormat = DateTimeformatOddDec.GetFormat(DateTimeFormat);
                DateTimeAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
                DateTimeAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


                #endregion
                #region With MonthYear format
                XSSFCellStyle MonthYearAllCellStyleEvenFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
                MonthYearAllCellStyleEvenFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                MonthYearAllCellStyleEvenFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                MonthYearAllCellStyleEvenFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                MonthYearAllCellStyleEvenFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor MonthYearcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
                MonthYearAllCellStyleEvenFrmt.SetFillForegroundColor(MonthYearcolorToFillEvenWtoutDec);
                MonthYearAllCellStyleEvenFrmt.FillPattern = FillPattern.SolidForeground;
                IDataFormat MonthYearformatEven = workbook.CreateDataFormat();
                MonthYearAllCellStyleEvenFrmt.DataFormat = DateTimeformatEven.GetFormat(MonthYearFormat);
                MonthYearAllCellStyleEvenFrmt.Alignment = HorizontalAlignment.Center;
                MonthYearAllCellStyleEvenFrmt.VerticalAlignment = VerticalAlignment.Center;

                XSSFCellStyle MonthYearAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
                MonthYearAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                MonthYearAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                MonthYearAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                MonthYearAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
                XSSFColor MonthYearcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
                MonthYearAllCellStyleOddDec.SetFillForegroundColor(MonthYearcolorToFillOddDec);
                MonthYearAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
                IDataFormat MonthYearformatOddDec = workbook.CreateDataFormat();
                MonthYearAllCellStyleOddDec.DataFormat = DateTimeformatOddDec.GetFormat(MonthYearFormat);
                MonthYearAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
                MonthYearAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


                #endregion
                #region Value added to the Excel

                #region Added by Subrata on 22 Feb 2018
                bool IsNumericKey = false;
                bool IsNumericValue = false;
                var AllListData = listData.SelectMany(x => x.LstKeyValuePair).ToArray();
                var AllDataKey = AllListData.Select(x => x.Key).Distinct().ToArray();
                int ValueRes;
                IsNumericKey = int.TryParse(AllDataKey[0], out ValueRes);
                #endregion

                int incr = 6;
                bool isNumeric = false;
                XSSFCellStyle ColorStyle = (XSSFCellStyle)workbook.CreateCellStyle();
                IFont rankfont = workbook.CreateFont();

                foreach (var item in listData)
                {
                    var dataRow = sheet.CreateRow(incr);
                    sheet.GetRow(incr).HeightInPoints = 20;
                    {
                        var cellValues = (from i in item.LstKeyValuePair
                                          from j in listTableHeader
                                          where i.Key == j.ColumnName
                                          orderby j.Position
                                          select new
                                          {
                                              IsNum = j.IsNumberFormatReq,
                                              DecType = j.DecFormatType,
                                              IsMixedType = j.IsMixedValueType,
                                              IsDateTimeStringMixedType = j.IsDateTimeStringMixedType,
                                              IsDateTimeType = j.IsDateTimeType,
                                              IsMonthYearType = j.IsMonthYearType,
                                              Value = i.Value
                                          }).ToArray();

                        for (int k = 0; k < cellValues.Length; k++)
                        {
                            var datacell = dataRow.CreateCell(k);
                            if (cellValues[k].DecType != DecimalFormatType.NoDecimalReq)
                            {
                                double OutVal;
                                if (string.IsNullOrEmpty(cellValues[k].Value) || cellValues[k].Value == BlankData || !double.TryParse(cellValues[k].Value, out OutVal))
                                {
                                    datacell.SetCellValue(cellValues[k].Value);
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleEven;
                                        else
                                            datacell.CellStyle = AllCellStyleOdd;
                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }

                                }
                                else
                                {
                                    datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                                    if (k > 0)
                                    {
                                        if (cellValues[k].DecType == DecimalFormatType.AUM)
                                        {
                                            if (incr % 2 == 0)
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {

                                                    datacell.CellStyle = aumAllCellStyleEvenDecFrmtWNum;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = aumAllCellStyleEvenDecFrmt;
                                                }
                                            }
                                            else
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    datacell.CellStyle = aumAllCellStyleOddDecWnuf;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = aumAllCellStyleOddDec;
                                                }
                                            }
                                        }
                                        else if (cellValues[k].DecType == DecimalFormatType.NAV)
                                        {
                                            if (incr % 2 == 0)
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    datacell.CellStyle = navAllCellStyleEvenDecFrmtWnnum;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = navAllCellStyleEvenDecFrmt;
                                                }
                                            }
                                            else
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    datacell.CellStyle = navAllCellStyleOddDecWnuf;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = navAllCellStyleOddDec;
                                                }

                                            }
                                        }
                                        else if (cellValues[k].DecType == DecimalFormatType.OTHER)
                                        {
                                            if (incr % 2 == 0)
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    datacell.CellStyle = otherAllCellStyleEvenDecFrmtWnum;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = otherAllCellStyleEvenDecFrmt;
                                                }
                                            }

                                            else
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    datacell.CellStyle = othAllCellStyleOddDecWnuf;
                                                }
                                                else
                                                {

                                                    datacell.CellStyle = othAllCellStyleOddDec;
                                                }

                                            }
                                        }
                                        else if (cellValues[k].DecType == DecimalFormatType.RATIO)
                                        {
                                            if (incr % 2 == 0)
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    datacell.CellStyle = ratAllCellStyleEvenDecFrmtWth;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = ratAllCellStyleEvenDecFrmt;
                                                }
                                            }
                                            else
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    datacell.CellStyle = ratAllCellStyleOddDecWnuf;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = ratAllCellStyleOddDec;
                                                }
                                            }
                                        }
                                        else if (cellValues[k].DecType == DecimalFormatType.RETURN)
                                        {
                                            if (incr % 2 == 0)
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    datacell.CellStyle = retAllCellStyleEvenDecFrmtWnum;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = retAllCellStyleEvenDecFrmt;
                                                }

                                            }
                                            else
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    datacell.CellStyle = retAllCellStyleOddDecWnuf;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = retAllCellStyleOddDec;
                                                }

                                            }
                                        }
                                        else if (cellValues[k].DecType == DecimalFormatType.IntegerWithOutDecimal)
                                        {
                                            if (incr % 2 == 0)
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    if (RankIndexes.Contains(k))
                                                    {
                                                        datacell.CellStyle = datacell.GetValue().ToString() == "1" ? Rank1EvenDecFrmt :
                                                        datacell.GetValue().ToString() == "2" ? Rank2EvenDecFrmt : datacell.GetValue().ToString() == "3" ? Rank3EvenDecFrmt : RankNocolorEvenDecFrmt;
                                                    }
                                                    else if (QuartileIndexes.Contains(k))
                                                    {
                                                        datacell.CellStyle = datacell.GetValue().ToString() == "1" ? Quartile1EvenDecFrmt :
                                                        datacell.GetValue().ToString() == "2" ? Quartile2EvenDecFrmt : datacell.GetValue().ToString() == "3" ? Quartile3EvenDecFrmt
                                                        : datacell.GetValue().ToString() == "4" ? Quartile4EvenDecFrmt : QuartileNocolorEvenDecFrmt;
                                                    }
                                                    else
                                                        datacell.CellStyle = intAllCellStyleEvenDecFrmt;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = intSimpleAllCellStyleEvenDecFrmt;
                                                }

                                            }
                                            else
                                            {
                                                if (cellValues[k].IsNum == true)
                                                {
                                                    if (RankIndexes.Contains(k))
                                                    {
                                                        datacell.CellStyle = datacell.GetValue().ToString() == "1" ? Rank1OddDecFrmt :
                                                        datacell.GetValue().ToString() == "2" ? Rank2OddDecFrmt : datacell.GetValue().ToString() == "3" ? Rank3OddDecFrmt : RankNocolorOddDecFrmt;
                                                    }
                                                    else if (QuartileIndexes.Contains(k))
                                                    {
                                                        datacell.CellStyle = datacell.GetValue().ToString() == "1" ? Quartile1OddDecFrmt :
                                                        datacell.GetValue().ToString() == "2" ? Quartile2OddDecFrmt : datacell.GetValue().ToString() == "3" ? Quartile3OddDecFrmt
                                                        : datacell.GetValue().ToString() == "4" ? Quartile4OddDecFrmt : QuartileNocolorOddDecFrmt;
                                                    }
                                                    else
                                                        datacell.CellStyle = intAllCellStyleOddDec;
                                                }
                                                else
                                                {
                                                    datacell.CellStyle = intSimpleAllCellStyleOddDec;
                                                }

                                            }
                                        }



                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }

                                }

                            }
                            else
                            {
                                double OutVal;
                                if (double.TryParse(cellValues[k].Value, out OutVal) && !cellValues[k].IsMixedType)
                                {
                                    datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleEven;
                                        else
                                            datacell.CellStyle = AllCellStyleOdd;

                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }
                                }
                                else if (cellValues[k].IsDateTimeType)
                                {
                                    DateTime OutValdt;
                                    if (DateTime.TryParse(cellValues[k].Value, out OutValdt))
                                    {
                                        datacell.SetCellValue(Convert.ToDateTime(cellValues[k].Value));
                                        if (k > 0)
                                        {
                                            if (incr % 2 == 0)
                                                datacell.CellStyle = DateTimeAllCellStyleEvenFrmt;
                                            else
                                                datacell.CellStyle = DateTimeAllCellStyleOddDec;

                                        }
                                        else
                                        {
                                            if (incr % 2 == 0)
                                                datacell.CellStyle = DateTimeAllCellStyleEvenFrmt;//AllCellStyleFstColmEven;
                                            else
                                                datacell.CellStyle = DateTimeAllCellStyleOddDec;//AllCellStyleFstColmOdd;
                                        }
                                    }
                                    else
                                    {
                                        datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                        if (k > 0)
                                        {
                                            if (incr % 2 == 0)
                                                datacell.CellStyle = AllCellStyleEven;
                                            else
                                                datacell.CellStyle = AllCellStyleOdd;

                                        }
                                        else
                                        {
                                            if (incr % 2 == 0)
                                                datacell.CellStyle = AllCellStyleFstColmEven;
                                            else
                                                datacell.CellStyle = AllCellStyleFstColmOdd;
                                        }
                                    }
                                }
                                else if (cellValues[k].IsDateTimeStringMixedType)
                                {
                                    DateTime OutValdt;
                                    if (DateTime.TryParse(cellValues[k].Value, out OutValdt))
                                    {
                                        datacell.SetCellValue(Convert.ToDateTime(cellValues[k].Value));
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = DateTimeAllCellStyleEvenFrmt;
                                        else
                                            datacell.CellStyle = DateTimeAllCellStyleOddDec;
                                        //if (k > 0)
                                        //{
                                        //	if (incr % 2 == 0)
                                        //		datacell.CellStyle = DateTimeAllCellStyleEvenFrmt;
                                        //	else
                                        //		datacell.CellStyle = DateTimeAllCellStyleOddDec;

                                        //}
                                        //else
                                        //{
                                        //	if (incr % 2 == 0)
                                        //		datacell.CellStyle = AllCellStyleFstColmEven;
                                        //	else
                                        //		datacell.CellStyle = AllCellStyleFstColmOdd;
                                        //}
                                    }
                                    else
                                    {
                                        datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                        if (k > 0)
                                        {
                                            if (incr % 2 == 0)
                                                datacell.CellStyle = AllCellStyleEven;
                                            else
                                                datacell.CellStyle = AllCellStyleOdd;

                                        }
                                        else
                                        {
                                            if (incr % 2 == 0)
                                                datacell.CellStyle = AllCellStyleFstColmEven;
                                            else
                                                datacell.CellStyle = AllCellStyleFstColmOdd;
                                        }
                                    }
                                }
                                else if (cellValues[k].IsMonthYearType)
                                {
                                    DateTime OutValdt;
                                    if (DateTime.TryParse(cellValues[k].Value, out OutValdt))
                                    {
                                        datacell.SetCellValue(Convert.ToDateTime(cellValues[k].Value));
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = MonthYearAllCellStyleEvenFrmt;
                                        else
                                            datacell.CellStyle = MonthYearAllCellStyleOddDec;
                                    }
                                    else
                                    {
                                        datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                        if (k > 0)
                                        {
                                            if (incr % 2 == 0)
                                                datacell.CellStyle = AllCellStyleEven;
                                            else
                                                datacell.CellStyle = AllCellStyleOdd;

                                        }
                                        else
                                        {
                                            if (incr % 2 == 0)
                                                datacell.CellStyle = AllCellStyleFstColmEven;
                                            else
                                                datacell.CellStyle = AllCellStyleFstColmOdd;
                                        }
                                    }
                                }
                                else
                                {
                                    datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
                                    if (k > 0)
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleEven;
                                        else
                                            datacell.CellStyle = AllCellStyleOdd;

                                    }
                                    else
                                    {
                                        if (incr % 2 == 0)
                                            datacell.CellStyle = AllCellStyleFstColmEven;
                                        else
                                            datacell.CellStyle = AllCellStyleFstColmOdd;
                                    }
                                }
                            }
                        }
                        incr++;
                    }

                    //var Celltext = dataRow.GetCell(0).StringCellValue;
                    var Celltext = dataRow.GetCell(0).GetValue();
                    if (new[] { "MIN. INVESTMENT (IN RS.)" }.Contains(Celltext.ToString().ToUpper()))
                    {
                        for (int i = 1; i < listTableHeader.Count; i++)
                        {
                            var doublecell = dataRow.GetCell(i);
                            double parsevalue;
                            var isdouble = double.TryParse(doublecell.GetValue().ToString(), out parsevalue);
                            if (isdouble)
                                doublecell.SetCellValue(parsevalue.NumberFormatWithOutRoundUp(ubs.NumberFormat));
                        }
                    }
                }
                #endregion

                for (int i = 0; i < listTableHeader.Count; i++)
                    sheet.AutoSizeColumn(i);
                if (sheet.GetColumnWidth(0) < 11072)
                    sheet.SetColumnWidth(0, 11072);

                #region Logo
                try
                {
                    if (!string.IsNullOrEmpty(LogoPath))
                    {
                        XSSFDrawing patriarch = (XSSFDrawing)sheet.CreateDrawingPatriarch();
                        XSSFClientAnchor anchor;
                        anchor = new XSSFClientAnchor(0, 0, 0, 255, 0, 0, 0, 3);
                        anchor.AnchorType = AnchorType.DontMoveAndResize;
                        XSSFPicture picture = (XSSFPicture)patriarch.CreatePicture(anchor, LoadImage(LogoPath, workbook, PictureType.PNG));
                        double x1 = .25;
                        double y1 = .75;
                        picture.Resize(x1, y1);
                        picture.LineStyle = LineStyle.None;
                    }
                }
                catch (Exception ex)
                {
                }

                #endregion

                #region Source, Date As On and Report Generated On
                ICRArow = sheet.CreateRow(incr + 3);
                ICRArow.CreateCell(0);
                ICRACell = ICRArow.CreateCell(0);
                ICRACell.SetCellValue(StrSource);

                ICRArow = sheet.CreateRow(incr + 4);
                ICRArow.CreateCell(0);
                ICRACell = ICRArow.CreateCell(0);
                ICRACell.SetCellValue(StrDateAsOn);

                ICRArow = sheet.CreateRow(incr + 5);
                ICRArow.CreateCell(0);
                ICRACell = ICRArow.CreateCell(0);
                ICRACell.SetCellValue(StrReportGeneratedOn);
                #endregion

                #region Sheet Two Logo
                try
                {
                    if (!string.IsNullOrEmpty(LogoPath))
                    {
                        XSSFDrawing patriarch = (XSSFDrawing)sheetTwo.CreateDrawingPatriarch();
                        XSSFClientAnchor anchor;
                        anchor = new XSSFClientAnchor(0, 0, 0, 255, 0, 0, 0, 3);
                        anchor.AnchorType = AnchorType.DontMoveAndResize;
                        XSSFPicture picture = (XSSFPicture)patriarch.CreatePicture(anchor, LoadImage(LogoPath, workbook, PictureType.PNG));
                        double x1 = 1.10;
                        double y1 = 1.10;
                        picture.Resize(x1, y1);
                        picture.LineStyle = LineStyle.None;
                    }
                }
                catch (Exception ex)
                {
                }
                #endregion

                #region Disclaimer Sheet
                var Row = sheetTwo.CreateRow(1);
                var cellSheetTwo = Row.CreateCell(7);
                cellSheetTwo.SetCellValue(StrHeader1);
                cellSheetTwo.CellStyle = HeaderStyle;

                Row = sheetTwo.CreateRow(4);
                ICell Cell;
                for (int i = 0; i < 17; i++)
                {
                    Cell = Row.CreateCell(i);

                    XSSFCellStyle declationstyle = (XSSFCellStyle)workbook.CreateCellStyle();

                    declationstyle.Alignment = HorizontalAlignment.Left;
                    declationstyle.VerticalAlignment = VerticalAlignment.Top;
                    declationstyle.WrapText = true;
                    IFont declarationfnt = (XSSFFont)workbook.CreateFont();
                    //declarationfnt.Boldweight = (short)FontBoldWeight.Bold;
                    declarationfnt.FontName = "Calibri";
                    declarationfnt.FontHeightInPoints = (short)11;
                    declationstyle.SetFont(declarationfnt);
                    Cell.SetCellValue(!string.IsNullOrEmpty(Footer) ? Footer : "All information contained herein is obtained by ICRA Analytics Limited from sources believed by it to be accurate and reliable. Because of the possibility of human or mechanical error as well as other factors, however, all information contained herein is provided 'AS IS' without warranty of any kind. ICRA Analytics adopts all necessary measures so that the information it uses is of sufficient quality and from sources ICRA Analytics considers to be reliable including, when appropriate, independent third-party sources. However, ICRA Analytics is not an auditor and cannot in every instance independently verify or validate information received in preparing this document." +
                        "All information contained herein must be construed solely as statements of opinion, and  ICRA Analytics Limited or its affiliates or group companies and its respective and any of its officers, directors, personnel and employees, disclaim liability to any loss, damage of any nature, including but not limited to direct, indirect, punitive, special, exemplary, consequential, as also any loss of profit in any way arising from the use of this document or its contents in any manner or for any contingency within or beyond the control of, ICRA Analytics or any of its directors, officers, employees, agents, representatives, licensors or suppliers, arising from or in connection with the information contained herein or the use of or inability to use any such information.Opinions expressed in the document are not the opinions of our holding company, ICRA Limited(ICRA), and should not be construed as any indication of credit rating or grading of ICRA for any instruments that have been issued or are to be issued by any entity.The recipient alone shall be fully responsible and / or are liable for any decision taken on the basis of this document and / or the information contained herein.");
                    Cell.CellStyle = declationstyle;

                }
                NPOIWrite.CellMerged(sheetTwo, 4, 4, 0, 17);
                sheetTwo.GetRow(4).HeightInPoints = 200;
                #endregion

                #region Disclaimer Sheet HyperLink
                XSSFCellStyle HyperLinkStyle = (XSSFCellStyle)workbook.CreateCellStyle();
                IFont HyperLinkFont = workbook.CreateFont();
                HyperLinkFont.Color = IndexedColors.Orange.Index;
                HyperLinkFont.Underline = FontUnderlineType.Single;
                HyperLinkStyle.SetFont(HyperLinkFont);

                Row = sheetTwo.CreateRow(5);
                Cell = Row.CreateCell(0);
                Cell.SetCellValue("Click here for third-party disclaimers");
                XSSFCreationHelper createHelper = (XSSFCreationHelper)workbook.GetCreationHelper();
                XSSFHyperlink link = (XSSFHyperlink)createHelper.CreateHyperlink(HyperlinkType.Url);
                link.Address = "https://www.icraanalytics.com/legal/CRISIL-Disclaimer.html";
                Cell.Hyperlink = link;
                Cell.CellStyle = HyperLinkStyle;
                #endregion

                sheet.ActiveCell = new CellAddress(0, 1);
                var stream = new MemoryStream();
                workbook.Write(stream);

                return workbook;
            }
            catch (Exception ex)
            {


            }
            return null;
        }

        public static NPOI.XSSF.UserModel.XSSFWorkbook ExportToExcelWorkBookReturnTriIndex(UserBasicSettings ubs, List<TableHeaderEntity> listMainTableHeader, List<TableHeaderEntity> listTableheader, List<ExportEntity> listData, string LogoPath = "", string ReportName = "", string StrDateAsOn = "", string StrSettingSet="")
        {
            var TRIIndexDisclaimer = listMainTableHeader.Where(x => x.ColumnName.Contains(StrTRIIndexDisclaimer)).FirstOrDefault();
            var TriIndexDisclaimerColCount = TRIIndexDisclaimer != null ? TRIIndexDisclaimer.Colspan : 0;
            #region Variable
            string Header = ubs.Reporting_Format_Header;
            string Footer = ubs.Reporting_Format_Footer;
            string BlankData = ubs.BlankData.ToUpper() == "BLANK" ? "" : ubs.BlankData; ;

            string StrHeader1 = "ICRA Analytics Limited";
            string StrHeader2 = "3rd Floor, Electric Mansion,Appasaheb Marathe Marg, Prabhadevi,Mumbai - 400 025 Maharashtra, India";
            string StrHeader3 = Header;
            string StrReportName = ReportName;
            //string StrSource = "Source: MFI 360";
            string StrSource = "Source: " + (string.IsNullOrEmpty(UserStatisticsEntity.SourceName) ? "MFI 360" : UserStatisticsEntity.SourceName);
            StrDateAsOn = "Data as on " + StrDateAsOn;
            string StrReportGeneratedOn = "Report Generated on " + DateTime.Now.ToString("dd-MMM-yyyy HH:mm:ss");

            #region number and decimal variable for AUM
            //var aumPaddding = new string('0', (int)ubs.AUMDecimalFormat);
            //var aumDecimalFormat = "0." + aumPaddding;
            //string aumNUMBERFORMAT = ubs.NumberFormat;
            //var aumNumberFormat = aumNUMBERFORMAT.Replace("0", "#");
            //string aumNumberDecimalFormat = aumNumberFormat + "0." + new String('0', (int)ubs.AUMDecimalFormat);
            #endregion

            #region number and decimal variable for return
            var retPaddding = new string('0', (int)ubs.ReturnDecimalFormat);
            var retDecimalFormat = "0." + retPaddding;
            string retNUMBERFORMAT = ubs.NumberFormat;
            var retNumberFormat = retNUMBERFORMAT.Replace("0", "#");
            string retNumberDecimalFormat = retNumberFormat + "0." + new String('0', (int)ubs.ReturnDecimalFormat);
            #endregion

            #region number and decimal variable for NAV
            var navPaddding = new string('0', (int)ubs.NavDecimalFormat);
            var navDecimalFormat = "0." + navPaddding;
            string navNUMBERFORMAT = ubs.NumberFormat;
            var navNumberFormat = navNUMBERFORMAT.Replace("0", "#");
            string navNumberDecimalFormat = navNumberFormat + "0." + new String('0', (int)ubs.NavDecimalFormat);
            #endregion


            #region number and decimal variable for Other
            var othPaddding = new string('0', (int)ubs.OtherDecimal);
            var othDecimalFormat = "0." + othPaddding;
            string othNUMBERFORMAT = ubs.NumberFormat;
            var othNumberFormat = othNUMBERFORMAT.Replace("0", "#");
            string othNumberDecimalFormat = othNumberFormat + "0." + new String('0', (int)ubs.OtherDecimal);
            #endregion

            #region number and decimal variable for Ratio
            //var ratioPaddding = new string('0', (int)ubs.RatioDecimalFormat);
            //var ratioDecimalFormat = "0." + ratioPaddding;
            //string ratioNUMBERFORMAT = ubs.NumberFormat;
            //var ratioNumberFormat = ratioNUMBERFORMAT.Replace("0", "#");
            //string ratioNumberDecimalFormat = ratioNumberFormat + "0." + new String('0', (int)ubs.RatioDecimalFormat);
            #endregion
            #region int Format with out Decimal
            var intNumberWithoutDecimalFormat = ubs.NumberFormat.Replace("0", "#");
            #endregion
            #endregion

            NPOI.XSSF.UserModel.XSSFWorkbook workbook = new NPOI.XSSF.UserModel.XSSFWorkbook();

            ISheet sheet = workbook.CreateSheet("Output");
            ISheet sheetTwo = workbook.CreateSheet("Disclaimer");

            #region Excel Sheet Gridlines Delete
            sheet.DisplayGridlines = false;
            sheetTwo.DisplayGridlines = false;
            #endregion

            #region Header Freeze
            sheet.CreateFreezePane(1, 9);
            sheetTwo.CreateFreezePane(1, 6);
            #endregion

            #region Set Font For Header1,Header2 and Header3
            XSSFCellStyle HeaderStyle = (XSSFCellStyle)workbook.CreateCellStyle();
            IFont Headerfont = workbook.CreateFont();
            Headerfont.Boldweight = (short)FontBoldWeight.Bold;
            HeaderStyle.SetFont(Headerfont);
            #endregion

            #region Set Cell Value For Header1, Header2 and Header3
            var ICRArow = sheet.CreateRow(0);
            ICRArow.CreateCell(0);
            NPOIWrite.CellMerged(sheet, 0, 0, 1, 9);
            var ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader1);
            ICRACell.CellStyle = HeaderStyle;
            ICRArow = sheet.CreateRow(1);
            ICRArow.CreateCell(0);
            NPOIWrite.CellMerged(sheet, 1, 1, 1, 9);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader2);
            ICRACell.CellStyle = HeaderStyle;
            ICRArow = sheet.CreateRow(2);
            ICRArow.CreateCell(0);
            NPOIWrite.CellMerged(sheet, 2, 2, 1, 9);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue("");
            ICRACell.CellStyle = HeaderStyle;
            ICRACell.CellStyle.Alignment = HorizontalAlignment.Center;
            ICRArow = sheet.CreateRow(3);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.CellStyle.Alignment = HorizontalAlignment.Center;
            NPOIWrite.AutoFitColumn(sheet, 1);
            ICRACell.CellStyle = HeaderStyle;
            #endregion

            #region Report Name
            ICRArow = sheet.CreateRow(4);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrReportName);
            HeaderStyle.Alignment = HorizontalAlignment.Left;
            ICRACell.CellStyle = HeaderStyle;
            #endregion
            #region Cell Style For Even Row
            #region With DecimalFormat Return
            XSSFCellStyle retAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            retAllCellStyleEvenDecFrmt.SetFillForegroundColor(retcolorToFillEvenWtoutDec);
            retAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatEven = workbook.CreateDataFormat();
            retAllCellStyleEvenDecFrmt.DataFormat = retformatEven.GetFormat(retDecimalFormat);
            retAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            retAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;


            ////Number Format ////
            XSSFCellStyle retAllCellStyleEvenDecFrmtWnum = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleEvenDecFrmtWnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmtWnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmtWnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmtWnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillEvenWtoutDecWnum = new XSSFColor(new byte[] { 176, 196, 222 });
            retAllCellStyleEvenDecFrmtWnum.SetFillForegroundColor(retcolorToFillEvenWtoutDecWnum);
            retAllCellStyleEvenDecFrmtWnum.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatEvenWnum = workbook.CreateDataFormat();
            retAllCellStyleEvenDecFrmtWnum.DataFormat = retformatEvenWnum.GetFormat(retNumberDecimalFormat);
            retAllCellStyleEvenDecFrmtWnum.Alignment = HorizontalAlignment.Center;
            retAllCellStyleEvenDecFrmtWnum.VerticalAlignment = VerticalAlignment.Center;
            #endregion
            #region No Format
            XSSFCellStyle AllCellStyleEven = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleEven.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillEven = new XSSFColor(new byte[] { 176, 196, 222 });
            AllCellStyleEven.SetFillForegroundColor(colorToFillEven);
            AllCellStyleEven.FillPattern = FillPattern.SolidForeground;
            AllCellStyleEven.Alignment = HorizontalAlignment.Center;
            AllCellStyleEven.VerticalAlignment = VerticalAlignment.Center;
            #endregion
            #endregion
            #region Cell Style For Odd Row
            #region With Decimal Format Return
            XSSFCellStyle retAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor RETcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            retAllCellStyleOddDec.SetFillForegroundColor(RETcolorToFillOddDec);
            retAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat RETformatOddDec = workbook.CreateDataFormat();
            retAllCellStyleOddDec.DataFormat = RETformatOddDec.GetFormat(retDecimalFormat);
            retAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            retAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle retAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor RETcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            retAllCellStyleOddDecWnuf.SetFillForegroundColor(RETcolorToFillOddDecWnuf);
            retAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat RETformatOddDecWnuf = workbook.CreateDataFormat();
            retAllCellStyleOddDecWnuf.DataFormat = RETformatOddDecWnuf.GetFormat(retNumberDecimalFormat);
            retAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            retAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion
            #region No Format
            XSSFCellStyle AllCellStyleOdd = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleOdd.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillOdd = new XSSFColor(new byte[] { 255, 255, 255 });
            AllCellStyleOdd.SetFillForegroundColor(colorToFillOdd);
            AllCellStyleOdd.FillPattern = FillPattern.SolidForeground;
            AllCellStyleOdd.Alignment = HorizontalAlignment.Center;
            AllCellStyleOdd.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #endregion
            #region Cell Style For First Column Even Row
            XSSFCellStyle AllCellStyleFstColmEven = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleFstColmEven.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillFstClmnEven = new XSSFColor(new byte[] { 176, 196, 222 });
            AllCellStyleFstColmEven.SetFillForegroundColor(colorToFillFstClmnEven);
            AllCellStyleFstColmEven.FillPattern = FillPattern.SolidForeground;
            AllCellStyleFstColmEven.Alignment = HorizontalAlignment.Left;
            AllCellStyleFstColmEven.VerticalAlignment = VerticalAlignment.Center;
            #endregion
            #region Cell Style For First Column Odd Row
            XSSFCellStyle AllCellStyleFstColmOdd = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleFstColmOdd.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillFstClmnOdd = new XSSFColor(new byte[] { 255, 255, 255 });
            AllCellStyleFstColmOdd.SetFillForegroundColor(colorToFillFstClmnOdd);
            AllCellStyleFstColmOdd.FillPattern = FillPattern.SolidForeground;
            AllCellStyleFstColmOdd.Alignment = HorizontalAlignment.Left;
            AllCellStyleFstColmOdd.VerticalAlignment = VerticalAlignment.Center;
            #endregion
            #region Without Decimal Number Format Even Row
            XSSFCellStyle intAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            intAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            intAllCellStyleEvenDecFrmt.SetFillForegroundColor(intcolorToFillEvenWtoutDec);
            intAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat intformatEven = workbook.CreateDataFormat();
            intAllCellStyleEvenDecFrmt.DataFormat = intformatEven.GetFormat(intNumberWithoutDecimalFormat);
            intAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            intAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle intSimpleAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            intSimpleAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intSimplecolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            intSimpleAllCellStyleEvenDecFrmt.SetFillForegroundColor(intSimplecolorToFillEvenWtoutDec);
            intSimpleAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            intSimpleAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            intSimpleAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;
            #endregion
            #region Without Decimal Number Format Odd Row
            XSSFCellStyle intAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            intAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            intAllCellStyleOddDec.SetFillForegroundColor(intcolorToFillOddDec);
            intAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat intformatOddDec = workbook.CreateDataFormat();
            intAllCellStyleOddDec.DataFormat = intformatOddDec.GetFormat(intNumberWithoutDecimalFormat);
            intAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            intAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle intSimpleAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            intSimpleAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intSimplecolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            intSimpleAllCellStyleOddDec.SetFillForegroundColor(intSimplecolorToFillOddDec);
            intSimpleAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            intSimpleAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            intSimpleAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            //var celltxt = "Returns on investment of Rs. " + string.Format("{0,0:" + ubs.NumberFormat.Replace("0", "#") + "}", Amount) + " as on " + StrDateAsOn;
            //var celltxt = "Returns on investment of Rs. " + string.Format("{0,0:" + ubs.NumberFormat.Replace("0", "#") + "}", Amount) + " as on " + StrDateAsOn.Substring(14, 3) + " " + StrDateAsOn.Substring(11, 2) + ", " + StrDateAsOn.Substring(18);
            IRow Row;
            ICell Cell;
            Row = sheet.CreateRow(5);

            for (int i = 0; i < 10; i++)
            {
                Cell = Row.CreateCell(i);
                //if (i == 0)
                //    Cell.SetCellValue("Return TRI Index of all schemes");

                Cell.CellStyle = HeaderStyle;
            }
            //NPOIWrite.CellMerged(sheet, 5, 5, 0, 9);
            sheet.GetRow(5).HeightInPoints = 30;
            Row = sheet.CreateRow(6);
            for (int i = 0; i < 10; i++)
            {
                Cell = Row.CreateCell(i);
                if (i == 0)
                    Cell.SetCellValue("");

                Cell.CellStyle = HeaderStyle;
            }
            //NPOIWrite.CellMerged(sheet, 6, 6, 0, 9);
            sheet.GetRow(6).HeightInPoints = 30;

            XSSFCellStyle style = (XSSFCellStyle)workbook.CreateCellStyle();
            XSSFColor colorToFill = new XSSFColor(new byte[] { 68, 114, 196 });//{ 51, 204, 204 }//Color.Blue);
            style.SetFillForegroundColor(colorToFill);
            IFont font = workbook.CreateFont();
            font.Color = IndexedColors.White.Index;
            font.Boldweight = (short)FontBoldWeight.Bold;
            style.SetFont(font);
            style.FillPattern = FillPattern.SolidForeground;
            style.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            style.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            style.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            style.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;

            //int incr = 6;
            //bool isNumeric = false;
            var rowcount = 7;
            Row = sheet.CreateRow(rowcount++);
            sheet.GetRow(7).HeightInPoints = 30;
            var cellincr = 0;
            for (int i = 0; i < listMainTableHeader.Count(); i++)
            {
                if (i > 0)
                {
                    style.Alignment = HorizontalAlignment.Center;
                    style.VerticalAlignment = VerticalAlignment.Center;
                }
                else
                {
                    style.Alignment = HorizontalAlignment.Left;
                    style.VerticalAlignment = VerticalAlignment.Center;
                }
                int colspan = listMainTableHeader[i].Colspan;
                if (colspan > 1)
                {
                    for (int k = 0; k < colspan; k++)
                    {
                        Cell = Row.CreateCell(cellincr + k);
                        if (k == 0)
                            Cell.SetCellValue(listMainTableHeader[i].ColumnName);
                        Cell.CellStyle = style;
                    }
                    NPOIWrite.CellMerged(sheet, rowcount - 1, rowcount - 1, cellincr, cellincr + colspan - 1);
                    cellincr = cellincr + colspan;
                }
                else
                {
                    Cell = Row.CreateCell(cellincr);
                    NPOIWrite.CellMerged(sheet, rowcount - 1, rowcount, cellincr, cellincr);
                    Cell.SetCellValue(listMainTableHeader[i].ColumnName);
                    Cell.CellStyle = style;
                    if(i>0)
                    {
                        sheet.SetColumnWidth(cellincr, 6 * 2 * 256);
                    }
                    cellincr = cellincr + colspan;
                }
            }
            //Row = sheet.CreateRow(rowcount++);
            //Cell = Row.CreateCell(0);
            //for (int i = 0; i < listTableheader.Count(); i++)
            //{
            //    Cell = Row.CreateCell(i);
            //    Cell.CellStyle = style;
            //    if (i == 0 || i == listTableheader.Count() - 2 || i == listTableheader.Count() - 1)//instead of (i == 0 || i == listTableheader.Count() - 1)
            //        continue;
            //    Cell.SetCellValue(listTableheader[i].ColumnName);
            //}
            var incr = 0;
            XSSFCellStyle TriDisclaimerStyle = (XSSFCellStyle)workbook.CreateCellStyle();
            rowcount++;
            //var FundManagerNameListCount = 0; //run through the index of FundManagerNameList
            foreach (var item in listData)
            {
                var copy_k = 0;
                var IsEven = incr % 2 == 0;
                Row = sheet.CreateRow(rowcount++);
                //if (item.LstKeyValuePair == null)//done to add extra row after each scheme. For a blank row the LstKeyValuePair is null.
                //    continue;
                var DataCount = item.LstKeyValuePair.Count(); // counts number of data in each row
                for (int k = 0; k < item.LstKeyValuePair.Count(); k++)
                {
                    copy_k = k;// copy value of k to store the last cell index where value is added.
                    Cell = Row.CreateCell(k);
                    Cell.CellStyle = IsEven ? AllCellStyleEven : AllCellStyleOdd;
                    //if (k == 0)
                    //{
                    Cell.SetCellValue(item.LstKeyValuePair[k].Value);
                    Cell.CellStyle = IsEven ? AllCellStyleFstColmEven : AllCellStyleFstColmOdd;
                    //}

                    //else if (k > 0 && TRIIndexDisclaimer != null && k <= TRIIndexDisclaimer.Colspan)
                    //{
                    //    Cell.SetCellValue(item.LstKeyValuePair[k].Value);
                    //    Cell.CellStyle = IsEven ? AllCellStyleFstColmEven : AllCellStyleFstColmOdd;
                    //    TriDisclaimerStyle.CloneStyleFrom(Cell.CellStyle);
                    //    TriDisclaimerStyle.Alignment = HorizontalAlignment.Left;
                    //    TriDisclaimerStyle.VerticalAlignment = VerticalAlignment.Top;
                    //    TriDisclaimerStyle.WrapText = true;
                    //    Cell.CellStyle = TriDisclaimerStyle;
                    //}
                }
                incr++;
            }
            incr = 0;
            rowcount++;
            //Row = sheet.CreateRow(rowcount++); //added
            //var TempCell = Row.CreateCell(0); //added
            //TempCell.CellStyle = HeaderStyle; //added
            //TempCell.SetCellValue("Return Type"); //added
            //Row = sheet.CreateRow(rowcount++);
            //TempCell = Row.CreateCell(0);
            //TempCell.SetCellValue("* 7 Days,15 Days,30 Days,1 Month,6 Months= Simple Annualized.");
            //TempCell.CellStyle = HeaderStyle;
            //Row = sheet.CreateRow(rowcount++);
            //TempCell = Row.CreateCell(0);
            //TempCell.CellStyle = HeaderStyle; //added
            //TempCell.SetCellValue("* 1, 3 and 5 Years = CAGR");
            //Row = sheet.CreateRow(rowcount++);
            //TempCell = Row.CreateCell(0);
            //TempCell.CellStyle = HeaderStyle;
            //TempCell.SetCellValue("* Since Inception (for >= 1 Year)= CAGR");
            //Row = sheet.CreateRow(rowcount++);
            //TempCell = Row.CreateCell(0);
            //TempCell.CellStyle = HeaderStyle;
            //TempCell.SetCellValue("NAV Type= Reinvest, Investor Type= Individual");
            //Row = sheet.CreateRow(rowcount++);
            //TempCell = Row.CreateCell(0);
            //TempCell.CellStyle = HeaderStyle;
            //TempCell.SetCellValue("NAV Picking Algorithm for Both Dates= -1,-2,-3,-4,-5,-6,-7");

            //for (int i = 0; i < listTableheader.Count; i++)
            sheet.AutoSizeColumn(0);
            if (sheet.GetColumnWidth(0) < 11072)
                sheet.SetColumnWidth(0, 11072);
            if(sheet.GetColumnWidth(2)<26*256)
            {
                sheet.SetColumnWidth(2, 6656);
            }
            #region Logo
            try
            {
                if (!string.IsNullOrEmpty(LogoPath))
                {
                    XSSFDrawing patriarch = (XSSFDrawing)sheet.CreateDrawingPatriarch();
                    XSSFClientAnchor anchor;
                    anchor = new XSSFClientAnchor(0, 0, 0, 255, 0, 0, 0, 3);
                    anchor.AnchorType = AnchorType.DontMoveAndResize;
                    XSSFPicture picture = (XSSFPicture)patriarch.CreatePicture(anchor, LoadImage(LogoPath, workbook, PictureType.PNG));
                    double x1 = .25;
                    double y1 = .75;
                    picture.Resize(x1, y1);
                    picture.LineStyle = LineStyle.None;
                }
            }
            catch (Exception ex)
            {
            }

            #endregion
            #region Source, Date As On and Report Generated On, Setting Set Disc
            rowcount = rowcount + 3;
            //var TempCell = Row.CreateCell(0);
            //TempCell.SetCellValue(ReturnSettingSetText);
            //IFont boldfont = WorkBook.CreateFont();
            //XSSFCellStyle BoldStyle = (XSSFCellStyle)WorkBook.CreateCellStyle();
            //boldfont.IsBold = true;
            //BoldStyle.SetFont(boldfont);
            //TempCell.CellStyle = BoldStyle;

            //IFont boldfont = WorkBook.CreateFont();
            //boldfont.IsBold = true;
            ICRArow = sheet.CreateRow(rowcount++);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrSettingSet);

            ICRArow = sheet.CreateRow(rowcount++);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrSource);

            ICRArow = sheet.CreateRow(rowcount++);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrDateAsOn);

            ICRArow = sheet.CreateRow(rowcount++);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrReportGeneratedOn);
            #endregion

            #region Sheet Two Logo
            try
            {
                if (!string.IsNullOrEmpty(LogoPath))
                {
                    XSSFDrawing patriarch = (XSSFDrawing)sheetTwo.CreateDrawingPatriarch();
                    XSSFClientAnchor anchor;
                    anchor = new XSSFClientAnchor(0, 0, 0, 255, 0, 0, 0, 3);
                    anchor.AnchorType = AnchorType.DontMoveAndResize;
                    XSSFPicture picture = (XSSFPicture)patriarch.CreatePicture(anchor, LoadImage(LogoPath, workbook, PictureType.PNG));
                    double x1 = 1.10;
                    double y1 = 1.10;
                    picture.Resize(x1, y1);
                    picture.LineStyle = LineStyle.None;
                }
            }
            catch (Exception ex)
            {
            }
            #endregion

            #region Disclaimer Sheet
            Row = sheetTwo.CreateRow(1);
            var cellSheetTwo = Row.CreateCell(7);
            //cellSheetTwo.SetCellValue(StrHeader1);
            cellSheetTwo.SetCellValue("Disclaimer");
            cellSheetTwo.CellStyle = HeaderStyle;

            Row = sheetTwo.CreateRow(4);
            for (int i = 0; i < 17; i++)
            {
                Cell = Row.CreateCell(i);

                XSSFCellStyle declationstyle = (XSSFCellStyle)workbook.CreateCellStyle();

                declationstyle.Alignment = HorizontalAlignment.Center;
                declationstyle.VerticalAlignment = VerticalAlignment.Top;
                declationstyle.WrapText = true;
                IFont declarationfnt = (XSSFFont)workbook.CreateFont();
                //declarationfnt.Boldweight = (short)FontBoldWeight.Bold;
                declarationfnt.FontName = "Calibri";
                declarationfnt.FontHeightInPoints = (short)11;
                declationstyle.SetFont(declarationfnt);
                Cell.SetCellValue(!string.IsNullOrEmpty(Footer) ? Footer : "All information contained herein is obtained by ICRA Analytics Limited from sources believed by it to be accurate and reliable. Because of the possibility of human or mechanical error as well as other factors, however, all information contained herein is provided 'AS IS' without warranty of any kind. ICRA Analytics adopts all necessary measures so that the information it uses is of sufficient quality and from sources ICRA Analytics considers to be reliable including, when appropriate, independent third-party sources. However, ICRA Analytics is not an auditor and cannot in every instance independently verify or validate information received in preparing this document." +
                    "All information contained herein must be construed solely as statements of opinion, and  ICRA Analytics Limited or its affiliates or group companies and its respective and any of its officers, directors, personnel and employees, disclaim liability to any loss, damage of any nature, including but not limited to direct, indirect, punitive, special, exemplary, consequential, as also any loss of profit in any way arising from the use of this document or its contents in any manner or for any contingency within or beyond the control of, ICRA Analytics or any of its directors, officers, employees, agents, representatives, licensors or suppliers, arising from or in connection with the information contained herein or the use of or inability to use any such information.Opinions expressed in the document are not the opinions of our holding company, ICRA Limited(ICRA), and should not be construed as any indication of credit rating or grading of ICRA for any instruments that have been issued or are to be issued by any entity.The recipient alone shall be fully responsible and / or are liable for any decision taken on the basis of this document and / or the information contained herein.");
                Cell.CellStyle = declationstyle;

            }
            NPOIWrite.CellMerged(sheetTwo, 4, 4, 0, 17);
            sheetTwo.GetRow(4).HeightInPoints = 200;
            #endregion

            #region Disclaimer Sheet HyperLink
            XSSFCellStyle HyperLinkStyle = (XSSFCellStyle)workbook.CreateCellStyle();
            IFont HyperLinkFont = workbook.CreateFont();
            HyperLinkFont.Color = IndexedColors.Orange.Index;
            HyperLinkFont.Underline = FontUnderlineType.Single;
            HyperLinkStyle.SetFont(HyperLinkFont);

            Row = sheetTwo.CreateRow(5);
            Cell = Row.CreateCell(0);
            Cell.SetCellValue("Click here for third-party disclaimers");
            XSSFCreationHelper createHelper = (XSSFCreationHelper)workbook.GetCreationHelper();
            XSSFHyperlink link = (XSSFHyperlink)createHelper.CreateHyperlink(HyperlinkType.Url);
            link.Address = "https://www.icraanalytics.com/home/thirdpartydisclaimers";
            Cell.Hyperlink = link;
            Cell.CellStyle = HyperLinkStyle;
            #endregion

            sheet.ActiveCell = new CellAddress(0, 1);
            var stream = new MemoryStream();
            workbook.Write(stream);

            return workbook;
        }

        public static NPOI.XSSF.UserModel.XSSFWorkbook ExportToExcelValueofInvestment(UserBasicSettings ubs, List<int> ParameterSetIds, Dictionary<int, string> ParameterSetNames, Dictionary<int, List<ExportEntity>> listData, Dictionary<int, List<TableHeaderEntity>> listMainTableHeader, Dictionary<int, List<TableHeaderEntity>> listTableheader, string LogoPath = "", string ReportName = "", int Amount = 0)
        {

            #region Variable
            string Header = ubs.Reporting_Format_Header;
            string Footer = ubs.Reporting_Format_Footer;
            string BlankData = ubs.BlankData.ToUpper() == "BLANK" ? "" : ubs.BlankData;

            string StrHeader1 = "ICRA Analytics Limited";
            string StrHeader2 = "3rd Floor, Electric Mansion,Appasaheb Marathe Marg, Prabhadevi,Mumbai - 400 025 Maharashtra, India";
            string StrHeader3 = Header;
            string StrReportName = ReportName;

            string StrSource = "Source: " + (string.IsNullOrEmpty(UserStatisticsEntity.SourceName) ? "MFI 360" : UserStatisticsEntity.SourceName);
            //StrDateAsOn = "Data as on " + StrDateAsOn;
            string StrReportGeneratedOn = "Report Generated On " + DateTime.Now.ToString("dd-MMM-yyyy  HH:mm:ss");

            #region number and decimal variable for AUM
            var aumPaddding = new string('0', (int)ubs.AUMDecimalFormat);
            var aumDecimalFormat = "0." + aumPaddding;
            string aumNUMBERFORMAT = ubs.NumberFormat;
            var aumNumberFormat = aumNUMBERFORMAT.Replace("0", "#");
            string aumNumberDecimalFormat = aumNumberFormat + "0." + new String('0', (int)ubs.AUMDecimalFormat);
            #endregion

            #region number and decimal variable for return
            var retPaddding = new string('0', (int)ubs.ReturnDecimalFormat);
            var retDecimalFormat = "0." + retPaddding;
            string retNUMBERFORMAT = ubs.NumberFormat;
            var retNumberFormat = retNUMBERFORMAT.Replace("0", "#");
            string retNumberDecimalFormat = retNumberFormat + "0." + new String('0', (int)ubs.ReturnDecimalFormat);
            #endregion

            #region number and decimal variable for NAV
            var navPaddding = new string('0', (int)ubs.NavDecimalFormat);
            var navDecimalFormat = "0." + navPaddding;
            string navNUMBERFORMAT = ubs.NumberFormat;
            var navNumberFormat = navNUMBERFORMAT.Replace("0", "#");
            string navNumberDecimalFormat = navNumberFormat + "0." + new String('0', (int)ubs.NavDecimalFormat);
            #endregion

            #region number and decimal variable for Other
            var othPaddding = new string('0', (int)ubs.OtherDecimal);
            var othDecimalFormat = "0." + othPaddding;
            string othNUMBERFORMAT = ubs.NumberFormat;
            var othNumberFormat = othNUMBERFORMAT.Replace("0", "#");
            string othNumberDecimalFormat = othNumberFormat + "0." + new String('0', (int)ubs.OtherDecimal);
            #endregion

            #region number and decimal variable for Ratio
            var ratioPaddding = new string('0', (int)ubs.RatioDecimalFormat);
            var ratioDecimalFormat = "0." + ratioPaddding;
            string ratioNUMBERFORMAT = ubs.NumberFormat;
            var ratioNumberFormat = ratioNUMBERFORMAT.Replace("0", "#");
            string ratioNumberDecimalFormat = ratioNumberFormat + "0." + new String('0', (int)ubs.RatioDecimalFormat);
            #endregion

            #region int Format with out Decimal
            var intNumberWithoutDecimalFormat = ubs.NumberFormat.Replace("0", "#");
            #endregion

            #endregion

            NPOI.XSSF.UserModel.XSSFWorkbook workbook = new NPOI.XSSF.UserModel.XSSFWorkbook();

            #region Set Font For Header1,Header2 and Header3
            XSSFCellStyle HeaderStyle = (XSSFCellStyle)workbook.CreateCellStyle();
            IFont Headerfont = workbook.CreateFont();
            Headerfont.Boldweight = (short)FontBoldWeight.Bold;
            HeaderStyle.SetFont(Headerfont);
            #endregion

            #region Cell Style For Even Row

            #region With DecimalFormat Return
            XSSFCellStyle retAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            retAllCellStyleEvenDecFrmt.SetFillForegroundColor(retcolorToFillEvenWtoutDec);
            retAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatEven = workbook.CreateDataFormat();
            retAllCellStyleEvenDecFrmt.DataFormat = retformatEven.GetFormat(retDecimalFormat);
            retAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            retAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;


            ////Number Format ////
            XSSFCellStyle retAllCellStyleEvenDecFrmtWnum = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleEvenDecFrmtWnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmtWnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmtWnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmtWnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillEvenWtoutDecWnum = new XSSFColor(new byte[] { 176, 196, 222 });
            retAllCellStyleEvenDecFrmtWnum.SetFillForegroundColor(retcolorToFillEvenWtoutDecWnum);
            retAllCellStyleEvenDecFrmtWnum.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatEvenWnum = workbook.CreateDataFormat();
            retAllCellStyleEvenDecFrmtWnum.DataFormat = retformatEvenWnum.GetFormat(retNumberDecimalFormat);
            retAllCellStyleEvenDecFrmtWnum.Alignment = HorizontalAlignment.Center;
            retAllCellStyleEvenDecFrmtWnum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region No Format
            XSSFCellStyle AllCellStyleEven = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleEven.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillEven = new XSSFColor(new byte[] { 176, 196, 222 });
            AllCellStyleEven.SetFillForegroundColor(colorToFillEven);
            AllCellStyleEven.FillPattern = FillPattern.SolidForeground;
            AllCellStyleEven.Alignment = HorizontalAlignment.Center;
            AllCellStyleEven.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #endregion

            #region Cell Style For Odd Row

            #region With Decimal Format Return
            XSSFCellStyle retAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor RETcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            retAllCellStyleOddDec.SetFillForegroundColor(RETcolorToFillOddDec);
            retAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat RETformatOddDec = workbook.CreateDataFormat();
            retAllCellStyleOddDec.DataFormat = RETformatOddDec.GetFormat(retDecimalFormat);
            retAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            retAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle retAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor RETcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            retAllCellStyleOddDecWnuf.SetFillForegroundColor(RETcolorToFillOddDecWnuf);
            retAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat RETformatOddDecWnuf = workbook.CreateDataFormat();
            retAllCellStyleOddDecWnuf.DataFormat = RETformatOddDecWnuf.GetFormat(retNumberDecimalFormat);
            retAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            retAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region No Format
            XSSFCellStyle AllCellStyleOdd = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleOdd.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillOdd = new XSSFColor(new byte[] { 255, 255, 255 });
            AllCellStyleOdd.SetFillForegroundColor(colorToFillOdd);
            AllCellStyleOdd.FillPattern = FillPattern.SolidForeground;
            AllCellStyleOdd.Alignment = HorizontalAlignment.Center;
            AllCellStyleOdd.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #endregion

            #region Cell Style For First Column Even Row
            XSSFCellStyle AllCellStyleFstColmEven = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleFstColmEven.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillFstClmnEven = new XSSFColor(new byte[] { 176, 196, 222 });
            AllCellStyleFstColmEven.SetFillForegroundColor(colorToFillFstClmnEven);
            AllCellStyleFstColmEven.FillPattern = FillPattern.SolidForeground;
            AllCellStyleFstColmEven.Alignment = HorizontalAlignment.Left;
            AllCellStyleFstColmEven.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region Cell Style For First Column Odd Row
            XSSFCellStyle AllCellStyleFstColmOdd = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleFstColmOdd.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillFstClmnOdd = new XSSFColor(new byte[] { 255, 255, 255 });
            AllCellStyleFstColmOdd.SetFillForegroundColor(colorToFillFstClmnOdd);
            AllCellStyleFstColmOdd.FillPattern = FillPattern.SolidForeground;
            AllCellStyleFstColmOdd.Alignment = HorizontalAlignment.Left;
            AllCellStyleFstColmOdd.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region Without Decimal Number Format Even Row
            XSSFCellStyle intAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            intAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            intAllCellStyleEvenDecFrmt.SetFillForegroundColor(intcolorToFillEvenWtoutDec);
            intAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat intformatEven = workbook.CreateDataFormat();
            intAllCellStyleEvenDecFrmt.DataFormat = intformatEven.GetFormat(intNumberWithoutDecimalFormat);
            intAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            intAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle intSimpleAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            intSimpleAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intSimplecolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            intSimpleAllCellStyleEvenDecFrmt.SetFillForegroundColor(intSimplecolorToFillEvenWtoutDec);
            intSimpleAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            intSimpleAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            intSimpleAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region Without Decimal Number Format Odd Row
            XSSFCellStyle intAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            intAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            intAllCellStyleOddDec.SetFillForegroundColor(intcolorToFillOddDec);
            intAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat intformatOddDec = workbook.CreateDataFormat();
            intAllCellStyleOddDec.DataFormat = intformatOddDec.GetFormat(intNumberWithoutDecimalFormat);
            intAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            intAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle intSimpleAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            intSimpleAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intSimplecolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            intSimpleAllCellStyleOddDec.SetFillForegroundColor(intSimplecolorToFillOddDec);
            intSimpleAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            intSimpleAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            intSimpleAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            foreach (var ParamId in ParameterSetIds)
            {
                ISheet sheet = workbook.CreateSheet(ParameterSetNames[ParamId]);

                var TRIIndexDisclaimer = listMainTableHeader[ParamId].Where(x => x.ColumnName.Contains(StrTRIIndexDisclaimer)).FirstOrDefault();
                var TriIndexDisclaimerColCount = TRIIndexDisclaimer != null ? TRIIndexDisclaimer.Colspan : 0;

                #region Excel Sheet Gridlines Delete
                sheet.DisplayGridlines = false;
                #endregion

                #region Header Freeze
                sheet.CreateFreezePane(1, 9);
                #endregion

                #region Set Cell Value For Header1, Header2 and Header3
                var ICRArow = sheet.CreateRow(0);
                ICRArow.CreateCell(0);
                NPOIWrite.CellMerged(sheet, 0, 0, 1, 11);
                var ICRACell = ICRArow.CreateCell(1);
                ICRACell.SetCellValue(StrHeader1);
                ICRACell.CellStyle = HeaderStyle;
                ICRArow = sheet.CreateRow(1);
                ICRArow.CreateCell(0);
                NPOIWrite.CellMerged(sheet, 1, 1, 1, 11);
                ICRACell = ICRArow.CreateCell(1);
                ICRACell.SetCellValue(StrHeader2);
                ICRACell.CellStyle = HeaderStyle;
                ICRArow = sheet.CreateRow(2);
                ICRArow.CreateCell(0);
                NPOIWrite.CellMerged(sheet, 2, 2, 1, 11);
                ICRACell = ICRArow.CreateCell(1);
                ICRACell.SetCellValue("");
                ICRACell.CellStyle = HeaderStyle;
                ICRACell.CellStyle.Alignment = HorizontalAlignment.Center;
                ICRArow = sheet.CreateRow(3);
                ICRArow.CreateCell(0);
                ICRACell = ICRArow.CreateCell(1);
                ICRACell.CellStyle.Alignment = HorizontalAlignment.Center;
                NPOIWrite.AutoFitColumn(sheet, 1);
                ICRACell.CellStyle = HeaderStyle;
                #endregion

                #region Report Name
                ICRArow = sheet.CreateRow(4);
                ICRArow.CreateCell(0);
                ICRACell = ICRArow.CreateCell(0);
                ICRACell.SetCellValue(StrReportName);
                HeaderStyle.Alignment = HorizontalAlignment.Left;
                ICRACell.CellStyle = HeaderStyle;
                #endregion

                #region Working Area

                //var celltxt = "Returns on investment of Rs. " + string.Format("{0,0:" + ubs.NumberFormat.Replace("0", "#") + "}", Amount) + " as on " + DateTime.Now.ToString("dd MMM yyyy");
                var celltxt = "Report as on " + DateTime.Now.ToString("dd MMM yyyy");
                IRow Row;
                ICell Cell;
                Row = sheet.CreateRow(5);

                for (int i = 0; i < 10; i++)
                {
                    Cell = Row.CreateCell(i);
                    //Omitted as requested by UAT
                    //if (i == 0)
                    //    Cell.SetCellValue("Comparative Performance Of All Schemes");

                    Cell.CellStyle = HeaderStyle;
                }
                //NPOIWrite.CellMerged(sheet, 5, 5, 0, 9);
                sheet.GetRow(5).HeightInPoints = 30;
                Row = sheet.CreateRow(6);
                for (int i = 0; i < 10; i++)
                {
                    Cell = Row.CreateCell(i);
                    if (i == 0)
                        Cell.SetCellValue(celltxt);

                    Cell.CellStyle = HeaderStyle;
                }
                //NPOIWrite.CellMerged(sheet, 6, 6, 0, 9);
                sheet.GetRow(6).HeightInPoints = 30;

                XSSFCellStyle style = (XSSFCellStyle)workbook.CreateCellStyle();
                XSSFColor colorToFill = new XSSFColor(new byte[] { 68, 114, 196 });//{ 51, 204, 204 }//Color.Blue);
                style.SetFillForegroundColor(colorToFill);
                IFont font = workbook.CreateFont();
                font.Color = IndexedColors.White.Index;
                font.Boldweight = (short)FontBoldWeight.Bold;
                style.SetFont(font);
                style.FillPattern = FillPattern.SolidForeground;
                style.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
                style.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
                style.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
                style.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;

                //int incr = 6;
                //bool isNumeric = false;
                var rowcount = 7;
                Row = sheet.CreateRow(rowcount++);
                sheet.GetRow(7).HeightInPoints = 30;
                var cellincr = 0;

                for (int i = 0; i < listMainTableHeader[ParamId].Count(); i++)
                {
                    if (i > 0)
                    {
                        style.Alignment = HorizontalAlignment.Center;
                        style.VerticalAlignment = VerticalAlignment.Center;
                    }
                    else
                    {
                        style.Alignment = HorizontalAlignment.Left;
                        style.VerticalAlignment = VerticalAlignment.Center;
                    }
                    int colspan = listMainTableHeader[ParamId][i].Colspan;
                    if (colspan > 1)
                    {
                        for (int k = 0; k < colspan; k++)
                        {
                            Cell = Row.CreateCell(cellincr + k);
                            if (k == 0)
                                Cell.SetCellValue(listMainTableHeader[ParamId][i].ColumnName);
                            Cell.CellStyle = style;
                            Cell.CellStyle.WrapText = true;
                        }
                        NPOIWrite.CellMerged(sheet, rowcount - 1, rowcount - 1, cellincr, cellincr + colspan - 1);
                        cellincr = cellincr + colspan;
                    }
                    else
                    {
                        Cell = Row.CreateCell(cellincr);
                        Cell.SetCellValue(listMainTableHeader[ParamId][i].ColumnName);
                        Cell.CellStyle = style;
                        Cell.CellStyle.WrapText = true;
                        cellincr = cellincr + colspan;
                    }
                }
                Row = sheet.CreateRow(rowcount++);
                Cell = Row.CreateCell(0);
                for (int i = 0; i < listTableheader[ParamId].Count(); i++)
                {
                    Cell = Row.CreateCell(i);
                    Cell.CellStyle = style;
                    if (i == 0)//instead of (i == 0 || i == listTableheader.Count() - 1)
                        continue;
                    Cell.SetCellValue(listTableheader[ParamId][i].ColumnName.Replace("Rs.", "₹"));
                }
                var incr = 0;
                XSSFCellStyle TriDisclaimerStyle = (XSSFCellStyle)workbook.CreateCellStyle();

                foreach (var item in listData[ParamId])
                {
                    var copy_k = 0;
                    var IsEven = incr % 2 == 0;
                    Row = sheet.CreateRow(rowcount++);
                    var DataCount = item.LstKeyValuePair.Count(); // counts number of data in each row
                    for (int k = 0; k < item.LstKeyValuePair.Count(); k++)
                    {
                        copy_k = k;// copy value of k to store the last cell index where value is added.
                        Cell = Row.CreateCell(k);
                        Cell.CellStyle = IsEven ? AllCellStyleEven : AllCellStyleOdd;
                        if (k == 0)
                        {
                            Cell.SetCellValue(item.LstKeyValuePair[k].Value);
                            Cell.CellStyle = IsEven ? AllCellStyleFstColmEven : AllCellStyleFstColmOdd;
                            Cell.CellStyle.WrapText = true;
                        }

                        else if (k > 0 && TRIIndexDisclaimer != null && k <= TRIIndexDisclaimer.Colspan)
                        {
                            Cell.SetCellValue(item.LstKeyValuePair[k].Value);
                            Cell.CellStyle = IsEven ? AllCellStyleFstColmEven : AllCellStyleFstColmOdd;
                            TriDisclaimerStyle.CloneStyleFrom(Cell.CellStyle);
                            TriDisclaimerStyle.Alignment = HorizontalAlignment.Left;
                            TriDisclaimerStyle.VerticalAlignment = VerticalAlignment.Top;
                            TriDisclaimerStyle.WrapText = true;
                            Cell.CellStyle = TriDisclaimerStyle;
                        }

                        else if (k == (TriIndexDisclaimerColCount != 1 ? (DataCount - 1) + TriIndexDisclaimerColCount : (DataCount - 2) + TriIndexDisclaimerColCount)) // k is at the last index
                        {
                            Cell.SetCellValue(item.LstKeyValuePair[k].Value);
                        }
                        else if (k == (TriIndexDisclaimerColCount == 1 ? (k - 1) + TriIndexDisclaimerColCount : k + TriIndexDisclaimerColCount))
                        {
                            double result;
                            var output = double.TryParse(item.LstKeyValuePair[k].Value, out result);
                            if (!output)
                                Cell.SetCellValue(item.LstKeyValuePair[k].Value);
                            else
                            {
                                if (TriIndexDisclaimerColCount != 1)
                                {
                                    if (k % 2 == 0)
                                    {
                                        Cell.SetCellValue(Convert.ToDouble(item.LstKeyValuePair[k].Value));
                                        Cell.CellStyle = IsEven ? retAllCellStyleEvenDecFrmt : retAllCellStyleOddDec;
                                    }
                                    else
                                    {
                                        Cell.SetCellValue(result);
                                        Cell.CellStyle = IsEven ? intAllCellStyleEvenDecFrmt : intAllCellStyleOddDec;
                                    }
                                }
                                else
                                {
                                    if (k % 2 == 0)
                                    {
                                        Cell.SetCellValue(Convert.ToDouble(item.LstKeyValuePair[k].Value));
                                        Cell.CellStyle = IsEven ? intAllCellStyleEvenDecFrmt : intAllCellStyleOddDec;
                                    }
                                    else
                                    {
                                        Cell.SetCellValue(result);
                                        Cell.CellStyle = IsEven ? retAllCellStyleEvenDecFrmt : retAllCellStyleOddDec;
                                    }
                                }
                            }

                        }
                    }
                    incr++;
                }
                incr = 0;
                rowcount++;

                for (int i = 0; i < listTableheader.Count; i++)
                    sheet.AutoSizeColumn(i);
                if (sheet.GetColumnWidth(0) < 11072)
                    sheet.SetColumnWidth(0, 11072);


                #endregion

                #region Logo
                try
                {
                    if (!string.IsNullOrEmpty(LogoPath))
                    {
                        XSSFDrawing patriarch = (XSSFDrawing)sheet.CreateDrawingPatriarch();
                        XSSFClientAnchor anchor;
                        anchor = new XSSFClientAnchor(0, 0, 0, 255, 0, 0, 0, 3);
                        anchor.AnchorType = AnchorType.DontMoveAndResize;
                        XSSFPicture picture = (XSSFPicture)patriarch.CreatePicture(anchor, LoadImage(LogoPath, workbook, PictureType.PNG));
                        double x1 = .25;
                        double y1 = .75;
                        picture.Resize(x1, y1);
                        picture.LineStyle = LineStyle.None;
                    }
                }
                catch (Exception ex)
                {
                }

                #endregion

                #region Source, Date As On and Report Generated On
                rowcount = rowcount + 3;
                ICRArow = sheet.CreateRow(rowcount++);
                ICRArow.CreateCell(0);
                ICRACell = ICRArow.CreateCell(0);
                ICRACell.SetCellValue(StrSource);

                ICRArow = sheet.CreateRow(rowcount++);
                ICRArow.CreateCell(0);
                ICRACell = ICRArow.CreateCell(0);
                ICRACell.SetCellValue(/*StrDateAsOn*/"");

                ICRArow = sheet.CreateRow(rowcount++);
                ICRArow.CreateCell(0);
                ICRACell = ICRArow.CreateCell(0);
                ICRACell.SetCellValue(StrReportGeneratedOn);
                #endregion

                //Add
                var HeaderLength = listTableheader.Count();
                NPOIWrite.CellMerged(sheet, 7, 8, 0, 0);
                NPOIWrite.CellMerged(sheet, 7, 8, HeaderLength - 1, HeaderLength - 1);
                NPOIWrite.CellMerged(sheet, 7, 8, HeaderLength, HeaderLength);

                sheet.ActiveCell = new CellAddress(0, 1);

            }

            ISheet sheetTwo = workbook.CreateSheet("Disclaimer");

            #region Excel Sheet Gridlines Delete
            sheetTwo.DisplayGridlines = false;
            #endregion

            #region Header Freeze
            sheetTwo.CreateFreezePane(1, 6);
            #endregion

            #region Sheet Two Logo
            try
            {
                if (!string.IsNullOrEmpty(LogoPath))
                {
                    XSSFDrawing patriarch = (XSSFDrawing)sheetTwo.CreateDrawingPatriarch();
                    XSSFClientAnchor anchor;
                    anchor = new XSSFClientAnchor(0, 0, 0, 255, 0, 0, 0, 3);
                    anchor.AnchorType = AnchorType.DontMoveAndResize;
                    XSSFPicture picture = (XSSFPicture)patriarch.CreatePicture(anchor, LoadImage(LogoPath, workbook, PictureType.PNG));
                    double x1 = 1.10;
                    double y1 = 1.10;
                    picture.Resize(x1, y1);
                    picture.LineStyle = LineStyle.None;
                }
            }
            catch (Exception ex)
            {
            }
            #endregion

            #region Disclaimer Sheet
            IRow DisclaimerRow;
            ICell DisclaimerCell;
            DisclaimerRow = sheetTwo.CreateRow(1);
            var cellSheetTwo = DisclaimerRow.CreateCell(7);
            //cellSheetTwo.SetCellValue(StrHeader1);
            cellSheetTwo.SetCellValue("Disclaimer");
            cellSheetTwo.CellStyle = HeaderStyle;

            DisclaimerRow = sheetTwo.CreateRow(4);
            for (int i = 0; i < 17; i++)
            {
                DisclaimerCell = DisclaimerRow.CreateCell(i);

                XSSFCellStyle declationstyle = (XSSFCellStyle)workbook.CreateCellStyle();

                declationstyle.Alignment = HorizontalAlignment.Center;
                declationstyle.VerticalAlignment = VerticalAlignment.Top;
                declationstyle.WrapText = true;
                IFont declarationfnt = (XSSFFont)workbook.CreateFont();
                //declarationfnt.Boldweight = (short)FontBoldWeight.Bold;
                declarationfnt.FontName = "Calibri";
                declarationfnt.FontHeightInPoints = (short)11;
                declationstyle.SetFont(declarationfnt);
                DisclaimerCell.SetCellValue(!string.IsNullOrEmpty(Footer) ? Footer : "All information contained herein is obtained by ICRA Analytics Limited from sources believed by it to be accurate and reliable. Because of the possibility of human or mechanical error as well as other factors, however, all information contained herein is provided 'AS IS' without warranty of any kind. ICRA Analytics adopts all necessary measures so that the information it uses is of sufficient quality and from sources ICRA Analytics considers to be reliable including, when appropriate, independent third-party sources. However, ICRA Analytics is not an auditor and cannot in every instance independently verify or validate information received in preparing this document." +
                    "All information contained herein must be construed solely as statements of opinion, and  ICRA Analytics Limited or its affiliates or group companies and its respective and any of its officers, directors, personnel and employees, disclaim liability to any loss, damage of any nature, including but not limited to direct, indirect, punitive, special, exemplary, consequential, as also any loss of profit in any way arising from the use of this document or its contents in any manner or for any contingency within or beyond the control of, ICRA Analytics or any of its directors, officers, employees, agents, representatives, licensors or suppliers, arising from or in connection with the information contained herein or the use of or inability to use any such information.Opinions expressed in the document are not the opinions of our holding company, ICRA Limited(ICRA), and should not be construed as any indication of credit rating or grading of ICRA for any instruments that have been issued or are to be issued by any entity.The recipient alone shall be fully responsible and / or are liable for any decision taken on the basis of this document and / or the information contained herein.");
                DisclaimerCell.CellStyle = declationstyle;

            }
            NPOIWrite.CellMerged(sheetTwo, 4, 4, 0, 17);
            sheetTwo.GetRow(4).HeightInPoints = 200;
            #endregion

            #region Disclaimer Sheet HyperLink
            XSSFCellStyle HyperLinkStyle = (XSSFCellStyle)workbook.CreateCellStyle();
            IFont HyperLinkFont = workbook.CreateFont();
            HyperLinkFont.Color = IndexedColors.Orange.Index;
            HyperLinkFont.Underline = FontUnderlineType.Single;
            HyperLinkStyle.SetFont(HyperLinkFont);

            DisclaimerRow = sheetTwo.CreateRow(5);
            DisclaimerCell = DisclaimerRow.CreateCell(0);
            DisclaimerCell.SetCellValue("Click here for third-party disclaimers");
            XSSFCreationHelper createHelper = (XSSFCreationHelper)workbook.GetCreationHelper();
            XSSFHyperlink link = (XSSFHyperlink)createHelper.CreateHyperlink(HyperlinkType.Url);
            link.Address = "https://www.icraanalytics.com/home/thirdpartydisclaimers";
            DisclaimerCell.Hyperlink = link;
            DisclaimerCell.CellStyle = HyperLinkStyle;
            #endregion

            var stream = new MemoryStream();
            workbook.Write(stream);

            return workbook;
        }

        public static NPOI.XSSF.UserModel.XSSFWorkbook ExportToExcelAdvancePortStressTesting(UserBasicSettings ubs, List<TableHeaderEntity> listTableHeader, List<ExportEntity> listData, List<DateTime> PortDate, string LogoPath = "", string ReportName = "", string StrDateAsOn = "", string LiquidityAt="")
        {

            #region Variable
            string Header = ubs.Reporting_Format_Header;
            string Footer = ubs.Reporting_Format_Footer;
            string BlankData = ubs.BlankData == null ? "BLANK" : ubs.BlankData.ToUpper() == "BLANK" ? "" : ubs.BlankData;

            string StrHeader1 = "ICRA Analytics Limited";
            string StrHeader2 = "3rd Floor, Electric Mansion,Appasaheb Marathe Marg, Prabhadevi,Mumbai - 400 025 Maharashtra, India";
            string StrHeader3 = Header; //"Mumbai, Maharashtra 400093, IN";
            string StrReportName = ReportName;
            string StrSource = "Source: " + (string.IsNullOrEmpty(UserStatisticsEntity.SourceName) ? "MFI 360" : UserStatisticsEntity.SourceName);
            StrDateAsOn = "Data as on " + StrDateAsOn;
            string StrReportGeneratedOn = "Report Generated on " + DateTime.Now.ToString("dd-MMM-yyyy HH:mm:ss");

            #region number and decimal variable for AUM
            var aumPaddding = new string('0', (int)ubs.AUMDecimalFormat);
            var aumDecimalFormat = "0." + aumPaddding;
            string aumNUMBERFORMAT = ubs.NumberFormat;
            var aumNumberFormat = aumNUMBERFORMAT.Replace("0", "#");
            string aumNumberDecimalFormat = aumNumberFormat + "0." + new String('0', (int)ubs.AUMDecimalFormat);
            #endregion

            #region number and decimal variable for return
            var retPaddding = new string('0', (int)ubs.ReturnDecimalFormat);
            var retDecimalFormat = "0." + retPaddding;
            string retNUMBERFORMAT = ubs.NumberFormat;
            var retNumberFormat = retNUMBERFORMAT.Replace("0", "#");
            string retNumberDecimalFormat = retNumberFormat + "0." + new String('0', (int)ubs.ReturnDecimalFormat);
            #endregion

            #region number and decimal variable for NAV
            var navPaddding = new string('0', (int)ubs.NavDecimalFormat);
            var navDecimalFormat = "0." + navPaddding;
            string navNUMBERFORMAT = ubs.NumberFormat;
            var navNumberFormat = navNUMBERFORMAT.Replace("0", "#");
            string navNumberDecimalFormat = navNumberFormat + "0." + new String('0', (int)ubs.NavDecimalFormat);
            #endregion


            #region number and decimal variable for Other
            var othPaddding = new string('0', (int)ubs.OtherDecimal);
            var othDecimalFormat = "0." + othPaddding;
            string othNUMBERFORMAT = ubs.NumberFormat;
            var othNumberFormat = othNUMBERFORMAT.Replace("0", "#");
            string othNumberDecimalFormat = othNumberFormat + "0." + new String('0', (int)ubs.OtherDecimal);
            #endregion

            #region number and decimal variable for Ratio
            var ratioPaddding = new string('0', (int)ubs.RatioDecimalFormat);
            var ratioDecimalFormat = "0." + ratioPaddding;
            string ratioNUMBERFORMAT = ubs.NumberFormat;
            var ratioNumberFormat = ratioNUMBERFORMAT.Replace("0", "#");
            string ratioNumberDecimalFormat = ratioNumberFormat + "0." + new String('0', (int)ubs.RatioDecimalFormat);
            #endregion
            #region int Format with out Decimal
            var intNumberWithoutDecimalFormat = ubs.NumberFormat.Replace("0", "#");
            #endregion
            #endregion

            NPOI.XSSF.UserModel.XSSFWorkbook workbook = new NPOI.XSSF.UserModel.XSSFWorkbook();

            ISheet sheet = workbook.CreateSheet("Output");
            ISheet sheetTwo = workbook.CreateSheet("Disclaimer");

            #region Excel Sheet Gridlines Delete
            sheet.DisplayGridlines = false;
            sheetTwo.DisplayGridlines = false;
            #endregion

            #region Header Freeze
            sheet.CreateFreezePane(1, 9);
            #endregion

            #region Set Font For Header1,Header2 and Header3
            XSSFCellStyle HeaderStyle = (XSSFCellStyle)workbook.CreateCellStyle();
            IFont Headerfont = workbook.CreateFont();
            Headerfont.Boldweight = (short)FontBoldWeight.Bold;
            HeaderStyle.SetFont(Headerfont);
            #endregion

            #region Set Cell Value For Header1, Header2 and Header3
            var ICRArow = sheet.CreateRow(0);
            ICRArow.CreateCell(0);
            NPOIWrite.CellMerged(sheet, 0, 0, 1, 9);
            var ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader1);
            ICRACell.CellStyle = HeaderStyle;
            ICRArow = sheet.CreateRow(1);
            ICRArow.CreateCell(0);
            NPOIWrite.CellMerged(sheet, 1, 1, 1, 9);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader2);
            ICRACell.CellStyle = HeaderStyle;
            ICRArow = sheet.CreateRow(2);
            ICRArow.CreateCell(0);
            NPOIWrite.CellMerged(sheet, 2, 2, 1, 9);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.SetCellValue(StrHeader3);
            ICRACell.CellStyle = HeaderStyle;
            ICRACell.CellStyle.Alignment = HorizontalAlignment.Center;
            ICRArow = sheet.CreateRow(3);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(1);
            ICRACell.CellStyle.Alignment = HorizontalAlignment.Center;
            NPOIWrite.AutoFitColumn(sheet, 1);
            ICRACell.CellStyle = HeaderStyle;
            #endregion

            #region Report Name
            ICRArow = sheet.CreateRow(4);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrReportName);
            HeaderStyle.Alignment = HorizontalAlignment.Left;
            ICRACell.CellStyle = HeaderStyle;
            #endregion

            #region Header creation in the Excel
            //var headerRow = sheet.CreateRow(5);
            //sheet.GetRow(5).HeightInPoints = 30;
            //var listHeaderFinal = listTableHeader.OrderBy(x => x.Position).ToList();
            //for (int i = 0; i < listHeaderFinal.Count; i++)
            //{
            //    var cell = headerRow.CreateCell(i);
            //    cell.SetCellValue(listHeaderFinal[i].ColumnName);
            //    NPOIWrite.AutoFitColumn(sheet, i);

            //    #region Added by Subrata on 21 Feb 2018
            //    XSSFCellStyle style = (XSSFCellStyle)workbook.CreateCellStyle();
            //    XSSFColor colorToFill = new XSSFColor(new byte[] { 68, 114, 196 });//{ 51, 204, 204 }//Color.Blue);
            //    style.SetFillForegroundColor(colorToFill);
            //    IFont font = workbook.CreateFont();
            //    font.Color = IndexedColors.White.Index;
            //    font.Boldweight = (short)FontBoldWeight.Bold;
            //    style.SetFont(font);
            //    style.FillPattern = FillPattern.SolidForeground;
            //    style.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            //    style.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            //    style.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            //    style.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            //    if (i > 0)
            //    {
            //        style.Alignment = HorizontalAlignment.Center;
            //        style.VerticalAlignment = VerticalAlignment.Center;
            //    }
            //    else
            //    {
            //        style.Alignment = (string.IsNullOrEmpty(listHeaderFinal[i].TextAlign) || listHeaderFinal[i].TextAlign == EnumTextAlign.left.ToString()) ? HorizontalAlignment.Left
            //            : listHeaderFinal[i].TextAlign == EnumTextAlign.center.ToString() ? HorizontalAlignment.Center : HorizontalAlignment.Right;
            //        style.VerticalAlignment = VerticalAlignment.Center;
            //    }
            //    #endregion

            //    cell.CellStyle = style;

            //}
            #endregion

            #region Header creation in the Excel
            XSSFCellStyle style = (XSSFCellStyle)workbook.CreateCellStyle();
            XSSFColor colorToFill = new XSSFColor(new byte[] { 68, 114, 196 });//{ 51, 204, 204 }//Color.Blue);
            style.SetFillForegroundColor(colorToFill);
            IFont font = workbook.CreateFont();
            font.Color = IndexedColors.White.Index;
            font.Boldweight = (short)FontBoldWeight.Bold;
            style.SetFont(font);
            style.FillPattern = FillPattern.SolidForeground;
            style.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            style.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            style.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            style.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            style.Alignment = HorizontalAlignment.Center;
            style.VerticalAlignment = VerticalAlignment.Center;
            style.WrapText = true;
            
            var headderRow1 = sheet.CreateRow(5);
            var headderRow2 = sheet.CreateRow(6);
            var headderRow3 = sheet.CreateRow(7);
            var headderRow4 = sheet.CreateRow(8);
            int colSpanForPortDates = PortDate.Count();
            ICRACell = headderRow1.CreateCell(0);
            ICRACell.SetCellValue("Scheme Name");
            NPOIWrite.CellMerged(sheet, 5, 8, 0, 0);
            ICRACell.CellStyle = style;
            int i = 1;
            ICRACell = headderRow1.CreateCell(i);
            ICRACell.SetCellValue("AUM");
            NPOIWrite.CellMerged(sheet, 5, 7, i, i+colSpanForPortDates-1);
            ICRACell.CellStyle = style;
            foreach (var Pd in PortDate)
            {
                ICRACell = headderRow4.CreateCell(i);
                ICRACell.SetCellValue(Pd.ToString("MMM-yy"));
                ICRACell.CellStyle = style;
                i++;
            }
            ICRACell = headderRow1.CreateCell(i);
            ICRACell.SetCellValue("Stress Test");
            NPOIWrite.CellMerged(sheet, 5, 5, i, i + (2*colSpanForPortDates) - 1);
            ICRACell.CellStyle = style;
            ICRACell = headderRow2.CreateCell(i);
            ICRACell.SetCellValue("Pro-rata liquidation after removing bottom 20% of portfolio based on scrip liquidity (considering 10% PV with 3x volumes)");
            NPOIWrite.CellMerged(sheet, 6, 6, i, i + (2 * colSpanForPortDates) - 1);
            ICRACell.CellStyle = style;
            if (LiquidityAt == "Both")
            {
                ICRACell = headderRow3.CreateCell(i);
                ICRACell.SetCellValue("50% portfolio");
                NPOIWrite.CellMerged(sheet, 7, 7, i, i + colSpanForPortDates - 1);
                ICRACell.CellStyle = style;
                foreach (var Pd in PortDate)
                {
                    ICRACell = headderRow4.CreateCell(i);
                    ICRACell.SetCellValue(Pd.ToString("MMM-yy"));
                    ICRACell.CellStyle = style;
                    i++;
                }
                ICRACell = headderRow3.CreateCell(i);
                ICRACell.SetCellValue("25% portfolio");
                NPOIWrite.CellMerged(sheet, 7, 7, i, i + colSpanForPortDates - 1);
                ICRACell.CellStyle = style;
                foreach (var Pd in PortDate)
                {
                    ICRACell = headderRow4.CreateCell(i);
                    ICRACell.SetCellValue(Pd.ToString("MMM-yy"));
                    ICRACell.CellStyle = style;
                    i++;
                }
            }
            else if(LiquidityAt == "FiftyPercent")
            {
                ICRACell = headderRow3.CreateCell(i);
                ICRACell.SetCellValue("50% portfolio");
                NPOIWrite.CellMerged(sheet, 7, 7, i, i + colSpanForPortDates - 1);
                ICRACell.CellStyle = style;
                foreach (var Pd in PortDate)
                {
                    ICRACell = headderRow4.CreateCell(i);
                    ICRACell.SetCellValue(Pd.ToString("MMM-yy"));
                    ICRACell.CellStyle = style;
                    i++;
                }
            }
            else if(LiquidityAt == "TwentyFivePercent")
            {
                ICRACell = headderRow3.CreateCell(i);
                ICRACell.SetCellValue("25% portfolio");
                NPOIWrite.CellMerged(sheet, 7, 7, i, i + colSpanForPortDates - 1);
                ICRACell.CellStyle = style;
                foreach (var Pd in PortDate)
                {
                    ICRACell = headderRow4.CreateCell(i);
                    ICRACell.SetCellValue(Pd.ToString("MMM-yy"));
                    ICRACell.CellStyle = style;
                    i++;
                }
            }
            ICRACell = headderRow1.CreateCell(i);
            ICRACell.SetCellValue("Concentration");
            NPOIWrite.CellMerged(sheet, 5, 5, i, i + (5*colSpanForPortDates) - 1);
            ICRACell.CellStyle = style;
            ICRACell = headderRow2.CreateCell(i);
            ICRACell.SetCellValue("Liability Side");
            NPOIWrite.CellMerged(sheet, 6, 6, i, i + colSpanForPortDates - 1);
            ICRACell.CellStyle = style;
            ICRACell = headderRow3.CreateCell(i);
            ICRACell.SetCellValue("Top 10 investor (%)");
            NPOIWrite.CellMerged(sheet, 7, 7, i, i + colSpanForPortDates - 1);
            ICRACell.CellStyle = style;
            foreach (var Pd in PortDate)
            {
                ICRACell = headderRow4.CreateCell(i);
                ICRACell.SetCellValue(Pd.ToString("MMM-yy"));
                ICRACell.CellStyle = style;
                i++;
            }
            ICRACell = headderRow2.CreateCell(i);
            ICRACell.SetCellValue("Asset side (AUM held in)");
            NPOIWrite.CellMerged(sheet, 6, 6, i, i + (4*colSpanForPortDates) - 1);
            ICRACell.CellStyle = style;
            ICRACell = headderRow3.CreateCell(i);
            ICRACell.SetCellValue("Large Cap (%)");
            NPOIWrite.CellMerged(sheet, 7, 7, i, i + colSpanForPortDates - 1);
            ICRACell.CellStyle = style;
            foreach (var Pd in PortDate)
            {
                ICRACell = headderRow4.CreateCell(i);
                ICRACell.SetCellValue(Pd.ToString("MMM-yy"));
                ICRACell.CellStyle = style;
                i++;
            }
            ICRACell = headderRow3.CreateCell(i);
            ICRACell.SetCellValue("Mid Cap (%)");
            NPOIWrite.CellMerged(sheet, 7, 7, i, i + colSpanForPortDates - 1);
            ICRACell.CellStyle = style;
            foreach (var Pd in PortDate)
            {
                ICRACell = headderRow4.CreateCell(i);
                ICRACell.SetCellValue(Pd.ToString("MMM-yy"));
                ICRACell.CellStyle = style;
                i++;
            }
            ICRACell = headderRow3.CreateCell(i);
            ICRACell.SetCellValue("Small Cap (%)");
            NPOIWrite.CellMerged(sheet, 7, 7, i, i + colSpanForPortDates - 1);
            ICRACell.CellStyle = style;
            foreach (var Pd in PortDate)
            {
                ICRACell = headderRow4.CreateCell(i);
                ICRACell.SetCellValue(Pd.ToString("MMM-yy"));
                ICRACell.CellStyle = style;
                i++;
            }
            ICRACell = headderRow3.CreateCell(i);
            ICRACell.SetCellValue("Cash (%)");
            NPOIWrite.CellMerged(sheet, 7, 7, i, i + colSpanForPortDates - 1);
            ICRACell.CellStyle = style;
            foreach (var Pd in PortDate)
            {
                ICRACell = headderRow4.CreateCell(i);
                ICRACell.SetCellValue(Pd.ToString("MMM-yy"));
                ICRACell.CellStyle = style;
                i++;
            }
            ICRACell = headderRow1.CreateCell(i);
            ICRACell.SetCellValue("Volatility");
            NPOIWrite.CellMerged(sheet, 5, 5, i, i + (3*colSpanForPortDates) - 1);
            ICRACell.CellStyle = style;
            ICRACell = headderRow2.CreateCell(i);
            ICRACell.SetCellValue("Portfolio Annualised Standard Deviation (%)");
            NPOIWrite.CellMerged(sheet, 6, 7, i, i + colSpanForPortDates - 1);
            ICRACell.CellStyle = style;
            foreach (var Pd in PortDate)
            {
                ICRACell = headderRow4.CreateCell(i);
                ICRACell.SetCellValue(Pd.ToString("MMM-yy"));
                ICRACell.CellStyle = style;
                i++;
            }
            ICRACell = headderRow2.CreateCell(i);
            ICRACell.SetCellValue("Benchmark Annualised Standard Deviation (%)");
            NPOIWrite.CellMerged(sheet, 6, 7, i, i + colSpanForPortDates - 1);
            ICRACell.CellStyle = style;
            foreach (var Pd in PortDate)
            {
                ICRACell = headderRow4.CreateCell(i);
                ICRACell.SetCellValue(Pd.ToString("MMM-yy"));
                ICRACell.CellStyle = style;
                i++;
            }
            ICRACell = headderRow2.CreateCell(i);
            ICRACell.SetCellValue("Portfolio Beta");
            NPOIWrite.CellMerged(sheet, 6, 7, i, i + colSpanForPortDates - 1);
            ICRACell.CellStyle = style;
            foreach (var Pd in PortDate)
            {
                ICRACell = headderRow4.CreateCell(i);
                ICRACell.SetCellValue(Pd.ToString("MMM-yy"));
                ICRACell.CellStyle = style;
                i++;
            }
            ICRACell = headderRow1.CreateCell(i);
            ICRACell.SetCellValue("Valuation");
            NPOIWrite.CellMerged(sheet, 5, 5, i, i + (5*colSpanForPortDates) - 1);
            ICRACell.CellStyle = style;
            ICRACell = headderRow2.CreateCell(i);
            ICRACell.SetCellValue("Portfolio Trailing 12m PE");
            NPOIWrite.CellMerged(sheet, 6, 7, i, i + colSpanForPortDates - 1);
            ICRACell.CellStyle = style;
            foreach (var Pd in PortDate)
            {
                ICRACell = headderRow4.CreateCell(i);
                ICRACell.SetCellValue(Pd.ToString("MMM-yy"));
                ICRACell.CellStyle = style;
                i++;
            }
            ICRACell = headderRow2.CreateCell(i);
            ICRACell.SetCellValue("Benchmark PE");
            NPOIWrite.CellMerged(sheet, 6, 6, i, i + (3*colSpanForPortDates) - 1);
            ICRACell.CellStyle = style;
            ICRACell = headderRow3.CreateCell(i);
            ICRACell.SetCellValue("Trailing 12m PE");
            NPOIWrite.CellMerged(sheet, 7, 7, i, i + colSpanForPortDates - 1);
            ICRACell.CellStyle = style;
            foreach (var Pd in PortDate)
            {
                ICRACell = headderRow4.CreateCell(i);
                ICRACell.SetCellValue(Pd.ToString("MMM-yy"));
                ICRACell.CellStyle = style;
                i++;
            }
            ICRACell = headderRow3.CreateCell(i);
            ICRACell.SetCellValue("Trailing 12m PE 1 year ago");
            NPOIWrite.CellMerged(sheet, 7, 7, i, i + colSpanForPortDates - 1);
            ICRACell.CellStyle = style;
            foreach (var Pd in PortDate)
            {
                ICRACell = headderRow4.CreateCell(i);
                ICRACell.SetCellValue(Pd.ToString("MMM-yy"));
                ICRACell.CellStyle = style;
                i++;
            }
            ICRACell = headderRow3.CreateCell(i);
            ICRACell.SetCellValue("Trailing 12m PE 2 year ago");
            NPOIWrite.CellMerged(sheet, 7, 7, i, i + colSpanForPortDates - 1);
            ICRACell.CellStyle = style;
            foreach (var Pd in PortDate)
            {
                ICRACell = headderRow4.CreateCell(i);
                ICRACell.SetCellValue(Pd.ToString("MMM-yy"));
                ICRACell.CellStyle = style;
                i++;
            }
            ICRACell = headderRow2.CreateCell(i);
            ICRACell.SetCellValue("Portfolio Turnover Ratio(%)");
            NPOIWrite.CellMerged(sheet, 6, 7, i, i + colSpanForPortDates - 1);
            ICRACell.CellStyle = style;
            foreach (var Pd in PortDate)
            {
                ICRACell = headderRow4.CreateCell(i);
                ICRACell.SetCellValue(Pd.ToString("MMM-yy"));
                ICRACell.CellStyle = style;
                i++;
            }
            #endregion

            #region Cell Style For Even Row

            #region With DecimalFormat AUM
            XSSFCellStyle aumAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor aumcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            aumAllCellStyleEvenDecFrmt.SetFillForegroundColor(aumcolorToFillEvenWtoutDec);
            aumAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat aumformatEven = workbook.CreateDataFormat();
            aumAllCellStyleEvenDecFrmt.DataFormat = aumformatEven.GetFormat(aumDecimalFormat);
            aumAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;
            //percentage format

            XSSFCellStyle cellStylePercentEven = (XSSFCellStyle)workbook.CreateCellStyle();
            cellStylePercentEven.DataFormat = HSSFDataFormat.GetBuiltinFormat("0.00%");
            cellStylePercentEven.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            cellStylePercentEven.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            cellStylePercentEven.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            cellStylePercentEven.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillFstClmnEvenpercent = new XSSFColor(new byte[] { 176, 196, 222 });
            cellStylePercentEven.SetFillForegroundColor(colorToFillFstClmnEvenpercent);
            cellStylePercentEven.FillPattern = FillPattern.SolidForeground;
            cellStylePercentEven.Alignment = HorizontalAlignment.Left;
            cellStylePercentEven.VerticalAlignment = VerticalAlignment.Center;
            cellStylePercentEven.SetDataFormat(workbook.CreateDataFormat().GetFormat("0.00%"));

            XSSFCellStyle cellStylePercentOdd = (XSSFCellStyle)workbook.CreateCellStyle();
            cellStylePercentOdd.DataFormat = HSSFDataFormat.GetBuiltinFormat("0.00%");
            cellStylePercentOdd.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            cellStylePercentOdd.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            cellStylePercentOdd.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            cellStylePercentOdd.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillFstClmnOddpercent = new XSSFColor(new byte[] { 255, 255, 255 });
            cellStylePercentOdd.SetFillForegroundColor(colorToFillFstClmnOddpercent);
            cellStylePercentOdd.FillPattern = FillPattern.SolidForeground;
            cellStylePercentOdd.Alignment = HorizontalAlignment.Left;
            cellStylePercentOdd.VerticalAlignment = VerticalAlignment.Center;
            cellStylePercentOdd.SetDataFormat(workbook.CreateDataFormat().GetFormat("0.00%"));

            /// Number Format ////
            XSSFCellStyle aumAllCellStyleEvenDecFrmtWNum = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleEvenDecFrmtWNum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmtWNum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmtWNum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleEvenDecFrmtWNum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor aumcolorToFillEvenWtoutDecWNum = new XSSFColor(new byte[] { 176, 196, 222 });
            aumAllCellStyleEvenDecFrmtWNum.SetFillForegroundColor(aumcolorToFillEvenWtoutDecWNum);
            aumAllCellStyleEvenDecFrmtWNum.FillPattern = FillPattern.SolidForeground;
            IDataFormat aumformatEvenWNum = workbook.CreateDataFormat();
            aumAllCellStyleEvenDecFrmtWNum.DataFormat = aumformatEvenWNum.GetFormat(aumNumberDecimalFormat);
            aumAllCellStyleEvenDecFrmtWNum.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleEvenDecFrmtWNum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Return
            XSSFCellStyle retAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            retAllCellStyleEvenDecFrmt.SetFillForegroundColor(retcolorToFillEvenWtoutDec);
            retAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatEven = workbook.CreateDataFormat();
            retAllCellStyleEvenDecFrmt.DataFormat = retformatEven.GetFormat(retDecimalFormat);
            retAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            retAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;


            ////Number Format ////
            XSSFCellStyle retAllCellStyleEvenDecFrmtWnum = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleEvenDecFrmtWnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmtWnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmtWnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleEvenDecFrmtWnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillEvenWtoutDecWnum = new XSSFColor(new byte[] { 176, 196, 222 });
            retAllCellStyleEvenDecFrmtWnum.SetFillForegroundColor(retcolorToFillEvenWtoutDecWnum);
            retAllCellStyleEvenDecFrmtWnum.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatEvenWnum = workbook.CreateDataFormat();
            retAllCellStyleEvenDecFrmtWnum.DataFormat = retformatEvenWnum.GetFormat(retNumberDecimalFormat);
            retAllCellStyleEvenDecFrmtWnum.Alignment = HorizontalAlignment.Center;
            retAllCellStyleEvenDecFrmtWnum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Nav
            XSSFCellStyle navAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor navcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            navAllCellStyleEvenDecFrmt.SetFillForegroundColor(navcolorToFillEvenWtoutDec);
            navAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat navformatEven = workbook.CreateDataFormat();
            navAllCellStyleEvenDecFrmt.DataFormat = navformatEven.GetFormat(navDecimalFormat);
            navAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            navAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;


            /// Number Format ////
            XSSFCellStyle navAllCellStyleEvenDecFrmtWnnum = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleEvenDecFrmtWnnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmtWnnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmtWnnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleEvenDecFrmtWnnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor navcolorToFillEvenWtoutDecWnnum = new XSSFColor(new byte[] { 176, 196, 222 });
            navAllCellStyleEvenDecFrmtWnnum.SetFillForegroundColor(navcolorToFillEvenWtoutDecWnnum);
            navAllCellStyleEvenDecFrmtWnnum.FillPattern = FillPattern.SolidForeground;
            IDataFormat navformatEvenWnnum = workbook.CreateDataFormat();
            navAllCellStyleEvenDecFrmtWnnum.DataFormat = navformatEvenWnnum.GetFormat(navNumberDecimalFormat);
            navAllCellStyleEvenDecFrmtWnnum.Alignment = HorizontalAlignment.Center;
            navAllCellStyleEvenDecFrmtWnnum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Other
            XSSFCellStyle otherAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            otherAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othercolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            otherAllCellStyleEvenDecFrmt.SetFillForegroundColor(othercolorToFillEvenWtoutDec);
            otherAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat otherformatEven = workbook.CreateDataFormat();
            otherAllCellStyleEvenDecFrmt.DataFormat = otherformatEven.GetFormat(othDecimalFormat);
            otherAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            otherAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            /// Number Format ///
            XSSFCellStyle otherAllCellStyleEvenDecFrmtWnum = (XSSFCellStyle)workbook.CreateCellStyle();
            otherAllCellStyleEvenDecFrmtWnum.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmtWnum.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmtWnum.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            otherAllCellStyleEvenDecFrmtWnum.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othercolorToFillEvenWtoutDecWnum = new XSSFColor(new byte[] { 176, 196, 222 });
            otherAllCellStyleEvenDecFrmtWnum.SetFillForegroundColor(othercolorToFillEvenWtoutDecWnum);
            otherAllCellStyleEvenDecFrmtWnum.FillPattern = FillPattern.SolidForeground;
            IDataFormat otherformatEvenWnum = workbook.CreateDataFormat();
            otherAllCellStyleEvenDecFrmtWnum.DataFormat = otherformatEvenWnum.GetFormat(othNumberDecimalFormat);
            otherAllCellStyleEvenDecFrmtWnum.Alignment = HorizontalAlignment.Center;
            otherAllCellStyleEvenDecFrmtWnum.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With DecimalFormat Ratio
            XSSFCellStyle ratAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor ratcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            ratAllCellStyleEvenDecFrmt.SetFillForegroundColor(ratcolorToFillEvenWtoutDec);
            ratAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat ratformatEven = workbook.CreateDataFormat();
            ratAllCellStyleEvenDecFrmt.DataFormat = ratformatEven.GetFormat(ratioDecimalFormat);
            ratAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle ratAllCellStyleEvenDecFrmtWth = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleEvenDecFrmtWth.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmtWth.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmtWth.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleEvenDecFrmtWth.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor ratcolorToFillEvenWtoutDecwth = new XSSFColor(new byte[] { 176, 196, 222 });
            ratAllCellStyleEvenDecFrmtWth.SetFillForegroundColor(ratcolorToFillEvenWtoutDecwth);
            ratAllCellStyleEvenDecFrmtWth.FillPattern = FillPattern.SolidForeground;
            IDataFormat ratformatEvenWth = workbook.CreateDataFormat();
            ratAllCellStyleEvenDecFrmtWth.DataFormat = ratformatEvenWth.GetFormat(ratioNumberDecimalFormat);
            ratAllCellStyleEvenDecFrmtWth.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleEvenDecFrmtWth.VerticalAlignment = VerticalAlignment.Center;
            #endregion


            #region No Format
            XSSFCellStyle AllCellStyleEven = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleEven.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleEven.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillEven = new XSSFColor(new byte[] { 176, 196, 222 });
            AllCellStyleEven.SetFillForegroundColor(colorToFillEven);
            AllCellStyleEven.FillPattern = FillPattern.SolidForeground;
            AllCellStyleEven.Alignment = HorizontalAlignment.Center;
            AllCellStyleEven.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #endregion

            #region Cell Style For Odd Row

            #region With Decimal Format AUM
            XSSFCellStyle aumAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor AUMcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            aumAllCellStyleOddDec.SetFillForegroundColor(AUMcolorToFillOddDec);
            aumAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat AUMformatOddDec = workbook.CreateDataFormat();
            aumAllCellStyleOddDec.DataFormat = AUMformatOddDec.GetFormat(aumDecimalFormat);
            aumAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle aumAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            aumAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            aumAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor AUMcolorToFillOddDecWnf = new XSSFColor(new byte[] { 255, 255, 255 });
            aumAllCellStyleOddDecWnuf.SetFillForegroundColor(AUMcolorToFillOddDecWnf);
            aumAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat AUMformatOddDecWnuf = workbook.CreateDataFormat();
            aumAllCellStyleOddDecWnuf.DataFormat = AUMformatOddDecWnuf.GetFormat(aumNumberDecimalFormat);
            aumAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            aumAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With Decimal Format Return
            XSSFCellStyle retAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor RETcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            retAllCellStyleOddDec.SetFillForegroundColor(RETcolorToFillOddDec);
            retAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat RETformatOddDec = workbook.CreateDataFormat();
            retAllCellStyleOddDec.DataFormat = RETformatOddDec.GetFormat(retDecimalFormat);
            retAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            retAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle retAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            retAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            retAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor RETcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            retAllCellStyleOddDecWnuf.SetFillForegroundColor(RETcolorToFillOddDecWnuf);
            retAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat RETformatOddDecWnuf = workbook.CreateDataFormat();
            retAllCellStyleOddDecWnuf.DataFormat = RETformatOddDecWnuf.GetFormat(retNumberDecimalFormat);
            retAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            retAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region With Decimal Format Nav
            XSSFCellStyle navAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor naVcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            navAllCellStyleOddDec.SetFillForegroundColor(naVcolorToFillOddDec);
            navAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat naVformatOddDec = workbook.CreateDataFormat();
            navAllCellStyleOddDec.DataFormat = naVformatOddDec.GetFormat(navDecimalFormat);
            navAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            navAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            XSSFCellStyle navAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            navAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            navAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor naVcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            navAllCellStyleOddDecWnuf.SetFillForegroundColor(naVcolorToFillOddDecWnuf);
            navAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat naVformatOddDecWnuf = workbook.CreateDataFormat();
            navAllCellStyleOddDecWnuf.DataFormat = naVformatOddDecWnuf.GetFormat(navNumberDecimalFormat);
            navAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            navAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion


            #region With Decimal Format Other
            XSSFCellStyle othAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            othAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            othAllCellStyleOddDec.SetFillForegroundColor(othcolorToFillOddDec);
            othAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat othformatOddDec = workbook.CreateDataFormat();
            othAllCellStyleOddDec.DataFormat = othformatOddDec.GetFormat(othDecimalFormat);
            othAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            othAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            XSSFCellStyle othAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            othAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            othAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor othcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            othAllCellStyleOddDecWnuf.SetFillForegroundColor(othcolorToFillOddDecWnuf);
            othAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat othformatOddDecWnuf = workbook.CreateDataFormat();
            othAllCellStyleOddDecWnuf.DataFormat = othformatOddDecWnuf.GetFormat(othNumberDecimalFormat);
            othAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            othAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion


            #region With Decimal Format ratio
            XSSFCellStyle ratAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            ratAllCellStyleOddDec.SetFillForegroundColor(retcolorToFillOddDec);
            ratAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatOddDec = workbook.CreateDataFormat();
            ratAllCellStyleOddDec.DataFormat = retformatOddDec.GetFormat(ratioDecimalFormat);
            ratAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            XSSFCellStyle ratAllCellStyleOddDecWnuf = (XSSFCellStyle)workbook.CreateCellStyle();
            ratAllCellStyleOddDecWnuf.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDecWnuf.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDecWnuf.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            ratAllCellStyleOddDecWnuf.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor retcolorToFillOddDecWnuf = new XSSFColor(new byte[] { 255, 255, 255 });
            ratAllCellStyleOddDecWnuf.SetFillForegroundColor(retcolorToFillOddDecWnuf);
            ratAllCellStyleOddDecWnuf.FillPattern = FillPattern.SolidForeground;
            IDataFormat retformatOddDecWnuf = workbook.CreateDataFormat();
            ratAllCellStyleOddDecWnuf.DataFormat = retformatOddDecWnuf.GetFormat(ratioNumberDecimalFormat);
            ratAllCellStyleOddDecWnuf.Alignment = HorizontalAlignment.Center;
            ratAllCellStyleOddDecWnuf.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region No Format
            XSSFCellStyle AllCellStyleOdd = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleOdd.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleOdd.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillOdd = new XSSFColor(new byte[] { 255, 255, 255 });
            AllCellStyleOdd.SetFillForegroundColor(colorToFillOdd);
            AllCellStyleOdd.FillPattern = FillPattern.SolidForeground;
            AllCellStyleOdd.Alignment = HorizontalAlignment.Center;
            AllCellStyleOdd.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #endregion

            #region Cell Style For First Column Even Row
            XSSFCellStyle AllCellStyleFstColmEven = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleFstColmEven.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmEven.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillFstClmnEven = new XSSFColor(new byte[] { 176, 196, 222 });
            AllCellStyleFstColmEven.SetFillForegroundColor(colorToFillFstClmnEven);
            AllCellStyleFstColmEven.FillPattern = FillPattern.SolidForeground;
            AllCellStyleFstColmEven.Alignment = HorizontalAlignment.Left;
            AllCellStyleFstColmEven.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region Cell Style For First Column Odd Row
            XSSFCellStyle AllCellStyleFstColmOdd = (XSSFCellStyle)workbook.CreateCellStyle();
            AllCellStyleFstColmOdd.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            AllCellStyleFstColmOdd.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor colorToFillFstClmnOdd = new XSSFColor(new byte[] { 255, 255, 255 });
            AllCellStyleFstColmOdd.SetFillForegroundColor(colorToFillFstClmnOdd);
            AllCellStyleFstColmOdd.FillPattern = FillPattern.SolidForeground;
            AllCellStyleFstColmOdd.Alignment = HorizontalAlignment.Left;
            AllCellStyleFstColmOdd.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region Without Decimal Number Format Even Row
            XSSFCellStyle intAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            intAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            intAllCellStyleEvenDecFrmt.SetFillForegroundColor(intcolorToFillEvenWtoutDec);
            intAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat intformatEven = workbook.CreateDataFormat();
            intAllCellStyleEvenDecFrmt.DataFormat = intformatEven.GetFormat(intNumberWithoutDecimalFormat);
            intAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            intAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle intSimpleAllCellStyleEvenDecFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            intSimpleAllCellStyleEvenDecFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleEvenDecFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleEvenDecFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleEvenDecFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intSimplecolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            intSimpleAllCellStyleEvenDecFrmt.SetFillForegroundColor(intSimplecolorToFillEvenWtoutDec);
            intSimpleAllCellStyleEvenDecFrmt.FillPattern = FillPattern.SolidForeground;
            intSimpleAllCellStyleEvenDecFrmt.Alignment = HorizontalAlignment.Center;
            intSimpleAllCellStyleEvenDecFrmt.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region Without Decimal Number Format Odd Row
            XSSFCellStyle intAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            intAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            intAllCellStyleOddDec.SetFillForegroundColor(intcolorToFillOddDec);
            intAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat intformatOddDec = workbook.CreateDataFormat();
            intAllCellStyleOddDec.DataFormat = intformatOddDec.GetFormat(intNumberWithoutDecimalFormat);
            intAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            intAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle intSimpleAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            intSimpleAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            intSimpleAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor intSimplecolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            intSimpleAllCellStyleOddDec.SetFillForegroundColor(intSimplecolorToFillOddDec);
            intSimpleAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            intSimpleAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            intSimpleAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;
            #endregion
            #region With DateTime format
            var DateTimeFormat = ubs.DateFormat;
            var MonthYearFormat = "MMM-yyyy";
            XSSFCellStyle DateTimeAllCellStyleEvenFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            DateTimeAllCellStyleEvenFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleEvenFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleEvenFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleEvenFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor DateTimecolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            DateTimeAllCellStyleEvenFrmt.SetFillForegroundColor(DateTimecolorToFillEvenWtoutDec);
            DateTimeAllCellStyleEvenFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat DateTimeformatEven = workbook.CreateDataFormat();
            DateTimeAllCellStyleEvenFrmt.DataFormat = DateTimeformatEven.GetFormat(DateTimeFormat);
            DateTimeAllCellStyleEvenFrmt.Alignment = HorizontalAlignment.Center;
            DateTimeAllCellStyleEvenFrmt.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle DateTimeAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            DateTimeAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            DateTimeAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor DateTimecolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            DateTimeAllCellStyleOddDec.SetFillForegroundColor(DateTimecolorToFillOddDec);
            DateTimeAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat DateTimeformatOddDec = workbook.CreateDataFormat();
            DateTimeAllCellStyleOddDec.DataFormat = DateTimeformatOddDec.GetFormat(DateTimeFormat);
            DateTimeAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            DateTimeAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            #endregion
            #region With MonthYear format
            XSSFCellStyle MonthYearAllCellStyleEvenFrmt = (XSSFCellStyle)workbook.CreateCellStyle();
            MonthYearAllCellStyleEvenFrmt.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            MonthYearAllCellStyleEvenFrmt.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            MonthYearAllCellStyleEvenFrmt.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            MonthYearAllCellStyleEvenFrmt.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor MonthYearcolorToFillEvenWtoutDec = new XSSFColor(new byte[] { 176, 196, 222 });
            MonthYearAllCellStyleEvenFrmt.SetFillForegroundColor(MonthYearcolorToFillEvenWtoutDec);
            MonthYearAllCellStyleEvenFrmt.FillPattern = FillPattern.SolidForeground;
            IDataFormat MonthYearformatEven = workbook.CreateDataFormat();
            MonthYearAllCellStyleEvenFrmt.DataFormat = DateTimeformatEven.GetFormat(MonthYearFormat);
            MonthYearAllCellStyleEvenFrmt.Alignment = HorizontalAlignment.Center;
            MonthYearAllCellStyleEvenFrmt.VerticalAlignment = VerticalAlignment.Center;

            XSSFCellStyle MonthYearAllCellStyleOddDec = (XSSFCellStyle)workbook.CreateCellStyle();
            MonthYearAllCellStyleOddDec.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            MonthYearAllCellStyleOddDec.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            MonthYearAllCellStyleOddDec.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            MonthYearAllCellStyleOddDec.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            XSSFColor MonthYearcolorToFillOddDec = new XSSFColor(new byte[] { 255, 255, 255 });
            MonthYearAllCellStyleOddDec.SetFillForegroundColor(MonthYearcolorToFillOddDec);
            MonthYearAllCellStyleOddDec.FillPattern = FillPattern.SolidForeground;
            IDataFormat MonthYearformatOddDec = workbook.CreateDataFormat();
            MonthYearAllCellStyleOddDec.DataFormat = DateTimeformatOddDec.GetFormat(MonthYearFormat);
            MonthYearAllCellStyleOddDec.Alignment = HorizontalAlignment.Center;
            MonthYearAllCellStyleOddDec.VerticalAlignment = VerticalAlignment.Center;


            #endregion
            #region Value added to the Excel

            //#region Added by Subrata on 22 Feb 2018
            //bool IsNumericKey = false;
            //bool IsNumericValue = false;
            //var AllListData = listData.SelectMany(x => x.LstKeyValuePair).ToArray();
            //var AllDataKey = AllListData.Select(x => x.Key).Distinct().ToArray();
            //int ValueRes;
            //IsNumericKey = int.TryParse(AllDataKey[0], out ValueRes);
            //#endregion

            //int incr = 6;
            //bool isNumeric = false;
            //foreach (var item in listData)
            //{
            //    if (item.LstKeyValuePair.Count() > 0)
            //    {
            //        int value;
            //        isNumeric = int.TryParse(item.LstKeyValuePair[0].Key, out value);
            //    }
            //    var dataRow = sheet.CreateRow(incr);
            //    sheet.GetRow(incr).HeightInPoints = 20;
            //    if (isNumeric == true)
            //    {
            //        var cellValues = (from l in item.LstKeyValuePair
            //                          join h in listTableHeader
            //                          on l.Key.ToString() equals h.Position.ToString()
            //                          orderby h.Position
            //                          let j = item.HeaderEntity ?? h
            //                          select new
            //                          {
            //                              IsNum = j.IsNumberFormatReq,
            //                              DecType = j.DecFormatType,
            //                              Value = l.Value,
            //                              IsMixedType = j.IsMixedValueType,
            //                              IsPercentageType = j.IsPercentageValueType,
            //                              IsDateTimeStringMixedType = j.IsDateTimeStringMixedType,
            //                              IsDateTimeType = j.IsDateTimeType,
            //                              IsMonthYearType = j.IsMonthYearType
            //                          }).ToArray();

            //        for (int k = 0; k < cellValues.Length; k++)
            //        {
            //            var datacell = dataRow.CreateCell(k);
            //            if (cellValues[k].DecType != DecimalFormatType.NoDecimalReq)
            //            {
            //                double OutVal;
            //                if (string.IsNullOrEmpty(cellValues[k].Value) || cellValues[k].Value == BlankData || !double.TryParse(cellValues[k].Value, out OutVal))
            //                {
            //                    datacell.SetCellValue(cellValues[k].Value);
            //                    if (k > 0)
            //                    {
            //                        if (incr % 2 == 0)
            //                            datacell.CellStyle = AllCellStyleEven;
            //                        else
            //                            datacell.CellStyle = AllCellStyleOdd;

            //                    }
            //                    else
            //                    {
            //                        if (incr % 2 == 0)
            //                            datacell.CellStyle = AllCellStyleFstColmEven;
            //                        else
            //                            datacell.CellStyle = AllCellStyleFstColmOdd;
            //                    }

            //                }
            //                else
            //                {
            //                    datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));

            //                    if (k > 0)
            //                    {
            //                        if (cellValues[k].DecType == DecimalFormatType.AUM)
            //                        {
            //                            if (incr % 2 == 0)
            //                            {
            //                                if (cellValues[k].IsNum == true)
            //                                {

            //                                    datacell.CellStyle = aumAllCellStyleEvenDecFrmtWNum;
            //                                }
            //                                else
            //                                {
            //                                    datacell.CellStyle = aumAllCellStyleEvenDecFrmt;
            //                                }
            //                            }
            //                            else
            //                            {
            //                                if (cellValues[k].IsNum == true)
            //                                {
            //                                    datacell.CellStyle = aumAllCellStyleOddDecWnuf;
            //                                }
            //                                else
            //                                {
            //                                    datacell.CellStyle = aumAllCellStyleOddDec;
            //                                }
            //                            }
            //                        }
            //                        else if (cellValues[k].DecType == DecimalFormatType.NAV)
            //                        {
            //                            if (incr % 2 == 0)
            //                            {
            //                                if (cellValues[k].IsNum == true)
            //                                {
            //                                    datacell.CellStyle = navAllCellStyleEvenDecFrmtWnnum;
            //                                }
            //                                else
            //                                {
            //                                    datacell.CellStyle = navAllCellStyleEvenDecFrmt;
            //                                }
            //                            }
            //                            else
            //                            {
            //                                if (cellValues[k].IsNum == true)
            //                                {
            //                                    datacell.CellStyle = navAllCellStyleOddDecWnuf;
            //                                }
            //                                else
            //                                {
            //                                    datacell.CellStyle = navAllCellStyleOddDec;
            //                                }

            //                            }
            //                        }
            //                        else if (cellValues[k].DecType == DecimalFormatType.OTHER)
            //                        {
            //                            if (incr % 2 == 0)
            //                            {
            //                                if (cellValues[k].IsNum == true)
            //                                {
            //                                    datacell.CellStyle = otherAllCellStyleEvenDecFrmtWnum;
            //                                }
            //                                else
            //                                {
            //                                    datacell.CellStyle = otherAllCellStyleEvenDecFrmt;
            //                                }
            //                            }

            //                            else
            //                            {
            //                                if (cellValues[k].IsNum == true)
            //                                {
            //                                    datacell.CellStyle = othAllCellStyleOddDecWnuf;
            //                                }
            //                                else
            //                                {

            //                                    datacell.CellStyle = othAllCellStyleOddDec;
            //                                }

            //                            }
            //                        }
            //                        else if (cellValues[k].DecType == DecimalFormatType.RATIO)
            //                        {
            //                            if (incr % 2 == 0)
            //                            {
            //                                if (cellValues[k].IsNum == true)
            //                                {
            //                                    datacell.CellStyle = ratAllCellStyleEvenDecFrmtWth;
            //                                }
            //                                else
            //                                {
            //                                    datacell.CellStyle = ratAllCellStyleEvenDecFrmt;
            //                                }
            //                            }
            //                            else
            //                            {
            //                                if (cellValues[k].IsNum == true)
            //                                {
            //                                    datacell.CellStyle = ratAllCellStyleOddDecWnuf;
            //                                }
            //                                else
            //                                {
            //                                    datacell.CellStyle = ratAllCellStyleOddDec;
            //                                }
            //                            }
            //                        }
            //                        else if (cellValues[k].DecType == DecimalFormatType.RETURN)
            //                        {
            //                            if (incr % 2 == 0)
            //                            {
            //                                if (cellValues[k].IsNum == true)
            //                                {
            //                                    datacell.CellStyle = retAllCellStyleEvenDecFrmtWnum;
            //                                }
            //                                else
            //                                {
            //                                    datacell.CellStyle = retAllCellStyleEvenDecFrmt;
            //                                }

            //                            }
            //                            else
            //                            {
            //                                if (cellValues[k].IsNum == true)
            //                                {
            //                                    datacell.CellStyle = retAllCellStyleOddDecWnuf;
            //                                }
            //                                else
            //                                {
            //                                    datacell.CellStyle = retAllCellStyleOddDec;
            //                                }

            //                            }
            //                        }
            //                        else if (cellValues[k].DecType == DecimalFormatType.IntegerWithOutDecimal)
            //                        {
            //                            if (incr % 2 == 0)
            //                            {
            //                                if (cellValues[k].IsNum == true)
            //                                {
            //                                    datacell.CellStyle = intAllCellStyleEvenDecFrmt;
            //                                }
            //                                else
            //                                {
            //                                    datacell.CellStyle = intSimpleAllCellStyleEvenDecFrmt;
            //                                }

            //                            }
            //                            else
            //                            {
            //                                if (cellValues[k].IsNum == true)
            //                                {
            //                                    datacell.CellStyle = intAllCellStyleOddDec;
            //                                }
            //                                else
            //                                {
            //                                    datacell.CellStyle = intSimpleAllCellStyleOddDec;
            //                                }

            //                            }
            //                        }

            //                    }
            //                    else
            //                    {
            //                        if (incr % 2 == 0)
            //                            datacell.CellStyle = AllCellStyleFstColmEven;
            //                        else
            //                            datacell.CellStyle = AllCellStyleFstColmOdd;
            //                    }

            //                }

            //            }
            //            else
            //            {
            //                double OutVal;
            //                if (double.TryParse(cellValues[k].Value, out OutVal) && !cellValues[k].IsMixedType && !cellValues[k].IsPercentageType)
            //                {
            //                    datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
            //                    if (k > 0)
            //                    {
            //                        if (incr % 2 == 0)
            //                            datacell.CellStyle = AllCellStyleEven;
            //                        else
            //                            datacell.CellStyle = AllCellStyleOdd;

            //                    }
            //                    else
            //                    {
            //                        if (incr % 2 == 0)
            //                            datacell.CellStyle = AllCellStyleFstColmEven;
            //                        else
            //                            datacell.CellStyle = AllCellStyleFstColmOdd;
            //                    }
            //                }
            //                else if (cellValues[k].IsPercentageType)
            //                {
            //                    if (double.TryParse(cellValues[k].Value, out OutVal))
            //                    {
            //                        datacell.SetCellValue(OutVal / 100);
            //                        if (incr % 2 == 0)
            //                            datacell.CellStyle = cellStylePercentEven;
            //                        else
            //                            datacell.CellStyle = cellStylePercentOdd;
            //                    }
            //                    else
            //                    {
            //                        datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
            //                        if (k > 0)
            //                        {
            //                            if (incr % 2 == 0)
            //                                datacell.CellStyle = AllCellStyleEven;
            //                            else
            //                                datacell.CellStyle = AllCellStyleOdd;
            //                        }
            //                        else
            //                        {
            //                            if (incr % 2 == 0)
            //                                datacell.CellStyle = AllCellStyleFstColmEven;
            //                            else
            //                                datacell.CellStyle = AllCellStyleFstColmOdd;
            //                        }
            //                    }
            //                }
            //                else if (cellValues[k].IsDateTimeType)
            //                {
            //                    DateTime OutValdt;
            //                    if (DateTime.TryParse(cellValues[k].Value, out OutValdt))
            //                    {
            //                        datacell.SetCellValue(Convert.ToDateTime(cellValues[k].Value));
            //                        if (incr % 2 == 0)
            //                            datacell.CellStyle = DateTimeAllCellStyleEvenFrmt;
            //                        else
            //                            datacell.CellStyle = DateTimeAllCellStyleOddDec;
            //                        if (k == 0)
            //                        {
            //                            datacell.CellStyle.Alignment = HorizontalAlignment.Left;
            //                        }
            //                    }
            //                    else
            //                    {
            //                        datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
            //                        if (k > 0)
            //                        {
            //                            if (incr % 2 == 0)
            //                                datacell.CellStyle = AllCellStyleEven;
            //                            else
            //                                datacell.CellStyle = AllCellStyleOdd;

            //                        }
            //                        else
            //                        {
            //                            if (incr % 2 == 0)
            //                                datacell.CellStyle = AllCellStyleFstColmEven;
            //                            else
            //                                datacell.CellStyle = AllCellStyleFstColmOdd;
            //                        }
            //                    }
            //                }
            //                else if (cellValues[k].IsDateTimeStringMixedType)
            //                {
            //                    DateTime OutValdt;
            //                    if (DateTime.TryParse(cellValues[k].Value, out OutValdt))
            //                    {
            //                        datacell.SetCellValue(Convert.ToDateTime(cellValues[k].Value));
            //                        if (incr % 2 == 0)
            //                            datacell.CellStyle = DateTimeAllCellStyleEvenFrmt;
            //                        else
            //                            datacell.CellStyle = DateTimeAllCellStyleOddDec;
            //                        if (k == 0)
            //                        {
            //                            datacell.CellStyle.Alignment = HorizontalAlignment.Left;
            //                        }
            //                    }
            //                    else
            //                    {
            //                        datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
            //                        if (k > 0)
            //                        {
            //                            if (incr % 2 == 0)
            //                                datacell.CellStyle = AllCellStyleEven;
            //                            else
            //                                datacell.CellStyle = AllCellStyleOdd;

            //                        }
            //                        else
            //                        {
            //                            if (incr % 2 == 0)
            //                                datacell.CellStyle = AllCellStyleFstColmEven;
            //                            else
            //                                datacell.CellStyle = AllCellStyleFstColmOdd;
            //                        }
            //                    }
            //                }
            //                else if (cellValues[k].IsMonthYearType)
            //                {
            //                    DateTime OutValdt;
            //                    if (DateTime.TryParse(cellValues[k].Value, out OutValdt))
            //                    {
            //                        datacell.SetCellValue(Convert.ToDateTime(cellValues[k].Value));
            //                        if (incr % 2 == 0)
            //                            datacell.CellStyle = MonthYearAllCellStyleEvenFrmt;
            //                        else
            //                            datacell.CellStyle = MonthYearAllCellStyleOddDec;
            //                        if (k == 0)
            //                        {
            //                            datacell.CellStyle.Alignment = HorizontalAlignment.Left;
            //                        }
            //                    }
            //                    else
            //                    {
            //                        datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
            //                        if (k > 0)
            //                        {
            //                            if (incr % 2 == 0)
            //                                datacell.CellStyle = AllCellStyleEven;
            //                            else
            //                                datacell.CellStyle = AllCellStyleOdd;

            //                        }
            //                        else
            //                        {
            //                            if (incr % 2 == 0)
            //                                datacell.CellStyle = AllCellStyleFstColmEven;
            //                            else
            //                                datacell.CellStyle = AllCellStyleFstColmOdd;
            //                        }
            //                    }
            //                }
            //                else
            //                {
            //                    datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
            //                    if (k > 0)
            //                    {
            //                        if (incr % 2 == 0)
            //                            datacell.CellStyle = AllCellStyleEven;
            //                        else
            //                            datacell.CellStyle = AllCellStyleOdd;

            //                    }
            //                    else
            //                    {
            //                        if (incr % 2 == 0)
            //                            datacell.CellStyle = AllCellStyleFstColmEven;
            //                        else
            //                            datacell.CellStyle = AllCellStyleFstColmOdd;
            //                    }
            //                }
            //            }


            //        }
            //        incr++;
            //    }
            //    else
            //    {
            //        var cellValues = (from l in item.LstKeyValuePair
            //                          join h in listTableHeader
            //                          on l.Key.ToUpper() equals h.ColumnName.ToUpper()
            //                          orderby h.Position
            //                          let j = item.HeaderEntity ?? h
            //                          select new
            //                          {
            //                              IsNum = j.IsNumberFormatReq,
            //                              DecType = j.DecFormatType,
            //                              IsMixedType = j.IsMixedValueType,
            //                              IsPercentageType = j.IsPercentageValueType,
            //                              IsDateTimeStringMixedType = j.IsDateTimeStringMixedType,
            //                              IsDateTimeType = j.IsDateTimeType,
            //                              IsMonthYearType = j.IsMonthYearType,
            //                              Value = l.Value
            //                          }).ToArray();

            //        for (int k = 0; k < cellValues.Length; k++)
            //        {
            //            var datacell = dataRow.CreateCell(k);
            //            if (cellValues[k].DecType != DecimalFormatType.NoDecimalReq)
            //            {
            //                double OutVal;
            //                if (string.IsNullOrEmpty(cellValues[k].Value) || cellValues[k].Value == BlankData || !double.TryParse(cellValues[k].Value, out OutVal))
            //                {
            //                    datacell.SetCellValue(cellValues[k].Value);
            //                    if (k > 0)
            //                    {
            //                        if (incr % 2 == 0)
            //                            datacell.CellStyle = AllCellStyleEven;
            //                        else
            //                            datacell.CellStyle = AllCellStyleOdd;
            //                    }
            //                    else
            //                    {
            //                        if (incr % 2 == 0)
            //                            datacell.CellStyle = AllCellStyleFstColmEven;
            //                        else
            //                            datacell.CellStyle = AllCellStyleFstColmOdd;
            //                    }

            //                }
            //                else
            //                {
            //                    datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
            //                    if (k > 0)
            //                    {
            //                        if (cellValues[k].DecType == DecimalFormatType.AUM)
            //                        {
            //                            if (incr % 2 == 0)
            //                            {
            //                                if (cellValues[k].IsNum == true)
            //                                {

            //                                    datacell.CellStyle = aumAllCellStyleEvenDecFrmtWNum;
            //                                }
            //                                else
            //                                {
            //                                    datacell.CellStyle = aumAllCellStyleEvenDecFrmt;
            //                                }
            //                            }
            //                            else
            //                            {
            //                                if (cellValues[k].IsNum == true)
            //                                {
            //                                    datacell.CellStyle = aumAllCellStyleOddDecWnuf;
            //                                }
            //                                else
            //                                {
            //                                    datacell.CellStyle = aumAllCellStyleOddDec;
            //                                }
            //                            }
            //                        }
            //                        else if (cellValues[k].DecType == DecimalFormatType.NAV)
            //                        {
            //                            if (incr % 2 == 0)
            //                            {
            //                                if (cellValues[k].IsNum == true)
            //                                {
            //                                    datacell.CellStyle = navAllCellStyleEvenDecFrmtWnnum;
            //                                }
            //                                else
            //                                {
            //                                    datacell.CellStyle = navAllCellStyleEvenDecFrmt;
            //                                }
            //                            }
            //                            else
            //                            {
            //                                if (cellValues[k].IsNum == true)
            //                                {
            //                                    datacell.CellStyle = navAllCellStyleOddDecWnuf;
            //                                }
            //                                else
            //                                {
            //                                    datacell.CellStyle = navAllCellStyleOddDec;
            //                                }

            //                            }
            //                        }
            //                        else if (cellValues[k].DecType == DecimalFormatType.OTHER)
            //                        {
            //                            if (incr % 2 == 0)
            //                            {
            //                                if (cellValues[k].IsNum == true)
            //                                {
            //                                    datacell.CellStyle = otherAllCellStyleEvenDecFrmtWnum;
            //                                }
            //                                else
            //                                {
            //                                    datacell.CellStyle = otherAllCellStyleEvenDecFrmt;
            //                                }
            //                            }

            //                            else
            //                            {
            //                                if (cellValues[k].IsNum == true)
            //                                {
            //                                    datacell.CellStyle = othAllCellStyleOddDecWnuf;
            //                                }
            //                                else
            //                                {

            //                                    datacell.CellStyle = othAllCellStyleOddDec;
            //                                }

            //                            }
            //                        }
            //                        else if (cellValues[k].DecType == DecimalFormatType.RATIO)
            //                        {
            //                            if (incr % 2 == 0)
            //                            {
            //                                if (cellValues[k].IsNum == true)
            //                                {
            //                                    datacell.CellStyle = ratAllCellStyleEvenDecFrmtWth;
            //                                }
            //                                else
            //                                {
            //                                    datacell.CellStyle = ratAllCellStyleEvenDecFrmt;
            //                                }
            //                            }
            //                            else
            //                            {
            //                                if (cellValues[k].IsNum == true)
            //                                {
            //                                    datacell.CellStyle = ratAllCellStyleOddDecWnuf;
            //                                }
            //                                else
            //                                {
            //                                    datacell.CellStyle = ratAllCellStyleOddDec;
            //                                }
            //                            }
            //                        }
            //                        else if (cellValues[k].DecType == DecimalFormatType.RETURN)
            //                        {
            //                            if (incr % 2 == 0)
            //                            {
            //                                if (cellValues[k].IsNum == true)
            //                                {
            //                                    datacell.CellStyle = retAllCellStyleEvenDecFrmtWnum;
            //                                }
            //                                else
            //                                {
            //                                    datacell.CellStyle = retAllCellStyleEvenDecFrmt;
            //                                }

            //                            }
            //                            else
            //                            {
            //                                if (cellValues[k].IsNum == true)
            //                                {
            //                                    datacell.CellStyle = retAllCellStyleOddDecWnuf;
            //                                }
            //                                else
            //                                {
            //                                    datacell.CellStyle = retAllCellStyleOddDec;
            //                                }

            //                            }
            //                        }
            //                        else if (cellValues[k].DecType == DecimalFormatType.IntegerWithOutDecimal)
            //                        {
            //                            if (incr % 2 == 0)
            //                            {
            //                                if (cellValues[k].IsNum == true)
            //                                {
            //                                    datacell.CellStyle = intAllCellStyleEvenDecFrmt;
            //                                }
            //                                else
            //                                {
            //                                    datacell.CellStyle = intSimpleAllCellStyleEvenDecFrmt;
            //                                }

            //                            }
            //                            else
            //                            {
            //                                if (cellValues[k].IsNum == true)
            //                                {
            //                                    datacell.CellStyle = intAllCellStyleOddDec;
            //                                }
            //                                else
            //                                {
            //                                    datacell.CellStyle = intSimpleAllCellStyleOddDec;
            //                                }

            //                            }
            //                        }
            //                    }
            //                    else
            //                    {
            //                        if (incr % 2 == 0)
            //                            datacell.CellStyle = AllCellStyleFstColmEven;
            //                        else
            //                            datacell.CellStyle = AllCellStyleFstColmOdd;
            //                    }

            //                }

            //            }
            //            else
            //            {
            //                double OutVal;
            //                if (double.TryParse(cellValues[k].Value, out OutVal) && !cellValues[k].IsMixedType && !cellValues[k].IsPercentageType)
            //                {
            //                    datacell.SetCellValue(Convert.ToDouble(cellValues[k].Value));
            //                    if (k > 0)
            //                    {
            //                        if (incr % 2 == 0)
            //                            datacell.CellStyle = AllCellStyleEven;
            //                        else
            //                            datacell.CellStyle = AllCellStyleOdd;

            //                    }
            //                    else
            //                    {
            //                        if (incr % 2 == 0)
            //                            datacell.CellStyle = AllCellStyleFstColmEven;
            //                        else
            //                            datacell.CellStyle = AllCellStyleFstColmOdd;
            //                    }
            //                }
            //                else if (cellValues[k].IsPercentageType)
            //                {
            //                    if (double.TryParse(cellValues[k].Value, out OutVal))
            //                    {
            //                        datacell.SetCellValue(OutVal / 100);
            //                        if (incr % 2 == 0)
            //                            datacell.CellStyle = cellStylePercentEven;
            //                        else
            //                            datacell.CellStyle = cellStylePercentOdd;
            //                    }
            //                    else
            //                    {
            //                        datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
            //                        if (k > 0)
            //                        {
            //                            if (incr % 2 == 0)
            //                                datacell.CellStyle = AllCellStyleEven;
            //                            else
            //                                datacell.CellStyle = AllCellStyleOdd;
            //                        }
            //                        else
            //                        {
            //                            if (incr % 2 == 0)
            //                                datacell.CellStyle = AllCellStyleFstColmEven;
            //                            else
            //                                datacell.CellStyle = AllCellStyleFstColmOdd;
            //                        }
            //                    }
            //                }
            //                else if (cellValues[k].IsDateTimeType)
            //                {
            //                    DateTime OutValdt;
            //                    if (DateTime.TryParse(cellValues[k].Value, out OutValdt))
            //                    {
            //                        datacell.SetCellValue(Convert.ToDateTime(cellValues[k].Value));
            //                        if (incr % 2 == 0)
            //                            datacell.CellStyle = DateTimeAllCellStyleEvenFrmt;
            //                        else
            //                            datacell.CellStyle = DateTimeAllCellStyleOddDec;
            //                        if (k == 0)
            //                        {
            //                            datacell.CellStyle.Alignment = HorizontalAlignment.Left;
            //                        }
            //                    }
            //                    else
            //                    {
            //                        datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
            //                        if (k > 0)
            //                        {
            //                            if (incr % 2 == 0)
            //                                datacell.CellStyle = AllCellStyleEven;
            //                            else
            //                                datacell.CellStyle = AllCellStyleOdd;

            //                        }
            //                        else
            //                        {
            //                            if (incr % 2 == 0)
            //                                datacell.CellStyle = AllCellStyleFstColmEven;
            //                            else
            //                                datacell.CellStyle = AllCellStyleFstColmOdd;
            //                        }
            //                    }
            //                }
            //                else if (cellValues[k].IsDateTimeStringMixedType)
            //                {
            //                    DateTime OutValdt;
            //                    if (DateTime.TryParse(cellValues[k].Value, out OutValdt))
            //                    {
            //                        datacell.SetCellValue(Convert.ToDateTime(cellValues[k].Value));
            //                        if (incr % 2 == 0)
            //                            datacell.CellStyle = DateTimeAllCellStyleEvenFrmt;
            //                        else
            //                            datacell.CellStyle = DateTimeAllCellStyleOddDec;
            //                        if (k == 0)
            //                        {
            //                            datacell.CellStyle.Alignment = HorizontalAlignment.Left;
            //                        }
            //                    }
            //                    else
            //                    {
            //                        datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
            //                        if (k > 0)
            //                        {
            //                            if (incr % 2 == 0)
            //                                datacell.CellStyle = AllCellStyleEven;
            //                            else
            //                                datacell.CellStyle = AllCellStyleOdd;

            //                        }
            //                        else
            //                        {
            //                            if (incr % 2 == 0)
            //                                datacell.CellStyle = AllCellStyleFstColmEven;
            //                            else
            //                                datacell.CellStyle = AllCellStyleFstColmOdd;
            //                        }
            //                    }
            //                }
            //                else if (cellValues[k].IsMonthYearType)
            //                {
            //                    DateTime OutValdt;
            //                    if (DateTime.TryParse(cellValues[k].Value, out OutValdt))
            //                    {
            //                        datacell.SetCellValue(Convert.ToDateTime(cellValues[k].Value));
            //                        if (incr % 2 == 0)
            //                            datacell.CellStyle = MonthYearAllCellStyleEvenFrmt;
            //                        else
            //                            datacell.CellStyle = MonthYearAllCellStyleOddDec;
            //                        if (k == 0)
            //                        {
            //                            datacell.CellStyle.Alignment = HorizontalAlignment.Left;
            //                        }
            //                    }
            //                    else
            //                    {
            //                        datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
            //                        if (k > 0)
            //                        {
            //                            if (incr % 2 == 0)
            //                                datacell.CellStyle = AllCellStyleEven;
            //                            else
            //                                datacell.CellStyle = AllCellStyleOdd;

            //                        }
            //                        else
            //                        {
            //                            if (incr % 2 == 0)
            //                                datacell.CellStyle = AllCellStyleFstColmEven;
            //                            else
            //                                datacell.CellStyle = AllCellStyleFstColmOdd;
            //                        }
            //                    }
            //                }
            //                else
            //                {
            //                    datacell.SetCellValue(string.IsNullOrEmpty(cellValues[k].Value) ? BlankData : cellValues[k].Value);
            //                    if (k > 0)
            //                    {
            //                        if (incr % 2 == 0)
            //                            datacell.CellStyle = AllCellStyleEven;
            //                        else
            //                            datacell.CellStyle = AllCellStyleOdd;

            //                    }
            //                    else
            //                    {
            //                        if (incr % 2 == 0)
            //                            datacell.CellStyle = AllCellStyleFstColmEven;
            //                        else
            //                            datacell.CellStyle = AllCellStyleFstColmOdd;
            //                    }
            //                }
            //            }


            //        }
            //        incr++;
            //    }

            //}
            #endregion
            #region Plotting Value to Excel
            style = (XSSFCellStyle)workbook.CreateCellStyle();
            colorToFill = new XSSFColor(new byte[] { 255, 255, 255 });//{ 51, 204, 204 }//Color.Blue);
            style.SetFillForegroundColor(colorToFill);
            //font = workbook.CreateFont();
            //font.Color = IndexedColors.Black.Index;
            //font.Boldweight = (short)FontBoldWeight.Bold;
            //style.SetFont(font);
            style.FillPattern = FillPattern.SolidForeground;
            style.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
            style.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
            style.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
            style.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
            style.Alignment = HorizontalAlignment.Center;
            style.VerticalAlignment = VerticalAlignment.Center;
            style.WrapText = true;
            int rowCount = 9;
            int colCount = 0;
            foreach(var data in listData)
            {
                var datarRow = sheet.CreateRow(rowCount);
                foreach (var innerdata in data.LstKeyValuePair)
                {
                    ICRACell = datarRow.CreateCell(colCount);
                    ICRACell.SetCellValue(innerdata.Value.ToString());
                    ICRACell.CellStyle = style;
                    colCount++;
                }
                rowCount++;
            }
            #endregion

            //for (int j = 0; j < rowCount; i++)
            //    sheet.AutoSizeColumn(j);
            //if (sheet.GetColumnWidth(0) < 11072)
            //    sheet.SetColumnWidth(0, 11072);

            for(int temp = 0; temp<colCount; temp++)
            {
                sheet.SetColumnWidth(temp, 6000);
            }
            for(int temp=5; temp<rowCount; temp++)
            {
                sheet.GetRow(temp).HeightInPoints = 30;
            }

            #region Logo
            try
            {
                if (!string.IsNullOrEmpty(LogoPath))
                {
                    var istream = new FileStream(LogoPath, FileMode.OpenOrCreate);
                    byte[] bytes = new byte[istream.Length];
                    // reading the data
                    istream.Read(bytes, 0, bytes.Length);
                    int pictureIdx = workbook.AddPicture(bytes, PictureType.PNG);
                    XSSFDrawing patriarch = (XSSFDrawing)sheet.CreateDrawingPatriarch();
                    XSSFClientAnchor anchor;
                    anchor = new XSSFClientAnchor(0, 0, 0, 255, 0, 0, 0, 3);
                    anchor.AnchorType = AnchorType.DontMoveAndResize;
                    XSSFPicture picture = (XSSFPicture)patriarch.CreatePicture(anchor, pictureIdx);
                    double x1 = .25;
                    double y1 = .75;
                    picture.Resize(x1, y1);
                    picture.LineStyle = LineStyle.None;
                    istream.Close();
                }
            }
            catch (Exception ex)
            {
            }

            #endregion

            #region Source, Date As On and Report Generated On
            ICRArow = sheet.CreateRow(rowCount + 3);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrSource);

            ICRArow = sheet.CreateRow(rowCount + 4);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrDateAsOn);

            ICRArow = sheet.CreateRow(rowCount + 5);
            ICRArow.CreateCell(0);
            ICRACell = ICRArow.CreateCell(0);
            ICRACell.SetCellValue(StrReportGeneratedOn);
            #endregion

            #region Sheet Two Logo
            try
            {
                if (!string.IsNullOrEmpty(LogoPath))
                {
                    XSSFDrawing patriarch = (XSSFDrawing)sheetTwo.CreateDrawingPatriarch();
                    XSSFClientAnchor anchor;
                    anchor = new XSSFClientAnchor(0, 0, 0, 255, 0, 0, 0, 3);
                    anchor.AnchorType = AnchorType.DontMoveAndResize;
                    XSSFPicture picture = (XSSFPicture)patriarch.CreatePicture(anchor, LoadImage(LogoPath, workbook, PictureType.PNG));
                    double x1 = 1.10;
                    double y1 = 1.10;
                    picture.Resize(x1, y1);
                    picture.LineStyle = LineStyle.None;
                }
            }
            catch (Exception ex)
            {
            }
            #endregion

            #region Disclaimer Sheet
            var Row = sheetTwo.CreateRow(1);
            var cellSheetTwo = Row.CreateCell(7);
            cellSheetTwo.SetCellValue(StrHeader1);
            cellSheetTwo.CellStyle = HeaderStyle;

            Row = sheetTwo.CreateRow(4);
            ICell Cell;
            for (int l = 0; l < 17; l++)
            {
                Cell = Row.CreateCell(l);

                XSSFCellStyle declationstyle = (XSSFCellStyle)workbook.CreateCellStyle();

                declationstyle.Alignment = HorizontalAlignment.Left;
                declationstyle.VerticalAlignment = VerticalAlignment.Top;
                declationstyle.WrapText = true;
                IFont declarationfnt = (XSSFFont)workbook.CreateFont();
                //declarationfnt.Boldweight = (short)FontBoldWeight.Bold;
                declarationfnt.FontName = "Calibri";
                declarationfnt.FontHeightInPoints = (short)11;
                declationstyle.SetFont(declarationfnt);
                Cell.SetCellValue(!string.IsNullOrEmpty(Footer) ? Footer : "All information contained herein is obtained by ICRA Analytics Limited from sources believed by it to be accurate and reliable. Because of the possibility of human or mechanical error as well as other factors, however, all information contained herein is provided 'AS IS' without warranty of any kind. ICRA Analytics adopts all necessary measures so that the information it uses is of sufficient quality and from sources ICRA Analytics considers to be reliable including, when appropriate, independent third-party sources. However, ICRA Analytics is not an auditor and cannot in every instance independently verify or validate information received in preparing this document." +
                    "All information contained herein must be construed solely as statements of opinion, and  ICRA Analytics Limited or its affiliates or group companies and its respective and any of its officers, directors, personnel and employees, disclaim liability to any loss, damage of any nature, including but not limited to direct, indirect, punitive, special, exemplary, consequential, as also any loss of profit in any way arising from the use of this document or its contents in any manner or for any contingency within or beyond the control of, ICRA Analytics or any of its directors, officers, employees, agents, representatives, licensors or suppliers, arising from or in connection with the information contained herein or the use of or inability to use any such information.Opinions expressed in the document are not the opinions of our holding company, ICRA Limited(ICRA), and should not be construed as any indication of credit rating or grading of ICRA for any instruments that have been issued or are to be issued by any entity.The recipient alone shall be fully responsible and / or are liable for any decision taken on the basis of this document and / or the information contained herein.");
                Cell.CellStyle = declationstyle;

            }
            NPOIWrite.CellMerged(sheetTwo, 4, 4, 0, 17);
            sheetTwo.GetRow(4).HeightInPoints = 200;
            #endregion

            #region Disclaimer Sheet HyperLink
            XSSFCellStyle HyperLinkStyle = (XSSFCellStyle)workbook.CreateCellStyle();
            IFont HyperLinkFont = workbook.CreateFont();
            HyperLinkFont.Color = IndexedColors.Orange.Index;
            HyperLinkFont.Underline = FontUnderlineType.Single;
            HyperLinkStyle.SetFont(HyperLinkFont);

            Row = sheetTwo.CreateRow(5);
            Cell = Row.CreateCell(0);
            Cell.SetCellValue("Click here for third-party disclaimers");
            XSSFCreationHelper createHelper = (XSSFCreationHelper)workbook.GetCreationHelper();
            XSSFHyperlink link = (XSSFHyperlink)createHelper.CreateHyperlink(HyperlinkType.Url);
            link.Address = "https://www.icraanalytics.com/home/thirdpartydisclaimers";
            Cell.Hyperlink = link;
            Cell.CellStyle = HyperLinkStyle;
            #endregion

            sheet.ActiveCell = new CellAddress(0, 1);
            var stream = new MemoryStream();
            workbook.Write(stream);

            return workbook;
        }

    }

    public class ExportToExcelInput
    {
        public IEnumerable<TableHeaderEntity> TableHeader { get; set; }
        public IEnumerable<ExportEntity> ExportData { get; set; }
        public UserBasicSettings UserSettings { get; set; }
        public string Header1 { get; set; }
        public string Header2 { get; set; }
        public string Header3 { get; set; }
        public string ReportName { get; set; }
        public string Source { get; set; }
        public string DateAsOn { get; set; }
        public string ReportGeneratedOn { get; set; }
        public string LogoPath { get; set; }
        public double ImgScaleX { get; set; }
        public double ImgScaleY { get; set; }
        public int RowStart { get; set; }
    }

    public class TableInputForExcelSheet
    {
        public TableInputForExcelSheet(string SheetName = null)
        {
            listFinalTableHeader = new TableHeaderEntity[0];
            TableHeaders = new TableHeaderEntity[0][];
            DataRows = new ExportEntity[0];
            this.SheetName = SheetName ?? "Output";
        }
        public IEnumerable<IEnumerable<TableHeaderEntity>> TableHeaders { get; set; }
        public IEnumerable<ExportEntity> DataRows { get; set; }
        public IEnumerable<TableHeaderEntity> listFinalTableHeader { get; set; }
        public string SheetName { get; set; }
    }




}